C51 COMPILER V7.06   LOGO                                                                  04/29/2010 18:06:19 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE LOGO
OBJECT MODULE PLACED IN .\Output\Logo.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Logo\Logo.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Outpu
                    -t\Logo.lst) OBJECT(.\Output\Logo.obj)

stmt level    source

   1          #define __LOGO__
   2          
   3          #include "Core\Header\Include.h"
   4          
   5          BYTE code tLogoTemp;
   6          
   7          //--------------------------------------------------
   8          
   9          #if(_LOGO_ENABLE)
              
              
              void CDrawLogo(void)
              {
                  SLogoOsdMap code *pMap;
                  BYTE code *pOther;
              
                      
                  SetOSDDouble(_LOGO_SIZE);
              
                  if(g_fUserPresetLogo)
                      pMap = &tLogoOsdMap;
                  else
                      pMap = _EF_LOGO_OSDMAP_ADDRESS;
              
                      g_ucRowCnt = pMap->LogoHeight;
                      g_usFontBaseAddress = pMap->FontBassAddress;
                      
                      
                      // Init
                  COsdFxDisableOsd();
                  CCloseAllWindows();
              
              
                      SetOSDRamAddress();
                      
                  // Row Command Byte 0
                  // 0x80
                  //   Character border/shadow      000: None
                  //   Double character width         0: 0x01
                  //   Double character height        0: 0x01
                  DirectWOSDRam(0x00,g_ucRowCnt,THE_BYTE0,0x80);
              
                  //Row End Command
                  OutputChar(0x00);
              
                  //Row Command Byte 1
                  //    0x90
                  //    Row height (1~32) : 18
                  //    Column space      : 0
                  DirectWOSDRam(0x00,g_ucRowCnt,THE_BYTE1,0x88);
              
                      
                  // Row Command Byte 2
                      DirectWOSDRam(0x00,g_ucRowCnt,THE_BYTE2,pMap->LogoWidth);
C51 COMPILER V7.06   LOGO                                                                  04/29/2010 18:06:19 PAGE 2   

              
              
                  if(g_fUserPresetLogo)
                      pOther = tLogoPalette;
                  else
                      pOther = _EF_LOGO_PALETTE_ADDRESS;
              
                      // 装调色板
                      COsdLogoColorPalette(pOther);    
              
                      // 装字库
                      if(pMap->Font1BitCnt)
                      {
                          if(g_fUserPresetLogo)
                              pOther = tLogoFont1Bit;
                          else
                              pOther = KxEFLogo1BitAddress();
                              
                              CScalerLoadHardwareVLCFont(pOther, pMap->Font1BitOffset);
                      }
                      
                  if(pMap->Font2BitCnt)
                  {
                          if(g_fUserPresetLogo)
                              pOther = tLogoFont2Bit;
                          else
                              pOther = KxEFLogo2BitAddress();
                              
                      CScalerLoadHardwareVLCFont(pOther, pMap->Font2BitOffset);
                  }
              
                  if(pMap->Font4BitCnt)
                  {
                          if(g_fUserPresetLogo)
                              pOther = tLogoFont4Bit;
                          else
                              pOther = KxEFLogo4BitAddress();
                  
                      CScalerLoadHardwareVLCFont(pOther, pMap->Font4BitOffset);
              
                 }
              
                  if(g_fUserPresetLogo)
                      pOther = tLogoTable;
                  else
                      pOther = _EF_LOGO_TABLE_ADDRESS;        
                      // Draw Logo
                      COsdFxCodeWrite(pOther);
              
              
                      // Set back ground color
                      CAdjustBackgroundColor(pMap->BackGroundColorR, pMap->BackGroundColorG, pMap->BackGroundColorB);
                      
                      OSDPosition((WORD)pMap->LogoWidth * 12, (WORD)pMap->LogoHeight * 18, 50, 50, 0x03);
                      
                      COsdFxEnableOsd();
              
                  CPowerPanelOn();
                  CPowerLightPowerOn();
              
                  CTimerDelayXms(2000);       
              }
C51 COMPILER V7.06   LOGO                                                                  04/29/2010 18:06:19 PAGE 3   

              //--------------------------------------------------
              
              void COsdFxCodeWrite(BYTE *pArray)
              {
                  BYTE cnt, temp;
              
                  CScalerWrite(_OSD_ADDR_MSB_90, 2, pArray, _AUTOINC);
                  pArray += 2;
              
                  cnt = 0;
              
                  while(_TRUE)
                  {
                      if(*pArray == _EXT_)
                      {
                          CScalerWrite(_OSD_DATA_PORT_92, cnt, pArray - cnt, _NON_AUTOINC);
                          cnt = 0;
              
                          if(*(pArray + 1) > 3)
                              return;
              
                          temp = _EXT_ + *(pArray + 1);
              
                          if(*(pArray + 2) == _REPEAT_)
                          {
                              CScalerWriteAmount(_OSD_DATA_PORT_92, *(pArray + 3), temp, _NON_AUTOINC);
                              pArray += 4;
                          }
                          else
                          {
                              CScalerWrite(_OSD_DATA_PORT_92, 1, &temp, _NON_AUTOINC);
                              pArray += 2;
                          }
                      }
                      else if(*pArray == _REPEAT_)
                      {
                          CScalerWrite(_OSD_DATA_PORT_92, cnt, pArray - cnt, _NON_AUTOINC);
              
                          CScalerWriteAmount(_OSD_DATA_PORT_92, *(pArray + 1) - 1, *(pArray - 1), _NON_AUTOINC);
              
                          pArray += 2;
                          cnt = 0;
                      }
                      else if(*pArray == _NEXT_)
                      {
                          CScalerWrite(_OSD_DATA_PORT_92, cnt, pArray - cnt, _NON_AUTOINC);
                          pArray++;
                          cnt = 0;
              
                          if(*(pArray + 1) != _END_)
                          {
                              CScalerWrite(_OSD_ADDR_MSB_90, 2, pArray, _AUTOINC);
                              pArray += 2;
                          }
                          else
                          {
                              break;
                          }
                      }
                      else if(*(pArray) == _END_)
                      {
                          CScalerWrite(_OSD_DATA_PORT_92, cnt, pArray - cnt, _NON_AUTOINC);
C51 COMPILER V7.06   LOGO                                                                  04/29/2010 18:06:19 PAGE 4   

                          break;
                      }
                      else
                      {
                          pArray++;
                          cnt++;
                      }
                  }
              }
              
              //--------------------------------------------------
              void COsdLogoColorPalette(BYTE *pColorPaletteArray)
              {
                      CScalerSetByte(_OVERLAY_LUT_ADDR_6E, 0x80);
                      CScalerWrite(_COLOR_LUT_PORT_6F, 48, pColorPaletteArray, _NON_AUTOINC);
                      CScalerSetByte(_OVERLAY_LUT_ADDR_6E, 0x00);
              }
              //-------------------------------------------------------------
              
              
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =      1    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
