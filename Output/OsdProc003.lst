C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE OSDPROC003
OBJECT MODULE PLACED IN .\Output\OsdProc003.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE OSD\OSD003\OsdProc003.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND P
                    -RINT(.\Output\OsdProc003.lst) OBJECT(.\Output\OsdProc003.obj)

stmt level    source

   1          
   2          
   3          #define __OSDPROC003__
   4          
   5          #include "Core\Header\Include.h"
   6          
   7          
   8          #if(_OSD_TYPE == _OSD003)
   9          
  10          void SInceptNumber(const WORD ucNumber);
  11          void GotoResetMenu(void);
  12          
  13          //--------------------------------------------------
  14          void COsdHandler(void)
  15          {
  16   1          bit fTest = 0;
  17   1      
  18   1          bOSDTimeOut = 1;
  19   1      
  20   1          COsdSystemFlowProc();
  21   1          
  22   1          COsdEventMsgProc();
  23   1      
  24   1          if (_PWOFF_STATE == ucCurrState)
  25   1              return;
  26   1      
  27   1          CKeyOSDMsgCover();
  28   1      
  29   1          // 执行当前菜单的私有处理函数
  30   1          if(CURRENT_MENU_ITEM.Proc != NULL)
  31   1          {
  32   2              CURRENT_MENU_ITEM.Proc();
  33   2          }
  34   1      
  35   1          COsdEventMsgProc();
  36   1      
  37   1      
  38   1          if ((ucKeyMessage != _NONE_KEY_MESSAGE) && bOSDTimeOut)
  39   1          {            
  40   2              if (GET_OSDTIMEOUT() < 5)
  41   2                      CTimerCancelTimerEvent(COsdTimeOut);
  42   2              else
  43   2                  CTimerReactiveTimerEvent(SEC(GET_OSDTIMEOUT()), COsdTimeOut);
  44   2          }
  45   1      
  46   1              DbgShowOSDState();
  47   1      
  48   1          if (!ucOsdState && !bOSDOnScreen)
  49   1          {
  50   2              if((0xff != ucAutoPowerDownTime) && (0 != _GET_POWER_DOWN_TIME()))
  51   2                 CShowTimer();
  52   2          }
  53   1      
  54   1      
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 2   

  55   1              if(fTest)
  56   1              {
  57   2                      CNotUse();
  58   2              }
  59   1          if (bDrawMute)
  60   1          {
  61   2              bDrawMute = 0;
  62   2              if (GET_AUDIO_MUTE()) // Mute on 
  63   2                 CDrawMuteState();
  64   2          }
  65   1      
  66   1      }
  67          
  68          //--------------------------------------------------
  69          void CKeyOSDMsgCover(void)
  70          {
  71   1          // Key Message -> Osd Message
  72   1          if(ucCurrState == _ACTIVE_STATE || ucOsdState != _MI_MENU_NONE)
  73   1          {
  74   2              CCoverKeyMsgToOsdEvent(CURRENT_MENU_ITEM.KeyMsgToOsdEvnet,CURRENT_MENU_ITEM.Option & _EN_PUB_KEYEV
             -ENT);
  75   2          }
  76   1          
  77   1          else
  78   1          {   
  79   2              if(CURRENT_MENU_ITEM.Option & _KEYMAP_EN_IN_NOSIGNAL)
  80   2                      {
  81   3                      CCoverKeyMsgToOsdEvent(CURRENT_MENU_ITEM.KeyMsgToOsdEvnet,CURRENT_MENU_ITEM.Option & _EN_PUB_KEYE
             -VENT);
  82   3                      }
  83   2                      else
  84   2                      {
  85   3                  CCoverKeyMsgToOsdEvent(tKONoSignal, 0x00);
  86   3              }
  87   2              }
  88   1      
  89   1      }
  90          //--------------------------------------------------
  91          
  92          void DbgShowOSDState(void)
  93          {
  94   1      /*
  95   1          static BYTE ucMenuItemIndexBak = 0;
  96   1      
  97   1              if(ucMenuItemIndexBak != ucOsdState)
  98   1              {
  99   1                      ucMenuItemIndexBak = ucOsdState;
 100   1                      CUartPrintf("Osd State:",ucOsdState);
 101   1              }
 102   1      
 103   1          // debug info
 104   1          if(ucKeyMessage != _NONE_KEY_MESSAGE)
 105   1                      CUartPrintf("Osd Event:",ucOsdEventMsg);
 106   1      */
 107   1      }
 108          //--------------------------------------------------
 109          void COsdSystemFlowProc(void)
 110          {
 111   1          switch(ucCurrState)
 112   1          {         
 113   2              case _PWOFF_STATE:
 114   2                  break;
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 3   

 115   2                  
 116   2              case _INITIAL_STATE:
 117   2                  break;
 118   2                  
 119   2              case _SEARCH_STATE:
 120   2                  break;
 121   2                  
 122   2              case _ACTIVE_STATE:
 123   2                  if(GET_OSD_READYFORDISPLAY() == _TRUE)
 124   2                  {
 125   3         #if(AUDIO_TYPE == _AUDIO_SC7313 || AUDIO_TYPE == _AUDIO_PWM)
 126   3                      CInitSoundChannel(_GET_INPUT_SOURCE());
 127   3         #endif
 128   3                      CLR_OSD_READYFORDISPLAY();
 129   3                      CPowerLedOn();
 130   3      
 131   3                      if (!bSourceVideo())
 132   3                                      {
 133   4                          if (GET_CLEAR_OSD_EN())//ucOsdEventMsg != _DO_SHOW_NOTE)
 134   4                              COsdDispOsdTimerEvent();
 135   4                                      }
 136   3      
 137   3      #if(_CHANGE_CHANNEL_DISP_MTD == _CHANGE_CHANNEL_DISP_M2)
                              if (_GET_INPUT_SOURCE() != _SOURCE_VIDEO_TV)
              #endif            
 140   3                      {
 141   4      #if(_VIDEO_TV_SUPPORT)
 142   4                          if ((0 == bTVNoSignal && _GET_BLUE_BACKGROUND()) || !_GET_BLUE_BACKGROUND())
 143   4      #endif            
 144   4                              CAdjustBackgroundColor(0x00, 0x00, 0x00);
 145   4                      }
 146   3      
 147   3      #if(_VIDEO_TV_SUPPORT)
 148   3                      ucNoSigCount = 0;
 149   3       #if((_TV_CHIP != _TV_JS_6B1) && (_TV_CHIP != _TV_JS_6B2) && (_TV_CHIP != _TNJ_8355))  
 150   3                      if (_GET_INPUT_SOURCE() != _SOURCE_VIDEO_TV)
 151   3       #endif
 152   3      #endif
 153   3                      CSetVolume();
 154   3      
 155   3                  }
 156   2                  
 157   2      #if(_VIDEO_TV_SUPPORT)
 158   2       #if((_TV_CHIP != _TV_JS_6B1) && (_TV_CHIP != _TV_JS_6B2) && (_TV_CHIP != _TNJ_8355))  
 159   2                  CAudioCtrl(); 
 160   2       #endif
 161   2      
 162   2       #if(_SHOW_TV_NO_SIGNAL)
                          CCheckTVSignal();
               #endif
 165   2      #endif
 166   2                  
 167   2                  break;
 168   2                  
 169   2              case _NOSUPPORT_STATE:
 170   2                      CMuteOn();
 171   2                  if(GET_OSD_READYFORDISPLAY() == _TRUE)
 172   2                  {
 173   3                      CLR_OSD_READYFORDISPLAY();
 174   3                     
 175   3      
 176   3                              switch(_GET_INPUT_SOURCE())
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 4   

 177   3                              {
 178   4                              case _SOURCE_VGA:
 179   4                              case _SOURCE_DVI:
 180   4                                 CAdjustBackgroundColor(0x00, 0x00, 0x00);
 181   4                                 break;
 182   4                          
 183   4                              default:
 184   4                                              /*
 185   4                                          if (_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
 186   4                                              CAdjustBackgroundColor(0x00, 0x00, (_GET_BLUE_BACKGROUND()) ? 0xFF : 0x00);
 187   4                                          else
 188   4                                              CAdjustBackgroundColor(0x00, 0x00, 0x00);
 189   4                                  */
 190   4      
 191   4                                              CAdjustBackgroundColor(0x00, 0x00, 0xff);
 192   4                                  break;
 193   4                              }
 194   3      
 195   3                              
 196   3                      if (GET_FIRST_SHOW_NOTE())
 197   3                         ucOsdEventMsg = _DO_SHOW_NOTE;
 198   3                      
 199   3                      CTimerReactiveTimerEvent(SEC(1), CModeNoSupportEvent);
 200   3                  }
 201   2                  
 202   2                  break;
 203   2                  
 204   2              case _NOSIGNAL_STATE:
 205   2                      CMuteOn();
 206   2      
 207   2                      if((GET_BURNIN_STATE() == _BURNIN_ON) && (_GET_INPUT_SOURCE() == _SOURCE_VGA))
 208   2                  {
 209   3                          BurnInRun();
 210   3                      CTimerCancelTimerEvent(CModeNoSignalEvent);
 211   3                      CTimerCancelTimerEvent(CModePowerSavingEvent);
 212   3                      return;
 213   3                  }
 214   2      
 215   2      
 216   2      
 217   2                  if(GET_OSD_READYFORDISPLAY() == _TRUE)
 218   2                  {    
 219   3                      CLR_OSD_READYFORDISPLAY(); 
 220   3                         
 221   3         
 222   3                        switch(_GET_INPUT_SOURCE())
 223   3                      {
 224   4                              case _SOURCE_VIDEO_TV:
 225   4                                 CAdjustBackgroundColor(0x00, 0x00, 0x00);//0xff);     //20071127 无信号时蓝屏
 226   4                                 break;
 227   4                          
 228   4                              default:
 229   4                                 //CAdjustBackgroundColor(0x00, 0x00, 0x00);
 230   4                                 CAdjustBackgroundColor(0x00, 0x00, 0xff);
 231   4                                 break;
 232   4                      }
 233   3      
 234   3      
 235   3                      if (GET_FIRST_SHOW_NOTE())
 236   3                      {                        
 237   4                          ucOsdEventMsg = _DO_SHOW_NOTE;
 238   4                          CPowerPanelOn();
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 5   

 239   4                          CPowerLightPowerOn();
 240   4                      }  
 241   3                           
 242   3                              if (_GET_INPUT_SOURCE() == _SOURCE_YPBPR||_GET_INPUT_SOURCE() == _SOURCE_YPBPR1) 
 243   3                              {
 244   4                                      CTimerReactiveTimerEvent(SEC(3), CModeNoSignalEvent);
 245   4                                      //break;
 246   4                              }
 247   3          
 248   3          #if (_HDMI_SUPPORT == _ON)
                                      if (_GET_INPUT_SOURCE() == _SOURCE_HDMI || _GET_INPUT_SOURCE() == _SOURCE_DVI) 
                                      {
                                              CTimerReactiveTimerEvent(SEC(5), CModeNoSignalEvent);
                                  if (CGetSourcePortType(_GET_INPUT_SOURCE()) == _HDMI_D0_PORT || CGetSourcePortType(_GE
             -T_INPUT_SOURCE()) == _HDMI_D1_PORT)
                                                  CTimerReactiveTimerEvent(SEC(15), CModePowerSavingEvent);
                                  else
                                                  CTimerReactiveTimerEvent(SEC(8), CModePowerSavingEvent);
              
                                              break;
                                      }               
                                      
                  #endif
 261   3      
 262   3      
 263   3      
 264   3                              if (_GET_INPUT_SOURCE() == _SOURCE_VGA) 
 265   3                              {
 266   4                                      if (bVGACONNECT)
 267   4                                              CTimerReactiveTimerEvent(SEC(3), CModeNoCableEvent);
 268   4                                      else       
 269   4                                              CTimerReactiveTimerEvent(SEC(3), CModeNoSignalEvent);
 270   4                            }
 271   3      
 272   3                      if(bSourceVideo())
 273   3                                      CTimerReactiveTimerEvent(SEC(3), CModeNoSignalEvent);
 274   3      /*
 275   3                                      if(stSystemData.InputSource == _SOURCE_VGA      || 
 276   3                                         stSystemData.InputSource == _SOURCE_DVI      ||
 277   3                         stSystemData.InputSource == _SOURCE_VIDEO_AV || 
 278   3                         stSystemData.InputSource == _SOURCE_VIDEO_SV || 
 279   3                         stSystemData.InputSource == _SOURCE_YPBPR    || 
 280   3                         stSystemData.InputSource == _SOURCE_YPBPR1   ||
 281   3                         stSystemData.InputSource == _SOURCE_HDMI)
 282   3                                      {       
 283   3                                      CTimerReactiveTimerEvent(SEC(15), CModePowerSavingEvent);
 284   3                                      }
 285   3      */
 286   3      /*
 287   3                                      if(stSystemData.InputSource != _SOURCE_VIDEO_TV)
 288   3                                      {       
 289   3                                      CTimerReactiveTimerEvent(SEC(15), CModePowerSavingEvent);
 290   3                                      }       
 291   3      */                              
 292   3                  }
 293   2                  
 294   2                  break;
 295   2                  
 296   2              case _SLEEP_STATE:
 297   2                  break;
 298   2                  
 299   2              default:
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 6   

 300   2                  break;
 301   2          }
 302   1      
 303   1      }
 304          
 305          //==========================================================================
 306          //                          ChangeSourceState
 307          //==========================================================================
 308          void ChangeSourceState(void)
 309          {
 310   1              // close OSD first to avoid dirty screen.
 311   1              COsdFxDisableOsd();
 312   1      #if(_VIDEO_TV_SUPPORT)
 313   1          if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
 314   1             CAdjustBackgroundColor(0x00, 0x00, 0x00);//(_GET_BLUE_BACKGROUND()) ? 0xFF : 0x00);
 315   1          else
 316   1      #endif
 317   1             //CAdjustBackgroundColor(0x00, 0x00, 0x00);
 318   1             CAdjustBackgroundColor(0x00, 0x00, 0xff);
 319   1              CScalerSetBit(_VDISP_CTRL_28, 0xff, 0x20);
 320   1              CScalerSetBit(_VDISP_CTRL_28, ~_BIT3, _BIT5);
 321   1          CMuteOn();
 322   1          // EricLee 081117 add for change souce have some noise
 323   1          CTimerDelayXms(50);
 324   1          TUNER_PWR_OFF();
 325   1          
 326   1          CInitInputSource();
 327   1                
 328   1      #if(_VIDEO_TV_SUPPORT)
 329   1       #if(_FM_DEVICE)  
                  bFM = 0; // Close FM
               #endif
 332   1      #endif 
 333   1      
 334   1          switch(_GET_INPUT_SOURCE())
 335   1              {
 336   2                      case _SOURCE_VGA:
 337   2                      case _SOURCE_YPBPR:
 338   2                      case _SOURCE_YPBPR1:
 339   2                              CScalerSetBit(_IPH_ACT_WID_H_16, ~_BIT5, 0x00);
 340   2                              kx_CVDCOutputDisable();
 341   2                              break;
 342   2              #if((_TMDS_SUPPORT == _ON) || (_HDMI_SUPPORT == _ON))                   
                              case _SOURCE_DVI:
                      case _SOURCE_HDMI:
                                      kx_CVDCOutputDisable();
                                      break;
                      #endif
 348   2                          break;
 349   2      #if(_VIDEO_TV_SUPPORT)
 350   2                      case _SOURCE_VIDEO_TV:
 351   2                  CInitTV();
 352   2      #endif
 353   2                      case _SOURCE_VIDEO_AV:
 354   2                      case _SOURCE_VIDEO_SV:
 355   2                              break;
 356   2              }  
 357   1      }
 358          
 359          //-----------------------------------------------------------
 360          void COsdEventMsgProc(void)
 361          {                  
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 7   

 362   1          if(ucOsdEventMsg > _OE_USER_CMD)
 363   1          {    
 364   2               ucOsdEventMsg = _NONE_MSG;
 365   2               return;
 366   2          }
 367   1      
 368   1          switch(ucOsdEventMsg)
 369   1          {
 370   2              case _SHOW_NOSIGNAL_MSG:
 371   2              case _SHOW_NOCABLE_MSG:
 372   2              case _SHOW_NOSUPPORT_MSG:
 373   2                      ucOsdState = _MI_MENU_NONE;
 374   2      #if(_LOGO_ENABLE)
                                      CDrawLogo();
                                      SET_FIRST_LOADFONT();
              #else        
 378   2               #if(_LOGO_Visatech)
                                  CShowVisatech();
                        #else  
 381   2                              CShowNoSignal();
 382   2                #endif
 383   2      #endif
 384   2                              CTimerCancelTimerEvent(COsdTimeOut);
 385   2                  break;
 386   2                  
 387   2              case _SAVE_EE_MODEUSERDATA_MSG:
 388   2                  CEepromSaveModeData(stModeInfo.ModeCurr);
 389   2                  break;
 390   2                  
 391   2              case _SAVE_EE_SYSTEMDATA_MSG:
 392   2                  CEepromSaveSystemData();
 393   2                  break;
 394   2                  
 395   2              case _SAVE_EE_OSDUSERDATA_MSG:
 396   2                  CEepromSaveOsdUserData();
 397   2                  break;
 398   2                  
 399   2              case _SAVE_EE_ADCDATA_MSG:
 400   2                  CEepromSaveAdcData();
 401   2                  break;
 402   2                  
 403   2              case _SAVE_EE_COLORPROC0_MSG:
 404   2                  CEepromSaveBriConData();
 405   2                  break;
 406   2                  
 407   2              case _SAVE_EE_COLORPROC1_MSG:
 408   2                  CEepromSaveColorTempData();
 409   2                  break;
 410   2      
 411   2              case _SAVE_EE_AUDIO_DATA_MSG:
 412   2                  CEepromSaveAudioData();
 413   2                  break;
 414   2      
 415   2              case _SAVE_EE_HUE_SAT_DATA_MSG:
 416   2                  CEepromSaveHueSatData();
 417   2                  break;
 418   2      
 419   2              case _SAVE_EE_TV_DATA_MSG:
 420   2                  CEepromSaveTvData();
 421   2                  break;
 422   2      
 423   2              case _OE_VMODE:
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 8   

 424   2      //                      ChangeColorMode();
 425   2                      break;
 426   2      
 427   2              case _OE_AMODE:
 428   2      //              ChangeAudioMode();
 429   2                      break;
 430   2      
 431   2              case _OE_CHG_SOURCE_AV_SV:
 432   2                      CChangeSourceAvSv();
 433   2                      //break;
 434   2              case _CHANGE_SOURCE_MSG:
 435   2                  ChangeSourceState();
 436   2                      CEepromSaveSystemData();
 437   2                  ucTVSyncFailCount = 250;
 438   2                  CLR_CLEAR_OSD_EN();
 439   2                  CModeResetMode();
 440   2                      CLR_SOURCE_AUTOCHANGE();
 441   2                  //CShowNote();
 442   2                  CLR_CLEAR_OSD_EN();
 443   2                  SET_FIRST_SHOW_NOTE();
 444   2                  break;
 445   2      
 446   2                  
 447   2              case _DO_AUTO_CONFIG:
 448   2                      if(_GET_INPUT_SOURCE() == _SOURCE_VGA)
 449   2                      {
 450   3                              //      CShowAutoAdjust();
 451   3                      }
 452   2      
 453   2                      break;
 454   2                      
 455   2              case _DO_SHOW_NOTE:
 456   2                  CLR_FIRST_SHOW_NOTE();
 457   2                  CShowNote();            
 458   2                  break;
 459   2      
 460   2      #if(_VGA_SUPPORT)
 461   2              case _OE_INPUT_VGA:
 462   2                  if (_GET_INPUT_SOURCE() != _SOURCE_VGA)
 463   2                  {
 464   3                      _SET_INPUT_SOURCE(_SOURCE_VGA);
 465   3                      ChangeSourceReset();
 466   3                  } 
 467   2                  break;
 468   2      #endif
 469   2      
 470   2      #if(_TMDS_SUPPORT)
                      case _OE_INPUT_DVI:
                          if (_GET_INPUT_SOURCE() != _SOURCE_DVI)
                          {
                              _SET_INPUT_SOURCE(_SOURCE_DVI);
                              ChangeSourceReset();
                          } 
                          break;
              #endif
 479   2      
 480   2      #if(_VIDEO_SV_SUPPORT)
 481   2              case _OE_INPUT_S_VIDEO:
 482   2                  if (_GET_INPUT_SOURCE() != _SOURCE_VIDEO_SV)
 483   2                  {
 484   3                      _SET_INPUT_SOURCE(_SOURCE_VIDEO_SV);
 485   3                      ChangeSourceReset();
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 9   

 486   3                  } 
 487   2                  break;
 488   2      #endif
 489   2      
 490   2      #if(_VIDEO_AV_SUPPORT)
 491   2              case _OE_INPUT_AV:
 492   2                  if (_GET_INPUT_SOURCE() != _SOURCE_VIDEO_AV)
 493   2                  {
 494   3                      _SET_INPUT_SOURCE(_SOURCE_VIDEO_AV);
 495   3                      ChangeSourceReset();
 496   3                  } 
 497   2                  break;
 498   2      #endif
 499   2      
 500   2      #if(_VIDEO_TV_SUPPORT)
 501   2              case _OE_INPUT_TV:
 502   2                  if (_GET_INPUT_SOURCE() != _SOURCE_VIDEO_TV)
 503   2                  {
 504   3                      _SET_INPUT_SOURCE(_SOURCE_VIDEO_TV);                
 505   3                      ChangeSourceReset();
 506   3                  } 
 507   2                  break;
 508   2      #endif
 509   2                        
 510   2      #if(_YPBPR_SUPPORT)
                      case _OE_INPUT_YPBPR:
                          if (_GET_INPUT_SOURCE() != _SOURCE_YPBPR)
                          {
                              _SET_INPUT_SOURCE(_SOURCE_YPBPR);
                              ChangeSourceReset();
                          } 
                          break;
                      case _OE_INPUT_YPBPR1:
                          if (_GET_INPUT_SOURCE() != _SOURCE_YPBPR1)
                          {
                              _SET_INPUT_SOURCE(_SOURCE_YPBPR1);
                              ChangeSourceReset();
                          } 
                          break;
              #endif
 526   2      
 527   2                      case _OE_TCON_MODE:
 528   2      
 529   2                                 if (bPanel_LR == 0 && bPanel_UD == 0)
 530   2                                         PanelLRSwap();
 531   2                                 else if (bPanel_LR == 1 && bPanel_UD == 0)
 532   2                                         PanelUDSwap();
 533   2                              else if (bPanel_UD == 1 && bPanel_LR == 1)
 534   2                                         PanelLRSwap();
 535   2                                 else if (bPanel_UD == 1 && bPanel_LR == 0)
 536   2                                         PanelUDSwap();
 537   2                                 else if (bPanel_LR == 0 && bPanel_UD == 0)
 538   2                                         PanelLRSwap();
 539   2      
 540   2                               CEepromSaveSystemData();
 541   2                               ucOsdEventMsg = _SAVE_EE_SYSTEMDATA_MSG;
 542   2                      break;
 543   2      
 544   2                      case _OE_PANEL_LR_SWAP:
 545   2                              PanelLRSwap();
 546   2                              break;
 547   2      
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 10  

 548   2                      case _OE_PANEL_UD_SWAP:
 549   2                              PanelUDSwap();  
 550   2                              break;
 551   2      
 552   2                      case _OE_GOTO_MENU_CONTRAST:
 553   2                              GotoContrastMenu();
 554   2                              break;
 555   2                      case _OE_GOTO_MENU_SATURATION:
 556   2                              GotoSaturationMenu();
 557   2                              break;
 558   2                      case _OE_GOTO_MENU_BRIGHTNESS:
 559   2                              GotoBrightnessMenu();
 560   2                              break;
 561   2                      case _OE_SC_TIMER_CHANGE:
 562   2                              SetSleepTimer();
 563   2                              break;
 564   2      /*
 565   2      遥控的16:9/4:3按键的定义为复用:
 566   2         支持16:9用作ChangeDisplayMode
 567   2         否则用作ChangePictureMode
 568   2      wtao100416 
 569   2      */                  
 570   2                      //case _OE_CHG_DISPLAY_MODE:
 571   2                      //      ChangeDisplayMode();
 572   2                      //      break;
 573   2                      case _OE_CHANGE_PICTURE_MODE:
 574   2                              if(MDisplayRatioEnable())//16:9 or 4:3
 575   2                                  ChangeDisplayMode();
 576   2                              else//Standard Vivid Soft or Persenal
 577   2                                  CChangePictureMode();
 578   2                              break;                  
 579   2                      case _OE_GOTO_MENU_VOLUME:
 580   2                              GotoVolumeMenu();
 581   2                              break;
 582   2                      case _OE_GOTO_MENU_RESET:
 583   2                            GotoResetMenu();
 584   2                              break;
 585   2              default:
 586   2                  break;
 587   2          }
 588   1          
 589   1          ucOsdEventMsg = _NONE_MSG;
 590   1      }
 591          //----------------------------------------------------------------------------------------------------
 592          #if(_VIDEO_TV_SUPPORT)
 593          #define _INPUT_NO_NUMBER       0
 594          #define _INPUT_ONE_NUMBER      1
 595          #define _INPUT_TWO_NUMBER      2
 596          #define _INPUT_THREE_NUMBER    3
 597          WORD iInpuNumCount = 0;
 598          void EnterSCInputNum(void)
 599          {
 600   1          BYTE ucInputState = GET_INPUTCH_STATE() + 1;
 601   1          
 602   1          //COsdLoad1BitFont(FntInputState,0x7A,1,tFntVolumeCharWidth);
 603   1          
 604   1          // iInputCHCount = _INPUT_CH_TIMEOUT_COUNT;
 605   1          // Reset input number and state
 606   1          ucCurrentInputNumber = 0;
 607   1          // 0: no input number   1: input one number     2: input two number    3: input three number
 608   1          ucCurrentInputState  = _INPUT_NO_NUMBER;  
 609   1          
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 11  

 610   1          if (ucInputState > 3)
 611   1          {   // Input state err reset input state to input one channel -
 612   2              ucInputState = 1;
 613   2              SET_INPUTCH_STATE(0);
 614   2              CEepromSaveTvData();
 615   2          }
 616   1          
 617   1          ucOsdState = _MI_SC_INPUT_CH_NUM;
 618   1          bChangeChannel = 0;
 619   1          COsdFxDisableOsd();
 620   1          CCloseAllWindows();
 621   1          SetOSDDouble(0X03);
 622   1          
 623   1          // Init OSD Ram
 624   1          OSDClear(0, 8, 0, 20, 0x8C, BYTE_ATTRIB);
 625   1          OSDClear(0, 8, 0, 20, 0x00, BYTE_DISPLAY);
 626   1          OSDClear(0, 8, 0, 20, 0xF0, BYTE_COLOR);
 627   1          
 628   1          
 629   1          OSDPosition(3 * 12, 4 * 18,_TVNUMBER_POSITION_OFFSET,3,1);
 630   1          
 631   1          Gotoxy(1, 0, BYTE_DISPLAY);         
 632   1          for(; ucInputState > 0; ucInputState--)
 633   1              OutputChar(0x7A);  // Show "-"
 634   1          
 635   1          
 636   1          COsdFxEnableOsd();
 637   1          CTimerReactiveTimerEvent(SEC(20),COsdDispOsdTimerEvent);
 638   1          bOSDTimeOut   = 0;
 639   1          iInpuNumCount = 0;
 640   1      }
 641          //---------------------------------------------------------------------------
 642          void MScInputChNumProc(void)
 643          {
 644   1          BYTE idata ucInputState = GET_INPUTCH_STATE() + 1;
 645   1          
 646   1          iInpuNumCount++;
 647   1      
 648   1          if (iInpuNumCount > 900)
 649   1              ucOsdEventMsg = _OE_RETURN_UPMENU;
 650   1      
 651   1          switch(ucOsdEventMsg)
 652   1          {        
 653   2          case _OE_SC_INPUT_NUM0:
 654   2          case _OE_SC_INPUT_NUM1:
 655   2          case _OE_SC_INPUT_NUM2:
 656   2          case _OE_SC_INPUT_NUM3:
 657   2          case _OE_SC_INPUT_NUM4:
 658   2          case _OE_SC_INPUT_NUM5:
 659   2          case _OE_SC_INPUT_NUM6:
 660   2          case _OE_SC_INPUT_NUM7:
 661   2          case _OE_SC_INPUT_NUM8:
 662   2          case _OE_SC_INPUT_NUM9:
 663   2              SInceptNumber(ucOsdEventMsg - _OE_SC_INPUT_NUM0);
 664   2              iInpuNumCount = 0;
 665   2              break;
 666   2              
 667   2          case _OE_SC_INPUT_CHANGE_CH:
 668   2              //            iInputCHCount = _INPUT_CH_TIMEOUT_COUNT;
 669   2              ucInputState = ValueInRangeChange(1, 3, ucInputState, _LOOP | 0x01);
 670   2              SET_INPUTCH_STATE(ucInputState-1);
 671   2              CEepromSaveTvData();
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 12  

 672   2              
 673   2              // Reset input number and state
 674   2              ucCurrentInputNumber = 0;
 675   2              // 0: no input number   1: input one number     2: input two number    3: input three number
 676   2              ucCurrentInputState  = 0;
 677   2              iInpuNumCount        = 0;
 678   2              break;
 679   2              
 680   2          case _OE_RETURN_UPMENU:
 681   2              if (_INPUT_NO_NUMBER == ucCurrentInputState)
 682   2                  COsdDispOsdTimerEvent();
 683   2              else
 684   2                  ucInputState = ucCurrentInputState;
 685   2              break;
 686   2          }
 687   1          
 688   1          SShowCurrentInputState(ucInputState);
 689   1          
 690   1          if (ucInputState == ucCurrentInputState)
 691   1          {
 692   2              BYTE ucMaxChannel = _GET_MAX_CHANNEL();
 693   2              
 694   2              CMuteOn();
 695   2              COsdDispOsdTimerEvent();
 696   2              CModeResetTVMode();
 697   2              CTimerDelayXms(200);
 698   2              
 699   2              if (ucCurrentInputNumber == 0)
 700   2                  ucCurrentInputNumber = 1;
 701   2              bDrawMute = 0;
 702   2      #if(_FM_DEVICE)
                      if (1 == bFM)
                      {
                          ucPrevChannel =  stTvInfo.ucFMCurrCh;
                          stTvInfo.ucFMCurrCh = (ucCurrentInputNumber > ucMaxChannel) ? ucMaxChannel : ucCurrentInputNum
             -ber;
                          CSetTVChannel(stTvInfo.ucFMCurrCh);
                          //CShowTVNumber(stTvInfo.ucFMCurrCh, _SHOW_CH_TV_NUMBER);
                      }
                      else
              #endif   
 712   2              {
 713   3                  ucPrevChannel =  stTvInfo.CurChn;
 714   3                 // stTvInfo.CurChn = (ucCurrentInputNumber > ucMaxChannel) ? ucMaxChannel : ucCurrentInputNumbe
             -r;        //pc 20091008 changed
 715   3                              stTvInfo.CurChn = ucCurrentInputNumber;
 716   3                  CSetTVChannel(stTvInfo.CurChn);
 717   3                  //            CShowTVNumber(stTvInfo.CurChn,_SHOW_CH_TV_NUMBER | _SHOW_CH_TV_TYPE | _SHOW_CH_S
             -OUND_TYPE);
 718   3                  kx_CI2CWriteIfPllDM(ucTVType, _TUNER_MUTE_OFF, _NORMAL_MODE);
 719   3              }
 720   2              
 721   2              ucOsdEventMsg = _SAVE_EE_TV_DATA_MSG;
 722   2          }
 723   1          
 724   1      //    CTimerReactiveTimerEvent(SEC(10), COsdDispOsdTimerEvent);
 725   1          bOSDTimeOut = 0;
 726   1      }
 727          //---------------------------------------------------------------------------
 728          void SInceptNumber(const WORD ucNumber)
 729          {
 730   1          switch(ucCurrentInputState)
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 13  

 731   1          { 
 732   2          case _INPUT_NO_NUMBER: // not input number
 733   2              ucCurrentInputNumber = ucNumber;
 734   2              ucCurrentInputState  = _INPUT_ONE_NUMBER;
 735   2              break;
 736   2              
 737   2          case _INPUT_ONE_NUMBER: // Input on number alrady
 738   2          case _INPUT_TWO_NUMBER: // Input two number alrady
 739   2              ucCurrentInputNumber = (ucCurrentInputNumber*10) + ucNumber;
 740   2              ucCurrentInputState  = (ucCurrentInputState == _INPUT_TWO_NUMBER) ? _INPUT_THREE_NUMBER : _INPUT_T
             -WO_NUMBER;
 741   2              break;
 742   2          }
 743   1      }
 744          
 745          //---------------------------------------------------------------------------
 746          void SShowCurrentInputState(BYTE ucInputState)
 747          {
 748   1          Gotoxy(1, 0, BYTE_DISPLAY); 
 749   1          
 750   1          switch(ucCurrentInputState)
 751   1          {
 752   2          case _INPUT_NO_NUMBER: // not input number
 753   2              {
 754   3                  for(;ucInputState > 0;ucInputState--)
 755   3                  {
 756   4                      OutputChar(0x7A);  // Show "-"
 757   4                  }
 758   3                  OutputChar(0x01);  // Show " "
 759   3                  OutputChar(0x01);  // Show " "
 760   3              }
 761   2              break;
 762   2              
 763   2          case _INPUT_ONE_NUMBER: // Input on number alrady
 764   2              CShowNumber1(ucCurrentInputNumber,1);
 765   2              break;
 766   2              
 767   2          case _INPUT_TWO_NUMBER: // Input two number alrady
 768   2              CShowNumber1(ucCurrentInputNumber,2);
 769   2              break;
 770   2              
 771   2          case _INPUT_THREE_NUMBER: // Input three number alrady
 772   2              CShowNumber1(ucCurrentInputNumber,3);
 773   2              break;
 774   2          }
 775   1      }
 776          
 777          
 778          //---------------------------------------------------------------------------
 779          void CShowTVNumber(BYTE ucNumber, BYTE ucOption)
 780          { 
 781   1          ucOsdState     = _MI_MENU_NONE;
 782   1          bChangeChannel = 0;
 783   1          
 784   1          InitOsdFrame();
 785   1      
 786   1          SetOSDDouble(3);
 787   1          CCloseAllWindows();
 788   1      
 789   1          OSDPosition(_MAINMENU_WITDH,_MAINMENU_HEIGHT,0,0,0x03);
 790   1          
 791   1          if (ucOption & _SHOW_CH_TV_NUMBER)
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 14  

 792   1          {
 793   2                      Gotoxy(0, 0, BYTE_DISPLAY);
 794   2              PrintfDec(ucNumber);
 795   2          }
 796   1      
 797   1          if (_SHOW_CH_TV_TYPE & ucOption)
 798   1          {
 799   2              BYTE *pStr;
 800   2      
 801   2              switch(ucTVType)
 802   2              {
 803   3              default:
 804   3              case _TV_NTSC_M:                pStr = "NTSC M";                break;
 805   3              case _TV_NTSC_4_BG:             pStr = "NTSC M";                break;
 806   3              case _TV_NTSC_4_DK:             pStr = "NTSC M";                break;
 807   3              case _TV_NTSC_4_I:              pStr = "NTSC M";                break;
 808   3              case _TV_PAL_M:             pStr = "PAL M";                     break;
 809   3              case _TV_PAL_BG:                pStr = "PAL BG";                break;
 810   3              case _TV_PAL_I:                 pStr = "PAL I";                 break;
 811   3              case _TV_PAL_DK:                pStr = "PAL DK";                break;
 812   3              case _TV_PAL_N:                 pStr = "PAL N";                 break;
 813   3              case _TV_SECAM_BG:              pStr = "SECAM BG";              break;
 814   3              case _TV_SECAM_DK:              pStr = "SECAM DK";              break;
 815   3              case _TV_SECAM_L:               pStr = "SECAM L";               break;
 816   3              case _TV_SECAM_LL:              pStr = "SECAM LL";              break;
 817   3              }
 818   2                      Gotoxy(0, 1, BYTE_DISPLAY);
 819   2              Textout(pStr);  
 820   2          }
 821   1      
 822   1         
 823   1          COsdFxEnableOsd();
 824   1          CTimerReactiveTimerEvent(SEC(5), COsdDispOsdTimerEvent);
 825   1          bOSDTimeOut  = 0;
 826   1      #if(_SLEEP_FUNC)
 827   1          bOSDOnScreen = 1;
 828   1      #endif
 829   1      }
 830          
 831          #endif
 832          
 833          //----------------------------------------------------------------------------------------------------
 834          void COsdDispFirstTimeLoadFont(void)
 835          {       
 836   1          COsdFxDisableOsd();
 837   1          COsdColorPalette(tPALETTE_0);
 838   1          
 839   1          SetOsdMap(ROW_COUNT,COL_WIDTH,FONT_BASE_ADDRESS);
 840   1          CScalerLoadHardwareVLCFont(FntGlobal,0x00);
 841   1      }
 842          
 843          //-----------------------------------------------------------
 844          #define _NOTE_WIDTH                                             (11 * 12 + 8)   
 845          #define _NOTE_HEIGHT                                           (3 * 18)
 846          
 847          void CShowTimerMode()
 848          {
 849   1          InitOsdFrame();
 850   1          SetOSDDouble(0x03);
 851   1              OSDPosition(_NOTE_WIDTH, _NOTE_HEIGHT, 42, 0, 0x03);
 852   1              if(_GET_POWER_DOWN_TIME() == 0x00)
 853   1              {
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 15  

 854   2                      Gotoxy(0,0,BYTE_DISPLAY);
 855   2                      Textout(sOff[GET_LANGUAGE()]);
 856   2              }
 857   1              CTimerReactiveTimerEvent(SEC(5), COsdTimeOut);
 858   1          COsdFxEnableOsd();
 859   1          bOSDTimeOut = 0;
 860   1      }
 861          
 862          //---------------------------------------------------------------------------
 863          
 864          void CShowTimer(void) small
 865          {
 866   1          BYTE ucCurrentMin;
 867   1          BYTE ucCurrentSec;
 868   1      
 869   1              if(bShowTimerChg == 0)
 870   1                      return;
 871   1      
 872   1              bShowTimerChg = 0;
 873   1          ucCurrentMin = ucAutoPowerDownTime;
 874   1          ucCurrentSec = 60 - (BYTE)(ucMinuteCount/1000);
 875   1              
 876   1          if (!bTimerOnScreen)
 877   1          {              
 878   2                  ucOsdState = _MI_MENU_NONE;
 879   2      
 880   2                  InitOsdFrame();
 881   2                  SetOSDDouble(0x03);
 882   2                      OSDPosition(_NOTE_WIDTH, _NOTE_HEIGHT, 42, 0, 0x03);
 883   2              bTimerOnScreen = 1;
 884   2      
 885   2              COsdFxEnableOsd();
 886   2          }
 887   1          
 888   1          Gotoxy(0, 0, BYTE_DISPLAY); 
 889   1          if(ucCurrentSec != 60)
 890   1             CShowNumber1(ucAutoPowerDownTime-1 , 0);
 891   1          else
 892   1             CShowNumber1(ucAutoPowerDownTime , 0);
 893   1          OutputChar(':');
 894   1          if(ucCurrentSec == 60)
 895   1              CShowNumber1(0, 2);
 896   1          else
 897   1             CShowNumber1(ucCurrentSec, 2);
 898   1          //OutputChar(0x01);   
 899   1              CTimerCancelTimerEvent(COsdTimeOut);
 900   1      }
 901          //---------------------------------------------------------------------------
 902          
 903          void SetSleepTimer(void)
 904          {
 905   1              COsdDispOsdTimerEvent();
 906   1              if(_GET_POWER_DOWN_TIME() == TIMER_120m)
*** ERROR C202 IN LINE 906 OF OSD\OSD003\OSDPROC003.C: 'TIMER_120m': undefined identifier
 907   1              {
 908   2                  _SET_POWER_DOWN_TIME(TIMER_OFF);
*** ERROR C202 IN LINE 908 OF OSD\OSD003\OSDPROC003.C: 'TIMER_OFF': undefined identifier
 909   2              }
 910   1              else
 911   1              {
 912   2                  _SET_POWER_DOWN_TIME(_GET_POWER_DOWN_TIME()+1);
 913   2              }   
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 16  

 914   1              CEepromSaveTvData();//ucOsdEventMsg = _SAVE_EE_TV_DATA_MSG;
 915   1      
 916   1              ucAutoPowerDownTime = _GET_POWER_DOWN_TIME() * TIMER_STEP;
*** ERROR C202 IN LINE 916 OF OSD\OSD003\OSDPROC003.C: 'TIMER_STEP': undefined identifier
 917   1              if(TIMER_OFF == ucAutoPowerDownTime) // Auto power down time off
*** ERROR C202 IN LINE 917 OF OSD\OSD003\OSDPROC003.C: 'TIMER_OFF': undefined identifier
 918   1              {
 919   2                  ucAutoPowerDownTime = 0xff;
 920   2              }
 921   1      
 922   1              CShowTimerMode();
 923   1              ucMinuteCount = 0;  // Reset count
 924   1      }
 925          //-----------------------------------------------------------
 926          
 927          BYTE CFoundKeyMsgToOsdEvent(SKeyToOsdEvent *tMsgTable)
 928          {
 929   1           BYTE i;
 930   1      
 931   1           if(ucKeyMessage == _NONE_KEY_MESSAGE)
 932   1           {
 933   2                //ucOsdEventMsg = _NONE_MSG;
 934   2                return 0;
 935   2           }
 936   1                              
 937   1           i = 0;
 938   1           while(1)
 939   1           {
 940   2               if(tMsgTable[i].KeyMessage == _NONE_KEY_MESSAGE)
 941   2               {
 942   3                    //ucOsdEventMsg = _NONE_MSG;
 943   3                    // End flag
 944   3                    return 1;
 945   3               }
 946   2               if(ucKeyMessage == tMsgTable[i].KeyMessage)
 947   2               {
 948   3                    ucOsdEventMsg = tMsgTable[i].OsdEvent;
 949   3                    return 0;
 950   3               }
 951   2      
 952   2               i++;
 953   2           }
 954   1           return 1;
 955   1      }                                        
 956          //---------------------------------------------------------------------------
 957          
 958          void CCoverKeyMsgToOsdEvent(SKeyToOsdEvent *tMsgTable,BYTE bUserPublicKeyEvnet)
 959          {
 960   1           bit bFoundPublic = 1;
 961   1      
 962   1           if(tMsgTable != NULL)
 963   1               bFoundPublic = CFoundKeyMsgToOsdEvent(tMsgTable);
 964   1      
 965   1           if(bFoundPublic && bUserPublicKeyEvnet)
 966   1           {
 967   2               CFoundKeyMsgToOsdEvent(tKOPublic);
 968   2           }
 969   1      }
 970          //---------------------------------------------------------------------------
 971          void InitOsdFrame(void)
 972          {
 973   1          COsdFxDisableOsd();
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 17  

 974   1          CCloseAllWindows();
 975   1      
 976   1          SetOsdMap(ROW_COUNT,COL_WIDTH,FONT_BASE_ADDRESS);
 977   1      
 978   1          if(GET_FIRST_LOADFONT() == _TRUE)
 979   1          {
 980   2              CLR_FIRST_LOADFONT();
 981   2              COsdDispFirstTimeLoadFont();
 982   2          }    
 983   1      
 984   1              //CScalerSetBit(_OVERLAY_CTRL_6C, 0x23, ((stOsdUserData.OsdBlending & 0x07) << 2));
 985   1          OSDClear(ROW(0), HEIGHT(ROW_COUNT), COL(0), WIDTH(COL_WIDTH), 0x8C, BYTE_ATTRIB);
 986   1          OSDClear(ROW(0), HEIGHT(ROW_COUNT), COL(0), WIDTH(COL_WIDTH), 0x00, BYTE_DISPLAY);
 987   1          OSDClear(ROW(0), HEIGHT(ROW_COUNT), COL(0), WIDTH(COL_WIDTH), 0x40, BYTE_COLOR);    
 988   1      
 989   1          CTimerCancelTimerEvent(COsdTimeOut);
 990   1      }
 991          
 992          //---------------------------------------------------------------------------
 993          void CShowNoSignal(void)
 994          {
 995   1          InitOsdFrame();
 996   1          SetOSDDouble(0x00);          
 997   1          OSDLine(1,0,COL_WIDTH,0xF0,BYTE_COLOR);
 998   1          CCenterTextout(sNoSignal, COL(14), ROW(1));
 999   1          COsdFxDrawWindow(XSTART(0), YSTART(0), _MAINMENU_WITDH, _MAINMENU_HEIGHT, tNosignalWINDOW);
1000   1          OSDPosition(_MAINMENU_WITDH, _MAINMENU_HEIGHT, 50, 50, 0x03); 
1001   1          COsdFxEnableOsd();
1002   1      }
1003          //---------------------------------------------------------------------------
1004          
1005          void CShowVisatech(void)
1006          {
1007   1          InitOsdFrame();
1008   1             SetOSDDouble(0x03);   
1009   1              OSDPosition(300, 30, 0, 1, 0x03);    
1010   1             OSDLine(10,20,COL_WIDTH,0xA0,BYTE_COLOR);
1011   1              Gotoxy(20,10, BYTE_DISPLAY);
1012   1              Textout(sVisatech);
1013   1              
1014   1          COsdFxEnableOsd();
1015   1       }
1016          
1017          //---------------------------------------------------------------------------
1018          void CShowNote(void)
1019          {
1020   1              BYTE code *pStr; 
1021   1      
1022   1          ucOsdState = _MI_MENU_NONE;
1023   1      
1024   1          InitOsdFrame();
1025   1          SetOSDDouble(0x03);  
1026   1      
1027   1      
1028   1      
1029   1              switch(stSystemData.InputSource)
1030   1              {
1031   2                      case _SOURCE_VIDEO_SV:          pStr = sAV2;            break;
1032   2                      case _SOURCE_VIDEO_AV:          pStr = sAV1;            break;
1033   2                      case _SOURCE_VIDEO_TV:          pStr = sTV;                     break;
1034   2                      case _SOURCE_VGA:                       pStr = sVGA;                    break;
1035   2      
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 18  

1036   2              }
1037   1              
1038   1              //CCenterTextout(pStr,COL(5),ROW(0)); 
1039   1              Gotoxy(0, 0, BYTE_DISPLAY);
1040   1              Textout(pStr);
1041   1          
1042   1          OSDPosition(120, 18, 0, 1, 0x03); 
1043   1              
1044   1          COsdFxEnableOsd();
1045   1          CPowerPanelOn();  
1046   1      
1047   1          CTimerReactiveTimerEvent(SEC(5), COsdTimeOut);
1048   1      
1049   1      }
1050          //---------------------------------------------------------------------------
1051          
1052          
1053          
1054          
1055          BYTE AdjustMenuItem(BYTE ucBeginItem,BYTE ucEndItem,BYTE ucMode)
1056          {
1057   1           BYTE i;
1058   1           BYTE ucCount;
1059   1           BYTE ucNewItem;
1060   1      
1061   1           CLR_KEYREPEATENABLE();
1062   1      
1063   1           //如果菜单只有一项,直接返回
1064   1           ucCount = ucEndItem - ucBeginItem;
1065   1           if(ucCount < 1)
1066   1           {
1067   2                return ucOsdState;
1068   2           }
1069   1      
1070   1           // 计算下一项菜单，或是上一菜单
1071   1           i = 0;
1072   1      
1073   1           ucNewItem = ucOsdState;
1074   1      
1075   1           // EricLee add for menu have more item,but only show one item bug
1076   1           ucCount += 1;
1077   1           while(i < ucCount)
1078   1           {
1079   2      
1080   2               ucNewItem = ValueInRangeChange(ucBeginItem, ucEndItem, ucNewItem, ucMode | _LOOP);
1081   2      
1082   2               if(g_tMenuItem[ucNewItem].Enable())
1083   2               {
1084   3                   break;
1085   3               }
1086   2               
1087   2               i++;
1088   2           }
1089   1      
1090   1           return ucNewItem;
1091   1      }
1092          //----------------------------------------------------------------------------------------------------
1093          BYTE GetShowIndex(BYTE ucMenuItem,BYTE ucBeginItem,BYTE ucEndItem)
1094          {
1095   1           BYTE Index;
1096   1      
1097   1           bit fEnable;
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 19  

1098   1           bit fDisableNoShow;
1099   1      
1100   1           Index = 0;
1101   1      
1102   1           while(ucBeginItem <= ucEndItem)
1103   1           {
1104   2              fEnable = g_tMenuItem[ucBeginItem].Enable();
1105   2                      if((g_tMenuItem[ucBeginItem].Option & _DISABLE_NOT_SHOW) != _DISABLE_NOT_SHOW)
1106   2                              fDisableNoShow = 0;
1107   2                      else
1108   2                              fDisableNoShow = 1;
1109   2      
1110   2              if(ucBeginItem == ucMenuItem)
1111   2              {
1112   3                      if(fEnable)             
1113   3                      {
1114   4                              return Index;
1115   4                      }
1116   3                      else
1117   3                      {
1118   4                                      if(fDisableNoShow)
1119   4                                              return _NOT_SHOW;
1120   4                                      else
1121   4                                              return Index;
1122   4                      }
1123   3              }
1124   2      
1125   2              if(ucBeginItem > ucMenuItem)
1126   2                      return _NOT_SHOW;
1127   2                      
1128   2              if(!fDisableNoShow)
1129   2              {       
1130   3                      Index++;
1131   3              }
1132   2              else
1133   2              {
1134   3                      if(fEnable)
1135   3                      {
1136   4                      Index++;
1137   4                  }
1138   3                      }
1139   2              ucBeginItem++;
1140   2           }
1141   1      
1142   1           return _NOT_SHOW;     
1143   1      }
1144          //----------------------------------------------------------------------------------------------------
1145          BYTE GetShowCount(BYTE ucBeginItem,BYTE ucEndItem)
1146          {
1147   1           BYTE ucCount;
1148   1      
1149   1           bit fEnable;
1150   1           bit fDisableNoShow;
1151   1      
1152   1      
1153   1           ucCount = 0;
1154   1      
1155   1           while(ucBeginItem <= ucEndItem)
1156   1           {
1157   2              fEnable = g_tMenuItem[ucBeginItem].Enable();
1158   2              
1159   2                      if((g_tMenuItem[ucBeginItem].Option & _DISABLE_NOT_SHOW) != _DISABLE_NOT_SHOW)
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 20  

1160   2                              fDisableNoShow = 0;
1161   2                      else
1162   2                              fDisableNoShow = 1;
1163   2                      
1164   2              if(!fDisableNoShow)
1165   2              {       
1166   3                      ucCount++;
1167   3              }
1168   2              else
1169   2              {
1170   3                      if(fEnable)
1171   3                      {
1172   4                      ucCount++;
1173   4                  }
1174   3                      }
1175   2              ucBeginItem++;
1176   2           }
1177   1      
1178   1           return ucCount;     
1179   1      }
1180          
1181          //----------------------------------------------------------------------------------------------------
1182          void CDrawMuteState(void)
1183          {           
1184   1          ucOsdState     = _MI_MENU_NONE;
1185   1      #if(_VIDEO_TV_SUPPORT)
1186   1              bChangeChannel = 0;
1187   1      #endif
1188   1          InitOsdFrame();
1189   1          SetOSDDouble(0x03);     
1190   1          OSDPosition(120, 18, 0, 1, 0x03);   
1191   1          COsdFxEnableOsd();
1192   1          if (GET_AUDIO_MUTE()) // Mute on 
1193   1              {
1194   2                      if(_DISP_WID>1000)
1195   2                           Gotoxy(26,0,BYTE_DISPLAY);//wtao100427
1196   2                      else
1197   2                              Gotoxy(20, 0, BYTE_DISPLAY);
1198   2                      
1199   2                      Textout(sMute);
1200   2              }
1201   1          else
1202   1              {
1203   2                 if(_DISP_WID>1000)
1204   2                     OSDClear(2, 1, 26 , 4, 0x00, BYTE_DISPLAY);      //wtao100427
1205   2                 else
1206   2                       OSDClear(2, 1, 20 , 4, 0x00, BYTE_DISPLAY);            
1207   2              }
1208   1      
1209   1                                                    
1210   1          bOSDTimeOut  = 0;
1211   1       //   ucAudioState = 1;
1212   1          if (GET_AUDIO_MUTE()) // Mute on  
1213   1          {
1214   2              CTimerCancelTimerEvent(COsdDispOsdTimerEvent);
1215   2          }
1216   1          else             
1217   1          {
1218   2                    CTimerReactiveTimerEvent(SEC(5), COsdDispOsdTimerEvent);
1219   2                     //COsdTimeOut();          //wtao100427 add to avoid lose "No Signal" 
1220   2          } 
1221   1      
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 21  

1222   1          bOSDTimeOut  = 0;
1223   1          bOSDOnScreen = 1;
1224   1      }
1225          
1226          //-----------------------------------------------------------------------
1227          void CSetMuteState(void)
1228          {
1229   1          if (GET_AUDIO_MUTE()) // Mute on 
1230   1              CLR_AUDIO_MUTE();
1231   1          else
1232   1              SET_AUDIO_MUTE();
1233   1      
1234   1          CDrawMuteState();
1235   1             CSetVolume();
1236   1          ucOsdEventMsg = _SAVE_EE_AUDIO_DATA_MSG;
1237   1      }
1238          
1239          //-----------------------------------------------------------------------
1240          
1241          
1242          
1243          void ChangeSourceReset(void)
1244          {
1245   1          ChangeSourceState();
1246   1              CEepromSaveSystemData();
1247   1          ucTVSyncFailCount = 250;
1248   1          CLR_CLEAR_OSD_EN();
1249   1          CModeResetMode();
1250   1              CLR_SOURCE_AUTOCHANGE();
1251   1          //CShowNote();
1252   1          CLR_CLEAR_OSD_EN();
1253   1          SET_FIRST_SHOW_NOTE();
1254   1      }
1255          
1256             
1257          //----------------------------------------------------------------------------------------------------
1258          void CChangeSourceAvSv(void)
1259          {
1260   1              switch(_GET_INPUT_SOURCE())
1261   1              {
1262   2                      case _SOURCE_VIDEO_AV:          _SET_INPUT_SOURCE(_SOURCE_VIDEO_SV);            break;
1263   2                      case _SOURCE_VIDEO_SV:          _SET_INPUT_SOURCE(_SOURCE_VIDEO_TV);            break;
1264   2                      case _SOURCE_VIDEO_TV:          _SET_INPUT_SOURCE(_SOURCE_VGA);         break;
1265   2                      case _SOURCE_VGA:                       _SET_INPUT_SOURCE(_SOURCE_VIDEO_AV);            break;
1266   2                      default: break;
1267   2      
1268   2              }
1269   1              
1270   1              COsdDispOsdTimerEvent();              
1271   1          ucOsdEventMsg = _CHANGE_SOURCE_MSG;
1272   1      }
1273          
1274          //---------------------------------------------------------------------------
1275          void ChangeDisplayMode(void)
1276          {
1277   1              if(!MDisplayRatioEnable())
1278   1                      return;
1279   1              
1280   1              if(GET_DISPLAYMODE() == _DISPMODE_FULL)
1281   1              {
1282   2                      SET_DISPLAYMODE(_DISPMODE_43);
1283   2              }
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 22  

1284   1              else
1285   1              {
1286   2                      SET_DISPLAYMODE(_DISPMODE_FULL);
1287   2              }
1288   1      
1289   1              CEepromSaveSystemData();
1290   1              ucTVSyncFailCount = 250;
1291   1      
1292   1              ucOsdState = _MI_MENU_NONE;
1293   1              COsdFxDisableOsd();
1294   1              
1295   1              CModeResetMode();
1296   1      }
1297          //---------------------------------------------------------------------------
1298          void PanelLRSwap(void)
1299          {
1300   1              if(GET_LR_SWAP())
1301   1                      SET_LR_SWAP(0);
1302   1              else 
1303   1                      SET_LR_SWAP(1);
1304   1      
1305   1              CEepromSaveSystemData();
1306   1      
1307   1              SetPanelLR();   
1308   1      }
1309          //---------------------------------------------------------------------------
1310          
1311          void PanelUDSwap(void)
1312          {
1313   1              if(GET_UD_SWAP())
1314   1                      SET_UD_SWAP(0);
1315   1              else 
1316   1                      SET_UD_SWAP(1);
1317   1      
1318   1              ucOsdEventMsg = _SAVE_EE_SYSTEMDATA_MSG;
1319   1      
1320   1              SetPanelUD();
1321   1      }
1322          //---------------------------------------------------------------------------
1323          
1324          void GotoBrightnessMenu(void)
1325          {
1326   1              DrawMainMenu();    
1327   1              DrawBrightness();
1328   1              
1329   1          ucOsdState = _MI_BRIGHTNESS;
1330   1          
1331   1          COsdFxEnableOsd();
1332   1      }
1333          //---------------------------------------------------------------------------
1334          void GotoContrastMenu(void)
1335          {
1336   1              DrawMainMenu();    
1337   1              DrawContrast();
1338   1              
1339   1          ucOsdState = _MI_CONTRAST;
1340   1          
1341   1          COsdFxEnableOsd();
1342   1      }
1343          //---------------------------------------------------------------------------
1344          void GotoSaturationMenu(void)
1345          {
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 23  

1346   1              DrawMainMenu();    
1347   1              DrawSaturation();
1348   1              
1349   1          ucOsdState = _MI_SATURATION;
1350   1          
1351   1          COsdFxEnableOsd();
1352   1      }
1353          //---------------------------------------------------------------------------
1354          void GotoVolumeMenu(void)
1355          {
1356   1              DrawMainMenu();    
1357   1              DrawVolume();
1358   1              
1359   1          ucOsdState = _MI_VOLUME;
1360   1      
1361   1          SET_KEYREPEATENABLE();
1362   1      
1363   1              CAdjustAudio();
1364   1             CSetVolume();
1365   1      
1366   1          ucOsdEventMsg = _SAVE_EE_AUDIO_DATA_MSG;
1367   1          OSD_SLIDER(GET_VOLUME());
1368   1          COsdFxEnableOsd();
1369   1      }
1370          //---------------------------------------------------------------------------
1371          //wtao100413
1372          void GotoResetMenu(void)
1373          {
1374   1          ucOsdState = _MI_RESET;
1375   1              DrawMainMenu();    
1376   1             m_fResetMenuState = 0;
1377   1             DrawReset();
1378   1              
1379   1      
1380   1          SET_KEYREPEATENABLE();
1381   1              
1382   1          COsdFxEnableOsd();
1383   1              
1384   1      }
1385          
1386          //---------------------------------------------------------------------------
1387          void CAdjustPicMode(void)
1388          {
1389   1              switch (GET_COLOR_MODE())
1390   1              {
1391   2                      case _CM_NORMAL:        
1392   2                              stConBriData.Contrast = 50;
1393   2                              stConBriData.Brightness= 50;
1394   2                              break;
1395   2                      case _CM_SOFT:
1396   2                              stConBriData.Contrast = 45;
1397   2                              stConBriData.Brightness= 45;
1398   2                              break;
1399   2                      case _CM_VIVID:
1400   2                              stConBriData.Contrast = 55;
1401   2                              stConBriData.Brightness= 55;
1402   2                              break;
1403   2                      case _CM_USER:
1404   2                              stConBriData.Contrast = 60;
1405   2                              stConBriData.Brightness= 60;
1406   2                              break;
1407   2              }
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 24  

1408   1              CAdjustBrightness();
1409   1              CAdjustContrast();
1410   1              CEepromSaveBriConData();
1411   1      }
1412          //---------------------------------------------------------------------------
1413          
1414          
1415          void CChangePictureMode(void)
1416          {       
1417   1              BYTE code *pStr; 
1418   1      
1419   1              // change picture mode
1420   1              BYTE ucMode = GET_COLOR_MODE();
1421   1              ucMode = ValueInRangeChange(_CM_NORMAL, _CM_USER, ucMode, _INC | _LOOP);
1422   1              SET_COLOR_MODE(ucMode);
1423   1      
1424   1              // save to eeprom
1425   1              CEepromSaveSystemData();
1426   1      
1427   1              // display picture mode on screen
1428   1          ucOsdState = _MI_MENU_NONE;
1429   1      
1430   1          InitOsdFrame();
1431   1          SetOSDDouble(0x00);//(0x03); 
1432   1      
1433   1              switch(GET_COLOR_MODE())
1434   1              {
1435   2                      case _CM_NORMAL:        pStr = sStandard;               break;
1436   2                      case _CM_SOFT:          pStr = sSoft;                          break;
1437   2                      case _CM_VIVID:         pStr = sVivid;                  break;
1438   2                      case _CM_USER:          pStr = sPersonal;                      break;
1439   2              }
1440   1              OSDLine(2, 2, COL_WIDTH, 0xA0,BYTE_COLOR);//wtao100416
1441   1              Gotoxy(2, 2, BYTE_DISPLAY);
1442   1              Textout(pStr);
1443   1          
1444   1          OSDPosition(120, 18, 0, 1, 0x03);
1445   1              
1446   1          COsdFxEnableOsd();
1447   1          CPowerPanelOn();  
1448   1      
1449   1              // set osd timeout
1450   1          CTimerReactiveTimerEvent(SEC(5), COsdTimeOut);
1451   1      
1452   1      
1453   1          // change contrast brightness value
1454   1          
1455   1          CAdjustPicMode();
1456   1          
1457   1      }
1458          
1459          
1460          //FM CONTROL
1461          //-----------------------------------------------------------------------------------
1462          void CFMControl(void)
1463          {
1464   1          CSetFMFreq(_GET_FM_STATE());
1465   1              CEepromSaveSystemData();
1466   1      }
1467          
1468          //----------------------------------------------------------------------------------------------------
1469          
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 25  

1470          
1471          
1472          
1473          
1474          
1475          
1476          
1477          
1478          
1479          
1480          
1481          
1482          
1483          
1484          
1485          
1486          
1487          
1488          
1489          
1490          
1491          
1492          
1493          
1494          
1495          void CNotUse(void)
1496          {
1497   1          BYTE ucTest = cCodeHDMITemp;
1498   1      
1499   1          CAdjustMZHueSat(0);
1500   1      
1501   1              ucTest = tLogoTemp;
1502   1              DoSetBackColor();
1503   1          ucTest = tOSDMenuFunc;
1504   1      
1505   1          CAdjustGammaTable(0);
1506   1      
1507   1          ucTest = g_tYpbprTemp;
1508   1              CDisable();
1509   1      
1510   1              CVideoEnable();
1511   1              CVideoNTSCEnable();
1512   1              CVgaEnable();
1513   1      //      CHDMIEnable();
1514   1      //      CDviEnable();
1515   1              MDisplayRatioEnable();
1516   1              
1517   1              AdjustMenuItem(0,0,0);
1518   1              GetShowIndex(0,0,0);
1519   1              GetShowCount(0,0);
1520   1      
1521   1              CSaveTVModeData(0);
1522   1              CIOMaskToKeyMaskExt(0);
1523   1      
1524   1              CShowNoSignal();
1525   1      
1526   1      #if(AUDIO_TYPE == _AUDIO_SC7313)
                      CSc7313MuteOn();
              #endif
1529   1              //CEepromSaveHueSatData();
1530   1              //CKeyScanReadyTimerEvent();
1531   1              //CKeyRepeatEnableTimerEvent();
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 26  

1532   1              //CAutoDoAutoConfig();
1533   1      
1534   1              //CAutoDoWhiteBalance();
1535   1              //CEepromSaveOsdUserData();
1536   1              //CEepromSaveBriConData();
1537   1              //CEepromSaveColorTempData();
1538   1              //CEepromSaveTvData();
1539   1              //CScalerWriteAmount(0,0,0,0);
1540   1          //SYMBOL:  _CCENTERTEXTOUT
1541   1              SetOsdMap(0,0,0);
1542   1              //SetOSDRamAddress();
1543   1              //DirectWOSDRam(0, 0, 0, 0);
1544   1              //SetRowCmds();
1545   1              //Gotoxy(0, 0, 0);
1546   1              //OutputChar(0);
1547   1      
1548   1              COsdFxCloseWindow(0);
1549   1              //ValueInRangeChange(0, 0, 0, 0);
1550   1              Textout(0);
1551   1              StrLen(0);
1552   1              //OSDPosition(0, 0, 0, 0, 0);
1553   1              OSDClear(0, 0, 0, 0, 0,0);
1554   1              //COsdFxCodeWrite(0);
1555   1              //COsdFxEnableOsd();
1556   1              //COsdFxDisableOsd();
1557   1              COsdFxDrawWindow(0, 0, 0, 0, 0);
1558   1              //COsdFxGetAdcClockRange(0);
1559   1              InitBurnIn();
1560   1              BurnInRun();
1561   1          //CKeyScanReady();
1562   1      
1563   1         // CSetPWM(0, 0);
1564   1          //CTextOutRightAlign(0,0,0);
1565   1          //OSDSlider(0, 0, 0, 0, 0,0);
1566   1      
1567   1      #if(_VIDEO_TV_SUPPORT)
1568   1              //CSaveChannelSkip(0,0);
1569   1              //CSaveChannelColorType(0,0);
1570   1              //CChangeChannel(0);
1571   1              //CTuningCurrentChannel(0,0);
1572   1              //CTvAutoSearch();
1573   1              //CManualSearch(0,0);
1574   1      //    CFMInit();
1575   1      #endif
1576   1              COsdCtrlGetHPosition();
1577   1              COsdCtrlGetVPosition();
1578   1              COsdCtrlGetClock();
1579   1              //COsdCtrlGetPhase();
1580   1          //GetNextLanguage(0);
1581   1              //GetPrevLanguage(0);
1582   1          CDoReset();
1583   1      
1584   1          //AdjustMenuItem(0,0,0);
1585   1      
1586   1              CEnable();
1587   1              //CVideoEnable();
1588   1              //CVgaEnable();
1589   1              //CTVEnable();
1590   1      
1591   1          //Draw2bit3x2Icon(0,0,0);
1592   1          bChangeSource();
1593   1          
C51 COMPILER V7.06   OSDPROC003                                                            04/29/2010 18:06:08 PAGE 27  

1594   1      #if(_VIDEO_TV_SUPPORT)
1595   1          #if(_FM_DEVICE)
                      CChangeFM();
                  #endif
1598   1              CShowTimer();
1599   1          #if(_IF_PLL_DE_CHIP == _IF_PLL_DE_1338 || _IF_PLL_DE_CHIP == _IF_PLL_DE_135X)
                      CSetPifFreq(0,0,0,0);
                      CSetSoundFreq(0);
                  #endif
1603   1      
1604   1              //CShowTVNumber(stTvInfo.ucFMCurrCh, _SHOW_CH_TV_NUMBER);
1605   1              kx_CReadIfPllDM();
1606   1      #endif
1607   1          //CCenterTextout(0,ROW(1),COL(0),0);
1608   1          //COsdLoad1BitFont(0, 0x00, 123, 0);
1609   1          CShowNumber1(0, 0);
1610   1      
1611   1          //MColorValueAdj(_DEC);    
1612   1          //MMainMenuValueAdj(_DEC); 
1613   1          //CAdjustGammaTable(0);
1614   1      
1615   1          KxEFLogo1BitAddress();
1616   1          KxEFLogo2BitAddress();
1617   1          KxEFLogo4BitAddress();
1618   1      
1619   1      }
1620          //--------------------------------------------------
1621          
1622          #endif                  //#if(_OSD_TYPE == _OSD003)

C51 COMPILATION COMPLETE.  0 WARNING(S),  4 ERROR(S)
