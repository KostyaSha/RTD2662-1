C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE LCD_AUTO
OBJECT MODULE PLACED IN .\Output\Lcd_auto.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\Lcd_auto.c OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND CODE SYMBOLS PR
                    -INT(.\Output\Lcd_auto.lst) PREPRINT(.\Output\Lcd_auto.i) OBJECT(.\Output\Lcd_auto.obj)

stmt level    source

   1          #define __AUTO__
   2          
   3          #include "reg52.h"
   4          
   5          #include "Header\MAIN_DEF.h"
   6          #include "Header\ACCESS.H"
   7          #include "Header\LCD_MAIN.H"
   8          #include "Header\CONFIG.H"
   9          #include "Header\LCD_FUNC.H"
  10          #include "Header\LCD_AUTO.H"
  11          #include "Header\LCD_OSD.H"
  12          
  13          
  14          void Wait_Finish(void)
  15          {
  16   1          unsigned char   Wait_Time_Cnt, IVS_Event;
  17   1      
  18   1              RTDSetByte(STATUS0_01, 0x00);  // Clear status  
  19   1          RTDSetByte(STATUS1_1F, 0x00);  // Clear status
  20   1      
  21   1          
  22   1          Wait_Time_Cnt   = 60;           // Auto-Phase timeout 60ms
  23   1          IVS_Event       = 25;           // IVS timeout 25ms 
  24   1          do
  25   1          {  
  26   2               Delay_Xms(1);
  27   2           
  28   2      /*
  29   2      #if(AS_NON_FRAMESYNC == 0)
  30   2      
  31   2               RTDRead(STATUS0_01, 1, N_INC);  // Get status        
  32   2      
  33   2              if (Data[0] & 0x63)
  34   2              {
  35   2      
  36   2      #if(MCU_TYPE == MCU_WINBOND)
  37   2              bLIGHT_PWR  = LIGHT_OFF;
  38   2      #else
  39   2              MCU_WriteBacklightPower(LIGHT_OFF);
  40   2      #endif
  41   2      
  42   2                  RTDCodeW(FreeV);
  43   2      
  44   2                  Data[0] = ERROR_INPUT;
  45   2                  RTDSetByte(STATUS0_01, 0x00);  // Clear status  
  46   2      
  47   2                  return;
  48   2                              
  49   2              }
  50   2      #endif
  51   2            //Delay_Xms(2);
  52   2      #if(MCU_TYPE == MCU_MTV512)
  53   2            RTDSetByte(STATUS1_1F, 0x00);  // Clear status
  54   2      #endif
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 2   

  55   2      
  56   2      #if(AS_NON_FRAMESYNC == 0 || AS_DV_TOTAL == 0)
  57   2              RTDRead(STATUS1_1F, 1, N_INC);  // Get status
  58   2              
  59   2      
  60   2              if ((Data[0] & (EVENT_UNDERFLOW | EVENT_OVERFLOW)) || (0 == --IVS_Event))
  61   2              {
  62   2               
  63   2      #if(MCU_TYPE == MCU_WINBOND)
  64   2              bLIGHT_PWR  = LIGHT_OFF;
  65   2      #else
  66   2              MCU_WriteBacklightPower(LIGHT_OFF);
  67   2      #endif
  68   2                  RTDCodeW(FreeV);
  69   2      
  70   2                  Data[0] = ERROR_INPUT;
  71   2                              RTDSetByte(STATUS1_1F,0x00); //Event happened, write once to clear the status
  72   2      
  73   2                  return;
  74   2              }
  75   2              else if (Data[0] & (EVENT_IVS | EVENT_IEN_START))
  76   2              {
  77   2                  IVS_Event   = 25;       // IVS timeout 25ms 
  78   2                              RTDSetByte(STATUS1_1F,0x00); //Event happened, write once to clear the status
  79   2              }
  80   2                      
  81   2      #endif
  82   2      */
  83   2              RTDRead(AUTO_ADJ_CTRL_7F, 1, N_INC);
  84   2          }
  85   1          while ((Data[0] & 0x01) && (--Wait_Time_Cnt));
  86   1          
  87   1          RTDRead(STATUS0_01, 1, N_INC);  // Get status
  88   1      
  89   1      
  90   1              if(Data[0])
  91   1                      RTDSetByte(STATUS0_01,0x00); //Event happened, write once to clear the status
  92   1      
  93   1      
  94   1          // Return non-zero value in Data[0] if :
  95   1          // 1. IVS or IHS changed
  96   1          // 2. Buffer underflow or overflow
  97   1          // 3. Auto-Phase Tracking timeout
  98   1              
  99   1          Data[0] = (Data[0] & 0x63) ? ERROR_INPUT : (0 == Wait_Time_Cnt) ? ERROR_TIMEOUT : ERROR_SUCCEED;
 100   1      }
 101          
 102          #if(HARDWARE_AUTO)
 103          void Wait_For_IVS(void)
 104          {
 105   1         unsigned char t;
 106   1      
 107   1              t = 50;
 108   1      
 109   1              RTDSetByte(0x1f,0x00);
 110   1              do
 111   1              {
 112   2                      RTDRead(0x1f, 1, Y_INC);
 113   2                      Data[0] = Data[0] & EVENT_IVS;
 114   2                      //t--;
 115   2                      Delay_Xms(1);
 116   2              }while((Data[0] == 0) && (t--));
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 3   

 117   1      }
 118          #endif
 119          
 120          //--------------------Measure Vertical Position---------------------//
 121          // Return Message => ERROR_SUCCESS   : Success                      //
 122          //                   ERROR_INPUT     : 1. IVS or IHS changed        //
 123          //                                     2. underflow or overflow     //
 124          //                   ERROR_TIMEOUT   : Measure Time_Out             //
 125          //                   ERROR_NOTACTIVE : No Avtive Image              //
 126          //------------------------------------------------------------------//
 127          unsigned char Measure_PositionV(unsigned char NM_V)
 128          {
 129   1          unsigned int    usLBound, usRBound;
 130   1      
 131   1          RTDRead(MEAS_HI_51, 0x02, Y_INC);
 132   1          Data[2] = Data[1] & 0x0f;
 133   1          Data[3] = Data[0];
 134   1      
 135   1          usRBound    = usADC_Clock + (unsigned int)stMUD.CLOCK - 128;
 136   1          usLBound    = (unsigned long)usRBound * ((unsigned int *)Data)[1] / usStdHS;
 137   1      
 138   1          // Original formula : 
 139   1          // usRBound    = usRBound - 2 - (PROGRAM_HDELAY - MEASURE_HDEALY) - (stMUD.H_POSITION - ucH_Min_Margin
             -);
 140   1          // usLBound    = usLBound + 20 - (PROGRAM_HDELAY - MEASURE_HDEALY) - (stMUD.H_POSITION - ucH_Min_Margi
             -n);
 141   1      
 142   1          usRBound    = usRBound - 2 + MEASURE_HDEALY - PROGRAM_HDELAY + ucH_Min_Margin - stMUD.H_POSITION;
 143   1          usLBound    = usLBound + 20 + ucH_Min_Margin + MEASURE_HDEALY;
 144   1          usLBound    = usLBound > ((unsigned int)stMUD.H_POSITION + PROGRAM_HDELAY) ? (usLBound - PROGRAM_HDELA
             -Y - stMUD.H_POSITION) : 1;
 145   1      
 146   1          NM_V        = NM_V & 0xfc;
 147   1      
 148   1          Data[0]     = 6;
 149   1          Data[1]     = Y_INC;
 150   1          Data[2]     = H_BND_STA_L_75;
 151   1          Data[3]     = (unsigned char)usLBound;
 152   1          Data[4]     = (unsigned char)usRBound;
 153   1          Data[5]     = ((unsigned char)(usLBound >> 4) & 0x70) | ((unsigned char)(usRBound >> 8) & 0x0f);    
 154   1          Data[6]     = 8;
 155   1          Data[7]     = Y_INC;
 156   1          Data[8]     = MARGIN_R_7B;
 157   1          Data[9]     = NM_V;
 158   1          Data[10]    = NM_V | PIXEL_1;
 159   1          Data[11]    = NM_V;
 160   1          Data[12]    = 0x00;
 161   1          Data[13]    = 0x01;
 162   1          Data[14]    = 0;
 163   1          RTDWrite(Data);
 164   1          
 165   1              Wait_Finish();
 166   1      
 167   1      
 168   1          if (ERROR_SUCCEED != Data[0])   return Data[0];
 169   1      
 170   1          RTDRead(VER_START_80, 4, Y_INC);
 171   1      
 172   1          // Translate byte order : RTD little indian -> 8051 big indian
 173   1          Data[6] = Data[1] & 0x0f;
 174   1          Data[7] = Data[0];
 175   1          Data[8] = Data[3] & 0x0f;
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 4   

 176   1          Data[9] = Data[2];
 177   1      
 178   1          // V Start/End should subtract 1
 179   1          usVer_Start     = ((unsigned int *)Data)[3] ? ((unsigned int *)Data)[3] - 1 : 0;
 180   1          usVer_End       = ((unsigned int *)Data)[4] ? ((unsigned int *)Data)[4] - 1 : 0;
 181   1      
 182   1          // Check all black
 183   1          if (0x0000 == usVer_End)    return  ERROR_NOTACTIVE;
 184   1      
 185   1      /*
 186   1          // Issac 2002/10/15
 187   1          // To prevent from noise induced by VSYNC
 188   1          if (usVer_End > (usVer_Start + usIPV_ACT_LEN - 1))
 189   1          {
 190   1              usVer_End   = usVer_Start + usIPV_ACT_LEN - 1;
 191   1      
 192   1              ((unsigned int *)Data)[4]   = usVer_End;
 193   1          }
 194   1      */
 195   1              if ((9 - PROGRAM_VDELAY) > usVer_Start)
 196   1              {
 197   2                  ((unsigned int *)Data)[3]   = 9 - PROGRAM_VDELAY;
 198   2              }
 199   1              else
 200   1              {
 201   2              // To prevent from noise induced by VSYNC
 202   2              if (usVer_End > (usVer_Start + usIPV_ACT_LEN - 1))
 203   2              {
 204   3                  usVer_End   = usVer_Start + usIPV_ACT_LEN - 1;
 205   3      
 206   3                  ((unsigned int *)Data)[4]   = usVer_End;
 207   3              }
 208   2              }
 209   1      
 210   1          // Update auto-tracking window vertical range
 211   1          Data[0] = 6;
 212   1          Data[1] = Y_INC;
 213   1          Data[2] = V_BND_STA_L_78;
 214   1          Data[3] = Data[7];    
 215   1          Data[4] = Data[9];
 216   1          Data[5] = (Data[6] << 4) + Data[8];
 217   1          Data[6] = 0;
 218   1          RTDWrite(Data);
 219   1      
 220   1          return ERROR_SUCCEED;
 221   1      }
 222          
 223          //--------------------Measure Horizontal Position-------------------//
 224          // Return Message => ERROR_SUCCESS   : Success                      //
 225          //                   ERROR_INPUT     : 1. IVS or IHS changed        //
 226          //                                     2. underflow or overflow     //
 227          //                   ERROR_TIMEOUT   : Measure Time_Out             //
 228          //                   ERROR_NOTACTIVE : No Avtive Image              //
 229          //------------------------------------------------------------------//
 230          unsigned char Measure_PositionH(unsigned char NM_H)
 231          {
 232   1          unsigned int    usLBound, usRBound;
 233   1      
 234   1          RTDRead(MEAS_HI_51, 0x02, Y_INC);
 235   1          Data[2] = Data[1] & 0x0f;
 236   1          Data[3] = Data[0];
 237   1      
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 5   

 238   1          usRBound    = usADC_Clock + (unsigned int)stMUD.CLOCK - 128;
 239   1          usLBound    = (unsigned long)usRBound * ((unsigned int *)Data)[1] / usStdHS;
 240   1      
 241   1          usRBound    = usRBound - 2 + MEASURE_HDEALY - PROGRAM_HDELAY + ucH_Min_Margin - stMUD.H_POSITION;
 242   1      
 243   1          usLBound    = usLBound + 20 + ucH_Min_Margin + MEASURE_HDEALY;
 244   1          usLBound    = usLBound > ((unsigned int)stMUD.H_POSITION + PROGRAM_HDELAY) ? (usLBound - PROGRAM_HDELA
             -Y - stMUD.H_POSITION) : 1;
 245   1      
 246   1          NM_H        = NM_H & 0xfc;
 247   1      
 248   1          Data[0]     = 6;
 249   1          Data[1]     = Y_INC;
 250   1          Data[2]     = H_BND_STA_L_75;
 251   1          Data[3]     = (unsigned char)usLBound;
 252   1          Data[4]     = (unsigned char)usRBound;
 253   1          Data[5]     = ((unsigned char)(usLBound >> 4) & 0x70) | ((unsigned char)(usRBound >> 8) & 0x0f);    
 254   1          Data[6]     = 8;
 255   1          Data[7]     = Y_INC;
 256   1          Data[8]     = MARGIN_R_7B;
 257   1          Data[9]     = NM_H;
 258   1          Data[10]    = NM_H;
 259   1          Data[11]    = NM_H;
 260   1          Data[12]    = 0x00;
 261   1          Data[13]    = 0x01;
 262   1          Data[14]    = 0;
 263   1          RTDWrite(Data);
 264   1      
 265   1          Wait_Finish();
 266   1      
 267   1          if (ERROR_SUCCEED != Data[0])   return Data[0];
 268   1      
 269   1          RTDRead(HOR_START_84, 4, Y_INC);
 270   1      
 271   1          // Translate byte order : RTD little indian -> 8051 big indian
 272   1          Data[4] = Data[3] & 0x0f;
 273   1          Data[5] = Data[2];
 274   1          Data[2] = Data[1] & 0x0f;
 275   1          Data[3] = Data[0];
 276   1          
 277   1          if (0x07FF <= ((unsigned int *)Data)[1])     return  ERROR_NOTACTIVE;
 278   1          
 279   1      
 280   1          RTDRead(VGIP_CTRL_04, 1, N_INC);
 281   1      
 282   1          //if (0x14 == (Data[0] & 0x1c))
 283   1              if (0x08 == (Data[0] & 0x0c))
 284   1          {
 285   2              ((unsigned int *)Data)[1]   += 0x03;
 286   2              ((unsigned int *)Data)[2]   += 0x03;
 287   2          }
 288   1      
 289   1      /*  
 290   1          usH_Start   = MEAS_H_STA_OFFSET < ((unsigned int *)Data)[1] ? ((unsigned int *)Data)[1] - MEAS_H_STA_O
             -FFSET : 0x0000;
 291   1          usH_End     = MEAS_H_END_OFFSET < ((unsigned int *)Data)[2] ? ((unsigned int *)Data)[2] - MEAS_H_END_O
             -FFSET : 0x0fff;
 292   1      
 293   1          if (0x0000 != usH_Start)    usH_Start   = usH_Start + stMUD.H_POSITION - 128;
 294   1          if (0x0fff != usH_End)      usH_End     = usH_End + stMUD.H_POSITION - 128;
 295   1      */        
 296   1      
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 6   

 297   1          usH_Start   = (((unsigned int *)Data)[1] + stMUD.H_POSITION) >= (128 + MEAS_H_STA_OFFSET)
 298   1                      ? (((unsigned int *)Data)[1] + stMUD.H_POSITION) - (128 + MEAS_H_STA_OFFSET) : 0x0000;
 299   1          usH_End     = (((unsigned int *)Data)[2] + stMUD.H_POSITION) >= (128 + MEAS_H_END_OFFSET)
 300   1                      ? (((unsigned int *)Data)[2] + stMUD.H_POSITION) - (128 + MEAS_H_END_OFFSET) : 0x0fff;
 301   1      
 302   1          return ERROR_SUCCEED;
 303   1      }
 304          
 305          //---------------Measure Vertical & Horizontal Position-------------//
 306          // Return Message => ERROR_SUCCESS   : Success                      //
 307          //                   ERROR_INPUT     : 1. IVS or IHS changed        //
 308          //                                     2. underflow or overflow     //
 309          //                   ERROR_TIMEOUT   : Measure Time_Out             //
 310          //                   ERROR_NOTACTIVE : No Avtive Image              //
 311          //------------------------------------------------------------------//
 312          unsigned char Measure_PositionN(unsigned char NM)
 313          {
 314   1          unsigned char Result;
 315   1          
 316   1          Result  = Measure_PositionV(NM);
 317   1      
 318   1          if (ERROR_SUCCEED == Result)    
 319   1          {
 320   2              Result  = Measure_PositionH(NM);
 321   2          }
 322   1              
 323   1          return Result;
 324   1      }
 325          
 326          /*
 327          //------------------------------------------------------------------//
 328          //                           Auto Clock                             //
 329          //------------------------------------------------------------------//
 330          unsigned char Auto_Clock(void)
 331          {
 332              unsigned char   Result, Curr_PosH, Curr_PosV, Curr_Clock, Curr_Phase;   
 333              
 334              bAutoInProgress = 1;
 335              
 336              Curr_PosH   = stMUD.H_POSITION;     // Save current stMUD.H_POSITION
 337              Curr_PosV   = stMUD.V_POSITION;     // Save current stMUD.V_POSITION
 338              Curr_Clock  = stMUD.CLOCK;          // Save current stMUD.CLOCK 
 339              Curr_Phase  = stMUD.PHASE;          // Save current stMUD.PHASE
 340          
 341              if (ucV_Max_Margin < stMUD.V_POSITION)
 342              {
 343                  stMUD.V_POSITION    = ucV_Max_Margin;
 344                  Set_V_Position();
 345              }
 346          
 347              RTDCodeW(ADC_DEFAULT);
 348          
 349              ///////////////////////////////
 350              //   Measure  NOISE_MARGIN   //
 351              ///////////////////////////////
 352              Result      = Min_Noise_Margin();   // Data[0] : Noise Margin
 353              
 354              if (ERROR_SUCCEED == (Result & 0x80))
 355              {
 356                  Result  = Data[0];
 357          
 358                  stMUD.CLOCK &= 0xfc;    // stMUD.CLOCK must be times of 4
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 7   

 359          
 360                  if (stMUD.CLOCK != Curr_Clock || 28 > stMUD.CLOCK || 228 < stMUD.CLOCK)
 361                  {
 362                      Set_Clock();
 363                  }
 364                  
 365                  ///////////////////////////////
 366                  //       Adjust Clock        //
 367                  ///////////////////////////////
 368                  Result  = Auto_Clock_Do(Result);
 369                  
 370                  if (ERROR_SUCCEED != (Result & 0x80))
 371                  {
 372                      if (stMUD.CLOCK != Curr_Clock)
 373                      {   
 374                          // Fail to find out suitable clock. Restore original clock and H position.
 375                          stMUD.CLOCK         = Curr_Clock;
 376                          stMUD.H_POSITION    = Curr_PosH;
 377          
 378                          Set_Clock();
 379                          Set_H_Position();
 380                      }
 381                  }
 382                  else
 383                  {
 384                      if (stMUD.CLOCK != Curr_Clock)
 385                      {
 386                          stMUD.H_POSITION    = usH_Start + 128 + 64 - usIPH_ACT_STA - (stMUD.CLOCK >> 1);
 387          
 388                          if (ucH_Max_Margin < stMUD.H_POSITION)
 389                              stMUD.H_POSITION    = ucH_Max_Margin;
 390                          else if (ucH_Min_Margin > stMUD.H_POSITION)
 391                              stMUD.H_POSITION    = ucH_Min_Margin;
 392                                          
 393                          Set_H_Position();
 394          
 395                          Save_MUD(ucMode_Curr);
 396                      }
 397                  }
 398              }
 399          
 400              // Restore ADC Gain/Offset
 401              SetADC_GainOffset();
 402              
 403              // Restore ADC phase 
 404              stMUD.PHASE = Curr_Phase;
 405              Set_Phase(stMUD.PHASE);
 406          
 407              // Restore vertical position
 408              if (Curr_PosV != stMUD.V_POSITION)
 409              {
 410                  stMUD.V_POSITION    = Curr_PosV;
 411                  Set_V_Position();
 412              }
 413          
 414              bAutoInProgress = 0;
 415          
 416              return Result;
 417          }
 418          */
 419          void Read_Auto_Info(unsigned char index)
 420          {
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 8   

 421   1           if(index == 0) return;
 422   1      
 423   1               RTDRead(AUTO_PHASE0_88, 4, Y_INC);
 424   1      
 425   1            Data[index << 2] = Data[3];
 426   1            Data[(index << 2) + 1] = Data[2];
 427   1            Data[(index << 2) + 2] = Data[1];
 428   1            Data[(index << 2) + 3] = Data[0];
 429   1      
 430   1      }
 431          
 432          unsigned char FindColor()
 433          {
 434   1      unsigned long ulTemp0;
 435   1      unsigned char ucDetect,ucResult,ucPhase;
 436   1      
 437   1      RTDSetByte(DIFF_THRED_7E, 0x28);
 438   1      
 439   1          ulTemp0     = 0;
 440   1          ucDetect    = 0x77;
 441   1          do
 442   1          {
 443   2              ucResult    = COLORS_BLUE;
 444   2              ucPhase     = COLORS_BLUE;
 445   2              do
 446   2              {
 447   3                  RTDSetByte(MARGIN_B_7D, ucPhase);
 448   3                  RTDSetByte(AUTO_ADJ_CTRL_7F, ucDetect);
 449   3      
 450   3                  Wait_Finish();
 451   3                  if (ERROR_SUCCEED != Data[0])   return Data[0];
 452   3      
 453   3                  Read_Auto_Info(1);
 454   3      
 455   3                  if (ulTemp0 < ((unsigned long *)Data)[1])
 456   3                  {
 457   4                      ulTemp0     = ((unsigned long *)Data)[1];
 458   4                      ucResult    = ucPhase;
 459   4      
 460   4                      if (0x8000 < ulTemp0)   break;
 461   4                  }
 462   3      
 463   3                  if (COLORS_BLUE == ucPhase)
 464   3                      ucPhase = COLORS_GREEN;
 465   3                  else if (COLORS_GREEN == ucPhase)
 466   3                      ucPhase = COLORS_RED;
 467   3                  else
 468   3                      break;
 469   3              }
 470   2              while (1);
 471   2      
 472   2              if (0 != ulTemp0 || 0x7b != ucDetect)   break;
 473   2      
 474   2              ucDetect    = 0x77;
 475   2          }
 476   1          while (1);
 477   1      
 478   1          return ERROR_SUCCEED;
 479   1      }
 480          unsigned long GetMaxSum(unsigned char select)
 481          {
 482   1         unsigned char ucPhase,ucDetect;
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 9   

 483   1         unsigned long ulTemp0;
 484   1         ucPhase = 0; //0,8,16,24
 485   1         ulTemp0 = 0;
 486   1         Set_Phase(ucPhase);
 487   1         ucDetect    = (select == 0) ? 0x77 : 0x7b;
 488   1         
 489   1      #if(HARDWARE_AUTO)
 490   1      
 491   1         RTDSetByte(HW_AUTO_PHASE_9E,0x07);  //Step 8 auto phase
 492   1         Wait_For_IVS();
 493   1         //Wait_For_Event(EVENT_IVS);
 494   1         RTDSetByte(AUTO_ADJ_CTRL_7F, ucDetect);  //Auto start
 495   1         //Wait_For_Event(EVENT_IVS);
 496   1         Wait_For_IVS();
 497   1         for(ucPhase = 0;ucPhase < 4; ucPhase++)
 498   1         {
 499   2             //Wait_For_Event(EVENT_IVS);
 500   2                 Wait_For_IVS();
 501   2             Read_Auto_Info(1);
 502   2      
 503   2             if(ulTemp0 < ((unsigned long *)Data)[1])
 504   2             {
 505   3               ulTemp0   = ((unsigned long *)Data)[1] & 0xffffff00;
 506   3             }
 507   2         }
 508   1         RTDSetByte(HW_AUTO_PHASE_9E,0x00);  //Switch back to software auto phase
 509   1         Wait_Finish();
 510   1         if(ERROR_SUCCEED != Data[0])     return (Data[0] & 0x000000ff);
 511   1         
 512   1      #else
                 while(1)
                 {
                    RTDSetByte(AUTO_ADJ_CTRL_7F, ucDetect);
                    Wait_Finish();
                    if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                    Read_Auto_Info(1);
              
                         if (ulTemp0 < ((unsigned long *)Data)[1])
                     {
                              ulTemp0     = ((unsigned long *)Data)[1];
                     }
                         ucPhase += 0x20;
                         if(ucPhase > 0x60)
                              break;
              
                         Set_Phase(ucPhase);
                      }
              #endif
 532   1          return ulTemp0;
 533   1      }
 534          //------------------------------------------------------------------//
 535          // Return Message => ERROR_SUCCESS   : Success                      //
 536          //                   ERROR_TOO_SMALL : Measure Result << ACT_WIDTH  //
 537          //                   ERROR_TOO_BIG   : Measure Result >> ACT_WIDTH  //
 538          //                   ERROR_INPUT     : 1. IVS or IHS changed        //
 539          //                                     2. underflow or overflow     //
 540          //                   ERROR_TIMEOUT   : Measure Time_Out             //
 541          //                                     Process Time_Out             //
 542          //                   ERROR_NOTACTIVE : No Avtive Image              //
 543          //------------------------------------------------------------------//
 544          unsigned char Auto_Clock_Do(unsigned char NM)
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 10  

 545          {
 546   1      #if(0)
              
                  unsigned char   ucResult;
                  unsigned char   count, delta, stop;    
                      
                  ///////////////////////////////
                  //  Measure (V) Start & End  //
                  ///////////////////////////////
                  ucResult    = Measure_PositionV(NM);
              
                  if (ERROR_SUCCEED != (ucResult & 0x80))
                  {
                      if (ERROR_NOTACTIVE == ucResult)
                      {
                          if (0x80 < stMUD.CLOCK)
                          {
                              stMUD.CLOCK = 0x80;
                              Set_H_Position();
                              Set_Clock();
                          }
                          else
                          {
                              stMUD.CLOCK = 0x80;
                              Set_Clock();
                              Set_H_Position();
                          }
              
                          ucResult    = Measure_PositionV(NM);
                          
                          if (ERROR_SUCCEED != (ucResult & 0x80))     return ucResult;
                      }
                      else
                          return ucResult;
                  }
              
                  NM      = NM + 0x10;    // See Min_Noise_Margin(). Horizontal Measure Result is the same when applying
             - (NM + 0x10)
              
                  count   = 10;
                  do
                  {
                      ///////////////////////////////
                      //  Measure (H) Start & End  //
                      ///////////////////////////////
                      ucResult    = Measure_PositionH(NM);
              
                      if (ERROR_SUCCEED != (ucResult & 0x80))     return ucResult;
                      
                      usH_End = usH_End + 1 - usH_Start;
                        
                      // H_Active Delta
                      if (usH_End < usIPH_ACT_WID)
                          delta = (usIPH_ACT_WID - usH_End > 0x00ff) ? 0xff : (unsigned char)(usIPH_ACT_WID - usH_End);
                      else 
                          delta = (usH_End - usIPH_ACT_WID > 0x00ff) ? 0xff : (unsigned char)(usH_End - usIPH_ACT_WID);
              
                      if (0xc8 < delta)       // The difference is too large to fine-tune.
                      {
                          if (10 == count)
                          {
                              if (0x80 < stMUD.CLOCK)
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 11  

                              {
                                  stMUD.CLOCK = 0x80;
                                  Set_H_Position();
                                  Set_Clock();
                              }
                              else
                              {
                                  stMUD.CLOCK = 0x80;
                                  Set_Clock();
                                  Set_H_Position();
                              }
              
                              continue;
                          }
                          else
                              return (usH_End < usIPH_ACT_WID) ? ERROR_TOO_SMALL : ERROR_TOO_BIG;
                      }
                      
                      if (2 >= delta)     break;  // 1023,1024,1025,1026,1027
                      
                      delta   = (delta + (delta >> 2) + 2) & 0xfc;  // 4n number
              #if(ALIGN_LEFT == CLOCK_ALIGN)
                      // Adjust Clock
                      if (usH_End < usIPH_ACT_WID)    // delta < 0, Measure < Active
                      {
                          if ((178 - stMUD.CLOCK) < delta)    return ERROR_TOO_SMALL;
                  
                          stMUD.CLOCK  += delta;
                              
                          Set_Clock();
                          Set_H_Position();
                      }
                      else                            // delta >= 0, Measure >= Active
                      {
                          if ((stMUD.CLOCK - 78) < delta)     return ERROR_TOO_BIG;
                  
                          stMUD.CLOCK -= delta;
                              
                          Set_H_Position();
                          Set_Clock();
                      }   
              
              #else
                      // Adjust Clock
                      if (usH_End < usIPH_ACT_WID)    // delta < 0, Measure < Active
                      {
                          if ((228 - stMUD.CLOCK) < delta)    return ERROR_TOO_SMALL;
                  
                          stMUD.CLOCK += delta;
                              
                          Set_Clock();
                          Set_H_Position();
                      }
                      else                            // delta >= 0, Measure >= Active
                      {
                          if ((stMUD.CLOCK - 28) < delta)     return ERROR_TOO_BIG;
                  
                          stMUD.CLOCK -= delta;
                              
                          Set_H_Position();
                          Set_Clock();
                      }   
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 12  

              #endif
                  }
                  while (--count);
              
                  if (0 == count)  return ERROR_TIMEOUT;
              
                  stop    = 0;
              
                  while (1)
                  {
                      count   = 0x10;     // Phase 4 ~ 28 step 8 (4,12,20,28)
                      delta   = 0x00;
              
                      while (1)
                      {
                          Set_Phase(count);
                          
                          // Measure usH_Start & usH_End
                          ucResult    = Measure_PositionH(NM);
              
                          if (ERROR_SUCCEED != (ucResult & 0x80))
                          {
                              if (ERROR_NOTACTIVE == ucResult)
                              {
                                  // Input pattern is black/white vertical lines.
                                  if (0x70 == count)
                                  {
                                      Set_Phase(stMUD.PHASE); // Restore phase
                                      break;
                                  }
                                  else
                                  {
                                      count += 0x20;
                                      continue;
                                  }
                              }
              
                              Set_Phase(stMUD.PHASE); // Restore phase
              
                              return ucResult;
                          }
                          
                          usH_End     = usH_End + 1 - usH_Start;
              
                          ucResult    = (usH_End < usIPH_ACT_WID)
                                  ? 0x80 - (unsigned char)(usIPH_ACT_WID - usH_End)
                                  : 0x80 + (unsigned char)(usH_End - usIPH_ACT_WID);
                          
                          if (ucResult > delta)
                          {
                              delta   = ucResult;     // Save the biggest width
                          }
              
                          if (0x70 == count)
                          {
                              Set_Phase(stMUD.PHASE); // Restore phase
                              break;
                          }
              
                          count += 0x20;
                      }
              
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 13  

                      if (0x82 < delta)
                      {
                          stMUD.CLOCK -= 4;
              
                          Set_H_Position();
                          Set_Clock();
              
                          stop    = 1;
                      }
                      else if (0x80 > delta)
                      {
                          if (stop && (0x7f == delta))    break; 
              
                          stMUD.CLOCK += 4;
              
                          Set_Clock();
                          Set_H_Position();
              
                          delta   += 3;
              
                          if (stop)   break;
                      }
                      else    
                          break;
                  }
              
              #if (MORE_CLOCK)
                  if (0x84 > delta && 0x7c < delta)
                  {
                      unsigned long   ulTemp0, ulMaxVal;
                      unsigned char   ucPhase, ucDetect;
              
                      if (ERROR_SUCCEED != Measure_PositionN(NM))    return ERROR_ABORT;
              
                      // Set auto-tracking window
                      Data[0]     = 6;
                      Data[1]     = Y_INC;
                      Data[2]     = H_BND_STA_L_75;
                      Data[3]     = (unsigned char)(usH_Start + MEAS_H_STA_OFFSET - 2);
                      Data[4]     = (unsigned char)(usH_End + MEAS_H_END_OFFSET + 1);
                      Data[5]     = ((unsigned char)((usH_Start + MEAS_H_STA_OFFSET - 2) >> 4) & 0x70) | ((unsigned char
             -)((usH_End + MEAS_H_END_OFFSET + 1) >> 8) & 0x0f);
                      Data[6]     = 0;
                      RTDWrite(Data);
              
                      RTDSetByte(DIFF_THRED_7E, 0x50);
                      
                      ulTemp0     = 0;
                      ucDetect    = 0x7b;
                      ucResult    = COLORS_GREEN;
                      ucPhase     = COLORS_GREEN;
                      do
                      {
                          RTDSetByte(MARGIN_B_7D, ucPhase);
                          RTDSetByte(AUTO_ADJ_CTRL_7F, ucDetect);
              
                          Wait_Finish();
                          if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                          Read_Auto_Info(1);
              
                          if (ulTemp0 < ((unsigned long *)Data)[1])
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 14  

                          {
                              ulTemp0     = ((unsigned long *)Data)[1];
                              ucResult    = ucPhase;
              
                              if (0x10000 < ulTemp0)   break;
                          }
              
                          if (COLORS_GREEN == ucPhase)
                              ucPhase = COLORS_BLUE;
                          else if (COLORS_BLUE == ucPhase)
                              ucPhase = COLORS_RED;
                          else
                          {
                              if (0x10000 <= ulTemp0 || 0x77 == ucDetect)      break;
              
                              ulTemp0     = 0;
                              ucDetect    = 0x77;
                              ucPhase     = COLORS_GREEN;
                              ucResult    = COLORS_GREEN;
              
                              RTDSetByte(DIFF_THRED_7E, 0x70);
                          }
                      }
                      while (1);
                      
                      // Abort if no suitable color is found
                      if (0x8000 > ulTemp0)
                      {
                          return (28 > stMUD.CLOCK) ? ERROR_TOO_BIG : (228 < stMUD.CLOCK) ? ERROR_TOO_SMALL : ERROR_SUCC
             -EED;
                      }
              
                      // Save 4N clock
                      stop    = stMUD.CLOCK;
              
                      if (0x81 > delta)
                      {
                          stMUD.CLOCK = stMUD.CLOCK + 4;
                          Set_Clock();
                          Set_H_Position();
                      }
              
                      ulMaxVal    = 0;
                      delta       = 4;
                      do
                      {
                              
                          if (ERROR_SUCCEED != Measure_PositionN(NM))    return ERROR_ABORT;
              
                          // Set auto-tracking window
                          Data[0] = 6;
                          Data[1] = Y_INC;
                          Data[2] = H_BND_STA_L_75;
                          Data[3] = (unsigned char)(usH_Start + MEAS_H_STA_OFFSET - 2);
                          Data[4] = (unsigned char)(usH_End + MEAS_H_END_OFFSET + 1);
                          Data[5] = ((unsigned char)((usH_Start + MEAS_H_STA_OFFSET - 2) >> 4) & 0x70) | ((unsigned char
             -)((usH_End + MEAS_H_END_OFFSET + 1) >> 8) & 0x0f);
                          Data[6] = 0;
                          RTDWrite(Data);
                          
                          // Select color for auto-phase tracking
                          RTDSetByte(MARGIN_B_7D, ucResult);
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 15  

              
                          // Set threshold
                          RTDSetByte(DIFF_THRED_7E, (0x7b == ucDetect) ? 0x50 : 0x70);
              
                          ulTemp0 = 0;
                          ucPhase = 0x00;
                          do
                          {
                              Set_Phase(ucPhase);
              
                              RTDSetByte(AUTO_ADJ_CTRL_7F, ucDetect);
              
                              Wait_Finish();
                              if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                               Read_Auto_Info(1);
                              if (ulTemp0 < ((unsigned long *)Data)[1])   ulTemp0 = ((unsigned long *)Data)[1];
              
                              ucPhase += 0x10;
                          }
                          while (0x80 > ucPhase);
              
                          if (ulMaxVal < ulTemp0)
                          {
                              ulMaxVal    = ulTemp0;
                              count       = stMUD.CLOCK;
                          }
              
                          if (0x00 == delta)
                          {
                              if (128 < stMUD.CLOCK)
                              {
                                  // See if default clock is the best
                                  delta       = 0xff;
                                  stMUD.CLOCK = 128;
                                  Set_H_Position();
                                  Set_Clock();
                                  
                                  continue;
                              }
                              else
                                  break;
                          }
                          else if (0xff == delta)
                          {
                              break;
                          }
              
                          delta       -= 1;
                          stMUD.CLOCK -= 1;
                          Set_H_Position();
                          Set_Clock();
                      }
                      while (1); 
              
                      if (0x7b == ucDetect)
                          stMUD.CLOCK = ((unsigned long)0x38000 < ulMaxVal) ? count : stop;
                      else
                          stMUD.CLOCK = ((unsigned long)0x48000 < ulMaxVal) ? count : stop;
              
                      Set_Clock();
                      Set_H_Position();
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 16  

                      Set_Clock();
                  }
              #endif
              
              #else
 918   1          unsigned char   Result;
 919   1          unsigned char   count, delta, stop,start;    
 920   1          unsigned long   ulSum,ulCompare;
 921   1              ulCompare = 0;
 922   1              ulSum = 0;
 923   1              
 924   1          ///////////////////////////////
 925   1          //  Measure (V) Start & End  //
 926   1          ///////////////////////////////
 927   1          Result  = Measure_PositionV(NM);
 928   1      
 929   1          if (ERROR_SUCCEED != (Result & 0x80))   return Result;
 930   1      
 931   1          NM      = NM + 0x10;    // See Min_Noise_Margin(). Horizontal Measure Result is the same when applying
             - (NM + 0x10)
 932   1      
 933   1          count   = 10;
 934   1          do
 935   1          {
 936   2                 
 937   2              ///////////////////////////////
 938   2              //  Measure (H) Start & End  //
 939   2              ///////////////////////////////
 940   2              Result  = Measure_PositionH(NM);
 941   2      
 942   2              if (ERROR_SUCCEED != (Result & 0x80))    return Result;
 943   2              
 944   2              usH_End = usH_End + 1 - usH_Start;
 945   2                
 946   2              // H_Active Delta
 947   2              if (usH_End < usIPH_ACT_WID)
 948   2                  delta = (usIPH_ACT_WID - usH_End > 0x00ff) ? 0xff : (unsigned char)(usIPH_ACT_WID - usH_End);
 949   2              else 
 950   2                  delta = (usH_End - usIPH_ACT_WID > 0x00ff) ? 0xff : (unsigned char)(usH_End - usIPH_ACT_WID);
 951   2      
 952   2              //if (0xc0 < delta)       // The difference is too large to fine-tune.
 953   2              if((usIPH_ACT_WID/3) < delta)  //modified 2003/02/25
 954   2              {
 955   3                  return (usH_End < usIPH_ACT_WID) ? ERROR_TOO_SMALL : ERROR_TOO_BIG;
 956   3              }
 957   2              
 958   2              if (1 >= delta)     break;  // 1023,1024,1025,1026,1027
 959   2              
 960   2              delta   = delta + (delta >> 2);//& 0xfe;  // 4n number
 961   2      
 962   2      #if(ALIGN_LEFT == CLOCK_ALIGN)
 963   2              // Adjust Clock
 964   2              if (usH_End < usIPH_ACT_WID)    // delta < 0, Measure < Active
 965   2              {
 966   3                  if ((178 - stMUD.CLOCK) < delta)    return ERROR_TOO_SMALL;
 967   3          
 968   3                  stMUD.CLOCK  += delta;
 969   3                      
 970   3                  Set_Clock();
 971   3                  Set_H_Position();
 972   3              }
 973   2              else                            // delta >= 0, Measure >= Active
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 17  

 974   2              {
 975   3                  if ((stMUD.CLOCK - 78) < delta)     return ERROR_TOO_BIG;
 976   3          
 977   3                  stMUD.CLOCK -= delta;
 978   3                      
 979   3                  Set_H_Position();
 980   3                  Set_Clock();
 981   3              }   
 982   2      
 983   2      #else
                      // Adjust Clock
                      if (usH_End < usIPH_ACT_WID)    // delta < 0, Measure < Active
                      {
                          if ((228 - stMUD.CLOCK) < delta)    return ERROR_TOO_SMALL;
                  
                          stMUD.CLOCK  += delta;
                              
                          Set_Clock();
                          Set_H_Position();
                      }
                      else                            // delta >= 0, Measure >= Active
                      {
                          if ((stMUD.CLOCK - 28) < delta)     return ERROR_TOO_BIG;
                  
                          stMUD.CLOCK -= delta;
                              
                          Set_H_Position();
                          Set_Clock();
                      }   
                  
              #endif
1005   2          }
1006   1          while (--count);
1007   1      
1008   1              
1009   1      
1010   1          if (0 == count)  return ERROR_TIMEOUT;
1011   1      
1012   1          stop    = 0;
1013   1      
1014   1          while (1)
1015   1          {
1016   2              count   = 0x10;     // Phase 4 ~ 28 step 4 (4,8,12,16,20,24,28)
1017   2              delta   = 0xff;
1018   2      
1019   2              while (1)
1020   2              {
1021   3                        
1022   3      
1023   3                  Set_Phase(count);
1024   3                  
1025   3                  // Measure usH_Start & usH_End
1026   3                  Result  = Measure_PositionH(NM);
1027   3      
1028   3                  if (ERROR_SUCCEED != (Result & 0x80))
1029   3                  {
1030   4                      if (ERROR_NOTACTIVE == Result)
1031   4                      {
1032   5                          // Input pattern is black/white vertical lines.
1033   5                          if (0x70 == count)
1034   5                          {
1035   6                              Set_Phase(stMUD.PHASE); // Restore phase
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 18  

1036   6                              break;
1037   6                          }
1038   5                          else
1039   5                          {
1040   6                              count += 0x20;
1041   6                              continue;
1042   6                          }
1043   5                      }
1044   4      
1045   4                      Set_Phase(stMUD.PHASE); // Restore phase
1046   4      
1047   4                      return Result;
1048   4                  }
1049   3                  
1050   3                  usH_End = usH_End + 1 - usH_Start;
1051   3      
1052   3                  Result  = (usH_End < usIPH_ACT_WID)
1053   3                          ? 0x80 - (unsigned char)(usIPH_ACT_WID - usH_End)
1054   3                          : 0x80 + (unsigned char)(usH_End - usIPH_ACT_WID);
1055   3                  
1056   3                  if (Result < delta)
1057   3                  {
1058   4                      delta   = Result;       // Save the smallest width
1059   4                  }
1060   3      
1061   3                  if (0x70 == count)
1062   3                  {
1063   4                      Set_Phase(stMUD.PHASE); // Restore phase
1064   4                      break;
1065   4                  }
1066   3      
1067   3                  count += 0x10;
1068   3              }
1069   2              
1070   2              if (0x81 < delta)
1071   2              {
1072   3                  stMUD.CLOCK -= 1;
1073   3      
1074   3                  Set_H_Position();
1075   3                  Set_Clock();
1076   3      
1077   3                  stop    = 1;
1078   3              }
1079   2              else if (0x80 > delta)
1080   2              {
1081   3                  if (stop && (0x7f == delta))    break; 
1082   3      
1083   3                  stMUD.CLOCK += 1;
1084   3      
1085   3                  Set_Clock();
1086   3                  Set_H_Position();
1087   3      
1088   3                  if (stop)   break;
1089   3              }
1090   2              else    
1091   2                  break;
1092   2          }
1093   1          
1094   1          count = stMUD.PHASE;  // Record Current Phase
1095   1          start = stMUD.CLOCK ;
1096   1              
1097   1              
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 19  

1098   1              if(FindColor() != ERROR_SUCCEED) return ERROR_ABORT;
1099   1      // Set threshold
1100   1          RTDSetByte(DIFF_THRED_7E, 0x30);
1101   1      
1102   1              ulSum = GetMaxSum(1); //judge if pulse information large enough
1103   1          ulCompare = GetMaxSum(0);
1104   1      
1105   1              
1106   1      
1107   1              if((ulSum > 460000) || ((ulSum < 460000) && (ulCompare > 2000000)) )
1108   1              {
1109   2                      
1110   2                      ulCompare = 0;    
1111   2                      //    ulSum = 0;//GetMaxSum(0);
1112   2                      //////////////////////////////////////////////
1113   2                      if(0x80 < (start - 2) || 0x80 > start)
1114   2                      {
1115   3                              stMUD.CLOCK = 0x80;
1116   3                              Set_H_Position();
1117   3                              Set_Clock();
1118   3                              ulSum = GetMaxSum(0);
1119   3                              
1120   3                              if(ulCompare < ulSum)
1121   3                              {
1122   4                                      ulCompare = ulSum;
1123   4                                      Result = stMUD.CLOCK;
1124   4                              }
1125   3      
1126   3                              stMUD.CLOCK = start + 1;
1127   3                      }
1128   2                      else
1129   2                      {
1130   3                              stMUD.CLOCK = start;
1131   3                              Set_H_Position();
1132   3                              Set_Clock();
1133   3                              ulSum = GetMaxSum(0);
1134   3                      }
1135   2                      ////////////////////////////////////////////////
1136   2              
1137   2      
1138   2                      while(1)
1139   2                      {
1140   3                              if(ulCompare < ulSum)
1141   3                              {
1142   4                                      ulCompare = ulSum;
1143   4                                      Result = stMUD.CLOCK;
1144   4                              }
1145   3                              if(stMUD.CLOCK == start - 2)
1146   3                                      break;    
1147   3      
1148   3                              stMUD.CLOCK -= 1;
1149   3                              Set_Clock();
1150   3                              Set_H_Position();
1151   3                              ulSum = GetMaxSum(0);        
1152   3                      }
1153   2      
1154   2                      stMUD.CLOCK = Result;
1155   2                      stMUD.PHASE = count;
1156   2                      Set_Clock();
1157   2                      Set_H_Position();
1158   2                      Set_Phase(stMUD.PHASE);
1159   2          }  
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 20  

1160   1      
1161   1      
1162   1      
1163   1      #endif
1164   1          return (28 > stMUD.CLOCK) ? ERROR_TOO_BIG : (228 < stMUD.CLOCK) ? ERROR_TOO_SMALL : ERROR_SUCCEED;
1165   1      }
1166          
1167          //------------------------------------------------------------------//
1168          //                          Auto Position                           //
1169          //------------------------------------------------------------------//
1170          unsigned char Auto_Position(void)
1171          {
1172   1          unsigned char   Result, Curr_PosH, Curr_PosV;
1173   1      
1174   1          bAutoInProgress = 1;
1175   1      
1176   1          Curr_PosH   = stMUD.H_POSITION;     // Save current stMUD.H_POSITION
1177   1          Curr_PosV   = stMUD.V_POSITION;     // Save current stMUD.V_POSITION
1178   1      
1179   1          if (ucV_Max_Margin < stMUD.V_POSITION)
1180   1          {
1181   2              stMUD.V_POSITION    = ucV_Max_Margin;
1182   2              Set_V_Position();
1183   2          }
1184   1      
1185   1          RTDCodeW(ADC_DEFAULT);
1186   1      
1187   1          ///////////////////////////////
1188   1          //   Measure  NOISE_MARGIN   //
1189   1          ///////////////////////////////
1190   1          Result  = Min_Noise_Margin();
1191   1      
1192   1          if (ERROR_SUCCEED == (Result & 0x80))
1193   1          {   
1194   2              ///////////////////////////////
1195   2              //    Adjust (H/V)Position   //
1196   2              ///////////////////////////////
1197   2              Result  = Auto_Position_Do(Data[0]);    // Noise margin returned by Min_Noise_Margin() is saved in
             - Data[0];
1198   2          }
1199   1      
1200   1          if (ERROR_SUCCEED == (Result & 0x80))
1201   1          {
1202   2              Save_MUD(ucMode_Curr);
1203   2          }
1204   1          else
1205   1          {
1206   2              stMUD.H_POSITION    = Curr_PosH;
1207   2              stMUD.V_POSITION    = Curr_PosV;
1208   2      
1209   2              Set_H_Position();
1210   2              Set_V_Position();
1211   2          }
1212   1          
1213   1          // Restore ADC Gain/Offset
1214   1          SetADC_GainOffset();
1215   1      
1216   1          bAutoInProgress = 0;
1217   1      
1218   1          return Result;
1219   1      }
1220          
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 21  

1221          //------------------------------------------------------------------//
1222          // Return Message => ERROR_SUCCESS   : Success                      //
1223          //                   ERROR_SUCCESS_1 : Vertical Start > Max         //
1224          //                   ERROR_SUCCESS_2 : Vertical Start < Min         //
1225          //                   ERROR_SUCCESS_4 : Vertical Start/End Fail      //
1226          //                   ERROR_SUCCESS_8 : Horizontal Start > Max       //
1227          //                   ERROR_SUCCESS_16: Horizontal Start < Min       //
1228          //                   ERROR_SUCCESS_32: Horizontal Start/End Fail    //
1229          //                   ERROR_INPUT     : 1. IVS or IHS changed        //
1230          //                                     2. underflow or overflow     //
1231          //                   ERROR_TIMEOUT   : Measure Time_Out             //
1232          //                   ERROR_NOTACTIVE : No Avtive Image              //
1233          //------------------------------------------------------------------//
1234          unsigned char Auto_Position_Do(unsigned char NM)
1235          {
1236   1          unsigned char   Result;//,ucTemp,ucTemp1;
1237   1      //      unsigned int    usTemp;
1238   1      
1239   1      /*
1240   1          
1241   1      ///////////////////////////////////////////////////////////
1242   1              stMUD.H_POSITION = 128;
1243   1          
1244   1              if(128 >= stMUD.H_POSITION)
1245   1          {
1246   1          ucTemp = 128 - stMUD.H_POSITION;
1247   1          
1248   1              if(stMUD.CLOCK > 128)
1249   1                 ucTemp1 = 128;
1250   1              else
1251   1                 ucTemp1 = stMUD.CLOCK;
1252   1      
1253   1              ucH_Min_Margin = 128 - ucTemp - (64 - (ucTemp1 >> 1));
1254   1              usIPH_ACT_STA = usIPH_ACT_STA + 50 - ucTemp - (64 - (ucTemp1 >> 1));
1255   1              usTemp = usIPH_ACT_STA;
1256   1      
1257   1              Set_H_Position();
1258   1          }
1259   1      ///////////////////////////////////////////////////////////////////    
1260   1      */
1261   1          Result      = Measure_PositionN(NM);
1262   1      
1263   1          if (ERROR_SUCCEED != (Result & 0x80))   return Result;
1264   1          Result  = ERROR_SUCCEED;
1265   1      
1266   1          /////////////////////////////////
1267   1          // Calculate Vertical Position //
1268   1          /////////////////////////////////
1269   1          NM  = 1;
1270   1          while (1)
1271   1          {
1272   2              if ((usIPV_ACT_STA + ucV_Max_Margin - 128) >= usVer_Start)
1273   2              {
1274   3                  if ((usIPV_ACT_STA + ucV_Min_Margin - 128) <= usVer_Start)
1275   3                  {
1276   4                      stMUD.V_POSITION = (usVer_Start + 128) - usIPV_ACT_STA;
1277   4                      Set_V_Position();
1278   4      
1279   4                      break;  // Success
1280   4                  }
1281   3                  else
1282   3                      Result  |= ERROR_SUCCESS_2;
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 22  

1283   3              }
1284   2              else
1285   2                  Result  |= ERROR_SUCCESS_1;
1286   2      
1287   2              // If we can't align upper bound, we try to align lower bound.
1288   2              if (NM && usVer_End > usIPV_ACT_LEN)
1289   2              {
1290   3                  usVer_Start = usVer_End - usIPV_ACT_LEN + 1;
1291   3                  NM          = 0;
1292   3              }
1293   2              else
1294   2              {
1295   3                  Result  |= ERROR_SUCCESS_4;
1296   3                  break;
1297   3              }
1298   2          }
1299   1          
1300   1          ///////////////////////////////////
1301   1          // Calculate Horizontal Position //
1302   1          ///////////////////////////////////
1303   1          NM  = 1;
1304   1          while (1)
1305   1          {
1306   2      #if(ALIGN_LEFT == CLOCK_ALIGN)
1307   2      
1308   2              if ((usIPH_ACT_STA + (stMUD.CLOCK >> 2) + ucH_Max_Margin - 32 - 128) >= usH_Start)
1309   2              {
1310   3      
1311   3                              //if(ucH_Min_Margin  == (128 - 10))
1312   3                  if(ucH_Min_Margin  <= 128 )
1313   3                                ((unsigned int*)Data)[0] = usH_Start + 128 - stMUD.H_POSITION + 50;//((unsigned int*)Data)[0] = usH_S
             -tart + ucTemp + 100;//((unsigned int*)Data)[0] = usH_Start + 10;
1314   3                              else
1315   3                                ((unsigned int*)Data)[0] = usH_Start;// + (stMUD.H_POSITION - 128) + 10;
1316   3      
1317   3                  //if ((usIPH_ACT_STA + (stMUD.CLOCK >> 1) + ucH_Min_Margin - 64 - 128) <= (usH_Start + 50))
1318   3                              if ((usIPH_ACT_STA + (stMUD.CLOCK >> 2) + ucH_Min_Margin - 32 - 128) <= ((unsigned int*)Data)[0])
1319   3                  {
1320   4                      //usH_Start is the actual distance from Hsync to active image
1321   4                          stMUD.H_POSITION    = usH_Start + 128 + 32 - usIPH_ACT_STA - (stMUD.CLOCK >> 2);
1322   4                                      Set_H_Position();
1323   4                      
1324   4                      break;  // Success
1325   4                  }
1326   3                  else
1327   3                      Result  |= ERROR_SUCCESS_16;
1328   3              }
1329   2              else
1330   2                  Result  |= ERROR_SUCCESS_8;
1331   2      
1332   2      
1333   2      #else
                      if ((usIPH_ACT_STA + (stMUD.CLOCK >> 1) + ucH_Max_Margin - 64 - 128) >= usH_Start)
                      {
              
                                      //if(ucH_Min_Margin  == (128 - 10))
                          if(ucH_Min_Margin  <= 128 )
                                        ((unsigned int*)Data)[0] = usH_Start + 128 - stMUD.H_POSITION + 100;//((unsigned int*)Data)[0] = usH_
             -Start + ucTemp + 100;//((unsigned int*)Data)[0] = usH_Start + 10;
                                      else
                                        ((unsigned int*)Data)[0] = usH_Start;// + (stMUD.H_POSITION - 128) + 10;
              
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 23  

                          //if ((usIPH_ACT_STA + (stMUD.CLOCK >> 1) + ucH_Min_Margin - 64 - 128) <= (usH_Start + 50))
                                      if ((usIPH_ACT_STA + (stMUD.CLOCK >> 1) + ucH_Min_Margin - 64 - 128) <= ((unsigned int*)Data)[0])
                          {
                              //usH_Start is the actual distance from Hsync to active image
                                  stMUD.H_POSITION    = usH_Start + 128 + 64 - usIPH_ACT_STA - (stMUD.CLOCK >> 1);
                                              Set_H_Position();
                              
                              break;  // Success
                          }
                          else
                              Result  |= ERROR_SUCCESS_16;
                      }
                      else
                          Result  |= ERROR_SUCCESS_8;
              
              #endif
1359   2              // If we can't align upper bound, we try to align lower bound.
1360   2              if (NM && usH_End > usIPH_ACT_WID)
1361   2              {
1362   3                  usH_Start   = usH_End - usIPH_ACT_WID + 1;
1363   3                  NM          = 0;
1364   3              }
1365   2              else
1366   2              {
1367   3                  Result  |= ERROR_SUCCESS_32;
1368   3                  break;
1369   3              }
1370   2          }
1371   1      /*
1372   1      //////////////////////////////////////////////////////////////////////////////
1373   1          if(ucH_Min_Margin == (128 - ucTemp))
1374   1              {
1375   1              if(usTemp != usIPH_ACT_STA)
1376   1                      {
1377   1                         stMUD.H_POSITION = stMUD.H_POSITION - (usTemp - usIPH_ACT_STA);
1378   1                         usIPH_ACT_STA = usTemp - 50 + ucTemp + (64 - (ucTemp1 >> 1));
1379   1                      }
1380   1                      else
1381   1                          usIPH_ACT_STA   = usIPH_ACT_STA - 50 + ucTemp + (64 - (ucTemp1 >> 1));
1382   1      
1383   1                      ucH_Min_Margin  = 128 - 50;   
1384   1                      Set_H_Position();
1385   1              }
1386   1      ////////////////////////////////////////////////////////////////////////////////
1387   1      */
1388   1          return Result;
1389   1      }
1390          
1391          unsigned char Min_Noise_Margin(void)
1392          {
1393   1          unsigned char   Result, Noise;
1394   1          unsigned int    Curr_StartH, Curr_EndH;
1395   1      
1396   1          Result  = Measure_PositionV(VERTICAL_MARGIN);
1397   1          
1398   1          if (ERROR_SUCCEED != (Result & 0x80))   return Result;
1399   1                  
1400   1          if (0 == usVer_Start)
1401   1          {
1402   2              Result  = Measure_PositionV(VERTICAL_MARGIN + 0x20);
1403   2              if (ERROR_SUCCEED != (Result & 0x80))   return Result;
1404   2          }
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 24  

1405   1          
1406   1          Noise   = 0x00;
1407   1          Result  = Measure_PositionH(Noise);
1408   1          if (ERROR_SUCCEED != (Result & 0x80))   return Result;
1409   1              
1410   1          Curr_StartH = usH_Start;    // Save H start position at noise margin = 0
1411   1          Curr_EndH   = usH_End;      // Save H end position at noise margin = 0
1412   1      
1413   1          do
1414   1          {
1415   2              Noise   = Noise + 0x10;
1416   2              Result  = Measure_PositionH(Noise);
1417   2      
1418   2              if (ERROR_SUCCEED != (Result & 0x80))   return Result;
1419   2          
1420   2              if (Curr_StartH >= usH_Start)
1421   2              {
1422   3                  Curr_StartH = usH_Start;
1423   3              }
1424   2              else if (0x08 < (usH_Start - Curr_StartH))
1425   2              {
1426   3                  break;  // A large gap of H start position is found.
1427   3              }
1428   2          }
1429   1          while (0x90 > Noise);
1430   1      
1431   1          if (0x80 < Noise)   return ERROR_NOISE_TOO_BIG;      
1432   1      
1433   1          while (1)
1434   1          {   
1435   2              Curr_StartH = usH_Start;
1436   2              Curr_EndH   = usH_End;
1437   2      
1438   2              Result  = Measure_PositionH(Noise + 0x28);
1439   2              
1440   2              if (ERROR_SUCCEED != (Result & 0x80))   return Result;
1441   2      
1442   2              if ((Curr_EndH - Curr_StartH) == (usH_End - usH_Start) || (Curr_EndH - Curr_StartH) >= (usH_End - 
             -usH_Start + 3))
1443   2              {
1444   3                  break;  // We got noise margin with stable horizontal start/end position.
1445   3              }
1446   2              
1447   2              if (0xa0 <= Noise)
1448   2              {
1449   3                  break;  // No stable horizontal start/end position are found.
1450   3              }
1451   2      
1452   2              Noise   = Noise + 0x10;        
1453   2              Result  = Measure_PositionH(Noise);
1454   2      
1455   2              if (ERROR_SUCCEED != (Result & 0x80))   return Result;
1456   2          };
1457   1      
1458   1          Data[0] = Noise + 0x10;
1459   1      
1460   1          return ERROR_SUCCEED;
1461   1      }
1462          
1463          unsigned char Auto_Phase(void)
1464          {
1465   1          unsigned char   Result, Curr_PosV;
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 25  

1466   1      
1467   1          bAutoInProgress = 1;
1468   1      
1469   1          Curr_PosV   = stMUD.V_POSITION;     // Save current stMUD.V_POSITION
1470   1      
1471   1          if (ucV_Max_Margin < stMUD.V_POSITION)
1472   1          {
1473   2              stMUD.V_POSITION    = ucV_Max_Margin;
1474   2              Set_V_Position();
1475   2          }
1476   1      
1477   1          // Set ADC to default
1478   1          RTDCodeW(ADC_DEFAULT);
1479   1      
1480   1          ///////////////////////////////
1481   1          //   Measure  NOISE_MARGIN   //
1482   1          ///////////////////////////////
1483   1          Result  = Min_Noise_Margin();
1484   1      
1485   1          if (ERROR_SUCCEED == (Result & 0x80))
1486   1          {   
1487   2              Result      = Auto_Phase_Do(Data[0]);   // Noise margin returned by Min_Noise_Margin() is saved in
             - Data[0];
1488   2          }
1489   1      
1490   1          if (ERROR_SUCCEED != (Result & 0x80))
1491   1          {
1492   2              // Restore Phase
1493   2              Set_Phase(stMUD.PHASE);
1494   2          }
1495   1          else
1496   1          {
1497   2              Save_MUD(ucMode_Curr);
1498   2          }
1499   1      
1500   1          // Restore ADC Gain/Offset
1501   1          SetADC_GainOffset();
1502   1      
1503   1          // Restore vertical position
1504   1          if (Curr_PosV != stMUD.V_POSITION)
1505   1          {
1506   2              stMUD.V_POSITION    = Curr_PosV;
1507   2              Set_V_Position();
1508   2          }
1509   1      
1510   1          bAutoInProgress = 0;
1511   1      
1512   1          return Result;
1513   1      }
1514          
1515          
1516          unsigned char Auto_Phase_Do(unsigned char NM)
1517          {
1518   1          unsigned char idata ucDetect, ucPhase, ucResult;
1519   1          unsigned long idata ulTemp0, ulTemp1, ulTemp2;
1520   1      
1521   1      /*      
1522   1          //reduce the bandwidth of ADC to prevent overshoot
1523   1          if(ucMode_Curr <= MODE_1280x1024x75HZ)
1524   1             RTDSetByte(ADC_REG_TEST_E9, 0x08);
1525   1          else if(ucMode_Curr < MODE_1024x0768x70HZ)
1526   1             RTDSetByte(ADC_REG_TEST_E9, 0x00);
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 26  

1527   1          else
1528   1             RTDSetByte(ADC_REG_TEST_E9, 0x10);
1529   1      */
1530   1      
1531   1          if (ERROR_SUCCEED != Measure_PositionN(NM))    return ERROR_ABORT;
1532   1      
1533   1          // Set auto-tracking window
1534   1          Data[0]     = 6;
1535   1          Data[1]     = Y_INC;
1536   1          Data[2]     = H_BND_STA_L_75;
1537   1          Data[3]     = (unsigned char)(usH_Start + MEAS_H_STA_OFFSET - 2);
1538   1          Data[4]     = (unsigned char)(usH_End + MEAS_H_END_OFFSET + 1);
1539   1          Data[5]     = ((unsigned char)((usH_Start + MEAS_H_STA_OFFSET - 2) >> 4) & 0x70) | ((unsigned char)((u
             -sH_End + MEAS_H_END_OFFSET + 1) >> 8) & 0x0f);
1540   1          Data[6]     = 0;
1541   1          RTDWrite(Data);
1542   1      
1543   1          RTDSetByte(DIFF_THRED_7E, 0x30);
1544   1      
1545   1          ulTemp0     = 0;
1546   1          ucDetect    = 0x7b;
1547   1          do
1548   1          {
1549   2              ucResult    = COLORS_GREEN;
1550   2              ucPhase     = COLORS_GREEN;
1551   2              do
1552   2              {
1553   3                  RTDSetByte(MARGIN_B_7D, ucPhase);
1554   3                  RTDSetByte(AUTO_ADJ_CTRL_7F, ucDetect);
1555   3      
1556   3                  Wait_Finish();
1557   3                  if (ERROR_SUCCEED != Data[0])   return Data[0];
1558   3      
1559   3                  Read_Auto_Info(1);
1560   3                  if (ulTemp0 < ((unsigned long *)Data)[1])
1561   3                  {
1562   4                      ulTemp0     = ((unsigned long *)Data)[1];
1563   4                      ucResult    = ucPhase;
1564   4      
1565   4                      if (0x8000 < ulTemp0)   break;
1566   4                  }
1567   3      
1568   3                  if (COLORS_GREEN == ucPhase)
1569   3                      ucPhase = COLORS_BLUE;
1570   3                  else if (COLORS_BLUE == ucPhase)
1571   3                      ucPhase = COLORS_RED;
1572   3                  else
1573   3                      break;
1574   3              }
1575   2              while (1);
1576   2      
1577   2              if (0 != ulTemp0 || 0x7b != ucDetect)   break;
1578   2      
1579   2              ucDetect    = 0x77;
1580   2          }
1581   1          while (1);
1582   1      
1583   1          // Abort if no suitable color is found
1584   1          if (0 == ulTemp0)   return ERROR_NOTACTIVE;
1585   1         // NM = COLORS_GREEN;
1586   1          // Select color for auto-phase tracking
1587   1          RTDSetByte(MARGIN_B_7D, NM | ucResult);
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 27  

1588   1      
1589   1      #if(1)
1590   1          //NM = 136;
1591   1              NM = 100;
1592   1      #else
                  // Find suitable threshold
                  // We use phase 8 and 24 to find out it
              
                  ucPhase = 0x20;
                  Set_Phase(ucPhase);
              
                  ucResult    = 0x28;
                  NM          = 0x00;
                  do
                  {
                      do
                      {
                          ucResult    += 0x20;
              
                          RTDSetByte(DIFF_THRED_7E, ucResult);
                          RTDSetByte(AUTO_ADJ_CTRL_7F, ucDetect);
              
                          Wait_Finish();
                          if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                          Read_Auto_Info(1);
              
                          if ((unsigned long)0x1000 > ((unsigned long *)Data)[1])
                          {
                              ucResult    -= 0x20;
                              break;
                          }
                      }
                      while (0x88 > ucResult);
              
                      if (0x88 == ucResult)
                      {
                          NM  = ucResult;
                          break;
                      }
                      else
                      {
                          if (0x20 == ucPhase)
                          {
                              NM  = ucResult;
              
                              ucPhase = 0x60;
                              Set_Phase(ucPhase);
                          }
                          else
                          {
                              if (NM < ucResult)      NM  = ucResult;
                              
                              break;
                          }
                      }
                  }
                  while (1);
              
                  // Set threshold
                  if(NM < 136) NM = 136;
              #endif
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 28  

1650   1      
1651   1          RTDSetByte(DIFF_THRED_7E, NM);
1652   1      
1653   1      #if(1)  //FAST_AUTO method 1
1654   1              // Set phase 30
1655   1                      Set_Phase(0x78);
1656   1                      Delay_Xms(1);
1657   1                      
1658   1                      RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
1659   1      
1660   1                      Wait_Finish();
1661   1                      if (ERROR_SUCCEED != Data[0])   return Data[0];
1662   1      
1663   1                      Read_Auto_Info(1);
1664   1            
1665   1                      ulTemp1     = ((unsigned long *)Data)[1];
1666   1      
1667   1      
1668   1      #if(HARDWARE_AUTO)
1669   1              ulTemp2     = ulTemp1;
1670   1                      ulTemp0     = 0;
1671   1              RTDSetByte(HW_AUTO_PHASE_9E,0x05);  //Step 2 auto phase
1672   1                      //Wait_For_Event(EVENT_IVS);
1673   1                      Wait_For_IVS();
1674   1                      RTDSetByte(AUTO_ADJ_CTRL_7F,0x77); // Auto start
1675   1                      //Wait_For_Event(EVENT_IVS);
1676   1                      Wait_For_IVS();
1677   1              for(ucDetect = 0;ucDetect < 16; ucDetect++)
1678   1              {
1679   2                     //Wait_For_Event(EVENT_IVS);
1680   2                                 Wait_For_IVS();
1681   2                     Read_Auto_Info(3);
1682   2                  /*   
1683   2                                 Data[0]     = 7;
1684   2                     Data[1]     = ADDR_EROM1;
1685   2                     Data[2]     = 0x40 + (ucDetect << 2);
1686   2                     Data[3]     = (unsigned char)(((unsigned long *)Data)[3] >> 12);
1687   2                     Data[4]     = (unsigned char)(((unsigned long *)Data)[3] >> 8);
1688   2                     Data[5]     = (unsigned char)(((unsigned long *)Data)[3] >> 4);
1689   2                     Data[6]     = 0x00;
1690   2                     
1691   2                                 I2CWrite(Data);
1692   2                                */ 
1693   2      
1694   2                    if(ulTemp0 < ((unsigned long *)Data)[3])
1695   2                    {
1696   3                         ulTemp0   = ((unsigned long *)Data)[3] & 0xffffff00; //Store the SOD of phase(n)
1697   3                                         ulTemp1   = ulTemp2;                                 //Store the SOD of phase(n-2)
1698   3                                         ucResult  = ucDetect << 3;                           //Save the phase
1699   3                    }
1700   2                    ulTemp2 = ((unsigned long*)Data)[3] & 0xffffff00;
1701   2                                
1702   2              }
1703   1                              Wait_Finish();
1704   1                              if (ERROR_SUCCEED != Data[0])   return Data[0];
1705   1      
1706   1              RTDSetByte(HW_AUTO_PHASE_9E,0x00);  //Switch back to software auto phase
1707   1      
1708   1      #else
                              // Set phase 0
                              Set_Phase(0x00);
                              Delay_Xms(1);
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 29  

                              
                              RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
              
                              Wait_Finish();
                              if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                              Read_Auto_Info(1);
                    
                              ulTemp0     = ((unsigned long *)Data)[1];
                              ulTemp2     = ulTemp0;
              
              
                              ucResult    = 0x00;
              
                              ucPhase     = 0x08;//2 step rought scan
                              do
                              {
                                      Set_Phase(ucPhase);
                                      Delay_Xms(1);
              
                                      RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
                                      
                                      Wait_Finish();
                                      if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                          Read_Auto_Info(3);
                     
              //                      ((unsigned long *)Data)[0]  = ulTemp1 + ulTemp2 + ((unsigned long *)Data)[1];
              
                                      if (ulTemp0 < ((unsigned long *)Data)[3])
                                      {
                                              ulTemp0     = ((unsigned long *)Data)[3];  //Save the SOD of phase(n)
                                              ulTemp1     = ulTemp2;                     //Save the SOD of phase(n-2)
                                              ucResult    = ucPhase;
                                      }
                                      
              
                                      ulTemp2 = ((unsigned long *)Data)[3];
              
                                      ucPhase = ucPhase + 0x08;
                              }
                              while (0x78 != ucPhase);
              
              
                              if((ucResult == 0x00) && (ulTemp1 > ulTemp2))//Compare the value of phase 28 & phase 30
                              {
                                   ucResult = 0x78;  //The maximum equal to phase 30
                                       ulTemp0 = ulTemp1; //Save the value of phase 30
                                       ulTemp1 = ulTemp2; //Save the value of phase 28
                              }
              #endif
1763   1      
1764   1              ucPhase = ucResult == 0x00 ? 0x7c : (ucResult - 0x04 );
1765   1              ulTemp2 = 0;
1766   1              ucDetect = 2;
1767   1                      
1768   1      
1769   1              Set_Phase(ucPhase); //set Phase(n-1)
1770   1                      Delay_Xms(1);
1771   1                      
1772   1                      RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
1773   1      
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 30  

1774   1                      Wait_Finish();
1775   1                      if (ERROR_SUCCEED != Data[0])   return Data[0];
1776   1              Read_Auto_Info(1);
1777   1              ulTemp2 = ((unsigned long*)Data)[1];   //Save the SOD of  phase(n-1)
1778   1                      
1779   1              ((unsigned long*)Data)[0] 
1780   1                      = ulTemp1 + ulTemp2 + ulTemp0 
1781   1              -((ulTemp1 > ulTemp2 ? ulTemp1 - ulTemp2 : ulTemp2 - ulTemp1)/2)
1782   1                      -((ulTemp2 > ulTemp0 ? ulTemp2 - ulTemp0 : ulTemp0 - ulTemp2)/2);
1783   1      
1784   1                      ulTemp1 = ((unsigned long*)Data)[0];
1785   1                      ucPhase = ucResult; 
1786   1              ucResult = ucResult == 0x00 ? 0x7c : ucResult - 0x04;
1787   1      
1788   1              do //detail scan by one step from phase(n-2) ~ pnase (n+2)
1789   1              {
1790   2                 ucPhase = (ucPhase == 0x7c) ? 0x00 : ucPhase + 0x04;
1791   2                 Set_Phase(ucPhase);
1792   2                     Delay_Xms(1);
1793   2                      
1794   2                         RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
1795   2      
1796   2                 Wait_Finish();
1797   2                         if (ERROR_SUCCEED != Data[0])   return Data[0];
1798   2      
1799   2                 Read_Auto_Info(3);
1800   2      
1801   2                ((unsigned long *)Data)[0]  
1802   2                 = ulTemp2 + ulTemp0 + ((unsigned long *)Data)[3]
1803   2                 - ((ulTemp0 > ulTemp2 ? ulTemp0 - ulTemp2 : ulTemp2 - ulTemp0) / 2)
1804   2                 - ((ulTemp0 > ((unsigned long *)Data)[3] ? ulTemp0 - ((unsigned long *)Data)[3] : ((unsigned lo
             -ng *)Data)[3] - ulTemp0) / 2);
1805   2      
1806   2                 if(((unsigned long*)Data)[0] > ulTemp1)
1807   2                 {
1808   3                     ulTemp1 = ((unsigned long*)Data)[0];
1809   3                     ucResult = (ucPhase == 0x00) ? 0x7c : ucPhase - 0x04;
1810   3                 }
1811   2                 ucDetect -= 1;
1812   2                 
1813   2                 ulTemp2 = ulTemp0;
1814   2                 ulTemp0 = ((unsigned long *)Data)[3];
1815   2      
1816   2              }while(ucDetect);
1817   1      
1818   1      
1819   1      #else   //FAST AUTO method 2
                              // Set phase 30
                              Set_Phase(0x78);
                              Delay_Xms(1);
                              
                              RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
              
                              Wait_Finish();
                              if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                              Read_Auto_Info(1);
                    
                              ulTemp2     = ((unsigned long *)Data)[1];
              
                              // Set phase 0
                              //Set_Phase(0x00 | ucDetect);
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 31  

                      Set_Phase(0x00);
                              Delay_Xms(1);
                              
                              RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
              
                              Wait_Finish();
                              if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                              Read_Auto_Info(2);
                     
              
                              ulTemp1 = ((unsigned long *)Data)[2];
              
                              ulTemp0     = 0;
                              ucResult    = 0x08;
                              ucPhase     = 0x08;//2 step rought scan
                              do
                              {
                                      Set_Phase(ucPhase);
                                      Delay_Xms(1);
              
                                      RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
                                      
                                      Wait_Finish();
                                      if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                          Read_Auto_Info(3);
                     
              //                      ((unsigned long *)Data)[0]  = ulTemp1 + ulTemp2 + ((unsigned long *)Data)[1];
              
                         ((unsigned long *)Data)[0]  
                                 = ulTemp2 + ulTemp1 + ((unsigned long *)Data)[3]
                          - ((ulTemp1 > ulTemp2 ? ulTemp1 - ulTemp2 : ulTemp2 - ulTemp1) / 2)
                          - ((ulTemp1 > ((unsigned long *)Data)[3] ? ulTemp1 - ((unsigned long *)Data)[3] : ((unsigned l
             -ong *)Data)[3] - ulTemp1) / 2);
              
              
                                      if (ulTemp0 < ((unsigned long *)Data)[0])
                                      {
                                              ulTemp0     = ((unsigned long *)Data)[0];
                                              ucResult    = ucPhase - 0x08;
                                      }
              
                                      ulTemp2 = ulTemp1;
                                      ulTemp1 = ((unsigned long *)Data)[3];
              
                                      ucPhase = ucPhase + 0x08;
                              }
                              while (0x78 != ucPhase);
              
              
              //              ((unsigned long *)Data)[0]  = ulTemp1 + ulTemp2 + ((unsigned long *)Data)[3];
              //              ((unsigned long *)Data)[1]  = ((unsigned long *)Data)[3] + ulTemp1 + ((unsigned long *)Data)[2];
              
              
                     ((unsigned long *)Data)[0]//phase26+phase28+phase30
                      = ulTemp2 + ulTemp1 + ((unsigned long *)Data)[1]
                      - ((ulTemp1 > ulTemp2 ? ulTemp1 - ulTemp2 : ulTemp2 - ulTemp1) / 2)
                      - ((ulTemp1 > ((unsigned long *)Data)[1] ? ulTemp1 - ((unsigned long *)Data)[1] : ((unsigned long 
             -*)Data)[1] - ulTemp1) / 2);
                     
                              
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 32  

              
                     ((unsigned long *)Data)[3]//phase28+phase30+phase0
                      = ulTemp1 + ((unsigned long *)Data)[1] + ((unsigned long *)Data)[2]
                      - ((((unsigned long *)Data)[1] > ulTemp1 ? ((unsigned long *)Data)[1] - ulTemp1 : ulTemp1 - ((unsi
             -gned long *)Data)[1]) / 2)
                      - ((((unsigned long *)Data)[1] > ((unsigned long *)Data)[2] ? ((unsigned long *)Data)[1] - ((unsig
             -ned long *)Data)[2] : ((unsigned long *)Data)[2] - ((unsigned long *)Data)[1]) / 2);
              
              
                              if (ulTemp0 < ((unsigned long *)Data)[0])
                              {
                                      ulTemp0     = ((unsigned long *)Data)[0];
                                      ucResult    = 0x70;  //ucResult = phase28
                              }
              
                              if (ulTemp0 < ((unsigned long *)Data)[3])
                              {
                                      ulTemp0     = ((unsigned long *)Data)[3];
                                      ucResult    = 0x78;  //ucResult = phase30
                              }
              
              
                      ucPhase = ucResult >= 0x08 ? (ucResult - 0x08) : (ucResult + 0x80 - 0x08);
                      ulTemp0 = 0;
                      ulTemp1 = 0;
                      ulTemp2 = 0;
                      ucDetect = 3;
              
                      Set_Phase(ucPhase); //set Phase(n-2)
                              Delay_Xms(1);
                              
                              RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
              
                              Wait_Finish();
                              if (ERROR_SUCCEED != Data[0])   return Data[0];
                      Read_Auto_Info(1);
                      ulTemp1 = ((unsigned long*)Data)[1];
              
                      ucPhase = (ucPhase == 0x7c) ? 0x00 : ucPhase + 0x04; //set Phase(n-1)
                      Set_Phase(ucPhase);
                              Delay_Xms(1);
                              
                              RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
              
                              Wait_Finish();
                              if (ERROR_SUCCEED != Data[0])   return Data[0];
                      Read_Auto_Info(2);
                      ulTemp2 = ((unsigned long*)Data)[2];
              
              
                      do //detail scan by one step from phase(n-2) ~ pnase (n+2)
                      {
                         ucPhase = (ucPhase == 0x7c) ? 0x00 : ucPhase + 0x04;
                         Set_Phase(ucPhase);
                             Delay_Xms(1);
                              
                                 RTDSetByte(AUTO_ADJ_CTRL_7F, 0x77);
              
                         Wait_Finish();
                                 if (ERROR_SUCCEED != Data[0])   return Data[0];
              
                         Read_Auto_Info(3);
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 33  

              
                        ((unsigned long *)Data)[0]  
                         = ulTemp1 + ulTemp2 + ((unsigned long *)Data)[3]
                         - ((ulTemp1 > ulTemp2 ? ulTemp1 - ulTemp2 : ulTemp2 - ulTemp1) / 2)
                         - ((ulTemp2 > ((unsigned long *)Data)[3] ? ulTemp2 - ((unsigned long *)Data)[3] : ((unsigned lo
             -ng *)Data)[3] - ulTemp2) / 2);
              
                         if(((unsigned long*)Data)[0] > ulTemp0)
                         {
                             ulTemp0 = ((unsigned long*)Data)[0];
                             ucResult = (ucPhase == 0x00) ? 0x7c : ucPhase - 0x04;
                         }
                         ucDetect -= 1;
                         
                         ulTemp1 = ulTemp2;
                         ulTemp2 = ((unsigned long *)Data)[3];
              
                      }while(ucDetect);
                      
              //        ucDebug_Value1 = ucResult;
              #endif        
1975   1      
1976   1                      stMUD.PHASE = ucResult;
1977   1                      Set_Phase(stMUD.PHASE);
1978   1              
1979   1      /*
1980   1          //restore the bandwidth setup of ADC
1981   1          if(ucMode_Curr < MODE_1024x0768x70HZ)
1982   1              RTDSetByte(ADC_REG_TEST_E9, 0x08);
1983   1          else 
1984   1              RTDSetByte(ADC_REG_TEST_E9, 0x10);
1985   1      */
1986   1         
1987   1          return ERROR_SUCCEED;
1988   1      }
1989          
1990          unsigned char Auto_Config(void)
1991          {
1992   1          unsigned char   Result, Noise, Curr_PosH, Curr_PosV, Curr_Clock, Curr_Phase;
1993   1      
1994   1          unsigned char ucTemp1;
1995   1              unsigned int usTemp;
1996   1      
1997   1      
1998   1          bAutoInProgress = 1;
1999   1          
2000   1          Curr_PosH   = stMUD.H_POSITION;     // Save current stMUD.H_POSITION
2001   1          Curr_PosV   = stMUD.V_POSITION;     // Save current stMUD.V_POSITION
2002   1          Curr_Clock  = stMUD.CLOCK;          // Save current stMUD.CLOCK
2003   1          Curr_Phase  = stMUD.PHASE;          // Save current stMUD.PHASE
2004   1      
2005   1          if (ucV_Max_Margin < stMUD.V_POSITION)
2006   1          {
2007   2              stMUD.V_POSITION    = ucV_Max_Margin - 1;
2008   2              Set_V_Position();
2009   2          }
2010   1      
2011   1      //   RTDCodeW(ADC_DEFAULT);
2012   1      
2013   1      /////////original formula////////////////////////////////////////////
2014   1          //Set the H Position center(without IHS_Delay)
2015   1      /*
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 34  

2016   1              stMUD.H_POSITION = 128; 
2017   1          
2018   1              if(128 >= stMUD.H_POSITION)
2019   1          {
2020   1          ucTemp = 128 - stMUD.H_POSITION; 
2021   1          
2022   1              if(stMUD.CLOCK > 128)
2023   1                 ucTemp1 = 128;
2024   1              else
2025   1                 ucTemp1 = stMUD.CLOCK;
2026   1      
2027   1          //According to the H_Position adjust the IHS pre-delay
2028   1              ucH_Min_Margin = 128 - ucTemp - (64 - (ucTemp1 >> 1));
2029   1          //Return the IPH_ACT_STA to the original one first,and compensate the IHS pre-delay
2030   1          //The h position must be equal after change the IHS delay and IPH_ACT_STA
2031   1              usIPH_ACT_STA = usIPH_ACT_STA + 50 - ucTemp - (64 - (ucTemp1 >> 1));
2032   1              usTemp = usIPH_ACT_STA;
2033   1      
2034   1              Set_H_Position();
2035   1          }
2036   1              */
2037   1      ///////////////////////////////////////////////////////////////////    
2038   1      
2039   1      ////////////////////////////////////////////////////////////////////
2040   1          //Set the H Position center(without IHS_Delay)
2041   1      
2042   1              stMUD.H_POSITION = 128; 
2043   1          
2044   1              
2045   1          //ucTemp = 128 - stMUD.H_POSITION; 
2046   1          
2047   1              if(stMUD.CLOCK > 128)
2048   1                 ucTemp1 = 128;
2049   1              else
2050   1                 ucTemp1 = stMUD.CLOCK;
2051   1      
2052   1          //According to the H_Position adjust the IHS pre-delay
2053   1              ucH_Min_Margin = 128 - (64 - (ucTemp1 >> 1));
2054   1          //Return the IPH_ACT_STA to the original one first,and compensate the IHS pre-delay
2055   1          //The h position must be equal after change the IHS delay and IPH_ACT_STA
2056   1          usIPH_ACT_STA   = CAP_WIN[ucMode_Curr][1];
2057   1          
2058   1          if(ucMode_Curr < MODE_0800x0600x75HZ)
2059   1                      Data[0] = 2;
2060   1          else if(ucMode_Curr < MODE_1280x1024x75HZ)
2061   1                      Data[0] = 5;
2062   1          else
2063   1                      Data[0] = 3;
2064   1      
2065   1      //    usIPH_ACT_STA   = usIPH_ACT_STA + Data[0] - PROGRAM_HDELAY;
2066   1      
2067   1              //usIPH_ACT_STA = usIPH_ACT_STA + 50 - (64 - (ucTemp1 >> 1));
2068   1          usIPH_ACT_STA = CAP_WIN[ucMode_Curr][1] + Data[0] - PROGRAM_HDELAY - (64 - (ucTemp1 >> 1));
2069   1              
2070   1          usTemp = usIPH_ACT_STA;
2071   1      
2072   1              Set_H_Position();
2073   1              
2074   1          RTDSetByte(STATUS0_01, 0x00);  // Clear status
2075   1          RTDSetByte(STATUS1_1F, 0x00);  // Clear status
2076   1      
2077   1          
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 35  

2078   1      ///////////////////////////////////////////////////////////////////    
2079   1      
2080   1          ///////////////////////////////
2081   1          //   Measure  NOISE_MARGIN   //
2082   1          ///////////////////////////////
2083   1      
2084   1          Result  = Min_Noise_Margin();   
2085   1          Noise   = Data[0];
2086   1      
2087   1          
2088   1      
2089   1          
2090   1          //--------Auto_Clock-----------
2091   1          if (ERROR_SUCCEED == (Result & 0x80))
2092   1          {   
2093   2              stMUD.CLOCK = (stMUD.CLOCK) & 0xfc; // stMUD.CLOCK must be times of 4
2094   2      
2095   2              if (stMUD.CLOCK != Curr_Clock)  Set_Clock();
2096   2      
2097   2              ///////////////////////////////
2098   2              //       Adjust Clock        //
2099   2              ///////////////////////////////
2100   2              Result  = Auto_Clock_Do(Noise);
2101   2      
2102   2                      
2103   2              if (ERROR_SUCCEED != (Result & 0x80))
2104   2              {
2105   3                  if (stMUD.CLOCK != Curr_Clock)
2106   3                  {
2107   4                      // Fail to find out suitable clock. Restore original clock and H position.
2108   4                      stMUD.H_POSITION    = Curr_PosH;
2109   4                      stMUD.CLOCK         = Curr_Clock;
2110   4      
2111   4                      Set_Clock();
2112   4                      Set_H_Position();
2113   4                  }
2114   3              }
2115   2              else
2116   2              {
2117   3                  stMUD.H_POSITION    = usH_Start + 128 + 64 - usIPH_ACT_STA - (stMUD.CLOCK >> 1);
2118   3      
2119   3                  if (ucH_Max_Margin < stMUD.H_POSITION)
2120   3                      stMUD.H_POSITION    = ucH_Max_Margin;
2121   3                  else if (ucH_Min_Margin > stMUD.H_POSITION)
2122   3                      stMUD.H_POSITION    = ucH_Min_Margin;
2123   3      
2124   3                  Set_H_Position();
2125   3              }
2126   2          }
2127   1          
2128   1          //---------Auto_Phase-----------
2129   1          if (ERROR_SUCCEED == (Result & 0x80))
2130   1          {   
2131   2              Result      = Auto_Phase_Do(Noise);
2132   2      
2133   2              if (ERROR_SUCCEED != (Result & 0x80))
2134   2              {
2135   3                  // Restore Phase
2136   3                  stMUD.PHASE = Curr_Phase;
2137   3                  Set_Phase(stMUD.PHASE);
2138   3      
2139   3                  if (ERROR_NOTACTIVE == Result)      Result  = ERROR_SUCCEED;
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 36  

2140   3              }
2141   2          }
2142   1      
2143   1          //---------Auto_Position-----------
2144   1          if (ERROR_SUCCEED == (Result & 0x80))    
2145   1          {   
2146   2              ///////////////////////////////
2147   2              //    Adjust (H/V)Position   //
2148   2              ///////////////////////////////
2149   2              Result  = Auto_Position_Do(Noise);
2150   2      
2151   2              // Because Auto_Position_Do() never returns bit-7 error, we don't have to check here.
2152   2          }
2153   1          else
2154   1          {
2155   2              stMUD.V_POSITION    = Curr_PosV;
2156   2              Set_V_Position();
2157   2          }
2158   1          
2159   1      //    if (ERROR_SUCCEED == (Result & 0x80))   Save_MUD(ucMode_Curr);
2160   1      
2161   1      //////////////////////////////////////////////////////////////////////////////
2162   1      /*
2163   1          if(ucH_Min_Margin == (128 - ucTemp - (64 - (ucTemp1 >> 1))))
2164   1              {
2165   1              if(usTemp != usIPH_ACT_STA)
2166   1                      {  //if usIPH_ACT_STA has been modified, turn back to original set value
2167   1                 //stMUD.H_POSIITON also have to follow up the change of usIPH_ACT_STA
2168   1                         stMUD.H_POSITION = stMUD.H_POSITION - (usTemp - usIPH_ACT_STA);
2169   1                         usIPH_ACT_STA = usTemp - 50 + ucTemp + (64 - (ucTemp1 >> 1));
2170   1                      }
2171   1                      else
2172   1                          usIPH_ACT_STA   = usIPH_ACT_STA - 50 + ucTemp + (64 - (ucTemp1 >> 1));
2173   1      
2174   1                      ucH_Min_Margin  = 128 - 50;   
2175   1                      Set_H_Position();
2176   1              }
2177   1              Set_Phase(stMUD.PHASE);
2178   1              */
2179   1      ////////////////////////////////////////////////////////////////////////////////
2180   1      
2181   1      /////////////////////////////////////////////////////////////////////////////////
2182   1      
2183   1          if(ucH_Min_Margin == (128 - (64 - (ucTemp1 >> 1))))
2184   1              {
2185   2              if(usTemp != usIPH_ACT_STA)
2186   2                      {  //if usIPH_ACT_STA has been modified, turn back to original set value
2187   3                 //stMUD.H_POSIITON also have to follow up the change of usIPH_ACT_STA
2188   3                         //Data[3] = 78 - usIPH_ACT_STA; Save the usIPH_ACT_STA compensate value
2189   3                         stMUD.H_POSITION = stMUD.H_POSITION - (usTemp - usIPH_ACT_STA);
2190   3                         usIPH_ACT_STA = usTemp - 50 + (64 - (ucTemp1 >> 1));
2191   3                         Data[3] = 0x80 | (78 - stMUD.H_POSITION);        
2192   3               
2193   3                      }
2194   2                      else
2195   2                      {
2196   3                          usIPH_ACT_STA   = usIPH_ACT_STA - 50 + (64 - (ucTemp1 >> 1));
2197   3                              Data[3] = 0;
2198   3                      }
2199   2      
2200   2                      // Save Frame-Sync Settings
2201   2                 Data[0] = 4;
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 37  

2202   2                 Data[1] = ADDR_EROM1;
2203   2                 Data[2] = (ucMode_Curr - 1);          
2204   2                         
2205   2                 
2206   2      
2207   2                       if(0x80 < stMUD.H_POSITION)
2208   2               {
2209   3                   if(stMUD.H_POSITION - 0x80 < 10)
2210   3                   {
2211   4                       usIPH_ACT_STA += (stMUD.H_POSITION - 0x80);
2212   4                       Data[3] += (stMUD.H_POSITION - 0x80);
2213   4                       stMUD.H_POSITION = 0x80;                            
2214   4                    }
2215   3      
2216   3               }
2217   2               else if(0x80 > stMUD.H_POSITION)
2218   2               {
2219   3                    if(0x80 - stMUD.H_POSITION < 10)
2220   3                    {
2221   4                       usIPH_ACT_STA -= (0x80 - stMUD.H_POSITION);
2222   4      
2223   4                                   Data[3] = (0x80 - stMUD.H_POSITION ) | 0x80;
2224   4                       stMUD.H_POSITION = 0x80;
2225   4      
2226   4                    }
2227   3               }
2228   2      
2229   2                      I2CWrite(Data);
2230   2              Delay_Xms(SET_2404_DELAY);
2231   2      
2232   2                      ucH_Min_Margin  = 128 - 50;   
2233   2                      Set_H_Position();
2234   2              
2235   2              }
2236   1              Set_Phase(stMUD.PHASE);
2237   1          if (ERROR_SUCCEED == (Result & 0x80))   Save_MUD(ucMode_Curr);
2238   1      
2239   1          RTDSetByte(STATUS0_01, 0x00);  // Clear status
2240   1          RTDSetByte(STATUS1_1F, 0x00);  // Clear status
2241   1      
2242   1      /////////////////////////////////////////////////////////////////////////////////
2243   1      
2244   1          // Restore ADC Gain/Offset
2245   1      //  SetADC_GainOffset();
2246   1         
2247   1          bAutoInProgress = 0;
2248   1          Set_Phase(stMUD.PHASE);
2249   1              
2250   1          return Result;
2251   1      }
2252          
2253          unsigned char Auto_Balance(void)
2254          {
2255   1          unsigned char Result, Curr_PosV;
2256   1      
2257   1          bAutoInProgress = 1;
2258   1      
2259   1          Curr_PosV   = stMUD.V_POSITION;     // Save current stMUD.V_POSITION
2260   1      
2261   1          if (ucV_Max_Margin < stMUD.V_POSITION)
2262   1          {
2263   2              stMUD.V_POSITION    = ucV_Max_Margin;
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 38  

2264   2              Set_V_Position();
2265   2          }
2266   1      
2267   1          // Do ADC gain/offset adjust
2268   1          Result  = Tune_Balance();
2269   1      
2270   1          // Restore vertical position
2271   1          if (Curr_PosV != stMUD.V_POSITION)
2272   1          {
2273   2              stMUD.V_POSITION    = Curr_PosV;
2274   2              Set_V_Position();
2275   2          }
2276   1      
2277   1          if (ERROR_SUCCEED != Result)
2278   1          {
2279   2              // Restore ADC Gain/Offset
2280   2              Load_GUD2();
2281   2              SetADC_GainOffset();
2282   2          }
2283   1          else
2284   1          {
2285   2              stGUD0.CONTRAST         = 50;
2286   2              stGUD0.RTD_R_CONTRAST   = 50;
2287   2              stGUD0.RTD_G_CONTRAST   = 50;
2288   2              stGUD0.RTD_B_CONTRAST   = 50;
2289   2              stGUD0.RTD_R_BRIGHT     = 50;
2290   2              stGUD0.RTD_G_BRIGHT     = 50;
2291   2              stGUD0.RTD_B_BRIGHT     = 50;
2292   2              Set_Bright_Contrast();
2293   2      
2294   2      #if(ANALOG_CONTRAST)
2295   2              SetADC_Gain();
2296   2      #endif
2297   2      
2298   2              Save_GUD0();
2299   2      /*
2300   2              if (0 != stGUD2.AD_G_GAIN && 255 != stGUD2.AD_G_GAIN && 0 != stGUD2.AD_G_OFFSET && 255 != stGUD2.A
             -D_G_OFFSET)
2301   2              {
2302   2                  stGUD2.AD_G_GAIN    += 1;
2303   2                  stGUD2.AD_G_OFFSET  += 1;
2304   2              }
2305   2              SetADC_GainOffset();
2306   2      */
2307   2              Save_GUD2();
2308   2          }
2309   1      
2310   1          bAutoInProgress = 0;
2311   1      
2312   1          return Result;
2313   1      }
2314          
2315          unsigned char Tune_Balance(void)
2316          {
2317   1          unsigned char   Color, Count, Result, Margin, FineTune, Offset_Stop,ucTemp = 0;
2318   1          
2319   1          FineTune    = 0;
2320   1      
2321   1      #if(ANALOG_CONTRAST)
2322   1          ucTemp = stGUD0.CONTRAST;
2323   1          stGUD0.CONTRAST = 50;
2324   1              SetADC_Gain();
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 39  

2325   1      #endif
2326   1      
2327   1          RTDCodeW(ADC_DEFAULT);
2328   1          
2329   1          // Get usVer_Start, usVer_End, usH_Start, usH_Start
2330   1          if (ERROR_SUCCEED != Measure_PositionN(0x40))   return ERROR_ABORT;
2331   1      
2332   1          if (ERROR_SUCCEED != Measure_Color(SELECT_RED, COLOR_MAX))      return ERROR_ABORT;
2333   1          if (0x60 > Data[0])     return ERROR_ABORT;
2334   1          
2335   1          Margin  = Data[0];
2336   1      
2337   1          if (ERROR_SUCCEED != Measure_Color(SELECT_GREEN, COLOR_MAX))    return ERROR_ABORT;
2338   1          if (0x60 > Data[0])     return ERROR_ABORT;
2339   1      
2340   1          Margin  = Margin > Data[0] ? Data[0] : Margin;
2341   1      
2342   1          if (ERROR_SUCCEED != Measure_Color(SELECT_BLUE, COLOR_MAX))     return ERROR_ABORT;
2343   1          if (0x60 > Data[0])     return ERROR_ABORT;
2344   1      
2345   1          Margin  = Margin > Data[0] ? Data[0] : Margin;
2346   1      
2347   1          Margin  = (Margin - 0x20) & 0xfc;
2348   1      
2349   1          // Get usVer_Start, usVer_End, usH_Start, usH_Start
2350   1          if (ERROR_SUCCEED != Measure_PositionN(Margin))   return ERROR_ABORT;
2351   1      
2352   1      
2353   1      #if(0)
                  SetADC_Offset();
              #else
2356   1              SetADC_GainOffset();
2357   1      #endif
2358   1      
2359   1              Offset_Stop = 0;
2360   1          Color   = SELECT_BLUE;
2361   1          do
2362   1          {
2363   2              Count   = 0x30;
2364   2              
2365   2              do
2366   2              {
2367   3      #if (0)
                          
                         if(Offset_Stop == 0)
                         { 
                                         ///////////////////////////////
                                         // Minimum Adjustment (0x02) //
                                         ///////////////////////////////
                                         if (ERROR_SUCCEED != Measure_Color(Color, COLOR_MIN))   return ERROR_ABORT;
                                         Margin  = Data[0];
              
                                         if (0x0a < Margin)
                                         {
                                                 Change_ADC_Offset(Color, 0x08, 0);          // Increase Offset; Decrease Brightness
                                         }
                                         else if (0x02 < Margin)
                                         {
                                                 Change_ADC_Offset(Color, Margin - 0x02, 0); // Increase Offset; Decrease Brightness
                                         }
                                         else if (0x02 > Margin)
                                         {
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 40  

                                                 if (0x00 == Margin && 0 == FineTune)
                                                         Change_ADC_Offset(Color, 0x06, 1);              // Decrease Offset; Increase Brightness
                                                 else
                                                 {
                                                         Change_ADC_Offset(Color, 0x02 - Margin, 1);     // Decrease Offset; Increase Brightness
              
                                                         if(Color == SELECT_RED)
                                                         {
                                                                 Offset_Stop = 1;
                                                                 SetADC_Gain();
                                                                 Color   = SELECT_BLUE << 1;
                                                         }
                                                         break;
                                                 }
                                         }
                                 }
                                 else
                                 {
                                         ///////////////////////////////
                                         // Maximum Adjustment (0xf2) //
                                         ///////////////////////////////
                                         if (ERROR_SUCCEED != Measure_Color(Color, COLOR_MAX))   return ERROR_ABORT;
                                         Margin  = Data[0];
              
                                         if (0xf2 < Margin) 
                                         {
                                                 Result  = Margin - 0xf2;
                                                 
                                                 // Non-zero return value of Change_ADC_Gain() means ADC gain reaches maximum.
                                                 if (Change_ADC_Gain(Color, Result, 0))              // Increase Gain; Decrease Contrast
                                                 {
                                                         if (Change_ADC_Offset(Color, 4, 0))     break;  // Increase Offset; Decrease Brightness
                                                 }
                                         }
                                         else if (0xf2 > Margin)
                                         {
                                                 Result  = 0xf2 - Margin;
              
                                                 // Non-zero return value of Change_ADC_Gain() means ADC gain reaches minimum.                
                                                 if (Change_ADC_Gain(Color, Result, 1))                  // Decrease Gain; Increase Contrast
                                                 {
                                                         if (Change_ADC_Offset(Color, 4, 1))     break;  // Decrease Offset; Increase Brightness
                                                 }
                                         }
                                         else
                                                 break;
                                 }
              
                                 if (8 < Count && 0xf3 >= Result && 0xf1 <= Result && 0x03 >= Margin && 0x01 <= Margin)
                                 {
                                         FineTune    = 1;
                                         Count       = 8;
                                 }
              #endif
2441   3                              
2442   3      
2443   3      #if(1)
2444   3                  ///////////////////////////////
2445   3                  // Maximum Adjustment (0xf2) //
2446   3                  ///////////////////////////////
2447   3                  if (ERROR_SUCCEED != Measure_Color(Color, COLOR_MAX))   return ERROR_ABORT;
2448   3                  Margin  = Data[0];
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 41  

2449   3      
2450   3                  if (0xf2 < Margin)
2451   3                  {
2452   4                      Result  = Margin - 0xf2;
2453   4                      
2454   4                      // Non-zero return value of Change_ADC_Gain() means ADC gain reaches maximum.
2455   4                      if (Change_ADC_Gain(Color, Result, 0))              // Increase Gain; Decrease Contrast
2456   4                      {
2457   5                          if (Change_ADC_Offset(Color, 4, 0))     break;  // Increase Offset; Decrease Brightnes
             -s
2458   5                      }
2459   4                  }
2460   3                  else if (0xf2 > Margin)
2461   3                  {
2462   4                      Result  = 0xf2 - Margin;
2463   4      
2464   4                      // Non-zero return value of Change_ADC_Gain() means ADC gain reaches minimum.
2465   4                      if (Change_ADC_Gain(Color, Result, 1))              // Decrease Gain; Increase Contrast
2466   4                      {
2467   5                          if (Change_ADC_Offset(Color, 4, 1))     break;  // Decrease Offset; Increase Brightnes
             -s
2468   5                      }
2469   4                  }
2470   3      
2471   3                  Result  = Margin;
2472   3      
2473   3                  ///////////////////////////////
2474   3                  // Minimum Adjustment (0x02) //
2475   3                  ///////////////////////////////
2476   3                  
2477   3                  if (ERROR_SUCCEED != Measure_Color(Color, COLOR_MIN))   return ERROR_ABORT;
2478   3                  Margin  = Data[0];
2479   3      
2480   3                  if (0x0a < Margin)
2481   3                  {
2482   4                      Change_ADC_Offset(Color, 0x08, 0);          // Increase Offset; Decrease Brightness
2483   4                  }
2484   3                  else if (0x02 < Margin)
2485   3                  {
2486   4                      Change_ADC_Offset(Color, Margin - 0x02, 0); // Increase Offset; Decrease Brightness
2487   4                  }
2488   3                  else if (0x02 > Margin)
2489   3                  {
2490   4                      if (0x00 == Margin && 0 == FineTune)
2491   4                          Change_ADC_Offset(Color, 0x06, 1);              // Decrease Offset; Increase Brightnes
             -s
2492   4                      else
2493   4                          Change_ADC_Offset(Color, 0x02 - Margin, 1);     // Decrease Offset; Increase Brightnes
             -s
2494   4      
2495   4                  }
2496   3                  else if (0xf2 == Result)
2497   3                  {
2498   4                      break;
2499   4                  }
2500   3      
2501   3                  // Prevent redundant fine tune
2502   3                  if (8 < Count && 0xf3 >= Result && 0xf1 <= Result && 0x03 >= Margin && 0x01 <= Margin)
2503   3                  {
2504   4                      FineTune    = 1;
2505   4                      Count       = 8;
2506   4                  }
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 42  

2507   3      #endif
2508   3      
2509   3      #if(0)
                          ///////////////////////////////
                          // Maximum Adjustment (0xfd) //
                          ///////////////////////////////
                          if (ERROR_SUCCEED != Measure_Color(Color, COLOR_MAX))   return ERROR_ABORT;
                          Margin  = Data[0];
              
                          if (0xfd < Margin)
                          {
                              Result  = (0xff == Margin && 0 == FineTune) ? 0x06 : Margin - 0xfd;
                              
                              // Non-zero return value of Change_ADC_Gain() means ADC gain reaches maximum.
                              if (Change_ADC_Gain(Color, Result, 0))              // Increase Gain; Decrease Contrast
                              {
                                  if (Change_ADC_Offset(Color, 4, 0))     break;  // Increase Offset; Decrease Brightnes
             -s
                              }
                          }
                          else if (0xfd > Margin)
                          {
                              Result  = (0xf1 > Margin) ? 0x0c : 0xfd - Margin;
              
                              // Non-zero return value of Change_ADC_Gain() means ADC gain reaches minimum.
                              if (Change_ADC_Gain(Color, Result, 1))              // Decrease Gain; Increase Contrast
                              {
                                  if (Change_ADC_Offset(Color, 4, 1))     break;  // Decrease Offset; Increase Brightnes
             -s
                              }
                          }
              
                          Result  = Margin;
              
                          ///////////////////////////////
                          // Minimum Adjustment (0x02) //
                          ///////////////////////////////
                          
                          if (ERROR_SUCCEED != Measure_Color(Color, COLOR_MIN))   return ERROR_ABORT;
                          Margin  = Data[0];
              
                          if (0x0a < Margin)
                          {
                              Change_ADC_Offset(Color, 0x08, 0);          // Increase Offset; Decrease Brightness
                          }
                          else if (0x02 < Margin)
                          {
                              Change_ADC_Offset(Color, Margin - 0x02, 0); // Increase Offset; Decrease Brightness
                          }
                          else if (0x02 > Margin)
                          {
                              if (0x00 == Margin && 0 == FineTune)
                                  Change_ADC_Offset(Color, 0x06, 1);              // Decrease Offset; Increase Brightnes
             -s
                              else
                                  Change_ADC_Offset(Color, 0x02 - Margin, 1);     // Decrease Offset; Increase Brightnes
             -s
                          }
                          else if (0xfd == Result)
                          {
                              break;
                          }
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 43  

              
                          // Prevent redundant fine tune
                          if (8 < Count && 0xfe >= Result && 0xfc <= Result && 0x03 >= Margin && 0x01 <= Margin)
                          {
                              FineTune    = 1;
                              Count       = 8;
                          }
              #endif
2573   3      
2574   3              }
2575   2              while (--Count);
2576   2      
2577   2              Color   = Color >> 1;
2578   2          }
2579   1          while (Color);
2580   1      
2581   1      #if(ANALOG_CONTRAST)
2582   1          stGUD0.CONTRAST = ucTemp;
2583   1          SetADC_Gain();
2584   1      #endif 
2585   1          return ERROR_SUCCEED; 
2586   1      }
2587          
2588          unsigned char Measure_Color(unsigned char color, unsigned char margin)
2589          {
2590   1          RTDSetByte(MARGIN_B_7D, (SELECT_RED == color) ? COLORS_RED : (SELECT_GREEN == color) ? COLORS_GREEN : 
             -COLORS_BLUE);
2591   1      
2592   1      
2593   1          Data[0] = 9;
2594   1          Data[1] = Y_INC;
2595   1          Data[2] = H_BND_STA_L_75;
2596   1      
2597   1          Data[3] = (unsigned char)(usH_Start + MEAS_H_STA_OFFSET - 1);
2598   1          Data[4] = (unsigned char)(usH_End + MEAS_H_END_OFFSET);
2599   1          Data[5] = ((unsigned char)((usH_Start + MEAS_H_STA_OFFSET - 1) >> 4) & 0x70) | ((unsigned char)((usH_E
             -nd + MEAS_H_END_OFFSET) >> 8) & 0x0f);
2600   1      
2601   1          if (COLOR_MIN == margin)
2602   1          {
2603   2              Data[3] = 0x80;
2604   2              Data[4] = 0x00;
2605   2              Data[5] = 0x12;
2606   2      
2607   2              Data[6] = 9 < usVer_Start ? 9 : usVer_Start - 1;
2608   2              Data[7] = Data[6] + 1;
2609   2              Data[8] = 0;
2610   2          }
2611   1          else
2612   1          {
2613   2              Data[6] = (unsigned char)(usVer_Start + 1);
2614   2              Data[7] = (unsigned char)(usVer_End + 1);
2615   2              Data[8] = ((unsigned char)((usVer_Start + 1) >> 4) & 0x70) | ((unsigned char)((usVer_End + 1) >> 8
             -) & 0x0f);
2616   2          }
2617   1      
2618   1          Data[9] = 0;
2619   1          RTDWrite(Data);
2620   1      
2621   1          if (COLOR_MIN == margin)
2622   1              RTDSetByte(AUTO_ADJ_CTRL_7F, COLOR_MIN | 0x01); // Start the auto-adjust
2623   1              else
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 44  

2624   1              RTDSetByte(AUTO_ADJ_CTRL_7F, COLOR_MAX | 0x01); // Start the auto-adjust
2625   1      
2626   1          Wait_Finish();
2627   1      
2628   1          if (ERROR_SUCCEED != Data[0])   return ERROR_ABORT;
2629   1      
2630   1          RTDRead(AUTO_BAL_RESULT_88, 1, N_INC);  // Store result in Data[0]
2631   1         
2632   1          if (COLOR_MIN == margin)    Data[0] ^= 0xff;
2633   1      
2634   1      
2635   1      
2636   1          return ERROR_SUCCEED;
2637   1      }
2638          
2639          unsigned char Change_ADC_Gain(unsigned char color, unsigned char delta, unsigned char inc)
2640          {
2641   1          if (inc)
2642   1          {
2643   2              inc = 0;
2644   2      
2645   2              if (color & SELECT_RED)
2646   2              {
2647   3                  if (stGUD2.AD_R_GAIN > delta)
2648   3                      stGUD2.AD_R_GAIN    -= delta;
2649   3                  else
2650   3                  {
2651   4                      stGUD2.AD_R_GAIN    = 0;
2652   4                      inc |= SELECT_RED;
2653   4                  }
2654   3              }
2655   2              if (color & SELECT_GREEN)
2656   2              {
2657   3                  if (stGUD2.AD_G_GAIN > delta)
2658   3                      stGUD2.AD_G_GAIN    -= delta;
2659   3                  else
2660   3                  {
2661   4                      stGUD2.AD_G_GAIN    = 0;
2662   4                      inc |= SELECT_GREEN;
2663   4                  }
2664   3              }
2665   2              if (color & SELECT_BLUE)
2666   2              {
2667   3                  if (stGUD2.AD_B_GAIN > delta)
2668   3                      stGUD2.AD_B_GAIN    -= delta;
2669   3                  else
2670   3                  {
2671   4                      stGUD2.AD_B_GAIN    = 0;
2672   4                      inc |= SELECT_BLUE;
2673   4                  }
2674   3              }
2675   2          }
2676   1          else
2677   1          {
2678   2              if (color & SELECT_RED)
2679   2              {
2680   3                  if ((0xff - stGUD2.AD_R_GAIN) > delta)
2681   3                      stGUD2.AD_R_GAIN    += delta;
2682   3                  else
2683   3                  {
2684   4                      stGUD2.AD_R_GAIN    = 0xff;
2685   4                      inc |= SELECT_RED;
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 45  

2686   4                  }
2687   3              }
2688   2              if (color & SELECT_GREEN)
2689   2              {
2690   3                  if ((0xff - stGUD2.AD_G_GAIN) > delta)
2691   3                      stGUD2.AD_G_GAIN    += delta;
2692   3                  else
2693   3                  {
2694   4                      stGUD2.AD_G_GAIN    = 0xff;
2695   4                      inc |= SELECT_GREEN;
2696   4                  }
2697   3              }
2698   2              if (color & SELECT_BLUE)
2699   2              {
2700   3                  if ((0xff - stGUD2.AD_B_GAIN) > delta)
2701   3                      stGUD2.AD_B_GAIN    += delta;
2702   3                  else
2703   3                  {
2704   4                      stGUD2.AD_B_GAIN    = 0xff;
2705   4                      inc |= SELECT_BLUE;
2706   4                  }
2707   3              }
2708   2          }
2709   1      
2710   1          SetADC_Gain();
2711   1          
2712   1          return inc;
2713   1      }
2714          
2715          unsigned char Change_ADC_Offset(unsigned char color, unsigned char delta, unsigned char inc)
2716          {
2717   1          if (inc)
2718   1          {
2719   2              inc = 0;
2720   2      
2721   2              if (color & SELECT_RED)
2722   2              {
2723   3                  if (stGUD2.AD_R_OFFSET > delta)
2724   3                      stGUD2.AD_R_OFFSET  = stGUD2.AD_R_OFFSET - delta;
2725   3                  else
2726   3                  {
2727   4                      stGUD2.AD_R_OFFSET  = 0;
2728   4                      inc |= SELECT_RED;
2729   4                  }
2730   3              }
2731   2              if (color & SELECT_GREEN)
2732   2              {
2733   3                  if (stGUD2.AD_G_OFFSET > delta)
2734   3                      stGUD2.AD_G_OFFSET  = stGUD2.AD_G_OFFSET - delta;
2735   3                  else
2736   3                  {
2737   4                      stGUD2.AD_G_OFFSET  = 0;
2738   4                      inc |= SELECT_GREEN;
2739   4                  }
2740   3              }
2741   2              if (color & SELECT_BLUE)
2742   2              {
2743   3                  if (stGUD2.AD_B_OFFSET > delta)
2744   3                      stGUD2.AD_B_OFFSET  = stGUD2.AD_B_OFFSET - delta;
2745   3                  else
2746   3                  {
2747   4                      stGUD2.AD_B_OFFSET  = 0;
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 46  

2748   4                      inc |= SELECT_BLUE;
2749   4                  }
2750   3              }
2751   2          }
2752   1          else
2753   1          {
2754   2              if (color & SELECT_RED)
2755   2              {
2756   3                  if ((0xff - delta) > stGUD2.AD_R_OFFSET)
2757   3                      stGUD2.AD_R_OFFSET  = stGUD2.AD_R_OFFSET + delta;
2758   3                  else
2759   3                  {
2760   4                      stGUD2.AD_R_OFFSET  = 0xff;
2761   4                      inc |= SELECT_RED;
2762   4                  }
2763   3      
2764   3              }
2765   2              if (color & SELECT_GREEN)
2766   2              {
2767   3                  if ((0xff - delta) > stGUD2.AD_G_OFFSET)
2768   3                      stGUD2.AD_G_OFFSET  = stGUD2.AD_G_OFFSET + delta;
2769   3                  else
2770   3                  {
2771   4                      stGUD2.AD_G_OFFSET  = 0xff;
2772   4                      inc |= SELECT_GREEN;
2773   4                  }
2774   3      
2775   3              }
2776   2              if (color & SELECT_BLUE)
2777   2              {
2778   3                  if ((0xff - delta) > stGUD2.AD_B_OFFSET)
2779   3                      stGUD2.AD_B_OFFSET  = stGUD2.AD_B_OFFSET + delta;
2780   3                  else
2781   3                  {
2782   4                      stGUD2.AD_B_OFFSET  = 0xff;
2783   4                      inc |= SELECT_BLUE;
2784   4                  }
2785   3              }
2786   2          }
2787   1      
2788   1          SetADC_Offset();
2789   1          
2790   1          return inc;
2791   1      }
2792          
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 47  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com016F (BEGIN)
0000         L?0368:
0000 7800        R     MOV     R0,#LOW usH_End+01H
0002 E6                MOV     A,@R0
0003 2401              ADD     A,#01H
0005 FF                MOV     R7,A
0006 18                DEC     R0
0007 E4                CLR     A
0008 36                ADDC    A,@R0
0009 FE                MOV     R6,A
000A C3                CLR     C
000B EF                MOV     A,R7
000C 18                DEC     R0
000D 96                SUBB    A,@R0
000E FF                MOV     R7,A
000F EE                MOV     A,R6
0010 18                DEC     R0
0011 96                SUBB    A,@R0
0012 FE                MOV     R6,A
0013 7800        R     MOV     R0,#LOW usH_End
0015 F6                MOV     @R0,A
0016 08                INC     R0
0017 EF                MOV     A,R7
0018 F6                MOV     @R0,A
0019 7800        E     MOV     R0,#LOW usIPH_ACT_WID
001B         L?0369:
001B E6                MOV     A,@R0
001C FC                MOV     R4,A
001D 08                INC     R0
001E E6                MOV     A,@R0
001F FD                MOV     R5,A
0020 C3                CLR     C
0021 EF                MOV     A,R7
0022 9D                SUBB    A,R5
0023 EE                MOV     A,R6
0024 9C                SUBB    A,R4
0025 22                RET     
0026         L?0371:
0026         L?0372:
0026 FF                MOV     R7,A
0027 18                DEC     R0
0028 E4                CLR     A
0029 36                ADDC    A,@R0
002A C4                SWAP    A
002B F8                MOV     R0,A
002C 54F0              ANL     A,#0F0H
002E C8                XCH     A,R0
002F EF                MOV     A,R7
0030         L?0373:
0030 C4                SWAP    A
0031 540F              ANL     A,#0FH
0033 48                ORL     A,R0
0034 5470              ANL     A,#070H
0036 22                RET     
0037         L?0374:
0037 E500        E     MOV     A,Data+01H
0039 540F              ANL     A,#0FH
003B F500        E     MOV     Data+02H,A
003D 850000      E     MOV     Data+03H,Data
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 48  

0040 E500        E     MOV     A,stMUD+02H
0042 7800        E     MOV     R0,#LOW usADC_Clock+01H
0044         L?0375:
0044 26                ADD     A,@R0
0045 FF                MOV     R7,A
0046 E4                CLR     A
0047 18                DEC     R0
0048 36                ADDC    A,@R0
0049 CF                XCH     A,R7
004A 2480              ADD     A,#080H
004C 22                RET     
004D         L?0376:
004D         L?0377:
004D AF00        E     MOV     R7,Data+07H
004F AE00        E     MOV     R6,Data+06H
0051 AD00        E     MOV     R5,Data+05H
0053 AC00        E     MOV     R4,Data+04H
0055 22                RET     
0056         L?0378:
0056 E4                CLR     A
0057 FF                MOV     R7,A
0058 FE                MOV     R6,A
0059 FD                MOV     R5,A
005A FC                MOV     R4,A
005B         L?0379:
005B 7800        R     MOV     R0,#LOW ulTemp0
005D 120000      E     LCALL   ?C?LLDIDATA0
0060 C3                CLR     C
0061 020000      E     LJMP    ?C?ULCMP
0064         L?0380:
0064 E9                MOV     A,R1
0065 2D                ADD     A,R5
0066 FF                MOV     R7,A
0067 E4                CLR     A
0068 3C                ADDC    A,R4
0069 CF                XCH     A,R7
006A 241E              ADD     A,#01EH
006C FD                MOV     R5,A
006D E4                CLR     A
006E 3F                ADDC    A,R7
006F FC                MOV     R4,A
0070 EB                MOV     A,R3
0071 2406              ADD     A,#06H
0073 FF                MOV     R7,A
0074 EA                MOV     A,R2
0075 33                RLC     A
0076 FE                MOV     R6,A
0077 D3                SETB    C
0078 ED                MOV     A,R5
0079 9F                SUBB    A,R7
007A EC                MOV     A,R4
007B 9E                SUBB    A,R6
007C 22                RET     
007D         L?0381:
007D         L?0382:
007D C3                CLR     C
007E EF                MOV     A,R7
007F 9B                SUBB    A,R3
0080 FF                MOV     R7,A
0081 EE                MOV     A,R6
0082 9A                SUBB    A,R2
0083 FE                MOV     R6,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 49  

0084 ED                MOV     A,R5
0085 99                SUBB    A,R1
0086 FD                MOV     R5,A
0087 EC                MOV     A,R4
0088 98                SUBB    A,R0
0089 FC                MOV     R4,A
008A 22                RET     
008B         L?0383:
008B         L?0384:
008B E4                CLR     A
008C 7B02              MOV     R3,#02H
008E FA                MOV     R2,A
008F F9                MOV     R1,A
0090 F8                MOV     R0,A
0091 020000      E     LJMP    ?C?ULDIV
0094         L?0386:
0094         L?0387:
0094 750006      E     MOV     Data,#06H
0097         L?0388:
0097 E4                CLR     A
0098 F500        E     MOV     Data+01H,A
009A 750075      E     MOV     Data+02H,#075H
009D 22                RET     
009E         L?0389:
009E FE                MOV     R6,A
009F 7800        E     MOV     R0,#LOW ucH_Min_Margin
00A1 E6                MOV     A,@R0
00A2 F9                MOV     R1,A
00A3 7A00              MOV     R2,#00H
00A5 2F                ADD     A,R7
00A6 FF                MOV     R7,A
00A7 EA                MOV     A,R2
00A8 3E                ADDC    A,R6
00A9 FE                MOV     R6,A
00AA AB00        E     MOV     R3,stMUD
00AC C3                CLR     C
00AD EF                MOV     A,R7
00AE 9B                SUBB    A,R3
00AF 22                RET     
00B0         L?0390:
00B0 7800        R     MOV     R0,#LOW usH_Start
00B2 E6                MOV     A,@R0
00B3 F500        R     MOV     Curr_StartH,A
00B5 08                INC     R0
00B6 E6                MOV     A,@R0
00B7 F500        R     MOV     Curr_StartH+01H,A
00B9 08                INC     R0
00BA E6                MOV     A,@R0
00BB F500        R     MOV     Curr_EndH,A
00BD 08                INC     R0
00BE E6                MOV     A,@R0
00BF F500        R     MOV     Curr_EndH+01H,A
00C1 22                RET     
00C2         L?0391:
00C2 C3                CLR     C
00C3 EF                MOV     A,R7
00C4 9B                SUBB    A,R3
00C5 F500        E     MOV     Data+03H,A
00C7 EE                MOV     A,R6
00C8 9A                SUBB    A,R2
00C9 F500        E     MOV     Data+02H,A
00CB ED                MOV     A,R5
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 50  

00CC 99                SUBB    A,R1
00CD F500        E     MOV     Data+01H,A
00CF EC                MOV     A,R4
00D0 98                SUBB    A,R0
00D1 F500        E     MOV     Data,A
00D3 22                RET     
00D4         L?0392:
00D4 7800        R     MOV     R0,#LOW ulTemp0
00D6         L?0393:
00D6 120000      E     LCALL   ?C?LLDIDATA0
00D9 D3                SETB    C
00DA 020000      E     LJMP    ?C?ULCMP
00DD         L?0394:
00DD ED                MOV     A,R5
00DE 9F                SUBB    A,R7
00DF FF                MOV     R7,A
00E0 EC                MOV     A,R4
00E1 9E                SUBB    A,R6
00E2 CF                XCH     A,R7
00E3 2401              ADD     A,#01H
00E5 F6                MOV     @R0,A
00E6 E4                CLR     A
00E7 3F                ADDC    A,R7
00E8 18                DEC     R0
00E9 F6                MOV     @R0,A
00EA E4                CLR     A
00EB F500        R     MOV     NM,A
00ED 22                RET     
00EE         L?0395:
00EE AB07              MOV     R3,AR7
00F0 FA                MOV     R2,A
00F1 E4                CLR     A
00F2 F9                MOV     R1,A
00F3 F8                MOV     R0,A
00F4 AE00        E     MOV     R6,Data+02H
00F6 AF00        E     MOV     R7,Data+03H
00F8 FC                MOV     R4,A
00F9 FD                MOV     R5,A
00FA 020000      E     LJMP    ?C?LMUL
00FD         L?0396:
00FD 850000      R     MOV     ulCompare+03H,ulSum+03H
0100 850000      R     MOV     ulCompare+02H,ulSum+02H
0103 850000      R     MOV     ulCompare+01H,ulSum+01H
0106 850000      R     MOV     ulCompare,ulSum
0109 850000      R     MOV     Result,stMUD+02H
010C 22                RET     
010D         L?0397:
010D         L?0398:
010D 7800        E     MOV     R0,#LOW ucV_Max_Margin
010F E6                MOV     A,@R0
0110 FF                MOV     R7,A
0111 C3                CLR     C
0112 9500        E     SUBB    A,stMUD+01H
0114 22                RET     
0115         L?0399:
0115 120000      E     LCALL   ?C?LLDIDATA0
0118 EB                MOV     A,R3
0119 2F                ADD     A,R7
011A FF                MOV     R7,A
011B EA                MOV     A,R2
011C 3E                ADDC    A,R6
011D FE                MOV     R6,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 51  

011E E9                MOV     A,R1
011F 3D                ADDC    A,R5
0120 FD                MOV     R5,A
0121 E8                MOV     A,R0
0122 3C                ADDC    A,R4
0123 FC                MOV     R4,A
0124 22                RET     
0125         L?0401:
0125 E4                CLR     A
0126 FF                MOV     R7,A
0127 E500        E     MOV     A,Data+0EH
0129 FE                MOV     R6,A
012A E500        E     MOV     A,Data+0DH
012C FD                MOV     R5,A
012D E500        E     MOV     A,Data+0CH
012F FC                MOV     R4,A
0130 020000      E     LJMP    ?C?LSTIDATA
0133         L?0403:
0133 ED                MOV     A,R5
0134 24FA              ADD     A,#0FAH
0136 FF                MOV     R7,A
0137 EC                MOV     A,R4
0138 34FF              ADDC    A,#0FFH
013A CF                XCH     A,R7
013B C3                CLR     C
013C 9B                SUBB    A,R3
013D CF                XCH     A,R7
013E 9A                SUBB    A,R2
013F FE                MOV     R6,A
0140 22                RET     
0141         L?0404:
0141         L?0405:
0141 AB00        R     MOV     R3,ulCompare+03H
0143 AA00        R     MOV     R2,ulCompare+02H
0145 A900        R     MOV     R1,ulCompare+01H
0147 A800        R     MOV     R0,ulCompare
0149 22                RET     
014A         L?0406:
014A         L?0407:
014A 18                DEC     R0
014B E4                CLR     A
014C 36                ADDC    A,@R0
014D 540F              ANL     A,#0FH
014F FD                MOV     R5,A
0150 18                DEC     R0
0151 E6                MOV     A,@R0
0152 22                RET     
0153         L?0408:
0153         L?0409:
0153 AF00        E     MOV     R7,Data+0FH
0155 AE00        E     MOV     R6,Data+0EH
0157 AD00        E     MOV     R5,Data+0DH
0159 AC00        E     MOV     R4,Data+0CH
015B 22                RET     
015C         L?0410:
015C C3                CLR     C
015D EF                MOV     A,R7
015E 9B                SUBB    A,R3
015F FF                MOV     R7,A
0160 EE                MOV     A,R6
0161 9A                SUBB    A,R2
0162 FE                MOV     R6,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 52  

0163 ED                MOV     A,R5
0164 99                SUBB    A,R1
0165 FD                MOV     R5,A
0166 EC                MOV     A,R4
0167 98                SUBB    A,R0
0168 FC                MOV     R4,A
0169 22                RET     
016A         L?0411:
016A 7800        E     MOV     R0,#LOW usStdHS
016C E6                MOV     A,@R0
016D FE                MOV     R6,A
016E 08                INC     R0
016F E6                MOV     A,@R0
0170 FB                MOV     R3,A
0171 AA06              MOV     R2,AR6
0173 E4                CLR     A
0174 F9                MOV     R1,A
0175 F8                MOV     R0,A
0176 22                RET     
0177         L?0412:
0177 4B                ORL     A,R3
0178 F500        E     MOV     Data+05H,A
017A 750008      E     MOV     Data+06H,#08H
017D E4                CLR     A
017E F500        E     MOV     Data+07H,A
0180 75007B      E     MOV     Data+08H,#07BH
0183 22                RET     
0184         L?0413:
0184 AB00        R     MOV     R3,ulTemp0+03H
0186 AA00        R     MOV     R2,ulTemp0+02H
0188 A900        R     MOV     R1,ulTemp0+01H
018A A800        R     MOV     R0,ulTemp0
018C C3                CLR     C
018D 020000      E     LJMP    ?C?ULCMP
0190         L?0414:
0190 FC                MOV     R4,A
0191 C3                CLR     C
0192 E500        R     MOV     A,Curr_EndH+01H
0194 9500        R     SUBB    A,Curr_StartH+01H
0196 FB                MOV     R3,A
0197 E500        R     MOV     A,Curr_EndH
0199 9500        R     SUBB    A,Curr_StartH
019B FA                MOV     R2,A
019C 22                RET     
019D         L?0417:
019D         L?0418:
019D 7800        R     MOV     R0,#LOW ulTemp2
019F 120000      E     LCALL   ?C?LLDIDATA
01A2 7800        R     MOV     R0,#LOW ulTemp1
01A4 22                RET     
01A5         L?0419:
01A5         L?0420:
01A5 7800        R     MOV     R0,#LOW ulTemp0
01A7 120000      E     LCALL   ?C?LLDIDATA
01AA 7800        R     MOV     R0,#LOW ulTemp2
01AC 22                RET     
01AD         L?0421:
01AD AF00        E     MOV     R7,Data+03H
01AF AE00        E     MOV     R6,Data+02H
01B1 AD00        E     MOV     R5,Data+01H
01B3 7800        R     MOV     R0,#LOW ulTemp1
01B5 020000      E     LJMP    ?C?LSTIDATA
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 53  

01B8         L?0423:
01B8 540F              ANL     A,#0FH
01BA FB                MOV     R3,A
01BB EC                MOV     A,R4
01BC C4                SWAP    A
01BD F8                MOV     R0,A
01BE 54F0              ANL     A,#0F0H
01C0 C8                XCH     A,R0
01C1 ED                MOV     A,R5
01C2 22                RET     
01C3         L?0424:
01C3 E4                CLR     A
01C4 FB                MOV     R3,A
01C5 7A80              MOV     R2,#080H
01C7 F9                MOV     R1,A
01C8 F8                MOV     R0,A
01C9 C3                CLR     C
01CA 020000      E     LJMP    ?C?ULCMP
01CD         L?0425:
01CD 18                DEC     R0
01CE 96                SUBB    A,@R0
01CF FE                MOV     R6,A
01D0 D3                SETB    C
01D1 EF                MOV     A,R7
01D2 94FF              SUBB    A,#0FFH
01D4 EE                MOV     A,R6
01D5 9400              SUBB    A,#00H
01D7 22                RET     
01D8         L?0426:
01D8 7800        R     MOV     R0,#LOW usH_End+01H
01DA E6                MOV     A,@R0
01DB FF                MOV     R7,A
01DC 7800        E     MOV     R0,#LOW usIPH_ACT_WID+01H
01DE E6                MOV     A,@R0
01DF C3                CLR     C
01E0 9F                SUBB    A,R7
01E1 FF                MOV     R7,A
01E2 22                RET     
01E3         L?0427:
01E3 FF                MOV     R7,A
01E4 E6                MOV     A,@R0
01E5 FC                MOV     R4,A
01E6 08                INC     R0
01E7 E6                MOV     A,@R0
01E8 FD                MOV     R5,A
01E9 D3                SETB    C
01EA 9F                SUBB    A,R7
01EB EC                MOV     A,R4
01EC 9E                SUBB    A,R6
01ED 22                RET     
01EE         L?0429:
01EE F500        E     MOV     Data+0CH,A
01F0 750001      E     MOV     Data+0DH,#01H
01F3 F500        E     MOV     Data+0EH,A
01F5 7F00        E     MOV     R7,#LOW Data
01F7 22                RET     
01F8         L?0430:
01F8 E4                CLR     A
01F9 F500        R     MOV     ulCompare+03H,A
01FB F500        R     MOV     ulCompare+02H,A
01FD F500        R     MOV     ulCompare+01H,A
01FF F500        R     MOV     ulCompare,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 54  

0201 22                RET     
0202         L?0431:
0202 7800        E     MOV     R0,#LOW usIPH_ACT_WID+01H
0204 E6                MOV     A,@R0
0205 FF                MOV     R7,A
0206 7800        R     MOV     R0,#LOW usH_End+01H
0208 E6                MOV     A,@R0
0209 C3                CLR     C
020A 9F                SUBB    A,R7
020B 22                RET     
020C         L?0432:
020C C3                CLR     C
020D 7440              MOV     A,#040H
020F 9F                SUBB    A,R7
0210 FF                MOV     R7,A
0211 E4                CLR     A
0212 9400              SUBB    A,#00H
0214 FE                MOV     R6,A
0215 22                RET     
             ; FUNCTION Com016F (END)

             ; FUNCTION Wait_Finish (BEGIN)
                                           ; SOURCE LINE # 14
                                           ; SOURCE LINE # 15
                                           ; SOURCE LINE # 18
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F01              MOV     R7,#01H
0004 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 19
0007 E4                CLR     A
0008 FD                MOV     R5,A
0009 7F1F              MOV     R7,#01FH
000B 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 22
000E 75003C      R     MOV     Wait_Time_Cnt,#03CH
                                           ; SOURCE LINE # 23
0011 750019      R     MOV     IVS_Event,#019H
0014         ?C0003:
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0014 7F01              MOV     R7,#01H
0016 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 83
0019 7F7F              MOV     R7,#07FH
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
001B 120000      R     LCALL   L?0433
001E 30E003            JNB     ACC.0,?C0002
0021 D500F0      R     DJNZ    Wait_Time_Cnt,?C0003
0024         ?C0002:
                                           ; SOURCE LINE # 87
0024 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 90
0026 120000      R     LCALL   L?0433
0029 6007              JZ      ?C0005
                                           ; SOURCE LINE # 91
002B E4                CLR     A
002C FD                MOV     R5,A
002D 7F01              MOV     R7,#01H
002F 120000      E     LCALL   _RTDSetByte
0032         ?C0005:
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 55  

                                           ; SOURCE LINE # 99
0032 E500        E     MOV     A,Data
0034 5463              ANL     A,#063H
0036 6004              JZ      ?C0006
0038 7FFC              MOV     R7,#0FCH
003A 800A              SJMP    ?C0007
003C         ?C0006:
003C E500        R     MOV     A,Wait_Time_Cnt
003E 7004              JNZ     ?C0008
0040 7FFD              MOV     R7,#0FDH
0042 8002              SJMP    ?C0009
0044         ?C0008:
0044 7F00              MOV     R7,#00H
0046         ?C0009:
0046         ?C0007:
0046 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 100
0048 22                RET     
0049         L?0433:
0049 7B01              MOV     R3,#01H
004B 7D01              MOV     R5,#01H
004D 120000      E     LCALL   _RTDRead
0050 E500        E     MOV     A,Data
0052 22                RET     
             ; FUNCTION Wait_Finish (END)

             ; FUNCTION Wait_For_IVS (BEGIN)
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 107
0000 750032      R     MOV     t,#032H
                                           ; SOURCE LINE # 109
0003 E4                CLR     A
0004 FD                MOV     R5,A
0005 7F1F              MOV     R7,#01FH
0007 120000      E     LCALL   _RTDSetByte
000A         ?C0013:
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
000A E4                CLR     A
000B FB                MOV     R3,A
000C 7D01              MOV     R5,#01H
000E 7F1F              MOV     R7,#01FH
0010 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 113
0013 530001      E     ANL     Data,#01H
                                           ; SOURCE LINE # 115
0016 7F01              MOV     R7,#01H
0018 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 116
001B E500        E     MOV     A,Data
001D 7007              JNZ     ?C0015
001F AF00        R     MOV     R7,t
0021 1500        R     DEC     t
0023 EF                MOV     A,R7
0024 70E4              JNZ     ?C0013
                                           ; SOURCE LINE # 117
0026         ?C0015:
0026 22                RET     
             ; FUNCTION Wait_For_IVS (END)

             ; FUNCTION _Measure_PositionV (BEGIN)
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 56  

                                           ; SOURCE LINE # 127
0000 8F00        R     MOV     NM_V,R7
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 131
0002 E4                CLR     A
0003 FB                MOV     R3,A
0004 7D02              MOV     R5,#02H
0006 7F51              MOV     R7,#051H
0008 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 135
000B 120000      R     LCALL   L?0374
000E F500        R     MOV     usRBound+01H,A
0010 EF                MOV     A,R7
0011 34FF              ADDC    A,#0FFH
0013 F500        R     MOV     usRBound,A
                                           ; SOURCE LINE # 136
0015 AF00        R     MOV     R7,usRBound+01H
0017 120000      R     LCALL   L?0395
001A C006              PUSH    AR6
001C C007              PUSH    AR7
001E 120000      R     LCALL   L?0411
0021 D007              POP     AR7
0023 D006              POP     AR6
0025 120000      E     LCALL   ?C?ULDIV
;---- Variable 'usLBound' assigned to Register 'R4/R5' ----
0028 AD07              MOV     R5,AR7
002A AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 142
002C E500        R     MOV     A,usRBound+01H
002E 2402              ADD     A,#02H
0030 FF                MOV     R7,A
0031 E4                CLR     A
0032 3500        R     ADDC    A,usRBound
0034 120000      R     LCALL   L?0389
0037 F500        R     MOV     usRBound+01H,A
0039 EE                MOV     A,R6
003A 9A                SUBB    A,R2
003B F500        R     MOV     usRBound,A
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
003D 120000      R     LCALL   L?0380
0040 4005              JC      ?C0016
0042 120000      R     LCALL   L?0403
0045 8004              SJMP    ?C0017
0047         ?C0016:
0047 7E00              MOV     R6,#00H
0049 7F01              MOV     R7,#01H
004B         ?C0017:
004B AC06              MOV     R4,AR6
004D AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 146
004F 5300FC      R     ANL     NM_V,#0FCH
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
0052 120000      R     LCALL   L?0386
                                           ; SOURCE LINE # 151
0055 8D00        E     MOV     Data+03H,R5
                                           ; SOURCE LINE # 152
0057 850000      E     MOV     Data+04H,usRBound+01H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 57  

                                           ; SOURCE LINE # 153
005A E500        R     MOV     A,usRBound
005C 120000      R     LCALL   L?0423
005F 120000      R     LCALL   L?0373
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0062 120000      R     LCALL   L?0412
                                           ; SOURCE LINE # 157
0065 850000      E     MOV     Data+09H,NM_V
                                           ; SOURCE LINE # 158
0068 850000      E     MOV     Data+0AH,NM_V
                                           ; SOURCE LINE # 159
006B 850000      E     MOV     Data+0BH,NM_V
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
006E 120000      R     LCALL   L?0429
0071 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 165
0074 120000      R     LCALL   Wait_Finish
                                           ; SOURCE LINE # 168
0077 E500        E     MOV     A,Data
0079 6002              JZ      ?C0018
007B FF                MOV     R7,A
007C 22                RET     
007D         ?C0018:
                                           ; SOURCE LINE # 170
007D E4                CLR     A
007E FB                MOV     R3,A
007F 7D04              MOV     R5,#04H
0081 7F80              MOV     R7,#080H
0083 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 173
0086 E500        E     MOV     A,Data+01H
0088 540F              ANL     A,#0FH
008A F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 174
008C 850000      E     MOV     Data+07H,Data
                                           ; SOURCE LINE # 175
008F E500        E     MOV     A,Data+03H
0091 540F              ANL     A,#0FH
0093 F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 176
0095 850000      E     MOV     Data+09H,Data+02H
                                           ; SOURCE LINE # 179
0098 E500        E     MOV     A,Data+07H
009A 4500        E     ORL     A,Data+06H
009C 600C              JZ      ?C0020
009E E500        E     MOV     A,Data+07H
00A0 24FF              ADD     A,#0FFH
00A2 FF                MOV     R7,A
00A3 E500        E     MOV     A,Data+06H
00A5 34FF              ADDC    A,#0FFH
00A7 FE                MOV     R6,A
00A8 8004              SJMP    ?C0021
00AA         ?C0020:
00AA 7E00              MOV     R6,#00H
00AC 7F00              MOV     R7,#00H
00AE         ?C0021:
00AE 7800        R     MOV     R0,#LOW usVer_Start
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 58  

00B0 A606              MOV     @R0,AR6
00B2 08                INC     R0
00B3 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 180
00B5 E500        E     MOV     A,Data+09H
00B7 4500        E     ORL     A,Data+08H
00B9 600C              JZ      ?C0022
00BB E500        E     MOV     A,Data+09H
00BD 24FF              ADD     A,#0FFH
00BF FF                MOV     R7,A
00C0 E500        E     MOV     A,Data+08H
00C2 34FF              ADDC    A,#0FFH
00C4 FE                MOV     R6,A
00C5 8004              SJMP    ?C0023
00C7         ?C0022:
00C7 7E00              MOV     R6,#00H
00C9 7F00              MOV     R7,#00H
00CB         ?C0023:
00CB 7800        R     MOV     R0,#LOW usVer_End
00CD EE                MOV     A,R6
00CE F6                MOV     @R0,A
00CF 08                INC     R0
00D0 EF                MOV     A,R7
00D1 F6                MOV     @R0,A
                                           ; SOURCE LINE # 183
00D2 4E                ORL     A,R6
00D3 7003              JNZ     ?C0024
00D5 7FF8              MOV     R7,#0F8H
00D7 22                RET     
00D8         ?C0024:
                                           ; SOURCE LINE # 195
00D8 7800        R     MOV     R0,#LOW usVer_Start
00DA E6                MOV     A,@R0
00DB FE                MOV     R6,A
00DC 08                INC     R0
00DD E6                MOV     A,@R0
00DE FF                MOV     R7,A
00DF D3                SETB    C
00E0 7406              MOV     A,#06H
00E2 9F                SUBB    A,R7
00E3 E4                CLR     A
00E4 9E                SUBB    A,R6
00E5 4008              JC      ?C0025
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
00E7 750000      E     MOV     Data+06H,#00H
00EA 750006      E     MOV     Data+07H,#06H
                                           ; SOURCE LINE # 198
00ED 8022              SJMP    ?C0026
00EF         ?C0025:
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 202
00EF EF                MOV     A,R7
00F0 7800        E     MOV     R0,#LOW usIPV_ACT_LEN+01H
00F2 26                ADD     A,@R0
00F3 FF                MOV     R7,A
00F4 EE                MOV     A,R6
00F5 18                DEC     R0
00F6 36                ADDC    A,@R0
00F7 CF                XCH     A,R7
00F8 24FF              ADD     A,#0FFH
00FA CF                XCH     A,R7
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 59  

00FB 34FF              ADDC    A,#0FFH
00FD FE                MOV     R6,A
00FE D3                SETB    C
00FF 7800        R     MOV     R0,#LOW usVer_End+01H
0101 E6                MOV     A,@R0
0102 9F                SUBB    A,R7
0103 18                DEC     R0
0104 E6                MOV     A,@R0
0105 9E                SUBB    A,R6
0106 4009              JC      ?C0026
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0108 EE                MOV     A,R6
0109 F6                MOV     @R0,A
010A 08                INC     R0
010B EF                MOV     A,R7
010C F6                MOV     @R0,A
                                           ; SOURCE LINE # 206
010D 8E00        E     MOV     Data+08H,R6
010F F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
0111         ?C0026:
                                           ; SOURCE LINE # 211
0111 750006      E     MOV     Data,#06H
                                           ; SOURCE LINE # 212
0114 E4                CLR     A
0115 F500        E     MOV     Data+01H,A
                                           ; SOURCE LINE # 213
0117 750078      E     MOV     Data+02H,#078H
                                           ; SOURCE LINE # 214
011A 850000      E     MOV     Data+03H,Data+07H
                                           ; SOURCE LINE # 215
011D 850000      E     MOV     Data+04H,Data+09H
                                           ; SOURCE LINE # 216
0120 E500        E     MOV     A,Data+06H
0122 C4                SWAP    A
0123 54F0              ANL     A,#0F0H
0125 2500        E     ADD     A,Data+08H
0127 F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 217
0129 E4                CLR     A
012A F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 218
012C 7F00        E     MOV     R7,#LOW Data
012E 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 220
0131 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 221
0133         ?C0019:
0133 22                RET     
             ; FUNCTION _Measure_PositionV (END)

             ; FUNCTION _Measure_PositionH (BEGIN)
                                           ; SOURCE LINE # 230
0000 8F00        R     MOV     NM_H,R7
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 234
0002 E4                CLR     A
0003 FB                MOV     R3,A
0004 7D02              MOV     R5,#02H
0006 7F51              MOV     R7,#051H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 60  

0008 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 238
000B 120000      R     LCALL   L?0374
000E F500        R     MOV     usRBound+01H,A
0010 EF                MOV     A,R7
0011 34FF              ADDC    A,#0FFH
0013 F500        R     MOV     usRBound,A
                                           ; SOURCE LINE # 239
0015 AF00        R     MOV     R7,usRBound+01H
0017 120000      R     LCALL   L?0395
001A C006              PUSH    AR6
001C C007              PUSH    AR7
001E 120000      R     LCALL   L?0411
0021 D007              POP     AR7
0023 D006              POP     AR6
0025 120000      E     LCALL   ?C?ULDIV
;---- Variable 'usLBound' assigned to Register 'R4/R5' ----
0028 AD07              MOV     R5,AR7
002A AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 241
002C E500        R     MOV     A,usRBound+01H
002E 2402              ADD     A,#02H
0030 FF                MOV     R7,A
0031 E4                CLR     A
0032 3500        R     ADDC    A,usRBound
0034 120000      R     LCALL   L?0389
0037 F500        R     MOV     usRBound+01H,A
0039 EE                MOV     A,R6
003A 9A                SUBB    A,R2
003B F500        R     MOV     usRBound,A
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
003D 120000      R     LCALL   L?0380
0040 4005              JC      ?C0028
0042 120000      R     LCALL   L?0403
0045 8004              SJMP    ?C0029
0047         ?C0028:
0047 7E00              MOV     R6,#00H
0049 7F01              MOV     R7,#01H
004B         ?C0029:
004B AC06              MOV     R4,AR6
004D AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 246
004F 5300FC      R     ANL     NM_H,#0FCH
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
0052 120000      R     LCALL   L?0386
                                           ; SOURCE LINE # 251
0055 8D00        E     MOV     Data+03H,R5
                                           ; SOURCE LINE # 252
0057 850000      E     MOV     Data+04H,usRBound+01H
                                           ; SOURCE LINE # 253
005A E500        R     MOV     A,usRBound
005C 120000      R     LCALL   L?0423
005F 120000      R     LCALL   L?0373
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
0062 120000      R     LCALL   L?0412
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 61  

                                           ; SOURCE LINE # 257
0065 850000      E     MOV     Data+09H,NM_H
                                           ; SOURCE LINE # 258
0068 850000      E     MOV     Data+0AH,NM_H
                                           ; SOURCE LINE # 259
006B 850000      E     MOV     Data+0BH,NM_H
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
006E 120000      R     LCALL   L?0429
0071 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 265
0074 120000      R     LCALL   Wait_Finish
                                           ; SOURCE LINE # 267
0077 E500        E     MOV     A,Data
0079 6002              JZ      ?C0030
007B FF                MOV     R7,A
007C 22                RET     
007D         ?C0030:
                                           ; SOURCE LINE # 269
007D E4                CLR     A
007E FB                MOV     R3,A
007F 7D04              MOV     R5,#04H
0081 7F84              MOV     R7,#084H
0083 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 272
0086 E500        E     MOV     A,Data+03H
0088 540F              ANL     A,#0FH
008A F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 273
008C 850000      E     MOV     Data+05H,Data+02H
                                           ; SOURCE LINE # 274
008F E500        E     MOV     A,Data+01H
0091 540F              ANL     A,#0FH
0093 F500        E     MOV     Data+02H,A
                                           ; SOURCE LINE # 275
0095 850000      E     MOV     Data+03H,Data
                                           ; SOURCE LINE # 277
0098 D3                SETB    C
0099 74FF              MOV     A,#0FFH
009B 9500        E     SUBB    A,Data+03H
009D 7407              MOV     A,#07H
009F 9500        E     SUBB    A,Data+02H
00A1 5003              JNC     ?C0032
00A3 7FF8              MOV     R7,#0F8H
00A5 22                RET     
00A6         ?C0032:
                                           ; SOURCE LINE # 280
00A6 7B01              MOV     R3,#01H
00A8 7D01              MOV     R5,#01H
00AA 7F04              MOV     R7,#04H
00AC 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 283
00AF E500        E     MOV     A,Data
00B1 540C              ANL     A,#0CH
00B3 FF                MOV     R7,A
00B4 BF0816            CJNE    R7,#08H,?C0033
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
00B7 7403              MOV     A,#03H
00B9 2500        E     ADD     A,Data+03H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 62  

00BB F500        E     MOV     Data+03H,A
00BD E4                CLR     A
00BE 3500        E     ADDC    A,Data+02H
00C0 F500        E     MOV     Data+02H,A
                                           ; SOURCE LINE # 286
00C2 7403              MOV     A,#03H
00C4 2500        E     ADD     A,Data+05H
00C6 F500        E     MOV     Data+05H,A
00C8 E4                CLR     A
00C9 3500        E     ADDC    A,Data+04H
00CB F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 287
00CD         ?C0033:
                                           ; SOURCE LINE # 298
00CD 7E00              MOV     R6,#00H
00CF E500        E     MOV     A,Data+03H
00D1 2500        E     ADD     A,stMUD
00D3 FF                MOV     R7,A
00D4 EE                MOV     A,R6
00D5 3500        E     ADDC    A,Data+02H
00D7 FE                MOV     R6,A
00D8 C3                CLR     C
00D9 EF                MOV     A,R7
00DA 9487              SUBB    A,#087H
00DC EE                MOV     A,R6
00DD 9400              SUBB    A,#00H
00DF 400A              JC      ?C0034
00E1 EF                MOV     A,R7
00E2 2479              ADD     A,#079H
00E4 FF                MOV     R7,A
00E5 EE                MOV     A,R6
00E6 34FF              ADDC    A,#0FFH
00E8 FE                MOV     R6,A
00E9 8004              SJMP    ?C0035
00EB         ?C0034:
00EB 7E00              MOV     R6,#00H
00ED 7F00              MOV     R7,#00H
00EF         ?C0035:
00EF 7800        R     MOV     R0,#LOW usH_Start
00F1 A606              MOV     @R0,AR6
00F3 08                INC     R0
00F4 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 300
00F6 7E00              MOV     R6,#00H
00F8 E500        E     MOV     A,Data+05H
00FA 2500        E     ADD     A,stMUD
00FC FF                MOV     R7,A
00FD EE                MOV     A,R6
00FE 3500        E     ADDC    A,Data+04H
0100 FE                MOV     R6,A
0101 C3                CLR     C
0102 EF                MOV     A,R7
0103 9488              SUBB    A,#088H
0105 EE                MOV     A,R6
0106 9400              SUBB    A,#00H
0108 400A              JC      ?C0036
010A EF                MOV     A,R7
010B 2478              ADD     A,#078H
010D FF                MOV     R7,A
010E EE                MOV     A,R6
010F 34FF              ADDC    A,#0FFH
0111 FE                MOV     R6,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 63  

0112 8004              SJMP    ?C0037
0114         ?C0036:
0114 7E0F              MOV     R6,#0FH
0116 7FFF              MOV     R7,#0FFH
0118         ?C0037:
0118 7800        R     MOV     R0,#LOW usH_End
011A A606              MOV     @R0,AR6
011C 08                INC     R0
011D A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 302
011F 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 303
0121         ?C0031:
0121 22                RET     
             ; FUNCTION _Measure_PositionH (END)

             ; FUNCTION _Measure_PositionN (BEGIN)
                                           ; SOURCE LINE # 312
0000 8F00        R     MOV     NM,R7
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 316
0002 120000      R     LCALL   _Measure_PositionV
;---- Variable 'Result' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 318
0005 EF                MOV     A,R7
0006 7005              JNZ     ?C0038
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0008 AF00        R     MOV     R7,NM
000A 120000      R     LCALL   _Measure_PositionH
                                           ; SOURCE LINE # 321
000D         ?C0038:
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
000D         ?C0039:
000D 22                RET     
             ; FUNCTION _Measure_PositionN (END)

             ; FUNCTION _Read_Auto_Info (BEGIN)
                                           ; SOURCE LINE # 419
0000 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
0002 E500        R     MOV     A,index
0004 6027              JZ      ?C0041
0006         ?C0040:
                                           ; SOURCE LINE # 423
0006 E4                CLR     A
0007 FB                MOV     R3,A
0008 7D04              MOV     R5,#04H
000A 7F88              MOV     R7,#088H
000C 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 425
000F E500        R     MOV     A,index
0011 25E0              ADD     A,ACC
0013 25E0              ADD     A,ACC
0015 FF                MOV     R7,A
0016 2400        E     ADD     A,#LOW Data
0018 F8                MOV     R0,A
0019 A600        E     MOV     @R0,Data+03H
                                           ; SOURCE LINE # 426
001B 7400        E     MOV     A,#LOW Data+01H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 64  

001D 2F                ADD     A,R7
001E F8                MOV     R0,A
001F A600        E     MOV     @R0,Data+02H
                                           ; SOURCE LINE # 427
0021 7400        E     MOV     A,#LOW Data+02H
0023 2F                ADD     A,R7
0024 F8                MOV     R0,A
0025 A600        E     MOV     @R0,Data+01H
                                           ; SOURCE LINE # 428
0027 7400        E     MOV     A,#LOW Data+03H
0029 2F                ADD     A,R7
002A F8                MOV     R0,A
002B A600        E     MOV     @R0,Data
                                           ; SOURCE LINE # 430
002D         ?C0041:
002D 22                RET     
             ; FUNCTION _Read_Auto_Info (END)

             ; FUNCTION FindColor (BEGIN)
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 437
0000 7D28              MOV     R5,#028H
0002 7F7E              MOV     R7,#07EH
0004 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 439
0007 E4                CLR     A
0008 F500        R     MOV     ulTemp0+03H,A
000A F500        R     MOV     ulTemp0+02H,A
000C F500        R     MOV     ulTemp0+01H,A
000E F500        R     MOV     ulTemp0,A
                                           ; SOURCE LINE # 440
0010 020000      R     LJMP    ?C0347
0013         ?C0044:
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
0013 E4                CLR     A
0014 F500        R     MOV     ucResult,A
                                           ; SOURCE LINE # 444
0016 F500        R     MOV     ucPhase,A
0018         ?C0047:
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
0018 AD00        R     MOV     R5,ucPhase
001A 7F7D              MOV     R7,#07DH
001C 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 448
001F AD00        R     MOV     R5,ucDetect
0021 7F7F              MOV     R7,#07FH
0023 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 450
0026 120000      R     LCALL   Wait_Finish
                                           ; SOURCE LINE # 451
0029 E500        E     MOV     A,Data
002B 6002              JZ      ?C0048
002D FF                MOV     R7,A
002E 22                RET     
002F         ?C0048:
                                           ; SOURCE LINE # 453
002F 7F01              MOV     R7,#01H
0031 120000      R     LCALL   _Read_Auto_Info
                                           ; SOURCE LINE # 455
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 65  

0034 120000      R     LCALL   L?0376
0037 120000      R     LCALL   L?0413
003A 501C              JNC     ?C0050
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
003C 850000      R     MOV     ulTemp0+03H,Data+07H
003F 850000      R     MOV     ulTemp0+02H,Data+06H
0042 850000      R     MOV     ulTemp0+01H,Data+05H
0045 850000      R     MOV     ulTemp0,Data+04H
                                           ; SOURCE LINE # 458
0048 850000      R     MOV     ucResult,ucPhase
                                           ; SOURCE LINE # 460
004B AF00        R     MOV     R7,ulTemp0+03H
004D AE00        R     MOV     R6,ulTemp0+02H
004F AD00        R     MOV     R5,ulTemp0+01H
0051 AC00        R     MOV     R4,ulTemp0
0053 120000      R     LCALL   L?0424
0056 4013              JC      ?C0046
                                           ; SOURCE LINE # 461
0058         ?C0050:
                                           ; SOURCE LINE # 463
0058 E500        R     MOV     A,ucPhase
005A 7005              JNZ     ?C0052
                                           ; SOURCE LINE # 464
005C 750001      R     MOV     ucPhase,#01H
005F 80B7              SJMP    ?C0047
0061         ?C0052:
                                           ; SOURCE LINE # 465
0061 E500        R     MOV     A,ucPhase
0063 B40105            CJNE    A,#01H,?C0046
                                           ; SOURCE LINE # 466
0066 750002      R     MOV     ucPhase,#02H
0069 80AD              SJMP    ?C0047
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
006B         ?C0046:
                                           ; SOURCE LINE # 472
006B E4                CLR     A
006C FF                MOV     R7,A
006D FE                MOV     R6,A
006E FD                MOV     R5,A
006F FC                MOV     R4,A
0070 120000      R     LCALL   L?0413
0073 700B              JNZ     ?C0043
0075 E500        R     MOV     A,ucDetect
0077 B47B06            CJNE    A,#07BH,?C0043
007A         ?C0056:
                                           ; SOURCE LINE # 474
007A         ?C0347:
007A 750077      R     MOV     ucDetect,#077H
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
007D 020000      R     LJMP    ?C0044
0080         ?C0043:
                                           ; SOURCE LINE # 478
0080 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 479
0082         ?C0049:
0082 22                RET     
             ; FUNCTION FindColor (END)

C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 66  

             ; FUNCTION _GetMaxSum (BEGIN)
                                           ; SOURCE LINE # 480
0000 8F00        R     MOV     select,R7
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 484
0002 E4                CLR     A
0003 F500        R     MOV     ucPhase,A
                                           ; SOURCE LINE # 485
0005 F500        R     MOV     ulTemp0+03H,A
0007 F500        R     MOV     ulTemp0+02H,A
0009 F500        R     MOV     ulTemp0+01H,A
000B F500        R     MOV     ulTemp0,A
                                           ; SOURCE LINE # 486
000D AF00        R     MOV     R7,ucPhase
000F 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 487
0012 E500        R     MOV     A,select
0014 7004              JNZ     ?C0058
0016 7F77              MOV     R7,#077H
0018 8002              SJMP    ?C0059
001A         ?C0058:
001A 7F7B              MOV     R7,#07BH
001C         ?C0059:
001C 8F00        R     MOV     ucDetect,R7
                                           ; SOURCE LINE # 491
001E 7D07              MOV     R5,#07H
0020 7F9E              MOV     R7,#09EH
0022 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 492
0025 120000      R     LCALL   Wait_For_IVS
                                           ; SOURCE LINE # 494
0028 AD00        R     MOV     R5,ucDetect
002A 7F7F              MOV     R7,#07FH
002C 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 496
002F 120000      R     LCALL   Wait_For_IVS
                                           ; SOURCE LINE # 497
0032 E4                CLR     A
0033 F500        R     MOV     ucPhase,A
0035         ?C0060:
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 500
0035 120000      R     LCALL   Wait_For_IVS
                                           ; SOURCE LINE # 501
0038 7F01              MOV     R7,#01H
003A 120000      R     LCALL   _Read_Auto_Info
                                           ; SOURCE LINE # 503
003D 120000      R     LCALL   L?0376
0040 AB00        R     MOV     R3,ulTemp0+03H
0042 AA00        R     MOV     R2,ulTemp0+02H
0044 A900        R     MOV     R1,ulTemp0+01H
0046 A800        R     MOV     R0,ulTemp0
0048 C3                CLR     C
0049 120000      E     LCALL   ?C?ULCMP
004C 500F              JNC     ?C0062
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
004E E4                CLR     A
004F F500        R     MOV     ulTemp0+03H,A
0051 E500        E     MOV     A,Data+06H
0053 F500        R     MOV     ulTemp0+02H,A
0055 E500        E     MOV     A,Data+05H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 67  

0057 F500        R     MOV     ulTemp0+01H,A
0059 E500        E     MOV     A,Data+04H
005B F500        R     MOV     ulTemp0,A
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
005D         ?C0062:
005D 0500        R     INC     ucPhase
005F E500        R     MOV     A,ucPhase
0061 C3                CLR     C
0062 9404              SUBB    A,#04H
0064 40CF              JC      ?C0060
0066         ?C0061:
                                           ; SOURCE LINE # 508
0066 E4                CLR     A
0067 FD                MOV     R5,A
0068 7F9E              MOV     R7,#09EH
006A 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 509
006D 120000      R     LCALL   Wait_Finish
                                           ; SOURCE LINE # 510
0070 E500        E     MOV     A,Data
0072 6006              JZ      ?C0064
0074 FF                MOV     R7,A
0075 E4                CLR     A
0076 FC                MOV     R4,A
0077 FD                MOV     R5,A
0078 FE                MOV     R6,A
0079 22                RET     
007A         ?C0064:
                                           ; SOURCE LINE # 532
007A AF00        R     MOV     R7,ulTemp0+03H
007C AE00        R     MOV     R6,ulTemp0+02H
007E AD00        R     MOV     R5,ulTemp0+01H
0080 AC00        R     MOV     R4,ulTemp0
                                           ; SOURCE LINE # 533
0082         ?C0065:
0082 22                RET     
             ; FUNCTION _GetMaxSum (END)

             ; FUNCTION _Auto_Clock_Do (BEGIN)
                                           ; SOURCE LINE # 544
0000 8F00        R     MOV     NM,R7
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 921
0002 120000      R     LCALL   L?0430
                                           ; SOURCE LINE # 922
0005 F500        R     MOV     ulSum+03H,A
0007 F500        R     MOV     ulSum+02H,A
0009 F500        R     MOV     ulSum+01H,A
000B F500        R     MOV     ulSum,A
                                           ; SOURCE LINE # 927
000D 120000      R     LCALL   _Measure_PositionV
0010 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 929
0012 E500        R     MOV     A,Result
0014 30E701            JNB     ACC.7,?C0066
0017 22                RET     
0018         ?C0066:
                                           ; SOURCE LINE # 931
0018 7410              MOV     A,#010H
001A 2500        R     ADD     A,NM
001C F500        R     MOV     NM,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 68  

                                           ; SOURCE LINE # 933
001E 75000A      R     MOV     count,#0AH
0021         ?C0070:
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 942
0021 120000      R     LCALL   L?0434
0024 30E701            JNB     ACC.7,?C0071
0027         ?C0348:
0027 22                RET     
0028         ?C0071:
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 947
0028 120000      R     LCALL   L?0368
002B 5017              JNC     ?C0072
                                           ; SOURCE LINE # 948
002D C3                CLR     C
002E ED                MOV     A,R5
002F 7800        R     MOV     R0,#LOW usH_End+01H
0031 96                SUBB    A,@R0
0032 FF                MOV     R7,A
0033 EC                MOV     A,R4
0034 120000      R     LCALL   L?0425
0037 4004              JC      ?C0073
0039 7FFF              MOV     R7,#0FFH
003B 8003              SJMP    ?C0074
003D         ?C0073:
003D 120000      R     LCALL   L?0426
0040         ?C0074:
0040 8F00        R     MOV     delta,R7
0042 8019              SJMP    ?C0075
0044         ?C0072:
                                           ; SOURCE LINE # 950
0044 C3                CLR     C
0045 7900        R     MOV     R1,#LOW usH_End+01H
0047 E7                MOV     A,@R1
0048 7800        E     MOV     R0,#LOW usIPH_ACT_WID+01H
004A 96                SUBB    A,@R0
004B FF                MOV     R7,A
004C 19                DEC     R1
004D E7                MOV     A,@R1
004E 120000      R     LCALL   L?0425
0051 4004              JC      ?C0076
0053 7FFF              MOV     R7,#0FFH
0055 8004              SJMP    ?C0077
0057         ?C0076:
0057 120000      R     LCALL   L?0431
005A FF                MOV     R7,A
005B         ?C0077:
005B 8F00        R     MOV     delta,R7
005D         ?C0075:
                                           ; SOURCE LINE # 953
005D 7800        E     MOV     R0,#LOW usIPH_ACT_WID
005F E6                MOV     A,@R0
0060 FA                MOV     R2,A
0061 08                INC     R0
0062 E6                MOV     A,@R0
0063 FB                MOV     R3,A
0064 7C00              MOV     R4,#00H
0066 7D03              MOV     R5,#03H
0068 FF                MOV     R7,A
0069 AE02              MOV     R6,AR2
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 69  

006B 120000      E     LCALL   ?C?UIDIV
006E C3                CLR     C
006F EF                MOV     A,R7
0070 9500        R     SUBB    A,delta
0072 EE                MOV     A,R6
0073 9400              SUBB    A,#00H
0075 5011              JNC     ?C0078
                                           ; SOURCE LINE # 954
                                           ; SOURCE LINE # 955
0077 C3                CLR     C
0078 7800        R     MOV     R0,#LOW usH_End+01H
007A E6                MOV     A,@R0
007B 9B                SUBB    A,R3
007C 18                DEC     R0
007D E6                MOV     A,@R0
007E 9A                SUBB    A,R2
007F 5004              JNC     ?C0079
0081 7FFA              MOV     R7,#0FAH
0083 8002              SJMP    ?C0080
0085         ?C0079:
0085 7FFB              MOV     R7,#0FBH
0087         ?C0080:
0087         ?C0349:
0087 22                RET     
                                           ; SOURCE LINE # 956
0088         ?C0078:
                                           ; SOURCE LINE # 958
0088 7401              MOV     A,#01H
008A C3                CLR     C
008B 9500        R     SUBB    A,delta
008D 504E              JNC     ?C0069
008F         ?C0081:
                                           ; SOURCE LINE # 960
008F E500        R     MOV     A,delta
0091 13                RRC     A
0092 13                RRC     A
0093 543F              ANL     A,#03FH
0095 2500        R     ADD     A,delta
0097 F500        R     MOV     delta,A
                                           ; SOURCE LINE # 964
0099 C3                CLR     C
009A 7900        R     MOV     R1,#LOW usH_End+01H
009C E7                MOV     A,@R1
009D 7800        E     MOV     R0,#LOW usIPH_ACT_WID+01H
009F 96                SUBB    A,@R0
00A0 19                DEC     R1
00A1 E7                MOV     A,@R1
00A2 18                DEC     R0
00A3 96                SUBB    A,@R0
00A4 5018              JNC     ?C0082
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 966
00A6 C3                CLR     C
00A7 74B2              MOV     A,#0B2H
00A9 9500        E     SUBB    A,stMUD+02H
00AB C3                CLR     C
00AC 9500        R     SUBB    A,delta
00AE 5003              JNC     ?C0083
00B0 7FFA              MOV     R7,#0FAH
00B2 22                RET     
00B3         ?C0083:
                                           ; SOURCE LINE # 968
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 70  

00B3 E500        R     MOV     A,delta
00B5 2500        E     ADD     A,stMUD+02H
00B7 F500        E     MOV     stMUD+02H,A
                                           ; SOURCE LINE # 970
                                           ; SOURCE LINE # 971
00B9 120000      R     LCALL   L?0415
                                           ; SOURCE LINE # 972
00BC 8016              SJMP    ?C0068
00BE         ?C0082:
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 975
00BE E500        E     MOV     A,stMUD+02H
00C0 24B2              ADD     A,#0B2H
00C2 C3                CLR     C
00C3 9500        R     SUBB    A,delta
00C5 5003              JNC     ?C0085
00C7 7FFB              MOV     R7,#0FBH
00C9 22                RET     
00CA         ?C0085:
                                           ; SOURCE LINE # 977
00CA C3                CLR     C
00CB E500        E     MOV     A,stMUD+02H
00CD 9500        R     SUBB    A,delta
00CF F500        E     MOV     stMUD+02H,A
                                           ; SOURCE LINE # 979
                                           ; SOURCE LINE # 980
00D1 120000      R     LCALL   L?0416
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 1005
00D4         ?C0068:
                                           ; SOURCE LINE # 1006
00D4 1500        R     DEC     count
00D6 E500        R     MOV     A,count
00D8 6003              JZ      $ + 5H
00DA 020000      R     LJMP    ?C0070
00DD         ?C0069:
                                           ; SOURCE LINE # 1010
00DD E500        R     MOV     A,count
00DF 7003              JNZ     ?C0086
00E1 7FFD              MOV     R7,#0FDH
00E3 22                RET     
00E4         ?C0086:
                                           ; SOURCE LINE # 1012
00E4 E4                CLR     A
00E5 F500        R     MOV     stop,A
00E7         ?C0087:
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1016
00E7 750010      R     MOV     count,#010H
                                           ; SOURCE LINE # 1017
00EA 7500FF      R     MOV     delta,#0FFH
00ED         ?C0089:
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1020
                                           ; SOURCE LINE # 1023
00ED AF00        R     MOV     R7,count
00EF 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1028
00F2 120000      R     LCALL   L?0434
00F5 30E716            JNB     ACC.7,?C0091
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 71  

                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
00F8 B4F80B            CJNE    A,#0F8H,?C0092
                                           ; SOURCE LINE # 1031
                                           ; SOURCE LINE # 1033
00FB E500        R     MOV     A,count
00FD B47002            CJNE    A,#070H,?C0093
                                           ; SOURCE LINE # 1034
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
0100 8032              SJMP    ?C0350
                                           ; SOURCE LINE # 1037
0102         ?C0093:
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
0102 7420              MOV     A,#020H
                                           ; SOURCE LINE # 1041
0104 8037              SJMP    ?C0351
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1043
0106         ?C0092:
                                           ; SOURCE LINE # 1045
0106 AF00        E     MOV     R7,stMUD+03H
0108 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 1047
010B AF00        R     MOV     R7,Result
010D 22                RET     
                                           ; SOURCE LINE # 1048
010E         ?C0091:
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1054
010E 120000      R     LCALL   L?0368
0111 500A              JNC     ?C0095
0113 120000      R     LCALL   L?0426
0116 C3                CLR     C
0117 7480              MOV     A,#080H
0119 9F                SUBB    A,R7
011A FF                MOV     R7,A
011B 8006              SJMP    ?C0096
011D         ?C0095:
011D 120000      R     LCALL   L?0431
0120 2480              ADD     A,#080H
0122 FF                MOV     R7,A
0123         ?C0096:
0123 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 1056
0125 E500        R     MOV     A,Result
0127 C3                CLR     C
0128 9500        R     SUBB    A,delta
012A 5003              JNC     ?C0097
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1058
012C 850000      R     MOV     delta,Result
                                           ; SOURCE LINE # 1059
012F         ?C0097:
                                           ; SOURCE LINE # 1061
012F E500        R     MOV     A,count
0131 B47007            CJNE    A,#070H,?C0098
                                           ; SOURCE LINE # 1062
                                           ; SOURCE LINE # 1063
0134         ?C0350:
0134 AF00        E     MOV     R7,stMUD+03H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 72  

0136 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 1064
0139 8009              SJMP    ?C0090
                                           ; SOURCE LINE # 1065
013B         ?C0098:
                                           ; SOURCE LINE # 1067
013B 7410              MOV     A,#010H
013D         ?C0351:
013D 2500        R     ADD     A,count
013F F500        R     MOV     count,A
                                           ; SOURCE LINE # 1068
0141 020000      R     LJMP    ?C0089
0144         ?C0090:
                                           ; SOURCE LINE # 1070
0144 7481              MOV     A,#081H
0146 C3                CLR     C
0147 9500        R     SUBB    A,delta
0149 500B              JNC     ?C0099
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1072
014B 1500        E     DEC     stMUD+02H
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1075
014D 120000      R     LCALL   L?0416
                                           ; SOURCE LINE # 1077
0150 750001      R     MOV     stop,#01H
                                           ; SOURCE LINE # 1078
0153 020000      R     LJMP    ?C0087
0156         ?C0099:
                                           ; SOURCE LINE # 1079
0156 7480              MOV     A,#080H
0158 D3                SETB    C
0159 9500        R     SUBB    A,delta
015B 4016              JC      ?C0088
                                           ; SOURCE LINE # 1080
                                           ; SOURCE LINE # 1081
015D E500        R     MOV     A,stop
015F 6006              JZ      ?C0102
0161 E500        R     MOV     A,delta
0163 647F              XRL     A,#07FH
0165 600C              JZ      ?C0088
0167         ?C0102:
                                           ; SOURCE LINE # 1083
0167 0500        E     INC     stMUD+02H
                                           ; SOURCE LINE # 1085
                                           ; SOURCE LINE # 1086
0169 120000      R     LCALL   L?0415
                                           ; SOURCE LINE # 1088
016C E500        R     MOV     A,stop
016E 7003              JNZ     $ + 5H
0170 020000      R     LJMP    ?C0087
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
0173         ?C0088:
                                           ; SOURCE LINE # 1094
0173 850000      R     MOV     count,stMUD+03H
                                           ; SOURCE LINE # 1095
0176 850000      R     MOV     start,stMUD+02H
                                           ; SOURCE LINE # 1098
0179 120000      R     LCALL   FindColor
017C EF                MOV     A,R7
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 73  

017D 6003              JZ      ?C0105
017F 7FFF              MOV     R7,#0FFH
0181 22                RET     
0182         ?C0105:
                                           ; SOURCE LINE # 1100
0182 7D30              MOV     R5,#030H
0184 7F7E              MOV     R7,#07EH
0186 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1102
0189 7F01              MOV     R7,#01H
018B 120000      R     LCALL   _GetMaxSum
018E 8F00        R     MOV     ulSum+03H,R7
0190 8E00        R     MOV     ulSum+02H,R6
0192 8D00        R     MOV     ulSum+01H,R5
0194 8C00        R     MOV     ulSum,R4
                                           ; SOURCE LINE # 1103
0196 E4                CLR     A
0197 FF                MOV     R7,A
0198 120000      R     LCALL   _GetMaxSum
019B 8F00        R     MOV     ulCompare+03H,R7
019D 8E00        R     MOV     ulCompare+02H,R6
019F 8D00        R     MOV     ulCompare+01H,R5
01A1 8C00        R     MOV     ulCompare,R4
                                           ; SOURCE LINE # 1107
01A3 7FE0              MOV     R7,#0E0H
01A5 7E04              MOV     R6,#04H
01A7 7D07              MOV     R5,#07H
01A9 7C00              MOV     R4,#00H
01AB AB00        R     MOV     R3,ulSum+03H
01AD AA00        R     MOV     R2,ulSum+02H
01AF A900        R     MOV     R1,ulSum+01H
01B1 A800        R     MOV     R0,ulSum
01B3 D3                SETB    C
01B4 120000      E     LCALL   ?C?ULCMP
01B7 5023              JNC     ?C0107
01B9 7FE0              MOV     R7,#0E0H
01BB 7E04              MOV     R6,#04H
01BD 7D07              MOV     R5,#07H
01BF 7C00              MOV     R4,#00H
01C1 A800        R     MOV     R0,ulSum
01C3 C3                CLR     C
01C4 120000      E     LCALL   ?C?ULCMP
01C7 4003              JC      $ + 5H
01C9 020000      R     LJMP    ?C0106
01CC 7F80              MOV     R7,#080H
01CE 7E84              MOV     R6,#084H
01D0 7D1E              MOV     R5,#01EH
01D2 7C00              MOV     R4,#00H
01D4 120000      R     LCALL   L?0404
01D7 120000      E     LCALL   ?C?ULCMP
01DA 4079              JC      ?C0106
01DC         ?C0107:
                                           ; SOURCE LINE # 1108
                                           ; SOURCE LINE # 1110
01DC 120000      R     LCALL   L?0430
                                           ; SOURCE LINE # 1113
01DF E500        R     MOV     A,start
01E1 24FE              ADD     A,#0FEH
01E3 FF                MOV     R7,A
01E4 7480              MOV     A,#080H
01E6 C3                CLR     C
01E7 9F                SUBB    A,R7
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 74  

01E8 4007              JC      ?C0109
01EA 7480              MOV     A,#080H
01EC D3                SETB    C
01ED 9500        R     SUBB    A,start
01EF 401F              JC      ?C0108
01F1         ?C0109:
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1115
01F1 750080      E     MOV     stMUD+02H,#080H
                                           ; SOURCE LINE # 1116
01F4 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1117
01F7 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 1118
01FA 120000      R     LCALL   L?0385
                                           ; SOURCE LINE # 1120
01FD 120000      R     LCALL   L?0404
0200 C3                CLR     C
0201 120000      E     LCALL   ?C?ULCMP
0204 5003              JNC     ?C0110
                                           ; SOURCE LINE # 1121
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1123
0206 120000      R     LCALL   L?0396
                                           ; SOURCE LINE # 1124
0209         ?C0110:
                                           ; SOURCE LINE # 1126
0209 E500        R     MOV     A,start
020B 04                INC     A
020C F500        E     MOV     stMUD+02H,A
                                           ; SOURCE LINE # 1127
020E 800B              SJMP    ?C0112
0210         ?C0108:
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
0210 850000      E     MOV     stMUD+02H,start
                                           ; SOURCE LINE # 1131
0213 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1132
0216 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 1133
                                           ; SOURCE LINE # 1134
0219 8024              SJMP    ?C0352
021B         ?C0112:
                                           ; SOURCE LINE # 1138
                                           ; SOURCE LINE # 1139
                                           ; SOURCE LINE # 1140
021B AF00        R     MOV     R7,ulSum+03H
021D AE00        R     MOV     R6,ulSum+02H
021F AD00        R     MOV     R5,ulSum+01H
0221 AC00        R     MOV     R4,ulSum
0223 120000      R     LCALL   L?0405
0226 C3                CLR     C
0227 120000      E     LCALL   ?C?ULCMP
022A 5003              JNC     ?C0114
                                           ; SOURCE LINE # 1141
                                           ; SOURCE LINE # 1142
                                           ; SOURCE LINE # 1143
022C 120000      R     LCALL   L?0396
                                           ; SOURCE LINE # 1144
022F         ?C0114:
                                           ; SOURCE LINE # 1145
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 75  

022F E500        R     MOV     A,start
0231 24FE              ADD     A,#0FEH
0233 6500        E     XRL     A,stMUD+02H
0235 600D              JZ      ?C0113
                                           ; SOURCE LINE # 1146
0237         ?C0115:
                                           ; SOURCE LINE # 1148
0237 1500        E     DEC     stMUD+02H
                                           ; SOURCE LINE # 1149
0239 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 1150
023C 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1151
023F         ?C0352:
023F 120000      R     LCALL   L?0385
                                           ; SOURCE LINE # 1152
0242 80D7              SJMP    ?C0112
0244         ?C0113:
                                           ; SOURCE LINE # 1154
0244 850000      E     MOV     stMUD+02H,Result
                                           ; SOURCE LINE # 1155
0247 850000      E     MOV     stMUD+03H,count
                                           ; SOURCE LINE # 1156
024A 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 1157
024D 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1158
0250 AF00        E     MOV     R7,stMUD+03H
0252 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 1159
0255         ?C0106:
                                           ; SOURCE LINE # 1164
0255 741C              MOV     A,#01CH
0257 D3                SETB    C
0258 9500        E     SUBB    A,stMUD+02H
025A 4004              JC      ?C0116
025C 7FFB              MOV     R7,#0FBH
025E 800D              SJMP    ?C0117
0260         ?C0116:
0260 74E4              MOV     A,#0E4H
0262 C3                CLR     C
0263 9500        E     SUBB    A,stMUD+02H
0265 5004              JNC     ?C0118
0267 7FFA              MOV     R7,#0FAH
0269 8002              SJMP    ?C0119
026B         ?C0118:
026B 7F00              MOV     R7,#00H
026D         ?C0119:
026D         ?C0117:
                                           ; SOURCE LINE # 1165
026D         ?C0067:
026D 22                RET     
026E         L?0385:
026E E4                CLR     A
026F FF                MOV     R7,A
0270 120000      R     LCALL   _GetMaxSum
0273 8F00        R     MOV     ulSum+03H,R7
0275 8E00        R     MOV     ulSum+02H,R6
0277 8D00        R     MOV     ulSum+01H,R5
0279 8C00        R     MOV     ulSum,R4
027B 22                RET     
027C         L?0415:
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 76  

027C 120000      E     LCALL   Set_Clock
027F 120000      E     LCALL   Set_H_Position
0282 22                RET     
0283         L?0416:
0283 120000      E     LCALL   Set_H_Position
0286 120000      E     LCALL   Set_Clock
0289 22                RET     
028A         L?0434:
028A AF00        R     MOV     R7,NM
028C 120000      R     LCALL   _Measure_PositionH
028F 8F00        R     MOV     Result,R7
0291 E500        R     MOV     A,Result
0293 22                RET     
             ; FUNCTION _Auto_Clock_Do (END)

             ; FUNCTION Auto_Position (BEGIN)
                                           ; SOURCE LINE # 1170
                                           ; SOURCE LINE # 1171
                                           ; SOURCE LINE # 1174
0000 D200        R     SETB    bAutoInProgress
                                           ; SOURCE LINE # 1176
0002 850000      R     MOV     Curr_PosH,stMUD
                                           ; SOURCE LINE # 1177
0005 850000      R     MOV     Curr_PosV,stMUD+01H
                                           ; SOURCE LINE # 1179
0008 120000      R     LCALL   L?0397
000B 5005              JNC     ?C0120
                                           ; SOURCE LINE # 1180
                                           ; SOURCE LINE # 1181
000D 8F00        E     MOV     stMUD+01H,R7
                                           ; SOURCE LINE # 1182
000F 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 1183
0012         ?C0120:
                                           ; SOURCE LINE # 1185
0012 7E00        R     MOV     R6,#HIGH ADC_DEFAULT
0014 7F00        R     MOV     R7,#LOW ADC_DEFAULT
0016 120000      E     LCALL   _RTDCodeW
                                           ; SOURCE LINE # 1190
0019 120000      R     LCALL   Min_Noise_Margin
001C 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 1192
001E E500        R     MOV     A,Result
0020 20E707            JB      ACC.7,?C0121
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1197
0023 AF00        E     MOV     R7,Data
0025 120000      R     LCALL   _Auto_Position_Do
0028 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 1198
002A         ?C0121:
                                           ; SOURCE LINE # 1200
002A E500        R     MOV     A,Result
002C 20E709            JB      ACC.7,?C0122
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1202
002F 7800        E     MOV     R0,#LOW ucMode_Curr
0031 E6                MOV     A,@R0
0032 FF                MOV     R7,A
0033 120000      E     LCALL   _Save_MUD
                                           ; SOURCE LINE # 1203
0036 800C              SJMP    ?C0123
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 77  

0038         ?C0122:
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1206
0038 850000      E     MOV     stMUD,Curr_PosH
                                           ; SOURCE LINE # 1207
003B 850000      E     MOV     stMUD+01H,Curr_PosV
                                           ; SOURCE LINE # 1209
003E 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1210
0041 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 1211
0044         ?C0123:
                                           ; SOURCE LINE # 1214
0044 120000      E     LCALL   SetADC_GainOffset
                                           ; SOURCE LINE # 1216
0047 C200        R     CLR     bAutoInProgress
                                           ; SOURCE LINE # 1218
0049 AF00        R     MOV     R7,Result
                                           ; SOURCE LINE # 1219
004B         ?C0124:
004B 22                RET     
             ; FUNCTION Auto_Position (END)

             ; FUNCTION _Auto_Position_Do (BEGIN)
                                           ; SOURCE LINE # 1234
0000 8F00        R     MOV     NM,R7
                                           ; SOURCE LINE # 1235
                                           ; SOURCE LINE # 1261
0002 120000      R     LCALL   _Measure_PositionN
0005 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 1263
0007 E500        R     MOV     A,Result
0009 30E701            JNB     ACC.7,?C0125
000C 22                RET     
000D         ?C0125:
                                           ; SOURCE LINE # 1264
000D E4                CLR     A
000E F500        R     MOV     Result,A
                                           ; SOURCE LINE # 1269
0010 750001      R     MOV     NM,#01H
0013         ?C0127:
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1271
                                           ; SOURCE LINE # 1272
0013 7800        E     MOV     R0,#LOW ucV_Max_Margin
0015 E6                MOV     A,@R0
0016 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
0018 120000      R     LCALL   L?0375
001B CF                XCH     A,R7
001C 34FF              ADDC    A,#0FFH
001E FE                MOV     R6,A
001F 7800        R     MOV     R0,#LOW usVer_Start
0021 120000      R     LCALL   L?0369
0024 402C              JC      ?C0129
                                           ; SOURCE LINE # 1273
                                           ; SOURCE LINE # 1274
0026 7800        E     MOV     R0,#LOW ucV_Min_Margin
0028 E6                MOV     A,@R0
0029 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
002B 120000      R     LCALL   L?0375
002E CF                XCH     A,R7
002F 34FF              ADDC    A,#0FFH
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 78  

0031 FE                MOV     R6,A
0032 D3                SETB    C
0033 EF                MOV     A,R7
0034 9D                SUBB    A,R5
0035 EE                MOV     A,R6
0036 9C                SUBB    A,R4
0037 5014              JNC     ?C0130
                                           ; SOURCE LINE # 1275
                                           ; SOURCE LINE # 1276
0039 7800        R     MOV     R0,#LOW usVer_Start+01H
003B E6                MOV     A,@R0
003C 2480              ADD     A,#080H
003E FF                MOV     R7,A
003F 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
0041 E6                MOV     A,@R0
0042 FE                MOV     R6,A
0043 C3                CLR     C
0044 EF                MOV     A,R7
0045 9E                SUBB    A,R6
0046 F500        E     MOV     stMUD+01H,A
                                           ; SOURCE LINE # 1277
0048 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 1279
004B 8023              SJMP    ?C0128
                                           ; SOURCE LINE # 1280
004D         ?C0130:
                                           ; SOURCE LINE # 1282
004D 430002      R     ORL     Result,#02H
                                           ; SOURCE LINE # 1283
0050 8003              SJMP    ?C0132
0052         ?C0129:
                                           ; SOURCE LINE # 1285
0052 430001      R     ORL     Result,#01H
0055         ?C0132:
                                           ; SOURCE LINE # 1288
0055 E500        R     MOV     A,NM
0057 6014              JZ      ?C0133
0059 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
005B E6                MOV     A,@R0
005C FE                MOV     R6,A
005D 08                INC     R0
005E E6                MOV     A,@R0
005F 7800        R     MOV     R0,#LOW usVer_End
0061 120000      R     LCALL   L?0427
0064 4007              JC      ?C0133
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1290
0066 7800        R     MOV     R0,#LOW usVer_Start+01H
                                           ; SOURCE LINE # 1291
0068 120000      R     LCALL   L?0394
                                           ; SOURCE LINE # 1292
006B 80A6              SJMP    ?C0127
006D         ?C0133:
                                           ; SOURCE LINE # 1294
                                           ; SOURCE LINE # 1295
006D 430004      R     ORL     Result,#04H
                                           ; SOURCE LINE # 1296
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1298
0070         ?C0128:
                                           ; SOURCE LINE # 1303
0070 750001      R     MOV     NM,#01H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 79  

0073         ?C0135:
                                           ; SOURCE LINE # 1304
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1308
0073 E500        E     MOV     A,stMUD+02H
0075 13                RRC     A
0076 13                RRC     A
0077 543F              ANL     A,#03FH
0079 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
007B 26                ADD     A,@R0
007C FF                MOV     R7,A
007D E4                CLR     A
007E 18                DEC     R0
007F 36                ADDC    A,@R0
0080 FE                MOV     R6,A
0081 7800        E     MOV     R0,#LOW ucH_Max_Margin
0083 E6                MOV     A,@R0
0084 7C00              MOV     R4,#00H
0086 2F                ADD     A,R7
0087 FF                MOV     R7,A
0088 EC                MOV     A,R4
0089 3E                ADDC    A,R6
008A CF                XCH     A,R7
008B 2460              ADD     A,#060H
008D CF                XCH     A,R7
008E 34FF              ADDC    A,#0FFH
0090 FE                MOV     R6,A
0091 7800        R     MOV     R0,#LOW usH_Start
0093 120000      R     LCALL   L?0369
0096 4063              JC      ?C0137
                                           ; SOURCE LINE # 1309
                                           ; SOURCE LINE # 1312
0098 7800        E     MOV     R0,#LOW ucH_Min_Margin
009A E6                MOV     A,@R0
009B FF                MOV     R7,A
009C D3                SETB    C
009D 9480              SUBB    A,#080H
009F 5015              JNC     ?C0138
                                           ; SOURCE LINE # 1313
00A1 E500        E     MOV     A,stMUD
00A3 FB                MOV     R3,A
00A4 C3                CLR     C
00A5 ED                MOV     A,R5
00A6 9B                SUBB    A,R3
00A7 FB                MOV     R3,A
00A8 EC                MOV     A,R4
00A9 9400              SUBB    A,#00H
00AB CB                XCH     A,R3
00AC 24B2              ADD     A,#0B2H
00AE F500        E     MOV     Data+01H,A
00B0 E4                CLR     A
00B1 3B                ADDC    A,R3
00B2 F500        E     MOV     Data,A
00B4 8004              SJMP    ?C0139
00B6         ?C0138:
                                           ; SOURCE LINE # 1315
00B6 8C00        E     MOV     Data,R4
00B8 8D00        E     MOV     Data+01H,R5
00BA         ?C0139:
                                           ; SOURCE LINE # 1318
00BA E500        E     MOV     A,stMUD+02H
00BC 13                RRC     A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 80  

00BD 13                RRC     A
00BE 543F              ANL     A,#03FH
00C0 FE                MOV     R6,A
00C1 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
00C3 26                ADD     A,@R0
00C4 FD                MOV     R5,A
00C5 E4                CLR     A
00C6 18                DEC     R0
00C7 36                ADDC    A,@R0
00C8 FC                MOV     R4,A
00C9 EF                MOV     A,R7
00CA 7A00              MOV     R2,#00H
00CC 2D                ADD     A,R5
00CD FD                MOV     R5,A
00CE EA                MOV     A,R2
00CF 3C                ADDC    A,R4
00D0 CD                XCH     A,R5
00D1 2460              ADD     A,#060H
00D3 CD                XCH     A,R5
00D4 34FF              ADDC    A,#0FFH
00D6 FC                MOV     R4,A
00D7 D3                SETB    C
00D8 ED                MOV     A,R5
00D9 9500        E     SUBB    A,Data+01H
00DB EC                MOV     A,R4
00DC 9500        E     SUBB    A,Data
00DE 5016              JNC     ?C0140
                                           ; SOURCE LINE # 1319
                                           ; SOURCE LINE # 1321
00E0 7800        R     MOV     R0,#LOW usH_Start+01H
00E2 E6                MOV     A,@R0
00E3 24A0              ADD     A,#0A0H
00E5 FF                MOV     R7,A
00E6 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
00E8 E6                MOV     A,@R0
00E9 FD                MOV     R5,A
00EA C3                CLR     C
00EB EF                MOV     A,R7
00EC 9D                SUBB    A,R5
00ED C3                CLR     C
00EE 9E                SUBB    A,R6
00EF F500        E     MOV     stMUD,A
                                           ; SOURCE LINE # 1322
00F1 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1324
00F4 8024              SJMP    ?C0136
                                           ; SOURCE LINE # 1325
00F6         ?C0140:
                                           ; SOURCE LINE # 1327
00F6 430010      R     ORL     Result,#010H
                                           ; SOURCE LINE # 1328
00F9 8003              SJMP    ?C0142
00FB         ?C0137:
                                           ; SOURCE LINE # 1330
00FB 430008      R     ORL     Result,#08H
00FE         ?C0142:
                                           ; SOURCE LINE # 1360
00FE E500        R     MOV     A,NM
0100 6015              JZ      ?C0143
0102 7800        E     MOV     R0,#LOW usIPH_ACT_WID
0104 E6                MOV     A,@R0
0105 FE                MOV     R6,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 81  

0106 08                INC     R0
0107 E6                MOV     A,@R0
0108 7800        R     MOV     R0,#LOW usH_End
010A 120000      R     LCALL   L?0427
010D 4008              JC      ?C0143
                                           ; SOURCE LINE # 1361
                                           ; SOURCE LINE # 1362
010F 7800        R     MOV     R0,#LOW usH_Start+01H
                                           ; SOURCE LINE # 1363
0111 120000      R     LCALL   L?0394
                                           ; SOURCE LINE # 1364
0114 020000      R     LJMP    ?C0135
0117         ?C0143:
                                           ; SOURCE LINE # 1366
                                           ; SOURCE LINE # 1367
0117 430020      R     ORL     Result,#020H
                                           ; SOURCE LINE # 1368
                                           ; SOURCE LINE # 1369
                                           ; SOURCE LINE # 1370
011A         ?C0136:
                                           ; SOURCE LINE # 1388
011A AF00        R     MOV     R7,Result
                                           ; SOURCE LINE # 1389
011C         ?C0126:
011C 22                RET     
             ; FUNCTION _Auto_Position_Do (END)

             ; FUNCTION Min_Noise_Margin (BEGIN)
                                           ; SOURCE LINE # 1391
                                           ; SOURCE LINE # 1392
                                           ; SOURCE LINE # 1396
0000 7F30              MOV     R7,#030H
0002 120000      R     LCALL   _Measure_PositionV
;---- Variable 'Result' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1398
0005 EF                MOV     A,R7
0006 30E701            JNB     ACC.7,?C0145
0009 22                RET     
000A         ?C0145:
                                           ; SOURCE LINE # 1400
000A 7800        R     MOV     R0,#LOW usVer_Start+01H
000C E6                MOV     A,@R0
000D 18                DEC     R0
000E 46                ORL     A,@R0
000F 700A              JNZ     ?C0147
                                           ; SOURCE LINE # 1401
                                           ; SOURCE LINE # 1402
0011 7F50              MOV     R7,#050H
0013 120000      R     LCALL   _Measure_PositionV
                                           ; SOURCE LINE # 1403
0016 EF                MOV     A,R7
0017 30E701            JNB     ACC.7,?C0147
001A         ?C0353:
001A 22                RET     
                                           ; SOURCE LINE # 1404
001B         ?C0147:
                                           ; SOURCE LINE # 1406
001B E4                CLR     A
001C F500        R     MOV     Noise,A
                                           ; SOURCE LINE # 1407
001E AF00        R     MOV     R7,Noise
0020 120000      R     LCALL   _Measure_PositionH
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 82  

                                           ; SOURCE LINE # 1408
0023 EF                MOV     A,R7
0024 30E701            JNB     ACC.7,?C0149
0027         ?C0354:
0027 22                RET     
0028         ?C0149:
                                           ; SOURCE LINE # 1410
                                           ; SOURCE LINE # 1411
0028 120000      R     LCALL   L?0390
002B         ?C0152:
                                           ; SOURCE LINE # 1414
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1416
                                           ; SOURCE LINE # 1418
002B 120000      R     LCALL   L?0422
002E 30E701            JNB     ACC.7,?C0153
0031         ?C0355:
0031 22                RET     
0032         ?C0153:
                                           ; SOURCE LINE # 1420
0032 7800        R     MOV     R0,#LOW usH_Start
0034 E6                MOV     A,@R0
0035 FC                MOV     R4,A
0036 08                INC     R0
0037 E6                MOV     A,@R0
0038 FD                MOV     R5,A
0039 C3                CLR     C
003A E500        R     MOV     A,Curr_StartH+01H
003C 9D                SUBB    A,R5
003D E500        R     MOV     A,Curr_StartH
003F 9C                SUBB    A,R4
0040 4006              JC      ?C0154
                                           ; SOURCE LINE # 1421
                                           ; SOURCE LINE # 1422
0042 8C00        R     MOV     Curr_StartH,R4
0044 8D00        R     MOV     Curr_StartH+01H,R5
                                           ; SOURCE LINE # 1423
0046 8011              SJMP    ?C0150
0048         ?C0154:
                                           ; SOURCE LINE # 1424
0048 C3                CLR     C
0049 ED                MOV     A,R5
004A 9500        R     SUBB    A,Curr_StartH+01H
004C FD                MOV     R5,A
004D EC                MOV     A,R4
004E 9500        R     SUBB    A,Curr_StartH
0050 FC                MOV     R4,A
0051 C3                CLR     C
0052 7408              MOV     A,#08H
0054 9D                SUBB    A,R5
0055 E4                CLR     A
0056 9C                SUBB    A,R4
0057 4007              JC      ?C0151
                                           ; SOURCE LINE # 1425
                                           ; SOURCE LINE # 1426
                                           ; SOURCE LINE # 1427
                                           ; SOURCE LINE # 1428
0059         ?C0150:
                                           ; SOURCE LINE # 1429
0059 7490              MOV     A,#090H
005B D3                SETB    C
005C 9500        R     SUBB    A,Noise
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 83  

005E 50CB              JNC     ?C0152
0060         ?C0151:
                                           ; SOURCE LINE # 1431
0060 7480              MOV     A,#080H
0062 C3                CLR     C
0063 9500        R     SUBB    A,Noise
0065 5003              JNC     ?C0158
0067 7FF9              MOV     R7,#0F9H
0069 22                RET     
006A         ?C0158:
                                           ; SOURCE LINE # 1433
                                           ; SOURCE LINE # 1434
                                           ; SOURCE LINE # 1435
                                           ; SOURCE LINE # 1436
006A 120000      R     LCALL   L?0390
                                           ; SOURCE LINE # 1438
006D E500        R     MOV     A,Noise
006F 2428              ADD     A,#028H
0071 FF                MOV     R7,A
0072 120000      R     LCALL   _Measure_PositionH
                                           ; SOURCE LINE # 1440
0075 EF                MOV     A,R7
0076 30E701            JNB     ACC.7,?C0160
0079 22                RET     
007A         ?C0160:
                                           ; SOURCE LINE # 1442
007A C3                CLR     C
007B 7900        R     MOV     R1,#LOW usH_End+01H
007D E7                MOV     A,@R1
007E 7800        R     MOV     R0,#LOW usH_Start+01H
0080 96                SUBB    A,@R0
0081 FD                MOV     R5,A
0082 19                DEC     R1
0083 E7                MOV     A,@R1
0084 18                DEC     R0
0085 96                SUBB    A,@R0
0086 120000      R     LCALL   L?0414
0089 EB                MOV     A,R3
008A 6D                XRL     A,R5
008B 7002              JNZ     ?C0345
008D EA                MOV     A,R2
008E 6C                XRL     A,R4
008F         ?C0345:
008F 601E              JZ      ?C0159
0091 ED                MOV     A,R5
0092 2403              ADD     A,#03H
0094 FD                MOV     R5,A
0095 E4                CLR     A
0096 3C                ADDC    A,R4
0097 120000      R     LCALL   L?0414
009A C3                CLR     C
009B EB                MOV     A,R3
009C 9D                SUBB    A,R5
009D EA                MOV     A,R2
009E 9C                SUBB    A,R4
009F 500E              JNC     ?C0159
                                           ; SOURCE LINE # 1443
                                           ; SOURCE LINE # 1444
                                           ; SOURCE LINE # 1445
00A1         ?C0161:
                                           ; SOURCE LINE # 1447
00A1 74A0              MOV     A,#0A0H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 84  

00A3 D3                SETB    C
00A4 9500        R     SUBB    A,Noise
00A6 4007              JC      ?C0159
                                           ; SOURCE LINE # 1448
                                           ; SOURCE LINE # 1449
                                           ; SOURCE LINE # 1450
00A8         ?C0163:
                                           ; SOURCE LINE # 1452
                                           ; SOURCE LINE # 1453
                                           ; SOURCE LINE # 1455
00A8 120000      R     LCALL   L?0422
00AB 30E7BC            JNB     ACC.7,?C0158
00AE 22                RET     
                                           ; SOURCE LINE # 1456
00AF         ?C0159:
                                           ; SOURCE LINE # 1458
00AF E500        R     MOV     A,Noise
00B1 2410              ADD     A,#010H
00B3 F500        E     MOV     Data,A
                                           ; SOURCE LINE # 1460
00B5 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1461
00B7         ?C0146:
00B7 22                RET     
00B8         L?0422:
00B8 7410              MOV     A,#010H
00BA 2500        R     ADD     A,Noise
00BC F500        R     MOV     Noise,A
00BE FF                MOV     R7,A
00BF 120000      R     LCALL   _Measure_PositionH
00C2 EF                MOV     A,R7
00C3 22                RET     
             ; FUNCTION Min_Noise_Margin (END)

             ; FUNCTION Auto_Phase (BEGIN)
                                           ; SOURCE LINE # 1463
                                           ; SOURCE LINE # 1464
                                           ; SOURCE LINE # 1467
0000 D200        R     SETB    bAutoInProgress
                                           ; SOURCE LINE # 1469
0002 850000      R     MOV     Curr_PosV,stMUD+01H
                                           ; SOURCE LINE # 1471
0005 120000      R     LCALL   L?0397
0008 5005              JNC     ?C0165
                                           ; SOURCE LINE # 1472
                                           ; SOURCE LINE # 1473
000A 8F00        E     MOV     stMUD+01H,R7
                                           ; SOURCE LINE # 1474
000C 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 1475
000F         ?C0165:
                                           ; SOURCE LINE # 1478
000F 7E00        R     MOV     R6,#HIGH ADC_DEFAULT
0011 7F00        R     MOV     R7,#LOW ADC_DEFAULT
0013 120000      E     LCALL   _RTDCodeW
                                           ; SOURCE LINE # 1483
0016 120000      R     LCALL   Min_Noise_Margin
0019 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 1485
001B E500        R     MOV     A,Result
001D 20E707            JB      ACC.7,?C0166
                                           ; SOURCE LINE # 1486
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 85  

                                           ; SOURCE LINE # 1487
0020 AF00        E     MOV     R7,Data
0022 120000      R     LCALL   _Auto_Phase_Do
0025 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 1488
0027         ?C0166:
                                           ; SOURCE LINE # 1490
0027 E500        R     MOV     A,Result
0029 30E707            JNB     ACC.7,?C0167
                                           ; SOURCE LINE # 1491
                                           ; SOURCE LINE # 1493
002C AF00        E     MOV     R7,stMUD+03H
002E 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 1494
0031 8007              SJMP    ?C0168
0033         ?C0167:
                                           ; SOURCE LINE # 1496
                                           ; SOURCE LINE # 1497
0033 7800        E     MOV     R0,#LOW ucMode_Curr
0035 E6                MOV     A,@R0
0036 FF                MOV     R7,A
0037 120000      E     LCALL   _Save_MUD
                                           ; SOURCE LINE # 1498
003A         ?C0168:
                                           ; SOURCE LINE # 1501
003A 120000      E     LCALL   SetADC_GainOffset
                                           ; SOURCE LINE # 1504
003D E500        R     MOV     A,Curr_PosV
003F 6500        E     XRL     A,stMUD+01H
0041 6006              JZ      ?C0169
                                           ; SOURCE LINE # 1505
                                           ; SOURCE LINE # 1506
0043 850000      E     MOV     stMUD+01H,Curr_PosV
                                           ; SOURCE LINE # 1507
0046 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 1508
0049         ?C0169:
                                           ; SOURCE LINE # 1510
0049 C200        R     CLR     bAutoInProgress
                                           ; SOURCE LINE # 1512
004B AF00        R     MOV     R7,Result
                                           ; SOURCE LINE # 1513
004D         ?C0170:
004D 22                RET     
             ; FUNCTION Auto_Phase (END)

             ; FUNCTION _Auto_Phase_Do (BEGIN)
                                           ; SOURCE LINE # 1516
0000 8F00        R     MOV     NM,R7
                                           ; SOURCE LINE # 1517
                                           ; SOURCE LINE # 1531
0002 120000      R     LCALL   _Measure_PositionN
0005 EF                MOV     A,R7
0006 6003              JZ      ?C0171
0008 7FFF              MOV     R7,#0FFH
000A 22                RET     
000B         ?C0171:
                                           ; SOURCE LINE # 1534
                                           ; SOURCE LINE # 1535
                                           ; SOURCE LINE # 1536
000B 120000      R     LCALL   L?0387
                                           ; SOURCE LINE # 1537
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 86  

000E 7800        R     MOV     R0,#LOW usH_Start+01H
0010 E6                MOV     A,@R0
0011 2405              ADD     A,#05H
0013 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 1538
0015 7800        R     MOV     R0,#LOW usH_End+01H
0017 E6                MOV     A,@R0
0018 2409              ADD     A,#09H
001A F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 1539
001C E6                MOV     A,@R0
001D 2409              ADD     A,#09H
001F 120000      R     LCALL   L?0406
0022 2405              ADD     A,#05H
0024 120000      R     LCALL   L?0371
0027 4D                ORL     A,R5
0028 F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1540
002A E4                CLR     A
002B F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 1541
002D 7F00        E     MOV     R7,#LOW Data
002F 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 1543
0032 7D30              MOV     R5,#030H
0034 7F7E              MOV     R7,#07EH
0036 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1545
0039 7800        R     MOV     R0,#LOW ulTemp0
003B 120000      E     LCALL   ?C?LSTKIDATA
003E 00                DB      00H
003F 00                DB      00H
0040 00                DB      00H
0041 00                DB      00H
                                           ; SOURCE LINE # 1546
0042 7800        R     MOV     R0,#LOW ucDetect
0044 767B              MOV     @R0,#07BH
0046         ?C0175:
                                           ; SOURCE LINE # 1548
                                           ; SOURCE LINE # 1549
0046 7800        R     MOV     R0,#LOW ucResult
0048 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1550
004A 18                DEC     R0
004B 7601              MOV     @R0,#01H
004D         ?C0178:
                                           ; SOURCE LINE # 1552
                                           ; SOURCE LINE # 1553
004D 7800        R     MOV     R0,#LOW ucPhase
004F E6                MOV     A,@R0
0050 FD                MOV     R5,A
0051 7F7D              MOV     R7,#07DH
0053 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1554
0056 7800        R     MOV     R0,#LOW ucDetect
0058 E6                MOV     A,@R0
0059 FD                MOV     R5,A
                                           ; SOURCE LINE # 1556
                                           ; SOURCE LINE # 1557
005A 120000      R     LCALL   L?0428
005D 6002              JZ      ?C0179
005F FF                MOV     R7,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 87  

0060 22                RET     
0061         ?C0179:
                                           ; SOURCE LINE # 1559
0061 7F01              MOV     R7,#01H
0063 120000      R     LCALL   _Read_Auto_Info
                                           ; SOURCE LINE # 1560
0066 120000      R     LCALL   L?0377
0069 120000      R     LCALL   L?0379
006C 5016              JNC     ?C0180
                                           ; SOURCE LINE # 1561
                                           ; SOURCE LINE # 1562
006E 120000      R     LCALL   L?0377
0071 7800        R     MOV     R0,#LOW ulTemp0
0073 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 1563
0076 7800        R     MOV     R0,#LOW ucPhase
0078 E6                MOV     A,@R0
0079 08                INC     R0
007A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1565
007B 08                INC     R0
007C 120000      E     LCALL   ?C?LLDIDATA
007F 120000      R     LCALL   L?0424
0082 4014              JC      ?C0177
                                           ; SOURCE LINE # 1566
0084         ?C0180:
                                           ; SOURCE LINE # 1568
0084 7800        R     MOV     R0,#LOW ucPhase
0086 E6                MOV     A,@R0
0087 FF                MOV     R7,A
0088 B40104            CJNE    A,#01H,?C0182
                                           ; SOURCE LINE # 1569
008B E4                CLR     A
008C F6                MOV     @R0,A
008D 80BE              SJMP    ?C0178
008F         ?C0182:
                                           ; SOURCE LINE # 1570
008F EF                MOV     A,R7
0090 7006              JNZ     ?C0177
                                           ; SOURCE LINE # 1571
0092 7800        R     MOV     R0,#LOW ucPhase
0094 7602              MOV     @R0,#02H
0096 80B5              SJMP    ?C0178
                                           ; SOURCE LINE # 1573
                                           ; SOURCE LINE # 1574
                                           ; SOURCE LINE # 1575
0098         ?C0177:
                                           ; SOURCE LINE # 1577
0098 120000      R     LCALL   L?0378
009B 700D              JNZ     ?C0174
009D 7800        R     MOV     R0,#LOW ucDetect
009F E6                MOV     A,@R0
00A0 B47B07            CJNE    A,#07BH,?C0174
00A3         ?C0186:
                                           ; SOURCE LINE # 1579
00A3 7800        R     MOV     R0,#LOW ucDetect
00A5 7677              MOV     @R0,#077H
                                           ; SOURCE LINE # 1580
                                           ; SOURCE LINE # 1581
00A7 020000      R     LJMP    ?C0175
00AA         ?C0174:
                                           ; SOURCE LINE # 1584
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 88  

00AA 120000      R     LCALL   L?0378
00AD 7003              JNZ     ?C0188
00AF 7FF8              MOV     R7,#0F8H
00B1 22                RET     
00B2         ?C0188:
                                           ; SOURCE LINE # 1587
00B2 E500        R     MOV     A,NM
00B4 7800        R     MOV     R0,#LOW ucResult
00B6 46                ORL     A,@R0
00B7 FD                MOV     R5,A
00B8 7F7D              MOV     R7,#07DH
00BA 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1591
00BD 750064      R     MOV     NM,#064H
                                           ; SOURCE LINE # 1651
00C0 AD00        R     MOV     R5,NM
00C2 7F7E              MOV     R7,#07EH
00C4 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1655
00C7 7F78              MOV     R7,#078H
                                           ; SOURCE LINE # 1656
                                           ; SOURCE LINE # 1658
                                           ; SOURCE LINE # 1660
                                           ; SOURCE LINE # 1661
00C9 120000      R     LCALL   L?0370
00CC 6002              JZ      ?C0189
00CE FF                MOV     R7,A
00CF 22                RET     
00D0         ?C0189:
                                           ; SOURCE LINE # 1663
00D0 7F01              MOV     R7,#01H
00D2 120000      R     LCALL   _Read_Auto_Info
                                           ; SOURCE LINE # 1665
00D5 120000      R     LCALL   L?0377
00D8 7800        R     MOV     R0,#LOW ulTemp1
00DA 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 1669
00DD 7800        R     MOV     R0,#LOW ulTemp1
00DF 120000      E     LCALL   ?C?LLDIDATA
00E2 7800        R     MOV     R0,#LOW ulTemp2
00E4 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 1670
00E7 7800        R     MOV     R0,#LOW ulTemp0
00E9 120000      E     LCALL   ?C?LSTKIDATA
00EC 00                DB      00H
00ED 00                DB      00H
00EE 00                DB      00H
00EF 00                DB      00H
                                           ; SOURCE LINE # 1671
00F0 7D05              MOV     R5,#05H
00F2 7F9E              MOV     R7,#09EH
00F4 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1673
00F7 120000      R     LCALL   Wait_For_IVS
                                           ; SOURCE LINE # 1674
00FA 7D77              MOV     R5,#077H
00FC 7F7F              MOV     R7,#07FH
00FE 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1676
0101 120000      R     LCALL   Wait_For_IVS
                                           ; SOURCE LINE # 1677
0104 E4                CLR     A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 89  

0105 7800        R     MOV     R0,#LOW ucDetect
0107 F6                MOV     @R0,A
0108         ?C0190:
                                           ; SOURCE LINE # 1678
                                           ; SOURCE LINE # 1680
0108 120000      R     LCALL   Wait_For_IVS
                                           ; SOURCE LINE # 1681
010B 7F03              MOV     R7,#03H
010D 120000      R     LCALL   _Read_Auto_Info
                                           ; SOURCE LINE # 1694
0110 120000      R     LCALL   L?0408
0113 120000      R     LCALL   L?0379
0116 5016              JNC     ?C0193
                                           ; SOURCE LINE # 1695
                                           ; SOURCE LINE # 1696
0118 7800        R     MOV     R0,#LOW ulTemp0
011A 120000      R     LCALL   L?0401
                                           ; SOURCE LINE # 1697
011D 120000      R     LCALL   L?0417
0120 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 1698
0123 7800        R     MOV     R0,#LOW ucDetect
0125 E6                MOV     A,@R0
0126 33                RLC     A
0127 33                RLC     A
0128 33                RLC     A
0129 54F8              ANL     A,#0F8H
012B 7800        R     MOV     R0,#LOW ucResult
012D F6                MOV     @R0,A
                                           ; SOURCE LINE # 1699
012E         ?C0193:
                                           ; SOURCE LINE # 1700
012E 7800        R     MOV     R0,#LOW ulTemp2
0130 120000      R     LCALL   L?0401
                                           ; SOURCE LINE # 1702
0133 7800        R     MOV     R0,#LOW ucDetect
0135 06                INC     @R0
0136 E6                MOV     A,@R0
0137 C3                CLR     C
0138 9410              SUBB    A,#010H
013A 40CC              JC      ?C0190
013C         ?C0191:
                                           ; SOURCE LINE # 1703
013C 120000      R     LCALL   Wait_Finish
                                           ; SOURCE LINE # 1704
013F E500        E     MOV     A,Data
0141 6002              JZ      ?C0194
0143 FF                MOV     R7,A
0144 22                RET     
0145         ?C0194:
                                           ; SOURCE LINE # 1706
0145 E4                CLR     A
0146 FD                MOV     R5,A
0147 7F9E              MOV     R7,#09EH
0149 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1764
014C 7800        R     MOV     R0,#LOW ucResult
014E E6                MOV     A,@R0
014F FF                MOV     R7,A
0150 7006              JNZ     ?C0195
0152 7E7C              MOV     R6,#07CH
0154 7F7C              MOV     R7,#07CH
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 90  

0156 8004              SJMP    ?C0196
0158         ?C0195:
0158 EF                MOV     A,R7
0159 24FC              ADD     A,#0FCH
015B FF                MOV     R7,A
015C         ?C0196:
015C 7800        R     MOV     R0,#LOW ucPhase
015E EF                MOV     A,R7
015F F6                MOV     @R0,A
0160 FB                MOV     R3,A
                                           ; SOURCE LINE # 1765
0161 7800        R     MOV     R0,#LOW ulTemp2
0163 120000      E     LCALL   ?C?LSTKIDATA
0166 00                DB      00H
0167 00                DB      00H
0168 00                DB      00H
0169 00                DB      00H
                                           ; SOURCE LINE # 1766
016A 7800        R     MOV     R0,#LOW ucDetect
016C 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 1769
016E AF03              MOV     R7,AR3
                                           ; SOURCE LINE # 1770
                                           ; SOURCE LINE # 1772
                                           ; SOURCE LINE # 1774
                                           ; SOURCE LINE # 1775
0170 120000      R     LCALL   L?0370
0173 6002              JZ      ?C0197
0175 FF                MOV     R7,A
0176 22                RET     
0177         ?C0197:
                                           ; SOURCE LINE # 1776
0177 7F01              MOV     R7,#01H
0179 120000      R     LCALL   _Read_Auto_Info
                                           ; SOURCE LINE # 1777
017C 120000      R     LCALL   L?0377
017F 7800        R     MOV     R0,#LOW ulTemp2
0181 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 1779
0184 120000      R     LCALL   L?0417
0187 120000      R     LCALL   L?0393
018A 400B              JC      ?C0198
018C 7800        R     MOV     R0,#LOW ulTemp2
018E 120000      E     LCALL   ?C?LLDIDATA0
0191 C000              PUSH    AR0
0193 7800        R     MOV     R0,#LOW ulTemp1
0195 8009              SJMP    ?C0356
0197         ?C0198:
0197 7800        R     MOV     R0,#LOW ulTemp1
0199 120000      E     LCALL   ?C?LLDIDATA0
019C C000              PUSH    AR0
019E 7800        R     MOV     R0,#LOW ulTemp2
01A0         ?C0356:
01A0 120000      E     LCALL   ?C?LLDIDATA
01A3 D000              POP     AR0
01A5 120000      R     LCALL   L?0381
01A8         ?C0199:
01A8 120000      R     LCALL   L?0383
01AB C004              PUSH    AR4
01AD C005              PUSH    AR5
01AF C006              PUSH    AR6
01B1 C007              PUSH    AR7
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 91  

01B3 120000      R     LCALL   L?0418
01B6 120000      R     LCALL   L?0399
01B9 7800        R     MOV     R0,#LOW ulTemp0
01BB 120000      E     LCALL   ?C?LLDIDATA0
01BE EF                MOV     A,R7
01BF 2B                ADD     A,R3
01C0 FF                MOV     R7,A
01C1 EE                MOV     A,R6
01C2 3A                ADDC    A,R2
01C3 FE                MOV     R6,A
01C4 ED                MOV     A,R5
01C5 39                ADDC    A,R1
01C6 FD                MOV     R5,A
01C7 EC                MOV     A,R4
01C8 38                ADDC    A,R0
01C9 FC                MOV     R4,A
01CA D003              POP     AR3
01CC D002              POP     AR2
01CE D001              POP     AR1
01D0 D000              POP     AR0
01D2 120000      R     LCALL   L?0410
01D5 C004              PUSH    AR4
01D7 C005              PUSH    AR5
01D9 C006              PUSH    AR6
01DB C007              PUSH    AR7
01DD 120000      R     LCALL   L?0419
01E0 120000      R     LCALL   L?0393
01E3 400B              JC      ?C0200
01E5 7800        R     MOV     R0,#LOW ulTemp0
01E7 120000      E     LCALL   ?C?LLDIDATA0
01EA C000              PUSH    AR0
01EC 7800        R     MOV     R0,#LOW ulTemp2
01EE 8009              SJMP    ?C0357
01F0         ?C0200:
01F0 7800        R     MOV     R0,#LOW ulTemp2
01F2 120000      E     LCALL   ?C?LLDIDATA0
01F5 C000              PUSH    AR0
01F7 7800        R     MOV     R0,#LOW ulTemp0
01F9         ?C0357:
01F9 120000      E     LCALL   ?C?LLDIDATA
01FC D000              POP     AR0
01FE 120000      R     LCALL   L?0381
0201         ?C0201:
0201 120000      R     LCALL   L?0383
0204 A804              MOV     R0,AR4
0206 A905              MOV     R1,AR5
0208 AA06              MOV     R2,AR6
020A AB07              MOV     R3,AR7
020C D007              POP     AR7
020E D006              POP     AR6
0210 D005              POP     AR5
0212 D004              POP     AR4
0214 120000      R     LCALL   L?0391
                                           ; SOURCE LINE # 1784
0217 FC                MOV     R4,A
0218 120000      R     LCALL   L?0421
                                           ; SOURCE LINE # 1785
021B 7800        R     MOV     R0,#LOW ucResult
021D E6                MOV     A,@R0
021E FF                MOV     R7,A
021F 18                DEC     R0
0220 F6                MOV     @R0,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 92  

                                           ; SOURCE LINE # 1786
0221 EF                MOV     A,R7
0222 7004              JNZ     ?C0202
0224 7F7C              MOV     R7,#07CH
0226 8006              SJMP    ?C0203
0228         ?C0202:
0228 7800        R     MOV     R0,#LOW ucResult
022A E6                MOV     A,@R0
022B 24FC              ADD     A,#0FCH
022D FF                MOV     R7,A
022E         ?C0203:
022E 7800        R     MOV     R0,#LOW ucResult
0230 A607              MOV     @R0,AR7
0232         ?C0206:
                                           ; SOURCE LINE # 1789
                                           ; SOURCE LINE # 1790
0232 7800        R     MOV     R0,#LOW ucPhase
0234 E6                MOV     A,@R0
0235 FF                MOV     R7,A
0236 B47C06            CJNE    A,#07CH,?C0207
0239 7E00              MOV     R6,#00H
023B 7F00              MOV     R7,#00H
023D 8004              SJMP    ?C0208
023F         ?C0207:
023F EF                MOV     A,R7
0240 2404              ADD     A,#04H
0242 FF                MOV     R7,A
0243         ?C0208:
0243 7800        R     MOV     R0,#LOW ucPhase
0245 EF                MOV     A,R7
0246 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1791
0247 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 1792
024A 7F01              MOV     R7,#01H
024C 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 1794
024F 7D77              MOV     R5,#077H
                                           ; SOURCE LINE # 1796
                                           ; SOURCE LINE # 1797
0251 120000      R     LCALL   L?0428
0254 6002              JZ      ?C0209
0256 FF                MOV     R7,A
0257 22                RET     
0258         ?C0209:
                                           ; SOURCE LINE # 1799
0258 7F03              MOV     R7,#03H
025A 120000      R     LCALL   _Read_Auto_Info
                                           ; SOURCE LINE # 1804
025D 7800        R     MOV     R0,#LOW ulTemp2
025F 120000      E     LCALL   ?C?LLDIDATA
0262 120000      R     LCALL   L?0392
0265 400B              JC      ?C0210
0267 7800        R     MOV     R0,#LOW ulTemp2
0269 120000      E     LCALL   ?C?LLDIDATA0
026C C000              PUSH    AR0
026E 7800        R     MOV     R0,#LOW ulTemp0
0270 8009              SJMP    ?C0358
0272         ?C0210:
0272 7800        R     MOV     R0,#LOW ulTemp0
0274 120000      E     LCALL   ?C?LLDIDATA0
0277 C000              PUSH    AR0
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 93  

0279 7800        R     MOV     R0,#LOW ulTemp2
027B         ?C0358:
027B 120000      E     LCALL   ?C?LLDIDATA
027E D000              POP     AR0
0280 120000      R     LCALL   L?0382
0283         ?C0211:
0283 120000      R     LCALL   L?0384
0286 C004              PUSH    AR4
0288 C005              PUSH    AR5
028A C006              PUSH    AR6
028C C007              PUSH    AR7
028E 120000      R     LCALL   L?0419
0291 120000      R     LCALL   L?0399
0294 EF                MOV     A,R7
0295 2500        E     ADD     A,Data+0FH
0297 FF                MOV     R7,A
0298 EE                MOV     A,R6
0299 3500        E     ADDC    A,Data+0EH
029B FE                MOV     R6,A
029C ED                MOV     A,R5
029D 3500        E     ADDC    A,Data+0DH
029F FD                MOV     R5,A
02A0 EC                MOV     A,R4
02A1 3500        E     ADDC    A,Data+0CH
02A3 FC                MOV     R4,A
02A4 D003              POP     AR3
02A6 D002              POP     AR2
02A8 D001              POP     AR1
02AA D000              POP     AR0
02AC 120000      R     LCALL   L?0410
02AF C004              PUSH    AR4
02B1 C005              PUSH    AR5
02B3 C006              PUSH    AR6
02B5 C007              PUSH    AR7
02B7 120000      R     LCALL   L?0408
02BA 120000      R     LCALL   L?0392
02BD 7800        R     MOV     R0,#LOW ulTemp0
02BF 4016              JC      ?C0212
02C1 120000      E     LCALL   ?C?LLDIDATA
02C4 C3                CLR     C
02C5 EF                MOV     A,R7
02C6 9500        E     SUBB    A,Data+0FH
02C8 FF                MOV     R7,A
02C9 EE                MOV     A,R6
02CA 9500        E     SUBB    A,Data+0EH
02CC FE                MOV     R6,A
02CD ED                MOV     A,R5
02CE 9500        E     SUBB    A,Data+0DH
02D0 FD                MOV     R5,A
02D1 EC                MOV     A,R4
02D2 9500        E     SUBB    A,Data+0CH
02D4 FC                MOV     R4,A
02D5 8014              SJMP    ?C0213
02D7         ?C0212:
02D7 120000      E     LCALL   ?C?LLDIDATA0
02DA C3                CLR     C
02DB E500        E     MOV     A,Data+0FH
02DD 9B                SUBB    A,R3
02DE FF                MOV     R7,A
02DF E500        E     MOV     A,Data+0EH
02E1 9A                SUBB    A,R2
02E2 FE                MOV     R6,A
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 94  

02E3 E500        E     MOV     A,Data+0DH
02E5 99                SUBB    A,R1
02E6 FD                MOV     R5,A
02E7 E500        E     MOV     A,Data+0CH
02E9 98                SUBB    A,R0
02EA FC                MOV     R4,A
02EB         ?C0213:
02EB 120000      R     LCALL   L?0384
02EE A804              MOV     R0,AR4
02F0 A905              MOV     R1,AR5
02F2 AA06              MOV     R2,AR6
02F4 AB07              MOV     R3,AR7
02F6 D007              POP     AR7
02F8 D006              POP     AR6
02FA D005              POP     AR5
02FC D004              POP     AR4
02FE 120000      R     LCALL   L?0391
                                           ; SOURCE LINE # 1806
0301 7800        R     MOV     R0,#LOW ulTemp1
0303 120000      E     LCALL   ?C?LLDIDATA
0306 AB00        E     MOV     R3,Data+03H
0308 AA00        E     MOV     R2,Data+02H
030A A900        E     MOV     R1,Data+01H
030C A800        E     MOV     R0,Data
030E D3                SETB    C
030F 120000      E     LCALL   ?C?ULCMP
0312 4019              JC      ?C0214
                                           ; SOURCE LINE # 1807
                                           ; SOURCE LINE # 1808
0314 AC00        E     MOV     R4,Data
0316 120000      R     LCALL   L?0421
                                           ; SOURCE LINE # 1809
0319 7800        R     MOV     R0,#LOW ucPhase
031B E6                MOV     A,@R0
031C FF                MOV     R7,A
031D 7006              JNZ     ?C0215
031F 7E7C              MOV     R6,#07CH
0321 7F7C              MOV     R7,#07CH
0323 8004              SJMP    ?C0216
0325         ?C0215:
0325 EF                MOV     A,R7
0326 24FC              ADD     A,#0FCH
0328 FF                MOV     R7,A
0329         ?C0216:
0329 7800        R     MOV     R0,#LOW ucResult
032B A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1810
032D         ?C0214:
                                           ; SOURCE LINE # 1811
032D 7800        R     MOV     R0,#LOW ucDetect
032F 16                DEC     @R0
                                           ; SOURCE LINE # 1813
0330 120000      R     LCALL   L?0420
0333 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 1814
0336 120000      R     LCALL   L?0409
0339 7800        R     MOV     R0,#LOW ulTemp0
033B 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 1816
033E 7800        R     MOV     R0,#LOW ucDetect
0340 E6                MOV     A,@R0
0341 6003              JZ      $ + 5H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 95  

0343 020000      R     LJMP    ?C0206
                                           ; SOURCE LINE # 1976
0346 7800        R     MOV     R0,#LOW ucResult
0348 E6                MOV     A,@R0
0349 F500        E     MOV     stMUD+03H,A
                                           ; SOURCE LINE # 1977
034B FF                MOV     R7,A
034C 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 1987
034F 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1988
0351         ?C0172:
0351 22                RET     
0352         L?0370:
0352 120000      E     LCALL   _Set_Phase
0355 7F01              MOV     R7,#01H
0357 120000      E     LCALL   _Delay_Xms
035A 7D77              MOV     R5,#077H
035C 7F7F              MOV     R7,#07FH
035E 120000      E     LCALL   _RTDSetByte
0361 120000      R     LCALL   Wait_Finish
0364 E500        E     MOV     A,Data
0366 22                RET     
0367         L?0428:
0367 7F7F              MOV     R7,#07FH
0369 120000      E     LCALL   _RTDSetByte
036C 120000      R     LCALL   Wait_Finish
036F E500        E     MOV     A,Data
0371 22                RET     
             ; FUNCTION _Auto_Phase_Do (END)

             ; FUNCTION Auto_Config (BEGIN)
                                           ; SOURCE LINE # 1990
                                           ; SOURCE LINE # 1991
                                           ; SOURCE LINE # 1998
0000 D200        R     SETB    bAutoInProgress
                                           ; SOURCE LINE # 2000
0002 850000      R     MOV     Curr_PosH,stMUD
                                           ; SOURCE LINE # 2001
0005 850000      R     MOV     Curr_PosV,stMUD+01H
                                           ; SOURCE LINE # 2002
0008 850000      R     MOV     Curr_Clock,stMUD+02H
                                           ; SOURCE LINE # 2003
000B 850000      R     MOV     Curr_Phase,stMUD+03H
                                           ; SOURCE LINE # 2005
000E 120000      R     LCALL   L?0398
0011 5007              JNC     ?C0217
                                           ; SOURCE LINE # 2006
                                           ; SOURCE LINE # 2007
0013 EF                MOV     A,R7
0014 14                DEC     A
0015 F500        E     MOV     stMUD+01H,A
                                           ; SOURCE LINE # 2008
0017 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 2009
001A         ?C0217:
                                           ; SOURCE LINE # 2042
001A 750080      E     MOV     stMUD,#080H
                                           ; SOURCE LINE # 2047
001D E500        E     MOV     A,stMUD+02H
001F D3                SETB    C
0020 9480              SUBB    A,#080H
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 96  

0022 4005              JC      ?C0218
                                           ; SOURCE LINE # 2048
0024 750080      R     MOV     ucTemp1,#080H
0027 8003              SJMP    ?C0219
0029         ?C0218:
                                           ; SOURCE LINE # 2050
0029 850000      R     MOV     ucTemp1,stMUD+02H
002C         ?C0219:
                                           ; SOURCE LINE # 2053
002C E500        R     MOV     A,ucTemp1
002E C3                CLR     C
002F 13                RRC     A
0030 F9                MOV     R1,A
0031 F4                CPL     A
0032 04                INC     A
0033 FF                MOV     R7,A
0034 C3                CLR     C
0035 7440              MOV     A,#040H
0037 9F                SUBB    A,R7
0038 7800        E     MOV     R0,#LOW ucH_Min_Margin
003A F6                MOV     @R0,A
                                           ; SOURCE LINE # 2056
003B 7800        E     MOV     R0,#LOW ucMode_Curr
003D E6                MOV     A,@R0
003E FF                MOV     R7,A
003F 75F00A            MOV     B,#0AH
0042 A4                MUL     AB
0043 2400        E     ADD     A,#LOW CAP_WIN+02H
0045 F582              MOV     DPL,A
0047 E5F0              MOV     A,B
0049 3400        E     ADDC    A,#HIGH CAP_WIN+02H
004B F583              MOV     DPH,A
004D E4                CLR     A
004E 93                MOVC    A,@A+DPTR
004F FC                MOV     R4,A
0050 7401              MOV     A,#01H
0052 93                MOVC    A,@A+DPTR
0053 FD                MOV     R5,A
0054 7800        E     MOV     R0,#LOW usIPH_ACT_STA
0056 A604              MOV     @R0,AR4
0058 08                INC     R0
0059 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2058
005A EF                MOV     A,R7
005B C3                CLR     C
005C 9417              SUBB    A,#017H
005E 5005              JNC     ?C0220
                                           ; SOURCE LINE # 2059
0060 750002      E     MOV     Data,#02H
0063 8010              SJMP    ?C0221
0065         ?C0220:
                                           ; SOURCE LINE # 2060
0065 7800        E     MOV     R0,#LOW ucMode_Curr
0067 E6                MOV     A,@R0
0068 C3                CLR     C
0069 942C              SUBB    A,#02CH
006B 5005              JNC     ?C0222
                                           ; SOURCE LINE # 2061
006D 750005      E     MOV     Data,#05H
0070 8003              SJMP    ?C0221
0072         ?C0222:
                                           ; SOURCE LINE # 2063
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 97  

0072 750003      E     MOV     Data,#03H
0075         ?C0221:
                                           ; SOURCE LINE # 2068
0075 7E00              MOV     R6,#00H
0077 ED                MOV     A,R5
0078 2500        E     ADD     A,Data
007A FF                MOV     R7,A
007B EE                MOV     A,R6
007C 3C                ADDC    A,R4
007D CF                XCH     A,R7
007E 24FA              ADD     A,#0FAH
0080 CF                XCH     A,R7
0081 34FF              ADDC    A,#0FFH
0083 FE                MOV     R6,A
0084 E9                MOV     A,R1
0085 FD                MOV     R5,A
0086 C3                CLR     C
0087 7440              MOV     A,#040H
0089 9D                SUBB    A,R5
008A FD                MOV     R5,A
008B E4                CLR     A
008C 9400              SUBB    A,#00H
008E FC                MOV     R4,A
008F C3                CLR     C
0090 EF                MOV     A,R7
0091 9D                SUBB    A,R5
0092 FF                MOV     R7,A
0093 EE                MOV     A,R6
0094 9C                SUBB    A,R4
0095 FE                MOV     R6,A
0096 7800        E     MOV     R0,#LOW usIPH_ACT_STA
0098 F6                MOV     @R0,A
0099 08                INC     R0
009A EF                MOV     A,R7
009B F6                MOV     @R0,A
                                           ; SOURCE LINE # 2070
009C 8E00        R     MOV     usTemp,R6
009E F500        R     MOV     usTemp+01H,A
                                           ; SOURCE LINE # 2072
00A0 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 2074
                                           ; SOURCE LINE # 2075
00A3 120000      R     LCALL   L?0402
                                           ; SOURCE LINE # 2084
00A6 120000      R     LCALL   Min_Noise_Margin
00A9 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 2085
00AB 850000      R     MOV     Noise,Data
                                           ; SOURCE LINE # 2091
00AE E500        R     MOV     A,Result
00B0 20E75C            JB      ACC.7,?C0224
                                           ; SOURCE LINE # 2092
                                           ; SOURCE LINE # 2093
00B3 5300FC      E     ANL     stMUD+02H,#0FCH
                                           ; SOURCE LINE # 2095
00B6 E500        E     MOV     A,stMUD+02H
00B8 6500        R     XRL     A,Curr_Clock
00BA 6003              JZ      ?C0225
00BC 120000      E     LCALL   Set_Clock
00BF         ?C0225:
                                           ; SOURCE LINE # 2100
00BF AF00        R     MOV     R7,Noise
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 98  

00C1 120000      R     LCALL   _Auto_Clock_Do
00C4 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 2103
00C6 E500        R     MOV     A,Result
00C8 30E711            JNB     ACC.7,?C0226
                                           ; SOURCE LINE # 2104
                                           ; SOURCE LINE # 2105
00CB E500        E     MOV     A,stMUD+02H
00CD 6500        R     XRL     A,Curr_Clock
00CF 603E              JZ      ?C0224
                                           ; SOURCE LINE # 2106
                                           ; SOURCE LINE # 2108
00D1 850000      E     MOV     stMUD,Curr_PosH
                                           ; SOURCE LINE # 2109
00D4 850000      E     MOV     stMUD+02H,Curr_Clock
                                           ; SOURCE LINE # 2111
00D7 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 2112
                                           ; SOURCE LINE # 2113
                                           ; SOURCE LINE # 2114
00DA 8030              SJMP    ?C0359
00DC         ?C0226:
                                           ; SOURCE LINE # 2116
                                           ; SOURCE LINE # 2117
00DC 7800        R     MOV     R0,#LOW usH_Start+01H
00DE E6                MOV     A,@R0
00DF 24C0              ADD     A,#0C0H
00E1 FF                MOV     R7,A
00E2 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
00E4 E6                MOV     A,@R0
00E5 FE                MOV     R6,A
00E6 C3                CLR     C
00E7 EF                MOV     A,R7
00E8 9E                SUBB    A,R6
00E9 FF                MOV     R7,A
00EA E500        E     MOV     A,stMUD+02H
00EC C3                CLR     C
00ED 13                RRC     A
00EE FE                MOV     R6,A
00EF C3                CLR     C
00F0 EF                MOV     A,R7
00F1 9E                SUBB    A,R6
00F2 F500        E     MOV     stMUD,A
                                           ; SOURCE LINE # 2119
00F4 7800        E     MOV     R0,#LOW ucH_Max_Margin
00F6 E6                MOV     A,@R0
00F7 FF                MOV     R7,A
00F8 C3                CLR     C
00F9 9500        E     SUBB    A,stMUD
00FB 5004              JNC     ?C0229
                                           ; SOURCE LINE # 2120
00FD 8F00        E     MOV     stMUD,R7
00FF 800B              SJMP    ?C0230
0101         ?C0229:
                                           ; SOURCE LINE # 2121
0101 7800        E     MOV     R0,#LOW ucH_Min_Margin
0103 E6                MOV     A,@R0
0104 FF                MOV     R7,A
0105 D3                SETB    C
0106 9500        E     SUBB    A,stMUD
0108 4002              JC      ?C0230
                                           ; SOURCE LINE # 2122
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 99  

010A 8F00        E     MOV     stMUD,R7
010C         ?C0230:
                                           ; SOURCE LINE # 2124
010C         ?C0359:
010C 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 2125
                                           ; SOURCE LINE # 2126
010F         ?C0224:
                                           ; SOURCE LINE # 2129
010F E500        R     MOV     A,Result
0111 20E71C            JB      ACC.7,?C0232
                                           ; SOURCE LINE # 2130
                                           ; SOURCE LINE # 2131
0114 AF00        R     MOV     R7,Noise
0116 120000      R     LCALL   _Auto_Phase_Do
0119 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 2133
011B E500        R     MOV     A,Result
011D 30E710            JNB     ACC.7,?C0232
                                           ; SOURCE LINE # 2134
                                           ; SOURCE LINE # 2136
0120 850000      E     MOV     stMUD+03H,Curr_Phase
                                           ; SOURCE LINE # 2137
0123 AF00        E     MOV     R7,stMUD+03H
0125 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 2139
0128 E500        R     MOV     A,Result
012A B4F803            CJNE    A,#0F8H,?C0232
012D E4                CLR     A
012E F500        R     MOV     Result,A
                                           ; SOURCE LINE # 2140
                                           ; SOURCE LINE # 2141
0130         ?C0232:
                                           ; SOURCE LINE # 2144
0130 E500        R     MOV     A,Result
0132 20E709            JB      ACC.7,?C0235
                                           ; SOURCE LINE # 2145
                                           ; SOURCE LINE # 2149
0135 AF00        R     MOV     R7,Noise
0137 120000      R     LCALL   _Auto_Position_Do
013A 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 2152
013C 8006              SJMP    ?C0236
013E         ?C0235:
                                           ; SOURCE LINE # 2154
                                           ; SOURCE LINE # 2155
013E 850000      E     MOV     stMUD+01H,Curr_PosV
                                           ; SOURCE LINE # 2156
0141 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 2157
0144         ?C0236:
                                           ; SOURCE LINE # 2183
0144 E500        R     MOV     A,ucTemp1
0146 C3                CLR     C
0147 13                RRC     A
0148 FF                MOV     R7,A
0149 F4                CPL     A
014A 04                INC     A
014B FE                MOV     R6,A
014C C3                CLR     C
014D 7440              MOV     A,#040H
014F 9E                SUBB    A,R6
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 100 

0150 7800        E     MOV     R0,#LOW ucH_Min_Margin
0152 66                XRL     A,@R0
0153 6003              JZ      $ + 5H
0155 020000      R     LJMP    ?C0237
                                           ; SOURCE LINE # 2184
                                           ; SOURCE LINE # 2185
0158 7800        E     MOV     R0,#LOW usIPH_ACT_STA
015A E6                MOV     A,@R0
015B FC                MOV     R4,A
015C 08                INC     R0
015D E6                MOV     A,@R0
015E FD                MOV     R5,A
015F 6500        R     XRL     A,usTemp+01H
0161 7003              JNZ     ?C0346
0163 E500        R     MOV     A,usTemp
0165 6C                XRL     A,R4
0166         ?C0346:
0166 602B              JZ      ?C0238
                                           ; SOURCE LINE # 2186
                                           ; SOURCE LINE # 2189
0168 E6                MOV     A,@R0
0169 FE                MOV     R6,A
016A C3                CLR     C
016B E500        R     MOV     A,usTemp+01H
016D 9E                SUBB    A,R6
016E FE                MOV     R6,A
016F C3                CLR     C
0170 E500        E     MOV     A,stMUD
0172 9E                SUBB    A,R6
0173 F500        E     MOV     stMUD,A
                                           ; SOURCE LINE # 2190
0175 120000      R     LCALL   L?0432
0178 E500        R     MOV     A,usTemp+01H
017A 24CE              ADD     A,#0CEH
017C CB                XCH     A,R3
017D E500        R     MOV     A,usTemp
017F 34FF              ADDC    A,#0FFH
0181 CB                XCH     A,R3
0182 2F                ADD     A,R7
0183 F6                MOV     @R0,A
0184 EB                MOV     A,R3
0185 3E                ADDC    A,R6
0186 18                DEC     R0
0187 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2191
0188 C3                CLR     C
0189 744E              MOV     A,#04EH
018B 9500        E     SUBB    A,stMUD
018D 4480              ORL     A,#080H
018F F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 2193
0191 801B              SJMP    ?C0239
0193         ?C0238:
                                           ; SOURCE LINE # 2195
                                           ; SOURCE LINE # 2196
0193 E500        R     MOV     A,ucTemp1
0195 C3                CLR     C
0196 13                RRC     A
0197 FF                MOV     R7,A
0198 120000      R     LCALL   L?0432
019B ED                MOV     A,R5
019C 24CE              ADD     A,#0CEH
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 101 

019E FD                MOV     R5,A
019F EC                MOV     A,R4
01A0 34FF              ADDC    A,#0FFH
01A2 CD                XCH     A,R5
01A3 2F                ADD     A,R7
01A4 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
01A6 F6                MOV     @R0,A
01A7 ED                MOV     A,R5
01A8 3E                ADDC    A,R6
01A9 18                DEC     R0
01AA F6                MOV     @R0,A
                                           ; SOURCE LINE # 2197
01AB E4                CLR     A
01AC F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 2198
01AE         ?C0239:
                                           ; SOURCE LINE # 2201
01AE 750004      E     MOV     Data,#04H
                                           ; SOURCE LINE # 2202
01B1 7500AE      E     MOV     Data+01H,#0AEH
                                           ; SOURCE LINE # 2203
01B4 7800        E     MOV     R0,#LOW ucMode_Curr
01B6 E6                MOV     A,@R0
01B7 14                DEC     A
01B8 F500        E     MOV     Data+02H,A
                                           ; SOURCE LINE # 2207
01BA 7480              MOV     A,#080H
01BC C3                CLR     C
01BD 9500        E     SUBB    A,stMUD
01BF 5021              JNC     ?C0240
                                           ; SOURCE LINE # 2208
                                           ; SOURCE LINE # 2209
01C1 E500        E     MOV     A,stMUD
01C3 2480              ADD     A,#080H
01C5 FF                MOV     R7,A
01C6 C3                CLR     C
01C7 940A              SUBB    A,#0AH
01C9 5046              JNC     ?C0242
                                           ; SOURCE LINE # 2210
                                           ; SOURCE LINE # 2211
01CB E500        E     MOV     A,stMUD
01CD 2480              ADD     A,#080H
01CF FD                MOV     R5,A
01D0 E4                CLR     A
01D1 34FF              ADDC    A,#0FFH
01D3 FC                MOV     R4,A
01D4 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
01D6 ED                MOV     A,R5
01D7 26                ADD     A,@R0
01D8 F6                MOV     @R0,A
01D9 18                DEC     R0
01DA EC                MOV     A,R4
01DB 36                ADDC    A,@R0
01DC F6                MOV     @R0,A
                                           ; SOURCE LINE # 2212
01DD EF                MOV     A,R7
01DE 2500        E     ADD     A,Data+03H
                                           ; SOURCE LINE # 2213
                                           ; SOURCE LINE # 2214
                                           ; SOURCE LINE # 2216
01E0 802A              SJMP    ?C0360
01E2         ?C0240:
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 102 

                                           ; SOURCE LINE # 2217
01E2 7480              MOV     A,#080H
01E4 D3                SETB    C
01E5 9500        E     SUBB    A,stMUD
01E7 4028              JC      ?C0242
                                           ; SOURCE LINE # 2218
                                           ; SOURCE LINE # 2219
01E9 7480              MOV     A,#080H
01EB 9500        E     SUBB    A,stMUD
01ED FF                MOV     R7,A
01EE C3                CLR     C
01EF 940A              SUBB    A,#0AH
01F1 501E              JNC     ?C0242
                                           ; SOURCE LINE # 2220
                                           ; SOURCE LINE # 2221
01F3 E500        E     MOV     A,stMUD
01F5 FD                MOV     R5,A
01F6 C3                CLR     C
01F7 7480              MOV     A,#080H
01F9 9D                SUBB    A,R5
01FA FD                MOV     R5,A
01FB E4                CLR     A
01FC 9400              SUBB    A,#00H
01FE FC                MOV     R4,A
01FF C3                CLR     C
0200 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
0202 E6                MOV     A,@R0
0203 9D                SUBB    A,R5
0204 F6                MOV     @R0,A
0205 18                DEC     R0
0206 E6                MOV     A,@R0
0207 9C                SUBB    A,R4
0208 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2223
0209 EF                MOV     A,R7
020A 4480              ORL     A,#080H
020C         ?C0360:
020C F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 2224
020E 750080      E     MOV     stMUD,#080H
                                           ; SOURCE LINE # 2226
                                           ; SOURCE LINE # 2227
0211         ?C0242:
                                           ; SOURCE LINE # 2229
0211 7B00              MOV     R3,#00H
0213 7A00        E     MOV     R2,#HIGH Data
0215 7900        E     MOV     R1,#LOW Data
0217 120000      E     LCALL   _I2CWrite
                                           ; SOURCE LINE # 2230
021A 7F10              MOV     R7,#010H
021C 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 2232
021F 7800        E     MOV     R0,#LOW ucH_Min_Margin
0221 764E              MOV     @R0,#04EH
                                           ; SOURCE LINE # 2233
0223 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 2235
0226         ?C0237:
                                           ; SOURCE LINE # 2236
0226 AF00        E     MOV     R7,stMUD+03H
0228 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 2237
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 103 

022B E500        R     MOV     A,Result
022D 20E707            JB      ACC.7,?C0245
0230 7800        E     MOV     R0,#LOW ucMode_Curr
0232 E6                MOV     A,@R0
0233 FF                MOV     R7,A
0234 120000      E     LCALL   _Save_MUD
0237         ?C0245:
                                           ; SOURCE LINE # 2239
                                           ; SOURCE LINE # 2240
0237 120000      R     LCALL   L?0402
                                           ; SOURCE LINE # 2247
023A C200        R     CLR     bAutoInProgress
                                           ; SOURCE LINE # 2248
023C AF00        E     MOV     R7,stMUD+03H
023E 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 2250
0241 AF00        R     MOV     R7,Result
                                           ; SOURCE LINE # 2251
0243         ?C0246:
0243 22                RET     
0244         L?0402:
0244 E4                CLR     A
0245 FD                MOV     R5,A
0246 7F01              MOV     R7,#01H
0248 120000      E     LCALL   _RTDSetByte
024B E4                CLR     A
024C FD                MOV     R5,A
024D 7F1F              MOV     R7,#01FH
024F 120000      E     LCALL   _RTDSetByte
0252 22                RET     
             ; FUNCTION Auto_Config (END)

             ; FUNCTION Auto_Balance (BEGIN)
                                           ; SOURCE LINE # 2253
                                           ; SOURCE LINE # 2254
                                           ; SOURCE LINE # 2257
0000 D200        R     SETB    bAutoInProgress
                                           ; SOURCE LINE # 2259
0002 850000      R     MOV     Curr_PosV,stMUD+01H
                                           ; SOURCE LINE # 2261
0005 120000      R     LCALL   L?0398
0008 5005              JNC     ?C0247
                                           ; SOURCE LINE # 2262
                                           ; SOURCE LINE # 2263
000A 8F00        E     MOV     stMUD+01H,R7
                                           ; SOURCE LINE # 2264
000C 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 2265
000F         ?C0247:
                                           ; SOURCE LINE # 2268
000F 120000      R     LCALL   Tune_Balance
0012 8F00        R     MOV     Result,R7
                                           ; SOURCE LINE # 2271
0014 E500        R     MOV     A,Curr_PosV
0016 6500        E     XRL     A,stMUD+01H
0018 6006              JZ      ?C0248
                                           ; SOURCE LINE # 2272
                                           ; SOURCE LINE # 2273
001A 850000      E     MOV     stMUD+01H,Curr_PosV
                                           ; SOURCE LINE # 2274
001D 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 2275
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 104 

0020         ?C0248:
                                           ; SOURCE LINE # 2277
0020 E500        R     MOV     A,Result
0022 6008              JZ      ?C0249
                                           ; SOURCE LINE # 2278
                                           ; SOURCE LINE # 2280
0024 120000      E     LCALL   Load_GUD2
                                           ; SOURCE LINE # 2281
0027 120000      E     LCALL   SetADC_GainOffset
                                           ; SOURCE LINE # 2282
002A 8021              SJMP    ?C0250
002C         ?C0249:
                                           ; SOURCE LINE # 2284
                                           ; SOURCE LINE # 2285
002C 750032      E     MOV     stGUD0,#032H
                                           ; SOURCE LINE # 2286
002F 750032      E     MOV     stGUD0+02H,#032H
                                           ; SOURCE LINE # 2287
0032 750032      E     MOV     stGUD0+03H,#032H
                                           ; SOURCE LINE # 2288
0035 750032      E     MOV     stGUD0+04H,#032H
                                           ; SOURCE LINE # 2289
0038 750032      E     MOV     stGUD0+05H,#032H
                                           ; SOURCE LINE # 2290
003B 750032      E     MOV     stGUD0+06H,#032H
                                           ; SOURCE LINE # 2291
003E 750032      E     MOV     stGUD0+07H,#032H
                                           ; SOURCE LINE # 2292
0041 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 2295
0044 120000      E     LCALL   SetADC_Gain
                                           ; SOURCE LINE # 2298
0047 120000      E     LCALL   Save_GUD0
                                           ; SOURCE LINE # 2307
004A 120000      E     LCALL   Save_GUD2
                                           ; SOURCE LINE # 2308
004D         ?C0250:
                                           ; SOURCE LINE # 2310
004D C200        R     CLR     bAutoInProgress
                                           ; SOURCE LINE # 2312
004F AF00        R     MOV     R7,Result
                                           ; SOURCE LINE # 2313
0051         ?C0251:
0051 22                RET     
             ; FUNCTION Auto_Balance (END)

             ; FUNCTION Tune_Balance (BEGIN)
                                           ; SOURCE LINE # 2315
                                           ; SOURCE LINE # 2316
                                           ; SOURCE LINE # 2317
0000 E4                CLR     A
0001 F500        R     MOV     ucTemp,A
                                           ; SOURCE LINE # 2319
0003 F500        R     MOV     FineTune,A
                                           ; SOURCE LINE # 2322
0005 850000      R     MOV     ucTemp,stGUD0
                                           ; SOURCE LINE # 2323
0008 750032      E     MOV     stGUD0,#032H
                                           ; SOURCE LINE # 2324
000B 120000      E     LCALL   SetADC_Gain
                                           ; SOURCE LINE # 2327
000E 7E00        R     MOV     R6,#HIGH ADC_DEFAULT
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 105 

0010 7F00        R     MOV     R7,#LOW ADC_DEFAULT
0012 120000      E     LCALL   _RTDCodeW
                                           ; SOURCE LINE # 2330
0015 7F40              MOV     R7,#040H
0017 120000      R     LCALL   _Measure_PositionN
001A EF                MOV     A,R7
001B 6003              JZ      ?C0252
001D 7FFF              MOV     R7,#0FFH
001F 22                RET     
0020         ?C0252:
                                           ; SOURCE LINE # 2332
0020 7F01              MOV     R7,#01H
0022 120000      R     LCALL   L?0400
0025 6003              JZ      ?C0254
0027 7FFF              MOV     R7,#0FFH
0029 22                RET     
002A         ?C0254:
                                           ; SOURCE LINE # 2333
002A 7460              MOV     A,#060H
002C D3                SETB    C
002D 9500        E     SUBB    A,Data
002F 4003              JC      ?C0255
0031 7FFF              MOV     R7,#0FFH
0033 22                RET     
0034         ?C0255:
                                           ; SOURCE LINE # 2335
0034 850000      R     MOV     Margin,Data
                                           ; SOURCE LINE # 2337
0037 7D20              MOV     R5,#020H
0039 7F02              MOV     R7,#02H
003B 120000      R     LCALL   _Measure_Color
003E EF                MOV     A,R7
003F 6003              JZ      ?C0256
0041 7FFF              MOV     R7,#0FFH
0043 22                RET     
0044         ?C0256:
                                           ; SOURCE LINE # 2338
0044 7460              MOV     A,#060H
0046 D3                SETB    C
0047 9500        E     SUBB    A,Data
0049 4003              JC      ?C0257
004B 7FFF              MOV     R7,#0FFH
004D 22                RET     
004E         ?C0257:
                                           ; SOURCE LINE # 2340
004E E500        R     MOV     A,Margin
0050 D3                SETB    C
0051 9500        E     SUBB    A,Data
0053 4004              JC      ?C0258
0055 AF00        E     MOV     R7,Data
0057 8002              SJMP    ?C0259
0059         ?C0258:
0059 AF00        R     MOV     R7,Margin
005B         ?C0259:
005B 8F00        R     MOV     Margin,R7
                                           ; SOURCE LINE # 2342
005D 7D20              MOV     R5,#020H
005F 7F04              MOV     R7,#04H
0061 120000      R     LCALL   _Measure_Color
0064 EF                MOV     A,R7
0065 6003              JZ      ?C0260
0067 7FFF              MOV     R7,#0FFH
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 106 

0069 22                RET     
006A         ?C0260:
                                           ; SOURCE LINE # 2343
006A 7460              MOV     A,#060H
006C D3                SETB    C
006D 9500        E     SUBB    A,Data
006F 4003              JC      ?C0261
0071 7FFF              MOV     R7,#0FFH
0073 22                RET     
0074         ?C0261:
                                           ; SOURCE LINE # 2345
0074 E500        R     MOV     A,Margin
0076 D3                SETB    C
0077 9500        E     SUBB    A,Data
0079 4004              JC      ?C0262
007B AF00        E     MOV     R7,Data
007D 8002              SJMP    ?C0263
007F         ?C0262:
007F AF00        R     MOV     R7,Margin
0081         ?C0263:
0081 8F00        R     MOV     Margin,R7
                                           ; SOURCE LINE # 2347
0083 E500        R     MOV     A,Margin
0085 24E0              ADD     A,#0E0H
0087 54FC              ANL     A,#0FCH
0089 F500        R     MOV     Margin,A
                                           ; SOURCE LINE # 2350
008B FF                MOV     R7,A
008C 120000      R     LCALL   _Measure_PositionN
008F EF                MOV     A,R7
0090 6003              JZ      ?C0264
0092 7FFF              MOV     R7,#0FFH
0094 22                RET     
0095         ?C0264:
                                           ; SOURCE LINE # 2356
0095 120000      E     LCALL   SetADC_GainOffset
                                           ; SOURCE LINE # 2359
0098 E4                CLR     A
0099 F500        R     MOV     Offset_Stop,A
                                           ; SOURCE LINE # 2360
009B 750004      R     MOV     Color,#04H
009E         ?C0267:
                                           ; SOURCE LINE # 2362
                                           ; SOURCE LINE # 2363
009E 750030      R     MOV     Count,#030H
00A1         ?C0270:
                                           ; SOURCE LINE # 2366
                                           ; SOURCE LINE # 2447
00A1 AF00        R     MOV     R7,Color
00A3 120000      R     LCALL   L?0400
00A6 6003              JZ      ?C0271
00A8 7FFF              MOV     R7,#0FFH
00AA 22                RET     
00AB         ?C0271:
                                           ; SOURCE LINE # 2448
00AB 850000      R     MOV     Margin,Data
                                           ; SOURCE LINE # 2450
00AE 74F2              MOV     A,#0F2H
00B0 C3                CLR     C
00B1 9500        R     SUBB    A,Margin
00B3 5021              JNC     ?C0272
                                           ; SOURCE LINE # 2451
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 107 

                                           ; SOURCE LINE # 2452
00B5 E500        R     MOV     A,Margin
00B7 240E              ADD     A,#0EH
00B9 F500        R     MOV     Result,A
                                           ; SOURCE LINE # 2455
00BB E4                CLR     A
00BC FB                MOV     R3,A
00BD AD00        R     MOV     R5,Result
00BF AF00        R     MOV     R7,Color
00C1 120000      R     LCALL   _Change_ADC_Gain
00C4 EF                MOV     A,R7
00C5 6036              JZ      ?C0275
                                           ; SOURCE LINE # 2456
                                           ; SOURCE LINE # 2457
00C7 E4                CLR     A
00C8 FB                MOV     R3,A
00C9 7D04              MOV     R5,#04H
00CB AF00        R     MOV     R7,Color
00CD 120000      R     LCALL   _Change_ADC_Offset
00D0 EF                MOV     A,R7
00D1 602A              JZ      ?C0275
00D3 020000      R     LJMP    ?C0269
                                           ; SOURCE LINE # 2458
                                           ; SOURCE LINE # 2459
00D6         ?C0272:
                                           ; SOURCE LINE # 2460
00D6 74F2              MOV     A,#0F2H
00D8 D3                SETB    C
00D9 9500        R     SUBB    A,Margin
00DB 4020              JC      ?C0275
                                           ; SOURCE LINE # 2461
                                           ; SOURCE LINE # 2462
00DD 74F2              MOV     A,#0F2H
00DF 9500        R     SUBB    A,Margin
00E1 F500        R     MOV     Result,A
                                           ; SOURCE LINE # 2465
00E3 7B01              MOV     R3,#01H
00E5 FD                MOV     R5,A
00E6 AF00        R     MOV     R7,Color
00E8 120000      R     LCALL   _Change_ADC_Gain
00EB EF                MOV     A,R7
00EC 600F              JZ      ?C0275
                                           ; SOURCE LINE # 2466
                                           ; SOURCE LINE # 2467
00EE 7B01              MOV     R3,#01H
00F0 7D04              MOV     R5,#04H
00F2 AF00        R     MOV     R7,Color
00F4 120000      R     LCALL   _Change_ADC_Offset
00F7 EF                MOV     A,R7
00F8 6003              JZ      $ + 5H
00FA 020000      R     LJMP    ?C0269
                                           ; SOURCE LINE # 2468
                                           ; SOURCE LINE # 2469
00FD         ?C0275:
                                           ; SOURCE LINE # 2471
00FD 850000      R     MOV     Result,Margin
                                           ; SOURCE LINE # 2477
0100 E4                CLR     A
0101 FD                MOV     R5,A
0102 AF00        R     MOV     R7,Color
0104 120000      R     LCALL   _Measure_Color
0107 EF                MOV     A,R7
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 108 

0108 6003              JZ      ?C0279
010A 7FFF              MOV     R7,#0FFH
010C 22                RET     
010D         ?C0279:
                                           ; SOURCE LINE # 2478
010D 850000      R     MOV     Margin,Data
                                           ; SOURCE LINE # 2480
0110 740A              MOV     A,#0AH
0112 C3                CLR     C
0113 9500        R     SUBB    A,Margin
0115 5006              JNC     ?C0280
                                           ; SOURCE LINE # 2481
                                           ; SOURCE LINE # 2482
0117 E4                CLR     A
0118 FB                MOV     R3,A
0119 7D08              MOV     R5,#08H
                                           ; SOURCE LINE # 2483
011B 802D              SJMP    ?C0363
011D         ?C0280:
                                           ; SOURCE LINE # 2484
011D 7402              MOV     A,#02H
011F C3                CLR     C
0120 9500        R     SUBB    A,Margin
0122 5009              JNC     ?C0282
                                           ; SOURCE LINE # 2485
                                           ; SOURCE LINE # 2486
0124 E500        R     MOV     A,Margin
0126 24FE              ADD     A,#0FEH
0128 FD                MOV     R5,A
0129 E4                CLR     A
012A FB                MOV     R3,A
012B         ?C0361:
                                           ; SOURCE LINE # 2487
012B 801D              SJMP    ?C0363
012D         ?C0282:
                                           ; SOURCE LINE # 2488
012D 7402              MOV     A,#02H
012F D3                SETB    C
0130 9500        R     SUBB    A,Margin
0132 401D              JC      ?C0284
                                           ; SOURCE LINE # 2489
                                           ; SOURCE LINE # 2490
0134 E500        R     MOV     A,Margin
0136 700A              JNZ     ?C0285
0138 E500        R     MOV     A,FineTune
013A 7006              JNZ     ?C0285
                                           ; SOURCE LINE # 2491
013C 7B01              MOV     R3,#01H
013E 7D06              MOV     R5,#06H
0140         ?C0362:
0140 8008              SJMP    ?C0363
0142         ?C0285:
                                           ; SOURCE LINE # 2493
0142 C3                CLR     C
0143 7402              MOV     A,#02H
0145 9500        R     SUBB    A,Margin
0147 FD                MOV     R5,A
0148 7B01              MOV     R3,#01H
014A         ?C0363:
014A AF00        R     MOV     R7,Color
014C 120000      R     LCALL   _Change_ADC_Offset
                                           ; SOURCE LINE # 2495
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 109 

014F 8006              SJMP    ?C0281
0151         ?C0284:
                                           ; SOURCE LINE # 2496
0151 E500        R     MOV     A,Result
0153 64F2              XRL     A,#0F2H
0155 6032              JZ      ?C0269
                                           ; SOURCE LINE # 2497
                                           ; SOURCE LINE # 2498
                                           ; SOURCE LINE # 2499
0157         ?C0281:
                                           ; SOURCE LINE # 2502
0157 7408              MOV     A,#08H
0159 C3                CLR     C
015A 9500        R     SUBB    A,Count
015C 5022              JNC     ?C0268
015E 74F3              MOV     A,#0F3H
0160 C3                CLR     C
0161 9500        R     SUBB    A,Result
0163 401B              JC      ?C0268
0165 74F1              MOV     A,#0F1H
0167 D3                SETB    C
0168 9500        R     SUBB    A,Result
016A 5014              JNC     ?C0268
016C 7403              MOV     A,#03H
016E C3                CLR     C
016F 9500        R     SUBB    A,Margin
0171 400D              JC      ?C0268
0173 7401              MOV     A,#01H
0175 D3                SETB    C
0176 9500        R     SUBB    A,Margin
0178 5006              JNC     ?C0268
                                           ; SOURCE LINE # 2503
                                           ; SOURCE LINE # 2504
017A 750001      R     MOV     FineTune,#01H
                                           ; SOURCE LINE # 2505
017D 750008      R     MOV     Count,#08H
                                           ; SOURCE LINE # 2506
                                           ; SOURCE LINE # 2574
0180         ?C0268:
                                           ; SOURCE LINE # 2575
0180 1500        R     DEC     Count
0182 E500        R     MOV     A,Count
0184 6003              JZ      $ + 5H
0186 020000      R     LJMP    ?C0270
0189         ?C0269:
                                           ; SOURCE LINE # 2577
0189 E500        R     MOV     A,Color
018B C3                CLR     C
018C 13                RRC     A
018D F500        R     MOV     Color,A
                                           ; SOURCE LINE # 2578
                                           ; SOURCE LINE # 2579
018F 6003              JZ      $ + 5H
0191 020000      R     LJMP    ?C0267
                                           ; SOURCE LINE # 2582
0194 850000      E     MOV     stGUD0,ucTemp
                                           ; SOURCE LINE # 2583
0197 120000      E     LCALL   SetADC_Gain
                                           ; SOURCE LINE # 2585
019A 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2586
019C         ?C0253:
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 110 

019C 22                RET     
019D         L?0400:
019D 7D20              MOV     R5,#020H
019F 120000      R     LCALL   _Measure_Color
01A2 EF                MOV     A,R7
01A3 22                RET     
             ; FUNCTION Tune_Balance (END)

             ; FUNCTION _Measure_Color (BEGIN)
                                           ; SOURCE LINE # 2588
0000 8D00        R     MOV     margin,R5
;---- Variable 'color' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2589
                                           ; SOURCE LINE # 2590
0002 BF0104            CJNE    R7,#01H,?C0290
0005 7D02              MOV     R5,#02H
0007 8009              SJMP    ?C0291
0009         ?C0290:
0009 BF0204            CJNE    R7,#02H,?C0292
000C 7D01              MOV     R5,#01H
000E 8002              SJMP    ?C0293
0010         ?C0292:
0010 7D00              MOV     R5,#00H
0012         ?C0293:
0012         ?C0291:
0012 7F7D              MOV     R7,#07DH
0014 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 2593
0017 750009      E     MOV     Data,#09H
                                           ; SOURCE LINE # 2594
                                           ; SOURCE LINE # 2595
001A 120000      R     LCALL   L?0388
                                           ; SOURCE LINE # 2597
001D 7800        R     MOV     R0,#LOW usH_Start+01H
001F E6                MOV     A,@R0
0020 2406              ADD     A,#06H
0022 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 2598
0024 7800        R     MOV     R0,#LOW usH_End+01H
0026 E6                MOV     A,@R0
0027 2408              ADD     A,#08H
0029 F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 2599
002B E6                MOV     A,@R0
002C 2408              ADD     A,#08H
002E 120000      R     LCALL   L?0406
0031 2406              ADD     A,#06H
0033 120000      R     LCALL   L?0371
0036 4D                ORL     A,R5
0037 F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 2601
0039 E500        R     MOV     A,margin
003B 7035              JNZ     ?C0294
                                           ; SOURCE LINE # 2602
                                           ; SOURCE LINE # 2603
003D 750080      E     MOV     Data+03H,#080H
                                           ; SOURCE LINE # 2604
0040 F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 2605
0042 750012      E     MOV     Data+05H,#012H
                                           ; SOURCE LINE # 2607
0045 7800        R     MOV     R0,#LOW usVer_Start
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 111 

0047 E6                MOV     A,@R0
0048 FE                MOV     R6,A
0049 08                INC     R0
004A E6                MOV     A,@R0
004B FF                MOV     R7,A
004C C3                CLR     C
004D 7409              MOV     A,#09H
004F 9F                SUBB    A,R7
0050 E4                CLR     A
0051 9E                SUBB    A,R6
0052 500A              JNC     ?C0295
0054 7C00              MOV     R4,#00H
0056 7D09              MOV     R5,#09H
0058 7E00              MOV     R6,#00H
005A 7F09              MOV     R7,#09H
005C 8008              SJMP    ?C0296
005E         ?C0295:
005E EF                MOV     A,R7
005F 24FF              ADD     A,#0FFH
0061 FF                MOV     R7,A
0062 EE                MOV     A,R6
0063 34FF              ADDC    A,#0FFH
0065 FE                MOV     R6,A
0066         ?C0296:
0066 8F00        E     MOV     Data+06H,R7
                                           ; SOURCE LINE # 2608
0068 E500        E     MOV     A,Data+06H
006A 04                INC     A
006B F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 2609
006D E4                CLR     A
006E F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 2610
0070 801A              SJMP    ?C0297
0072         ?C0294:
                                           ; SOURCE LINE # 2612
                                           ; SOURCE LINE # 2613
0072 7800        R     MOV     R0,#LOW usVer_Start+01H
0074 E6                MOV     A,@R0
0075 04                INC     A
0076 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 2614
0078 7800        R     MOV     R0,#LOW usVer_End+01H
007A E6                MOV     A,@R0
007B 04                INC     A
007C F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 2615
007E E6                MOV     A,@R0
007F 2401              ADD     A,#01H
0081 120000      R     LCALL   L?0407
0084 2401              ADD     A,#01H
0086 120000      R     LCALL   L?0372
0089 4D                ORL     A,R5
008A F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 2616
008C         ?C0297:
                                           ; SOURCE LINE # 2618
008C E4                CLR     A
008D F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 2619
008F 7F00        E     MOV     R7,#LOW Data
0091 120000      E     LCALL   _RTDWrite
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 112 

                                           ; SOURCE LINE # 2621
0094 E500        R     MOV     A,margin
0096 7004              JNZ     ?C0298
                                           ; SOURCE LINE # 2622
0098 7D01              MOV     R5,#01H
009A 8002              SJMP    ?C0364
009C         ?C0298:
                                           ; SOURCE LINE # 2624
009C 7D21              MOV     R5,#021H
009E         ?C0364:
009E 7F7F              MOV     R7,#07FH
00A0 120000      E     LCALL   _RTDSetByte
00A3         ?C0299:
                                           ; SOURCE LINE # 2626
00A3 120000      R     LCALL   Wait_Finish
                                           ; SOURCE LINE # 2628
00A6 E500        E     MOV     A,Data
00A8 6003              JZ      ?C0300
00AA 7FFF              MOV     R7,#0FFH
00AC 22                RET     
00AD         ?C0300:
                                           ; SOURCE LINE # 2630
00AD 7B01              MOV     R3,#01H
00AF 7D01              MOV     R5,#01H
00B1 7F88              MOV     R7,#088H
00B3 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 2632
00B6 E500        R     MOV     A,margin
00B8 7003              JNZ     ?C0302
00BA 6300FF      E     XRL     Data,#0FFH
00BD         ?C0302:
                                           ; SOURCE LINE # 2636
00BD 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2637
00BF         ?C0301:
00BF 22                RET     
             ; FUNCTION _Measure_Color (END)

             ; FUNCTION _Change_ADC_Gain (BEGIN)
                                           ; SOURCE LINE # 2639
0000 8B00        R     MOV     inc,R3
;---- Variable 'delta' assigned to Register 'R5' ----
;---- Variable 'color' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2640
                                           ; SOURCE LINE # 2641
0002 E500        R     MOV     A,inc
0004 6047              JZ      ?C0303
                                           ; SOURCE LINE # 2642
                                           ; SOURCE LINE # 2643
0006 E4                CLR     A
0007 F500        R     MOV     inc,A
                                           ; SOURCE LINE # 2645
0009 EF                MOV     A,R7
000A 30E013            JNB     ACC.0,?C0304
                                           ; SOURCE LINE # 2646
                                           ; SOURCE LINE # 2647
000D E500        E     MOV     A,stGUD2
000F D3                SETB    C
0010 9D                SUBB    A,R5
0011 4007              JC      ?C0305
                                           ; SOURCE LINE # 2648
0013 E500        E     MOV     A,stGUD2
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 113 

0015 9D                SUBB    A,R5
0016 F500        E     MOV     stGUD2,A
0018 8006              SJMP    ?C0304
001A         ?C0305:
                                           ; SOURCE LINE # 2650
                                           ; SOURCE LINE # 2651
001A E4                CLR     A
001B F500        E     MOV     stGUD2,A
                                           ; SOURCE LINE # 2652
001D 430001      R     ORL     inc,#01H
                                           ; SOURCE LINE # 2653
                                           ; SOURCE LINE # 2654
0020         ?C0304:
                                           ; SOURCE LINE # 2655
0020 EF                MOV     A,R7
0021 30E113            JNB     ACC.1,?C0307
                                           ; SOURCE LINE # 2656
                                           ; SOURCE LINE # 2657
0024 E500        E     MOV     A,stGUD2+01H
0026 D3                SETB    C
0027 9D                SUBB    A,R5
0028 4007              JC      ?C0308
                                           ; SOURCE LINE # 2658
002A E500        E     MOV     A,stGUD2+01H
002C 9D                SUBB    A,R5
002D F500        E     MOV     stGUD2+01H,A
002F 8006              SJMP    ?C0307
0031         ?C0308:
                                           ; SOURCE LINE # 2660
                                           ; SOURCE LINE # 2661
0031 E4                CLR     A
0032 F500        E     MOV     stGUD2+01H,A
                                           ; SOURCE LINE # 2662
0034 430002      R     ORL     inc,#02H
                                           ; SOURCE LINE # 2663
                                           ; SOURCE LINE # 2664
0037         ?C0307:
                                           ; SOURCE LINE # 2665
0037 EF                MOV     A,R7
0038 30E260            JNB     ACC.2,?C0313
                                           ; SOURCE LINE # 2666
                                           ; SOURCE LINE # 2667
003B E500        E     MOV     A,stGUD2+02H
003D D3                SETB    C
003E 9D                SUBB    A,R5
003F 4007              JC      ?C0311
                                           ; SOURCE LINE # 2668
0041 E500        E     MOV     A,stGUD2+02H
0043 9D                SUBB    A,R5
0044 F500        E     MOV     stGUD2+02H,A
0046 8053              SJMP    ?C0313
0048         ?C0311:
                                           ; SOURCE LINE # 2670
                                           ; SOURCE LINE # 2671
0048 E4                CLR     A
0049 F500        E     MOV     stGUD2+02H,A
                                           ; SOURCE LINE # 2672
                                           ; SOURCE LINE # 2673
                                           ; SOURCE LINE # 2674
                                           ; SOURCE LINE # 2675
004B 804B              SJMP    ?C0365
004D         ?C0303:
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 114 

                                           ; SOURCE LINE # 2677
                                           ; SOURCE LINE # 2678
004D EF                MOV     A,R7
004E 30E016            JNB     ACC.0,?C0314
                                           ; SOURCE LINE # 2679
                                           ; SOURCE LINE # 2680
0051 C3                CLR     C
0052 74FF              MOV     A,#0FFH
0054 9500        E     SUBB    A,stGUD2
0056 D3                SETB    C
0057 9D                SUBB    A,R5
0058 4007              JC      ?C0315
                                           ; SOURCE LINE # 2681
005A ED                MOV     A,R5
005B 2500        E     ADD     A,stGUD2
005D F500        E     MOV     stGUD2,A
005F 8006              SJMP    ?C0314
0061         ?C0315:
                                           ; SOURCE LINE # 2683
                                           ; SOURCE LINE # 2684
0061 7500FF      E     MOV     stGUD2,#0FFH
                                           ; SOURCE LINE # 2685
0064 430001      R     ORL     inc,#01H
                                           ; SOURCE LINE # 2686
                                           ; SOURCE LINE # 2687
0067         ?C0314:
                                           ; SOURCE LINE # 2688
0067 EF                MOV     A,R7
0068 30E116            JNB     ACC.1,?C0317
                                           ; SOURCE LINE # 2689
                                           ; SOURCE LINE # 2690
006B C3                CLR     C
006C 74FF              MOV     A,#0FFH
006E 9500        E     SUBB    A,stGUD2+01H
0070 D3                SETB    C
0071 9D                SUBB    A,R5
0072 4007              JC      ?C0318
                                           ; SOURCE LINE # 2691
0074 ED                MOV     A,R5
0075 2500        E     ADD     A,stGUD2+01H
0077 F500        E     MOV     stGUD2+01H,A
0079 8006              SJMP    ?C0317
007B         ?C0318:
                                           ; SOURCE LINE # 2693
                                           ; SOURCE LINE # 2694
007B 7500FF      E     MOV     stGUD2+01H,#0FFH
                                           ; SOURCE LINE # 2695
007E 430002      R     ORL     inc,#02H
                                           ; SOURCE LINE # 2696
                                           ; SOURCE LINE # 2697
0081         ?C0317:
                                           ; SOURCE LINE # 2698
0081 EF                MOV     A,R7
0082 30E216            JNB     ACC.2,?C0313
                                           ; SOURCE LINE # 2699
                                           ; SOURCE LINE # 2700
0085 C3                CLR     C
0086 74FF              MOV     A,#0FFH
0088 9500        E     SUBB    A,stGUD2+02H
008A D3                SETB    C
008B 9D                SUBB    A,R5
008C 4007              JC      ?C0321
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 115 

                                           ; SOURCE LINE # 2701
008E ED                MOV     A,R5
008F 2500        E     ADD     A,stGUD2+02H
0091 F500        E     MOV     stGUD2+02H,A
0093 8006              SJMP    ?C0313
0095         ?C0321:
                                           ; SOURCE LINE # 2703
                                           ; SOURCE LINE # 2704
0095 7500FF      E     MOV     stGUD2+02H,#0FFH
                                           ; SOURCE LINE # 2705
0098         ?C0365:
0098 430004      R     ORL     inc,#04H
                                           ; SOURCE LINE # 2706
                                           ; SOURCE LINE # 2707
                                           ; SOURCE LINE # 2708
009B         ?C0313:
                                           ; SOURCE LINE # 2710
009B 120000      E     LCALL   SetADC_Gain
                                           ; SOURCE LINE # 2712
009E AF00        R     MOV     R7,inc
                                           ; SOURCE LINE # 2713
00A0         ?C0323:
00A0 22                RET     
             ; FUNCTION _Change_ADC_Gain (END)

             ; FUNCTION _Change_ADC_Offset (BEGIN)
                                           ; SOURCE LINE # 2715
0000 8B00        R     MOV     inc,R3
;---- Variable 'delta' assigned to Register 'R5' ----
;---- Variable 'color' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2716
                                           ; SOURCE LINE # 2717
0002 E500        R     MOV     A,inc
0004 6047              JZ      ?C0324
                                           ; SOURCE LINE # 2718
                                           ; SOURCE LINE # 2719
0006 E4                CLR     A
0007 F500        R     MOV     inc,A
                                           ; SOURCE LINE # 2721
0009 EF                MOV     A,R7
000A 30E013            JNB     ACC.0,?C0325
                                           ; SOURCE LINE # 2722
                                           ; SOURCE LINE # 2723
000D E500        E     MOV     A,stGUD2+03H
000F D3                SETB    C
0010 9D                SUBB    A,R5
0011 4007              JC      ?C0326
                                           ; SOURCE LINE # 2724
0013 E500        E     MOV     A,stGUD2+03H
0015 9D                SUBB    A,R5
0016 F500        E     MOV     stGUD2+03H,A
0018 8006              SJMP    ?C0325
001A         ?C0326:
                                           ; SOURCE LINE # 2726
                                           ; SOURCE LINE # 2727
001A E4                CLR     A
001B F500        E     MOV     stGUD2+03H,A
                                           ; SOURCE LINE # 2728
001D 430001      R     ORL     inc,#01H
                                           ; SOURCE LINE # 2729
                                           ; SOURCE LINE # 2730
0020         ?C0325:
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 116 

                                           ; SOURCE LINE # 2731
0020 EF                MOV     A,R7
0021 30E113            JNB     ACC.1,?C0328
                                           ; SOURCE LINE # 2732
                                           ; SOURCE LINE # 2733
0024 E500        E     MOV     A,stGUD2+04H
0026 D3                SETB    C
0027 9D                SUBB    A,R5
0028 4007              JC      ?C0329
                                           ; SOURCE LINE # 2734
002A E500        E     MOV     A,stGUD2+04H
002C 9D                SUBB    A,R5
002D F500        E     MOV     stGUD2+04H,A
002F 8006              SJMP    ?C0328
0031         ?C0329:
                                           ; SOURCE LINE # 2736
                                           ; SOURCE LINE # 2737
0031 E4                CLR     A
0032 F500        E     MOV     stGUD2+04H,A
                                           ; SOURCE LINE # 2738
0034 430002      R     ORL     inc,#02H
                                           ; SOURCE LINE # 2739
                                           ; SOURCE LINE # 2740
0037         ?C0328:
                                           ; SOURCE LINE # 2741
0037 EF                MOV     A,R7
0038 30E260            JNB     ACC.2,?C0334
                                           ; SOURCE LINE # 2742
                                           ; SOURCE LINE # 2743
003B E500        E     MOV     A,stGUD2+05H
003D D3                SETB    C
003E 9D                SUBB    A,R5
003F 4007              JC      ?C0332
                                           ; SOURCE LINE # 2744
0041 E500        E     MOV     A,stGUD2+05H
0043 9D                SUBB    A,R5
0044 F500        E     MOV     stGUD2+05H,A
0046 8053              SJMP    ?C0334
0048         ?C0332:
                                           ; SOURCE LINE # 2746
                                           ; SOURCE LINE # 2747
0048 E4                CLR     A
0049 F500        E     MOV     stGUD2+05H,A
                                           ; SOURCE LINE # 2748
                                           ; SOURCE LINE # 2749
                                           ; SOURCE LINE # 2750
                                           ; SOURCE LINE # 2751
004B 804B              SJMP    ?C0366
004D         ?C0324:
                                           ; SOURCE LINE # 2753
                                           ; SOURCE LINE # 2754
004D EF                MOV     A,R7
004E 30E016            JNB     ACC.0,?C0335
                                           ; SOURCE LINE # 2755
                                           ; SOURCE LINE # 2756
0051 C3                CLR     C
0052 74FF              MOV     A,#0FFH
0054 9D                SUBB    A,R5
0055 D3                SETB    C
0056 9500        E     SUBB    A,stGUD2+03H
0058 4007              JC      ?C0336
                                           ; SOURCE LINE # 2757
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 117 

005A ED                MOV     A,R5
005B 2500        E     ADD     A,stGUD2+03H
005D F500        E     MOV     stGUD2+03H,A
005F 8006              SJMP    ?C0335
0061         ?C0336:
                                           ; SOURCE LINE # 2759
                                           ; SOURCE LINE # 2760
0061 7500FF      E     MOV     stGUD2+03H,#0FFH
                                           ; SOURCE LINE # 2761
0064 430001      R     ORL     inc,#01H
                                           ; SOURCE LINE # 2762
                                           ; SOURCE LINE # 2764
0067         ?C0335:
                                           ; SOURCE LINE # 2765
0067 EF                MOV     A,R7
0068 30E116            JNB     ACC.1,?C0338
                                           ; SOURCE LINE # 2766
                                           ; SOURCE LINE # 2767
006B C3                CLR     C
006C 74FF              MOV     A,#0FFH
006E 9D                SUBB    A,R5
006F D3                SETB    C
0070 9500        E     SUBB    A,stGUD2+04H
0072 4007              JC      ?C0339
                                           ; SOURCE LINE # 2768
0074 ED                MOV     A,R5
0075 2500        E     ADD     A,stGUD2+04H
0077 F500        E     MOV     stGUD2+04H,A
0079 8006              SJMP    ?C0338
007B         ?C0339:
                                           ; SOURCE LINE # 2770
                                           ; SOURCE LINE # 2771
007B 7500FF      E     MOV     stGUD2+04H,#0FFH
                                           ; SOURCE LINE # 2772
007E 430002      R     ORL     inc,#02H
                                           ; SOURCE LINE # 2773
                                           ; SOURCE LINE # 2775
0081         ?C0338:
                                           ; SOURCE LINE # 2776
0081 EF                MOV     A,R7
0082 30E216            JNB     ACC.2,?C0334
                                           ; SOURCE LINE # 2777
                                           ; SOURCE LINE # 2778
0085 C3                CLR     C
0086 74FF              MOV     A,#0FFH
0088 9D                SUBB    A,R5
0089 D3                SETB    C
008A 9500        E     SUBB    A,stGUD2+05H
008C 4007              JC      ?C0342
                                           ; SOURCE LINE # 2779
008E ED                MOV     A,R5
008F 2500        E     ADD     A,stGUD2+05H
0091 F500        E     MOV     stGUD2+05H,A
0093 8006              SJMP    ?C0334
0095         ?C0342:
                                           ; SOURCE LINE # 2781
                                           ; SOURCE LINE # 2782
0095 7500FF      E     MOV     stGUD2+05H,#0FFH
                                           ; SOURCE LINE # 2783
0098         ?C0366:
0098 430004      R     ORL     inc,#04H
                                           ; SOURCE LINE # 2784
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 118 

                                           ; SOURCE LINE # 2785
                                           ; SOURCE LINE # 2786
009B         ?C0334:
                                           ; SOURCE LINE # 2788
009B 120000      E     LCALL   SetADC_Offset
                                           ; SOURCE LINE # 2790
009E AF00        R     MOV     R7,inc
                                           ; SOURCE LINE # 2791
00A0         ?C0344:
00A0 22                RET     
             ; FUNCTION _Change_ADC_Offset (END)

C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 119 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


LP_GLOBAL_USER_DATA1 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
RGB_MODE_USER_DATA . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  H_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  V_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  PHASE. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
LP_GLOBAL_USER_DATA2 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
LP_GLOBAL_USER_DATA3 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
GLOBAL_USER_DATA0. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  CONTRAST . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  BRIGHT . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  RTD_R_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  RTD_G_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  RTD_B_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  RTD_R_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  RTD_G_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  RTD_B_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
usADC_Clock. . . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
LP_GLOABL_USER_DATA4 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
GLOBAL_USER_DATA1. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  FUNCTION . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  INPUT_SOURCE . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  FILTER . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  OSD_POSH . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  OSD_POSV . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  OSD_TIMEOUT. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  OSD_INPUT. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
Save_GUD0. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GLOBAL_USER_DATA2. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  AD_R_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  AD_G_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  AD_B_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  AD_R_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  AD_G_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  AD_B_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
GLOBAL_USER_DATA3. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  5
  VOLUME . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  CURR_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  PREV_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  TV_SETTING . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  SPREAD . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
Save_GUD2. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GLOBAL_USER_DATA4. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  C1_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  C1_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  C1_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  C2_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  C2_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  C2_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  C3_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  C3_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  C3_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
FindColor. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ulTemp0. . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0000H  4
  ucDetect . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 120 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  ucResult . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  ucPhase. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0006H  1
usVer_Start. . . . . . . . . . . . . .  PUBLIC   IDATA  U_INT    0000H  2
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
_RTDSetByte. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
usVer_End. . . . . . . . . . . . . . .  PUBLIC   IDATA  U_INT    0002H  2
Set_H_Position . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
bAutoInProgress. . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
_Measure_Color . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  color. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  margin . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
LP_VIDEO_MODE_USER_DATA. . . . . . . .  TYPEDEF  -----  PTR      -----  3
VIDEO_MODE_USER_DATA . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  VBRIGHT. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  VCONTRAST. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  VSATURATION. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  VHUE . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
_Change_ADC_Offset . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  color. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  delta. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  inc. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
Set_V_Position . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RTDCodeW. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
usH_Start. . . . . . . . . . . . . . .  PUBLIC   IDATA  U_INT    0004H  2
CAP_WIN. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Auto_Balance . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Result . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Curr_PosV. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
Set_Bright_Contrast. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Tune_Balance . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Color. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Count. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  Result . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  Margin . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  FineTune . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  Offset_Stop. . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  ucTemp . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0006H  1
usH_End. . . . . . . . . . . . . . . .  PUBLIC   IDATA  U_INT    0006H  2
_I2CWrite. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ADC_DEFAULT. . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0000H  10
usStdHS. . . . . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
_Change_ADC_Gain . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  color. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  delta. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  inc. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
_Save_MUD. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Measure_PositionH . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  NM_H . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  usLBound . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  usRBound . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0001H  2
_Measure_PositionN . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  NM . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Result . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SetADC_Offset. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 121 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SetADC_GainOffset. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Read_Auto_Info. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_Measure_PositionV . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  NM_V . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  usLBound . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  usRBound . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0001H  2
Min_Noise_Margin . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Result . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  Noise. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Curr_StartH. . . . . . . . . . . . .  AUTO     DATA   U_INT    0001H  2
  Curr_EndH. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0003H  2
_RTDRead . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Auto_Position_Do. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  NM . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Result . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
usIPH_ACT_WID. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
usIPH_ACT_STA. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
stMUD. . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  4
usIPV_ACT_LEN. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
Auto_Config. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Result . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Noise. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  Curr_PosH. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  Curr_PosV. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  Curr_Clock . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  Curr_Phase . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  ucTemp1. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0006H  1
  usTemp . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0007H  2
Auto_Position. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Result . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Curr_PosH. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  Curr_PosV. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
SetADC_Gain. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RTDWrite. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Wait_Finish. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Wait_Time_Cnt. . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  IVS_Event. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
usIPV_ACT_STA. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
_Auto_Clock_Do . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  NM . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Result . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  count. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  delta. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  stop . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  start. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  ulSum. . . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0006H  4
  ulCompare. . . . . . . . . . . . . .  AUTO     DATA   U_LONG   000AH  4
_RGB_MODE_USER_DATA. . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  H_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  V_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  PHASE. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
ucMode_Curr. . . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
_GetMaxSum . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  select . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  ucPhase. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 122 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  ucDetect . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  ulTemp0. . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0003H  4
_GLOBAL_USER_DATA0 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  CONTRAST . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  BRIGHT . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  RTD_R_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  RTD_G_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  RTD_B_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  RTD_R_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  RTD_G_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  RTD_B_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
_Set_Phase . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GLOBAL_USER_DATA1 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  FUNCTION . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  INPUT_SOURCE . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  FILTER . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  OSD_POSH . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  OSD_POSV . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  OSD_TIMEOUT. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  OSD_INPUT. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
_GLOBAL_USER_DATA2 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  AD_R_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  AD_G_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  AD_B_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  AD_R_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  AD_G_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  AD_B_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
_Auto_Phase_Do . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  NM . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  ucDetect . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0000H  1
  ucPhase. . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0001H  1
  ucResult . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0002H  1
  ulTemp0. . . . . . . . . . . . . . .  AUTO     IDATA  U_LONG   0003H  4
  ulTemp1. . . . . . . . . . . . . . .  AUTO     IDATA  U_LONG   0007H  4
  ulTemp2. . . . . . . . . . . . . . .  AUTO     IDATA  U_LONG   000BH  4
_GLOBAL_USER_DATA3 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  VOLUME . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  CURR_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  PREV_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  TV_SETTING . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  SPREAD . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
_GLOBAL_USER_DATA4 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  C1_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  C1_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  C1_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  C2_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  C2_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  C2_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  C3_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  C3_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  C3_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
ucH_Min_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
ucH_Max_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
_Delay_Xms . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Auto_Phase . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Result . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
C51 COMPILER V7.06   LCD_AUTO                                                              11/21/2005 13:47:25 PAGE 123 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Curr_PosV. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
Wait_For_IVS . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  t. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
Load_GUD2. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ucV_Min_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
ucV_Max_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
stGUD0 . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  8
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
stGUD2 . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  6
Data . . . . . . . . . . . . . . . . .  EXTERN   DATA   ARRAY    -----  16
Set_Clock. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VIDEO_MODE_USER_DATA. . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  VBRIGHT. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  VCONTRAST. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  VSATURATION. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  VHUE . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
LP_RGB_MODE_USER_DATA. . . . . . . . .  TYPEDEF  -----  PTR      -----  3
LP_GLOBAL_USER_DATA0 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5364    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      73
   IDATA SIZE       =      8      15
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
