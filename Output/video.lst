C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE VIDEO
OBJECT MODULE PLACED IN .\Output\video.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Core\code\ext_device\video.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXT
                    -END PRINT(.\Output\video.lst) OBJECT(.\Output\video.obj)

stmt level    source

   1          //----------------------------------------------------------------------------------------------------
   2          // ID Code      : Video.c No.0002
   3          // Update Note  :
   4          //
   5          //----------------------------------------------------------------------------------------------------
   6          
   7          #define __VIDEO__
   8          
   9          #include "Core\Header\Include.h"
  10          
  11          #if(_VIDEO_SUPPORT == _ON)
  12          
  13          
  14          BYTE ucSearchCount = 0;
  15          
  16          /**
  17           * CVideoInitial
  18           * initial video source
  19           * set saturation,hue,backlight,sharpness, only called by CVideoIsExist
  20           * @param <none>
  21           * @return {none}
  22           *
  23          */
  24          //================================================================================================
  25          /////////////////////////////////////////////////
  26          void CVideoInitial(void)
  27          {       
  28   1          CScalerSetBit(_SYNC_CTRL_49, ~(_BIT1 | _BIT0), _BIT0);      // Measure HS/VS source select Video8/Vide
             -o16
  29   1          CScalerCodeW(VideoInit);
  30   1          CScalerCodeW(VideoAdcInit);
  31   1      
  32   1          kx_CInitialVDC();
  33   1          CScalerPageSelect(_PAGE8); 
  34   1          CScalerSetBit(_P8_VIDEO_CTRL1_A1, ~_BIT0, 0x00);  
  35   1          CScalerSetBit(_P8_INOUT_CTRL_A4, ~(_BIT1|_BIT4|_BIT5), _BIT4|_BIT5); // Force Only 4:2:2 Format Output
             - for 3580 !!  
  36   1          CScalerPageSelect(_PAGE9);      
  37   1          CScalerSetBit(_P9_HLOOP_MAXSTATE_C1, ~(_BIT2 | _BIT1 | _BIT0), 0x03);
  38   1      
  39   1          CInitInputSource();
  40   1          CVideoSoftReset();    
  41   1      }
  42          
  43          
  44          //--------------------------------------------------
  45          void CVideoSetVDCConBriCustomer(void)
  46          {
  47   1          CVideoSetContrast(GET_CONTRAST());
  48   1      #if(_VIDEO_AUTO_WHITE_BLANCE == _ENABLE)
  49   1          CVideoSetVDCBrightness(GET_VDC_OFFSET());
  50   1      #else
                  CVideoSetVDCBrightness(0x88);
              #endif  
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 2   

  53   1      }
  54          
  55          //--------------------------------------------------
  56          void CSetVideoParameter(void)
  57          {
  58   1          CScalerPageSelect(_PAGE6);
  59   1          CScalerSetByte(_P6_SPATIAL_CTRL_DB, 0x02);
  60   1          //CScalerSetBit(_P6_DCTI_1ST_GAIN_D8, ~(_BIT7), 0);
  61   1          
  62   1          CScalerPageSelect(_PAGE7);
  63   1          CScalerSetBit(_P7_DLTI_DCTI_ENABLE_A1, ~(_BIT6), 0);
  64   1      
  65   1          switch (ucVideoType)
  66   1          {
  67   2              case ZNTSC:
  68   2                  CScalerCodeW(RTD2610_NTSC_M_ini);
  69   2                  break;
  70   2      
  71   2              case ZPAL_I:
  72   2                  CScalerCodeW(RTD2610_PAL_I_ini);
  73   2                  break;
  74   2      
  75   2              case ZPAL_M:
  76   2                  CScalerCodeW(RTD2610_PAL_M_ini);
  77   2                  break;
  78   2      
  79   2              case ZPAL_N:
  80   2                  CScalerCodeW(RTD2610_PAL_CN_ini);
  81   2                  break;
  82   2      
  83   2              case ZNTSC_443:
  84   2                  CScalerCodeW(RTD2610_NTSC_443_ini);
  85   2                  break;
  86   2      
  87   2              case ZSECAM:
  88   2                  CScalerCodeW(RTD2610_SECAM_ini);
  89   2                  break;
  90   2      
  91   2              case ZPAL_60:
  92   2                  CScalerCodeW(RTD2610_PAL_60_ini);
  93   2                  break;
  94   2      
  95   2              case ZNTSC_50:
  96   2                  //CScalerCodeW(RTD2610_NTSC_50_ini);
  97   2                  break;
  98   2          }
  99   1      
 100   1      
 101   1          CScalerPageSelect(_PAGE8);      
 102   1          CScalerRead(_P8_VIDEO_CTRL1_A1, 1, pData, _NON_AUTOINC);
 103   1          if(pData[0] & _BIT5)//_GET_INPUT_SOURCE() == _SOURCE_VIDEO_SV)
 104   1          {
 105   2              CScalerPageSelect(_PAGE8);      
 106   2              CScalerSetByte(_P8_YCSEP_CTRL_E0, 0x03);    // YC Seperate Control:1D           
 107   2          }
 108   1          CScalerPageSelect(_PAGE8);
 109   1          CScalerSetBit(0xA7, ~(_BIT3|_BIT2|_BIT1|_BIT0), _BIT0);
 110   1            /*
 111   1              if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_AV || _GET_INPUT_SOURCE() == _SOURCE_VIDEO_SV )
 112   1              {
 113   1                      CScalerSetBit(_P8_OUTPUT_CTRL_A7, 0xf0, 0x00);
 114   1                      //CScalerSetByte(_P8_CONTRAST1_A8,   0x90);
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 3   

 115   1                      //CScalerSetByte(_P8_BRIGHTNESS1_A9, 0x70);
 116   1              }    */
 117   1          if (ucVideoType == ZNTSC_50)
 118   1              CScalerSetBit(_P8_YCSEP_CTRL_E0, 0xF8, 0x03);       
 119   1          CScalerPageSelect(_PAGE9);
 120   1          if (ucVideoType == ZPAL_60) // willy added for pal 60 only
 121   1              CScalerSetBit(_P9_VS_TC_E7, 0xbf, 0x40);    
 122   1          else
 123   1              CScalerSetBit(_P9_VS_TC_E7, 0xbf, 0x00);    
 124   1      }
 125          
 126          //--------------------------------------------------
 127          // Description  : Soft Reset 2610
 128          // Input Value  : None
 129          // Output Value : None
 130          //--------------------------------------------------
 131          void CVideoSoftReset(void)
 132          {
 133   1          CScalerPageSelect(_PAGE8);
 134   1          CScalerSetByte(_P8_SOFT_RESET_CF, 0x01); 
 135   1          CTimerDelayXms(10);    
 136   1          CScalerSetByte(_P8_SOFT_RESET_CF, 0x00);
 137   1      
 138   1      }
 139          
 140          //--------------------------------------------------
 141          // Description  : Set  2610 Contrast
 142          // Input Value  : ucValue
 143          // Output Value : None
 144          //--------------------------------------------------
 145          void CVideoSetVDCContrast(BYTE ucValue)
 146          {
 147   1              ucValue = ucValue;
 148   1              CScalerPageSelect(_PAGE8);
 149   1              CScalerSetByte(_P8_CONTRAST1_A8,ucValue);       
 150   1      }
 151          
 152          //--------------------------------------------------
 153          // Description  : Set  2610 Brightness
 154          // Input Value  : ucValue
 155          // Output Value : None
 156          //--------------------------------------------------
 157          void CVideoSetVDCBrightness(BYTE ucValue)
 158          {
 159   1              ucValue = ucValue;
 160   1              CScalerPageSelect(_PAGE8);
 161   1              CScalerSetByte(_P8_BRIGHTNESS1_A9,ucValue);       
 162   1      }
 163          
 164          //--------------------------------------------------
 165          #if(_VIDEO_TV_SUPPORT)
 166          void CSetTvColor(BYTE ucColorMode)
 167          {
 168   1              if(_GET_INPUT_SOURCE() != _SOURCE_VIDEO_TV)
 169   1             return;
 170   1      
 171   1          switch(ucColorMode)
 172   1          {
 173   2          case _TV_NTSC_M:
 174   2          case _TV_NTSC_4_BG:
 175   2          case _TV_NTSC_4_DK:
 176   2          case _TV_NTSC_4_I:
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 4   

 177   2              ucColorMode = 0x00;
 178   2              break;
 179   2      
 180   2          case _TV_PAL_M:
 181   2              ucColorMode = 0x01;
 182   2              break;
 183   2      
 184   2          case _TV_PAL_BG:
 185   2          case _TV_PAL_I:
 186   2          case _TV_PAL_DK:
 187   2              ucColorMode = 0x06;
 188   2              break;
 189   2      
 190   2          case _TV_PAL_N:
 191   2              ucColorMode = 0x03;
 192   2              break;
 193   2      
 194   2          case _TV_SECAM_BG:
 195   2          case _TV_SECAM_DK:
 196   2          case _TV_SECAM_L:
 197   2          case _TV_SECAM_LL:
 198   2              ucColorMode = 0x07;
 199   2              break;
 200   2          }
 201   1      
 202   1          CScalerPageSelect(_PAGE8);   // TV disable auto mode
 203   1          CScalerSetByte(0xD2, ucColorMode); 
 204   1      }
 205          #endif // #if(_VIDEO_TV_SUPPORT)
 206          
 207          //--------------------------------------------------
 208          // Description  : Display video set color process
 209          // Input Value  : None
 210          // Output Value : None
 211          //--------------------------------------------------
 212          void CSetVideoColor(void)
 213          {
 214   1          // Setup color conversion
 215   1          CModeSetupColorConversion();
 216   1          CEepromLoadColorTempData();
 217   1          CEepromLoadBriConData();
 218   1          CEepromLoadHueSatData();
 219   1      
 220   1          //adjust customer color mode
 221   1      #if(_AdjustCustomerColorMode == _ENABLE)
                  CAdjustCustomerColorMode();
              #endif
 224   1          CAdjustContrast();
 225   1          CAdjustBrightness();
 226   1          CAdjustBacklight();
 227   1          CAdjustPeakingCoding();
 228   1          CVideoSetSaturation(GET_SATURATION());
 229   1          CVideoSetVDCConBriCustomer();
 230   1          CAdjustSharpnessForScaleUp();
 231   1          CAdjustSharpnessForScaleDown();
 232   1      
 233   1          CPowerADCAPLLOff();
 234   1      
 235   1          CVideoSetVDCBrightness(0x86);//86//8E
 236   1          CVideoSetVDCContrast(0x94); // 0x83//93
 237   1          CAccAdjust(GET_DCC_MODE());  // set DCC mode
 238   1      
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 5   

 239   1          if (0)//stDisplayInfo.DHWidth > 700)
 240   1          {
 241   2              CTimerWaitForEvent(_EVENT_DEN_STOP);
 242   2              CScalerPageSelect(_PAGE6);
 243   2              if(GET_NOISEREDUTION())
 244   2                  CScalerSetBit(_P6_SPATIAL_CTRL_DB, ~(_BIT2 |_BIT1), _BIT2 |_BIT1);
 245   2              else
 246   2                  CScalerSetBit(_P6_UZD_CTRL1_E4, ~(_BIT3 |_BIT2), 0x00);     //For 480i/576i SU case,close NR f
             -unc.
 247   2          }
 248   1      }
 249          
 250          /**
 251           * CVideoDisplaySet
 252           * Setup VGA display
 253           * set video display
 254           * @param <none>
 255           * @return {none}
 256           *
 257          */
 258          //--------------------------------------------------
 259          // Description  : Display video set process
 260          // Input Value  : None
 261          // Output Value : None
 262          //--------------------------------------------------
 263          void CVideoDisplaySet(void)
 264          {
 265   1          BYTE field;                         
 266   1          BYTE ucScale = 0;
 267   1          WORD iDHTotal;
 268   1               
 269   1        //  CPowerLightPowerOff();        
 270   1      
 271   1          CScalerCodeW(tVIDEO_TABLE_SET_SCALER);
 272   1          //double clk input & Swap V8/V6-C-port MSB to LSB sequence into LSB to MSB
 273   1          CScalerSetByte(_IPH_ACT_WID_H_16, 0x8A);
 274   1          CSetVideoParameter();
 275   1          CVideoSoftReset();
 276   1         
 277   1          //if(CTimerPollingEventProc(60, CMiscModeMeasurePollingEvent))
 278   1          //  CModeMeasureData();
 279   1      
 280   1          
 281   1      #if(_VIDEO_TV_SUPPORT)
 282   1          if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
 283   1          {
 284   2      
 285   2              bTVSignal = _TV_NO_SIGNAL;
 286   2              for(field = 0; field < 10; field++)
 287   2              {
 288   3                  if (kx_CVideoModeLocked())
 289   3                  {
 290   4                      bTVSignal = _TV_IS_SIGNAL;
 291   4                      break;
 292   4                  }
 293   3                  CTimerDelayXms(5);
 294   3              }
 295   2      
 296   2              CScalerPageSelect(_PAGE9);      
 297   2              CScalerSetByte(_P9_C_LOCK_CONF_B6, (ucVideoType == ZSECAM && bTVSignal == _TV_IS_SIGNAL) ? 0xFB : 
             -0x6B);
 298   2      
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 6   

 299   2              //CSetTvColor(ucTVType);
 300   2      
 301   2              // add for tv
 302   2              CScalerPageSelect(_PAGE8);  
 303   2              CScalerSetByte(0xE1, 0x65); 
 304   2              CScalerSetByte(0xE2, 0x00); 
 305   2              CScalerSetByte(0xEA, 0x08); 
 306   2          }
 307   1          else
 308   1      #endif
 309   1          {
 310   2              CScalerPageSelect(_PAGE8);   // Video enable auto mode
 311   2              CScalerSetByte(0xD2, 0x80);  
 312   2              //CScalerSetBit(_P8_OUTPUT_CTRL_A7, ~(_BIT0|_BIT1|_BIT2), 0x00);
 313   2              CScalerSetByte(0xEA, 0x00);  //CLOSE the VD C's LOW PASS of FILTER}
 314   2              CScalerPageSelect(_PAGE9);      
 315   2              CScalerSetByte(_P9_C_LOCK_CONF_B6, 0x6B);
 316   2          }
 317   1          
 318   1          if(ucVideoType > ZPAL_60)
 319   1          {
 320   2              field    = _VIDEO_50HZ;
 321   2              iDHTotal = Panel.PalDHTotal;
 322   2          }
 323   1          else
 324   1          {
 325   2              field    = _VIDEO_60HZ;
 326   2              iDHTotal = Panel.NtscDHTotal;
 327   2          }
 328   1                if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
 329   1                              iDHTotal = 1152;
 330   1          
 331   1          stModeInfo.IHTotal      = tVIDEO_TABLE_INPUT_INFO[field][0];
 332   1          stModeInfo.IHStartPos   = tVIDEO_TABLE_INPUT_INFO[field][1];
 333   1          stModeInfo.IHWidth      = tVIDEO_TABLE_INPUT_INFO[field][2];
 334   1          stModeInfo.IVStartPos   = tVIDEO_TABLE_INPUT_INFO[field][3];
 335   1          stModeInfo.IVHeight     = tVIDEO_TABLE_INPUT_INFO[field][4];
 336   1          stModeInfo.IHFreq       = 157;    // For PAL and NTSC. We can use sync processor to measure the actual
             - value.
 337   1              if(field == _VIDEO_60HZ)  // hill added to avoid framesync error
 338   1                      stModeInfo.IVTotal = 264;   // set 60HZ 525 lines
 339   1              else if(field == _VIDEO_50HZ)
 340   1                      stModeInfo.IVTotal = 312;  // set 50Hz 625 lines
 341   1      
 342   1          stDisplayInfo.DHWidth   = CCalcPanelWdith();//Panel.DHWidth;
 343   1          stDisplayInfo.DVHeight  = Panel.DVHeight;
 344   1          stDisplayInfo.DVStartPos = Panel.DVStartPos;
 345   1          stDisplayInfo.DHTotal   = iDHTotal;//Panel.DHTotal;
 346   1                    
 347   1          // Get scaling information
 348   1          ucScale = 0;
 349   1          if(stModeInfo.IVHeight < stDisplayInfo.DVHeight)        ucScale |= _BIT0;    // bit 0 : V scale-up
 350   1          if(stModeInfo.IVHeight > stDisplayInfo.DVHeight)        ucScale |= _BIT1;    // bit 1 : V scale-down
 351   1          if(stModeInfo.IHWidth < stDisplayInfo.DHWidth)          ucScale |= _BIT2;    // bit 2 : H scale-up
 352   1          if(stModeInfo.IHWidth > stDisplayInfo.DHWidth)          ucScale |= _BIT3;    // bit 3 : H scale-down
 353   1                       
 354   1          // Capture window setup
 355   1          CModeSetCaptureWindow(ucScale);     //!set capture size
 356   1          CModeSetScaling(ucScale);         
 357   1          CScalerSetBit(_IPH_ACT_WID_H_16, ~_BIT7, 0x00);//Video8 C-port MSB & LSB Swap(Normal)
 358   1      
 359   1          CModeSetDisplay(ucScale);
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 7   

 360   1          // Disable SRGB
 361   1          CScalerSetBit(_COLOR_CTRL_62, ~(_BIT2), 0x00);
 362   1      
 363   1          CSetVideoColor();
 364   1      
 365   1      #if(_DE_INTERLACE_SUPPORT == _ON)
 366   1        #if(_DE_INTERLACE_TEST_OPTION==_ENABLE)   
 367   1          if(!bDIstatus)
 368   1              CModeDeInterlaceSetting();
 369   1          else
 370   1          {
 371   2              CScalerSetBit(_SCALE_CTRL_32, ~(_BIT7 ), _BIT7);        //video mode compensation enable
 372   2              CScalerPageSelect(_PAGE6);
 373   2              CScalerSetBit(_P6_ENABLE_BIST_CTRL_A0, ~_BIT3, 0x00);   //Disable De-interlace Mode     
 374   2          }           
 375   1        #else
                  CModeDeInterlaceSetting();  
                #endif        
 378   1      #endif
 379   1      
 380   1      
 381   1          CAdjustInterlaceIVS2DVSDelay();
 382   1          
 383   1          pData[0] = CFrameSyncDo();
 384   1      
 385   1          if (pData[0] == 2) 
 386   1          {
 387   2          //  CModeResetMode();
 388   2          //  return;
 389   2          }
 390   1      
 391   1          
 392   1      #if(_VIDEO_TV_SUPPORT)
 393   1          if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
 394   1          {
 395   2              kx_CSetTVFrameSync();
 396   2          }
 397   1      #endif
 398   1      
 399   1          SET_MODESTABLE();
 400   1      
 401   1          CTimerDelayXms(100);
 402   1          CModeSetupEtcs(_FUNCTION_DISABLE);
 403   1         
 404   1          if (ucVideoType == ZNTSC || ucVideoType == ZNTSC_443 || ucVideoType == ZNTSC_50)
 405   1              kx_CAdjustVDCHue(GET_HUE());
 406   1          else
 407   1              kx_CAdjustVDCHue(50);
 408   1                                                                
 409   1          if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_AV && (ucVideoType == ZNTSC_443 || ucVideoType == ZPAL_60))
 410   1          {
 411   2      
 412   2              CScalerPageSelect(_PAGE9);      
 413   2              CScalerSetBit(_P9_HLOOP_MAXSTATE_C1, ~(_BIT2 | _BIT1 | _BIT0), 0x01);
 414   2          }
 415   1      
 416   1              //CScalerSetByte(_P8_SATURATION1_AA, 0xFF);
 417   1              
 418   1              if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_AV || _GET_INPUT_SOURCE() == _SOURCE_VIDEO_SV )
 419   1              {
 420   2                      CScalerPageSelect(_PAGE8);
 421   2              CScalerSetBit(0xEA, 0xf0, 0x07);
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 8   

 422   2              }
 423   1       
 424   1                              /*
 425   1          CScalerPageSelect(_PAGE6);
 426   1          CScalerSetBit(0xC2, ~(_BIT0), 0);
 427   1          CScalerSetByte(0xC3, 0x7F); 
 428   1          CScalerSetByte(0xC4, 0x4A);
 429   1          CScalerSetByte(0xC5, 0xF6);
 430   1          CScalerSetByte(0xC6, 0x00);
 431   1          CScalerSetByte(0xC7, 0x80);
 432   1          CScalerSetByte(0xC8, 0x80);
 433   1          CScalerSetByte(0xC9, 0x00);
 434   1          CScalerSetByte(0xCA, 0x0A);
 435   1          CScalerSetByte(0xCB, 0x0A);
 436   1          CScalerSetByte(0xCC, 0x07);
 437   1           
 438   1          CScalerPageSelect(_PAGE7);
 439   1          CScalerSetBit(0xAA, ~(_BIT0), 0);    
 440   1          CScalerSetByte(0xAB, 0x7E);          //PEAKING C0
 441   1          CScalerSetByte(0xAC, 0x0B);          //PEAKING C1
 442   1          CScalerSetByte(0xAD, 0x36);          //PEAKING C2
 443   1          CScalerSetByte(0xAE, 0x00);
 444   1          CScalerSetByte(0xAF, 0x80);
 445   1          CScalerSetByte(0xB0, 0x80);
 446   1          CScalerSetByte(0xB1, 0x00);
 447   1          CScalerSetByte(0xB2, 0x08);         //POS RANGE        //08        80
 448   1          CScalerSetByte(0xB3, 0x80);         //NEG RANGE        //40
 449   1          CScalerSetByte(0xB4, 0x0F);         //CORING           //0A
 450   1           
 451   1          CScalerPageSelect(_PAGE8);
 452   1          CScalerSetBit(0xA7, ~(_BIT3|_BIT2|_BIT1|_BIT0), _BIT0);
 453   1          CScalerSetBit(0xEA, ~(_BIT3|_BIT2|_BIT1|_BIT0), _BIT3|_BIT2|_BIT1|_BIT0);
 454   1          CScalerSetByte(0xE2, 0x00);         //70
 455   1      
 456   1          CScalerPageSelect(_PAGE6);
 457   1          if (ucVideoType == ZNTSC || ucVideoType == ZNTSC_443 || ucVideoType == ZNTSC_50)
 458   1              CScalerSetByte(0xD8, 0x0f);  //Close  I DOMAIN's DCTI,Open GAIN to 0xOF
 459   1          else
 460   1              CScalerSetByte(0xD8, 0x8f);  //Open  I DOMAIN's DCTI,Open GAIN to 0xOF
 461   1          CScalerSetByte(0xC1, 0x00);  //Close I DOMAIN's PEAKING
 462   1          
 463   1          CScalerPageSelect(_PAGE7);
 464   1          CScalerSetByte(0xA1, 0xC0);  //Open  D DOMAIN's DCTI, Open GAIN to 0xOF
 465   1          CScalerSetByte(0xA3, 0x05);  //DLTi_Gain
 466   1          CScalerSetByte(0xA4, 0x01);  //DLTi_Gain_Threshold   0x1e
 467   1          CScalerSetByte(0xA5, 0x70);  //DLTi_Options
 468   1          CScalerSetByte(0xA6, 0x0F);  //Open GAIN to 0xOF
 469   1      
 470   1          CScalerPageSelect(_PAGE8);
 471   1          if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
 472   1          {   
 473   1              CScalerSetByte(0xEA, 0x08); 
 474   1              CScalerSetByte(0xA8, 0x85);             //Contrast
 475   1              CScalerSetByte(0xA9, 0x76);            //Brightness
 476   1          }
 477   1          else
 478   1          {
 479   1              CScalerSetByte(0xEA, 0x00);  //CLOSE the VD C's LOW PASS of FILTER}
 480   1              CScalerSetByte(0xA8, 0x90);             //Contrast
 481   1              CScalerSetByte(0xA9, 0x7b);            //Brightness   0x85
 482   1          }   
 483   1      */   
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 9   

 484   1      }
 485          
 486          //--------------------------------------------------
 487          //
 488          //      void CSetVideoModeReady(void)
 489          //--------------------------------------------------
 490          void CSetVideoModeReady(void)
 491          {
 492   1          kx_CAdjustVDCHue(50);
 493   1          CTimerCancelTimerEvent(CModeNoSignalEvent);
 494   1          CTimerCancelTimerEvent(CModeNoCableEvent);
 495   1          CTimerCancelTimerEvent(CModeNoSupportEvent);
 496   1          CTimerCancelTimerEvent(CModePowerSavingEvent);
 497   1          SET_READYFORDISPLAY();
 498   1          bShowOSDCurr = (bit)(CScalerGetBit(_OVERLAY_CTRL_6C, _BIT0));
 499   1          CScalerSetBit(_OVERLAY_CTRL_6C, ~_BIT0, 0x00);
 500   1          CVideoDisplaySet();
 501   1      #if(_VIDEO_TV_SUPPORT)
 502   1          if (_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
 503   1          {
 504   2              TVNoSignalCount = 0;
 505   2              TVSignalCount   = 0;
 506   2          }
 507   1      #endif
 508   1          CScalerSetBit(_OVERLAY_CTRL_6C, ~_BIT0, bShowOSDCurr);         
 509   1          CLR_LIGHTPOWERSTATUS();
 510   1          ucSearchCount     = 1;
 511   1          ucTVSyncFailCount = 0;
 512   1          ucCurrState       = _ACTIVE_STATE;
 513   1      
 514   1          
 515   1      }
 516          
 517          /**
 518           * CVideoProcess
 519           * The VDC input's state machine.
 520           * If the input source is throught VDC, it will call this function to
 521           * process display state. There are 4 states here.
 522           * @param <none>
 523           * @return {none}
 524           *
 525          */     
 526          //--------------------------------------------------
 527          // Description  : The VDC input's state machine.
 528          // If the input source is throught VDC, it will call this function to
 529          // process display state. There are 4 states here.
 530          // Input Value  : None
 531          // Output Value : None
 532          //--------------------------------------------------
 533          void CVideoProcess(void)
 534          {
 535   1          switch (ucCurrState) 
 536   1          {
 537   2              case _SEARCH_STATE: 
 538   2                  if(kx_CVideoModeDetect())
 539   2                  {
 540   3                      CSetVideoModeReady();
 541   3                  } 
 542   2                  else 
 543   2                  {
 544   3                      CTimerCountDownEventProc(&ucTimerEvent, 120,  CModeSyncTimeoutCountDownEvent);
 545   3                  }
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 10  

 546   2                  break;
 547   2      
 548   2              case _ACTIVE_STATE:
 549   2                  if (kx_CVideoIsChange())
 550   2                  {         
 551   3                      CMuteOn();
 552   3                      CModeResetMode();  
 553   3                      break;
 554   3                  }  
 555   2      #if(_VIDEO_TV_SUPPORT)
 556   2                  bTVSigChange();
 557   2      #endif
 558   2      
 559   2                 // CVideoFixedFHFVBug();                       
 560   2                  if (GET_READYFORDISPLAY() == _TRUE) 
 561   2                  {
 562   3                      CPowerPanelOn();
 563   3                      CLR_READYFORDISPLAY();
 564   3                      SET_OSD_READYFORDISPLAY();
 565   3                  }    
 566   2      
 567   2                  if (ucSearchCount)
 568   2                      ucSearchCount++;
 569   2                                                                                         
 570   2      #if(_VIDEO_TV_SUPPORT)
 571   2        #if (_TV_AFC)
                          CTVAFC();
                #endif
 574   2      #endif               
 575   2                  if (!GET_CLEAR_OSD_EN())
 576   2                  {
 577   3                      if (ucSearchCount < _VIDEO_SEARCH_COUNT)  
 578   3                          break;
 579   3                  }
 580   2      
 581   2                  ucSearchCount = 0;
 582   2                              if (GET_LIGHTPOWERSTATUS() == _OFF) 
 583   2                              {
 584   3      #if(_VIDEO_TV_SUPPORT)
 585   3                      if (1 == bTVNoSignal && _GET_BLUE_BACKGROUND())
 586   3                      {
 587   4                          CAdjustBackgroundColor(0x00, 0x00, 0xFF);
 588   4                          CScalerSetBit(_VDISP_CTRL_28, 0xFF, (_BIT3));
 589   4                      }
 590   3                      else
 591   3      #endif
 592   3                      CScalerSetBit(_VDISP_CTRL_28, ~(_BIT5), (_BIT3));
 593   3                      CPowerLightPowerOn();
 594   3      
 595   3                      if (GET_FIRST_SHOW_NOTE())
 596   3                      {
 597   4                          ucOsdEventMsg = _DO_SHOW_NOTE;
 598   4                      }
 599   3      #if(_VIDEO_TV_SUPPORT)
 600   3                      else if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV && bChangeChannel)
 601   3                      {
 602   4                          CShowTVNumber(stTvInfo.CurChn, _SHOW_CH_TV_NUMBER | _SHOW_CH_TV_TYPE);
 603   4                      }
 604   3      #endif
 605   3                  }
 606   2              
 607   2                  break;
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 11  

 608   2      
 609   2              case _NOSIGNAL_STATE:
 610   2                  if (GET_READYFORDISPLAY()) 
 611   2                  {
 612   3                      CLR_READYFORDISPLAY();
 613   3                      CModeSetFreeRun();  
 614   3                      SET_OSD_READYFORDISPLAY();
 615   3                  }    
 616   2      
 617   2                  if (kx_CVideoModeLocked())
 618   2                  {
 619   3                      COsdDispOsdTimerEvent();
 620   3                      ucTVSyncFailCount = 250;
 621   3                      CModeResetMode();
 622   3                  }
 623   2                  break;
 624   2      
 625   2              case _SLEEP_STATE:
 626   2                  if (kx_CVideoModeLocked())
 627   2                  {      
 628   3                      ucTVSyncFailCount = 250;
 629   3                      CModeResetMode();
 630   3                  }
 631   2                  break;
 632   2      
 633   2              default:
 634   2                  break;
 635   2          }
 636   1      }
 637          
 638          //--------------------------------------------------
 639          #if(_VIDEO_TV_SUPPORT)
 640          void bTVSigChange(void)
 641          {
 642   1          if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
 643   1          {
 644   2              CAdjustTVPQ(_THRESHOLD_POINT);
 645   2      
 646   2              if (kx_CVideoModeLocked())
 647   2              {     
 648   3                  if (TVNoSignalCount)    TVNoSignalCount--;
 649   3      
 650   3                  if ((bTVSignal == _TV_NO_SIGNAL) && (TVSignalCount < (_TV_SIGNAL_FAIL+10)))
 651   3                  {
 652   4                      TVSignalCount++;
 653   4                      if (TVSignalCount > _TV_SIGNAL_FAIL)
 654   4                      {         
 655   5                          TVNoSignalCount = 0;
 656   5                          TVSignalCount   = 0;
 657   5                          bTVSignal       = _TV_IS_SIGNAL;
 658   5                          CScalerPageSelect(_PAGE9);      
 659   5                          CScalerSetByte(_P9_C_LOCK_CONF_B6, (ucVideoType == ZSECAM && bTVSignal == _TV_IS_SIGNA
             -L) ? 0xFB : 0x6B);
 660   5                      }
 661   4                  }
 662   3              }
 663   2              else
 664   2              {
 665   3                  if (TVSignalCount)    TVSignalCount--;
 666   3      
 667   3                  if ((bTVSignal == _TV_IS_SIGNAL) && (TVNoSignalCount < (_TV_SIGNAL_FAIL+10)))
 668   3                  {
C51 COMPILER V7.06   VIDEO                                                                 04/29/2010 18:06:00 PAGE 12  

 669   4                      TVNoSignalCount++;
 670   4                      if (TVNoSignalCount > _TV_SIGNAL_FAIL)
 671   4                      {
 672   5                          TVNoSignalCount = 0;
 673   5                          TVSignalCount   = 0;
 674   5                          bTVSignal       = _TV_NO_SIGNAL;
 675   5                          CScalerPageSelect(_PAGE9);      
 676   5                          CScalerSetByte(_P9_C_LOCK_CONF_B6, (ucVideoType == ZSECAM && bTVSignal == _TV_IS_SIGNA
             -L) ? 0xFB : 0x6B);
 677   5                      }
 678   4                  } 
 679   3              }
 680   2          }
 681   1      }
 682          #endif
 683          
 684          #endif  // End of #if(_VIDEO_SUPPORT == _ON)


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1763    ----
   CONSTANT SIZE    =    654    ----
   XDATA SIZE       =      5       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      4    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
