C51 COMPILER V7.06   KEY                                                                   04/29/2010 18:06:06 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Output\Key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Keys\Key.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Output
                    -\Key.lst) OBJECT(.\Output\Key.obj)

stmt level    source

   1          //----------------------------------------------------------------------------------------------------
   2          // ID Code      : Key.c No.0001
   3          // Update Note  : 
   4          //
   5          //----------------------------------------------------------------------------------------------------
   6          
   7          #define __KEY__
   8          
   9          #include "Core\Header\include.h"
  10                         
  11          //--------------------------------------------------
  12          // Description  : Key scan process     
  13          // Input Value  : None
  14          // Output Value : None
  15          //--------------------------------------------------
  16          void IrProcessMessage(void);
  17          void CKeyHandler(void)
  18          {
  19   1          // Clear the key message
  20   1          ucKeyMessage = _NONE_KEY_MESSAGE;
  21   1          
  22   1          if(CKeyScanReady())// || _ACTIVE_STATE != ucCurrState)
  23   1          {
  24   2              // Store previous key state
  25   2              ucKeyStatePrev = ucKeyStateCurr;
  26   2              
  27   2              // Get current key state
  28   2              ucKeyStateCurr = CKeyScan();
  29   2                 
  30   2              // Power key process, return if power key is pressed
  31   2              if(CKeyPowerKeyProc())
  32   2                  return;
  33   2              
  34   2              // Convert key state to key message, store in (ucKeyNotify)
  35   2              CKeyMessageProc();
  36   2      
  37   2          #if(_REMOTE_CONTROLLER != _IR_NONE) 
  38   2              {
  39   3                  if(ucKeyMessage == _NONE_KEY_MESSAGE)
  40   3                  {        
  41   4                     ucKeyMessage = CIRKeyScan();
  42   4                     #ifdef IRSEND_ENABLE
  43   4                         IrProcessMessage();      
  44   4                     #endif
  45   4              #if 0   //Debug
                              OSDPosition(120, 18, 0, 1, 0x03);       
                              COsdFxEnableOsd();    
                              Gotoxy(20, 0, BYTE_DISPLAY);
                              PrintfDec(ucKeyMessage);
                              CTimerCancelTimerEvent(COsdTimeOut);
                      #endif
  52   4      
  53   4                     if (ucKeyMessage != _NONE_KEY_MESSAGE)
  54   4                        ucPrevKey = ucKeyMessage;                   
C51 COMPILER V7.06   KEY                                                                   04/29/2010 18:06:06 PAGE 2   

  55   4                  }
  56   3              }
  57   2          #endif
  58   2          }
  59   1          
  60   1      #if(_DEBUG_TOOL != _NONE)
  61   1          GetVirtualKey();
  62   1      #endif
  63   1          
  64   1          if(ucKeyMessage == _POWER_KEY_MESSAGE)
  65   1          {
  66   2              CIrdaReadData();        
  67   2              CIrdaReadData();        
  68   2              SET_POWERSWITCH();
  69   2          }
  70   1      
  71   1          // debug info
  72   1          //if(ucKeyMessage != _NONE_KEY_MESSAGE)
  73   1              //      CUartPrintf("KeyMessage:",ucKeyMessage);
  74   1      }
  75          
  76          //--------------------------------------------------
  77          // Description  : Check power key process
  78          // Input Value  : None
  79          // Output Value : None
  80          //--------------------------------------------------
  81          /*
  82          void CKeyCheckPowerKey(void)
  83          {
  84              // Store previous key state
  85              ucKeyStatePrev = ucKeyStateCurr;
  86              
  87              // Get current key state
  88              ucKeyStateCurr = CKeyScan();
  89              
  90              // Power key process
  91              CKeyPowerKeyProc();
  92          }
  93          */
  94          //--------------------------------------------------
  95          // Description  : Initial key status
  96          // Input Value  : None
  97          // Output Value : None
  98          //--------------------------------------------------
  99          void CKeyInitial(void)
 100          {
 101   1          CLR_KEYSCANREADY();
 102   1          CLR_KEYSCANSTART();
 103   1      }
 104          
 105          //--------------------------------------------------
 106          // Description  : Key scan ready process. We wait 0.02 sec in order to keep the keypad debounce
 107          // Input Value  : None
 108          // Output Value : None
 109          //--------------------------------------------------
 110          bit CKeyScanReady(void)
 111          {
 112   1          if(GET_KEYSCANSTART() && GET_KEYSCANREADY())
 113   1          {
 114   2                      CLR_KEYSCANSTART();  //
 115   2                      CLR_KEYSCANREADY();  //
 116   2              return _TRUE;
C51 COMPILER V7.06   KEY                                                                   04/29/2010 18:06:06 PAGE 3   

 117   2          }
 118   1          else if(!GET_KEYSCANSTART())
 119   1          {
 120   2              // Wait 0.02 sec in order to keep the keypad debounce
 121   2              SET_KEYSCANSTART();
 122   2              //CTimerReactiveTimerEvent(SEC(0.02), CKeyScanReadyTimerEvent);
 123   2              CTimerReactiveTimerEvent(SEC(0.03), CKeyScanReadyTimerEvent);
 124   2              
 125   2              return _FALSE;
 126   2          }
 127   1          else
 128   1          {
 129   2              return _FALSE;
 130   2          }  
 131   1      }
 132          
 133          //--------------------------------------------------
 134          // Description  : Key scan ready timer event
 135          // Input Value  : None
 136          // Output Value : None
 137          //--------------------------------------------------
 138          void CKeyScanReadyTimerEvent(void)
 139          {
 140   1          SET_KEYSCANREADY();
 141   1      }
 142          
 143          //--------------------------------------------------
 144          // Description  : Key repeat enable timer event
 145          // Input Value  : None
 146          // Output Value : None
 147          //--------------------------------------------------
 148          void CKeyRepeatEnableTimerEvent(void)
 149          {
 150   1          SET_KEYREPEATSTART();
 151   1      }
 152          
 153          //--------------------------------------------------
 154          // Description  : Key message translation
 155          // Input Value  : ucKeyMask     --> Key mask
 156          //                ucKeyMsg      --> Key message
 157          // Output Value : None
 158          //--------------------------------------------------
 159          void CKeyMessageConvert(WORD ucKeyMask, BYTE ucKeyMsg)
 160          {
 161   1          if((ucKeyStatePrev ^ ucKeyStateCurr) == ucKeyMask)
 162   1          {
 163   2              ucKeyMessage = ucKeyMsg;
 164   2          }
 165   1          else
 166   1          { 
 167   2              if(GET_KEYREPEATENABLE())
 168   2              {
 169   3                  if(GET_KEYREPEATSTART())
 170   3                  {
 171   4                      ucKeyMessage = ucKeyMsg;
 172   4                      //CLR_KEYREPEATSTART();
 173   4                  }
 174   3                  else
 175   3                  {
 176   4                      CTimerActiveTimerEvent(SEC(_KEY_REPEAT_START_TIME),CKeyRepeatEnableTimerEvent);
 177   4                  }
 178   3              }
C51 COMPILER V7.06   KEY                                                                   04/29/2010 18:06:06 PAGE 4   

 179   2          }
 180   1      }
 181          
 182          //--------------------------------------------------
 183          // Description  : Power key process
 184          // Input Value  : None
 185          // Output Value : Return _TRUE if power key is pressed
 186          //--------------------------------------------------
 187          bit CKeyPowerKeyProc(void)
 188          {
 189   1          if(ucKeyStateCurr == _POWER_KEY_MASK)
 190   1          {
 191   2              if((ucKeyStatePrev ^ ucKeyStateCurr) == _POWER_KEY_MASK)
 192   2              {
 193   3                  CTimerDelayXms(25);
 194   3                  ucKeyStateCurr = CKeyScan();
 195   3                  
 196   3                  if((ucKeyStatePrev ^ ucKeyStateCurr) == _POWER_KEY_MASK)
 197   3                  {
 198   4                      CKeyPowerKeyMix();
 199   4                      SET_POWERSWITCH();
 200   4                      return _TRUE;
 201   4                  }
 202   3              }
 203   2          }
 204   1          
 205   1          return _FALSE;
 206   1      }
 207          //--------------------------------------------------
 208          // Description  : We can add some settings here while combo key with power key
 209          // Input Value  : None
 210          // Output Value : None
 211          //--------------------------------------------------
 212          void CKeyPowerKeyMix(void)
 213          {
 214   1      /*
 215   1          switch(ucKeyStateCurr)
 216   1          {
 217   1      
 218   1              default:
 219   1                  break;
 220   1          }
 221   1      */
 222   1      }
 223          //--------------------------------------------------
 224          #if(_FUNC_EN_CHK_KEY_DOWN)
              BYTE CheckKeyDown(BYTE KeyMask,BYTE Cnt)
              {
                  BYTE i = 0;
                  while(i < Cnt)
                  {
                      if(CKeyScan() == KeyMask)
                      {
                          return 1;
                      }
                      CTimerDelayXms(20);
                      i++;
                  }
                  return 0;
              }
              #endif
 240          //--------------------------------------------------
C51 COMPILER V7.06   KEY                                                                   04/29/2010 18:06:06 PAGE 5   

 241          #if(_FUNC_EN_CHK_KEY_UP)
 242          BYTE CheckKeyUp(BYTE KeyMask,BYTE Cnt)
 243          {
 244   1          BYTE i = 0;
 245   1          while(i < Cnt)
 246   1          {
 247   2              if(CKeyScan() != KeyMask)
 248   2              {
 249   3                  return 1;
 250   3              }
 251   2              CTimerDelayXms(20);
 252   2              i++;
 253   2          }
 254   1          return 0;
 255   1      }
 256          #endif
 257          
 258          
 259          
 260          
 261          #if(_KEY_SCAN_TYPE == _KEY_SCAN_AD)
 262          //--------------------------------------------------
 263          // Description  : Get key status
 264          // Input Value  : None
 265          // Output Value : Return Key status
 266          //--------------------------------------------------
 267          BYTE CGetADCAValue(BYTE Port)
 268          {
 269   1              BYTE xdata *p;
 270   1          BYTE ucValue;
 271   1      
 272   1              MCU_ADC_ACONTROL_FF08 = 0x82;                   //start adc convert(STRT_ADC_ACKT=1) 
 273   1      
 274   1              while(MCU_ADC_ACONTROL_FF08 & 0x80)
 275   1              {
 276   2                      _nop_();
 277   2              }
 278   1      
 279   1      
 280   1              p = (0xFF09 + Port);                    
 281   1              ucValue = *p;
 282   1      
 283   1              ucValue >>= 2;
 284   1      
 285   1              return ucValue;
 286   1          
 287   1      }
 288          #ifdef IRSEND_ENABLE
 289          #if(_REMOTE_CONTROLLER == _IR_CF)
              void IrProcessMessage(void)
              {
                          if (_GET_INPUT_SOURCE() != _SOURCE_VIDEO_TV)
                           {
                                switch(ucKeyMessage)
                                {
                      //      case _IR_MENU_KEY_MESSAGE:                                      IR_Trans_Command(0xff00,0xF609); break;
                      //      case _MP5_CALLMENU_KEY_MESSAGE:                 IR_Trans_Command(0xff00,0xF609); break;
                      //      case _MP5_MAINMENU_KEY_MESSAGE:                         IR_Trans_Command(0xff00,0xF609); break;
                              case _MP5_EXIT_KEY_MESSAGE:                                     IR_Trans_Command(0xff00,0xEF10); break;
                              case _MP5_FAST_PREV_KEY_MESSAGE:                        IR_Trans_Command(0xff00,0xFB04); break;
                              case _MP5_FAST_NEXT_KEY_MESSAGE:                        IR_Trans_Command(0xff00,0xF906); break;
                              case _MP5_PREV_KEY_MESSAGE:                             IR_Trans_Command(0xff00,0xF30c); break;
C51 COMPILER V7.06   KEY                                                                   04/29/2010 18:06:06 PAGE 6   

                              case _MP5_NEXT_KEY_MESSAGE:                             IR_Trans_Command(0xff00,0xF10E); break;
                              case _MP5_PLAY_KEY_MESSAGE:                             IR_Trans_Command(0xff00,0xEE11); break;
                              case _MP5_LEFT_KEY_MESSAGE:                                     IR_Trans_Command(0xff00,0xF708); break;
                              case _MP5_RIGHT_KEY_MESSAGE:                                    IR_Trans_Command(0xff00,0xFA0A); break;
                              case _MP5_UP_KEY_MESSAGE:                                       IR_Trans_Command(0xff00,0xFA05); break;
                              case _MP5_DOWN_KEY_MESSAGE:                             IR_Trans_Command(0xff00,0xF20D); break;
                              case _MP5_ENTER_KEY_MESSAGE:                            IR_Trans_Command(0xff00,0xF609); break;
                              default:        break;
                                      
                              }
                           }
                              else// for DMB
                            {                                                 
                                      switch(ucKeyMessage)
                                      {
                                      case _MP5_EXIT_KEY_MESSAGE:                                     IR_Trans_Command(0x3085,0xE619); break;  // info
                                      case _MP5_PREV_KEY_MESSAGE:                             IR_Trans_Command(0x3085,0xE51A); break; //mode
                                      case _MP5_NEXT_KEY_MESSAGE:                             IR_Trans_Command(0x3085,0xDC23); break; //scan     //debug
                                      case _MP5_PLAY_KEY_MESSAGE:                             IR_Trans_Command(0x3085,0xDB24); break; //menu  
                                      case _MP5_LEFT_KEY_MESSAGE:                                     IR_Trans_Command(0x3085,0xED12); break; 
                                      case _MP5_RIGHT_KEY_MESSAGE:                                    IR_Trans_Command(0x3085,0xE11E); break;
                                      case _MP5_UP_KEY_MESSAGE:                                       IR_Trans_Command(0x3085,0xD926); break;
                                      case _MP5_DOWN_KEY_MESSAGE:                             IR_Trans_Command(0x3085,0xDD22); break;
                                      case _MP5_ENTER_KEY_MESSAGE:                            IR_Trans_Command(0x3085,0xE01F); break;
                                      default:        break;
                              }
                                      }                                       
                      //      ucKeyMessage = 0; // Reset IR command  
              }
              //--------------------------------------------------------------
              
              #elif(_REMOTE_CONTROLLER == _IR_DMB)
 335          void IrProcessMessage(void)
 336          {
 337   1                    if (_GET_INPUT_SOURCE() != _SOURCE_VIDEO_TV)
 338   1                    {
 339   2                              switch(ucKeyMessage)
 340   2                              {
 341   3                                    //case _IR_MENU_KEY_MESSAGE:                              IR_Trans_Command(0xff00,0xF609); break;
 342   3                                     //case _MP5_CALLMENU_KEY_MESSAGE:                        IR_Trans_Command(0xff00,0xF609); break;
 343   3                                     //case _MP5_MAINMENU_KEY_MESSAGE:                        IR_Trans_Command(0xff00,0xF609); break;
 344   3                                      case _MP5_EXIT_KEY_MESSAGE:                                     IR_Trans_Command(0xff00,0xEF10); break;
 345   3                                      case _MP5_FAST_PREV_KEY_MESSAGE:                        IR_Trans_Command(0xff00,0xFB04); break;
 346   3                                      case _MP5_FAST_NEXT_KEY_MESSAGE:                        IR_Trans_Command(0xff00,0xF906); break;
 347   3                                      case _MP5_PREV_KEY_MESSAGE:                             IR_Trans_Command(0xff00,0xF30c); break;
 348   3                                      case _MP5_NEXT_KEY_MESSAGE:                             IR_Trans_Command(0xff00,0xF10E); break;
 349   3                                      case _MP5_PLAY_KEY_MESSAGE:                             IR_Trans_Command(0xff00,0xEE11); break;
 350   3                                      case _MP5_LEFT_KEY_MESSAGE:                                     IR_Trans_Command(0xff00,0xF708); break;
 351   3                                      case _MP5_RIGHT_KEY_MESSAGE:                                    IR_Trans_Command(0xff00,0xFA0A); break;
 352   3                                      case _MP5_UP_KEY_MESSAGE:                                       IR_Trans_Command(0xff00,0xFA05); break;
 353   3                                      case _MP5_DOWN_KEY_MESSAGE:                             IR_Trans_Command(0xff00,0xF20D); break;
 354   3                                      case _MP5_ENTER_KEY_MESSAGE:                            IR_Trans_Command(0xff00,0xF609); break;
 355   3                                      default:        break;                  
 356   3                             }
 357   2                   }
 358   1                   else // for DMB
 359   1                   {  
 360   2                      switch(ucKeyMessage)
 361   2                      {
 362   3                                //MP5+DMB
 363   3                              case _MP5_UP_KEY_MESSAGE:                                       IR_Trans_Command(0x3085,0xD926); break;
 364   3                              case _MP5_DOWN_KEY_MESSAGE:                             IR_Trans_Command(0x3085,0xDD22); break;
C51 COMPILER V7.06   KEY                                                                   04/29/2010 18:06:06 PAGE 7   

 365   3                              case _MP5_LEFT_KEY_MESSAGE:                                     IR_Trans_Command(0x3085,0xED12); break; 
 366   3                              case _MP5_RIGHT_KEY_MESSAGE:                                    IR_Trans_Command(0x3085,0xE11E); break;
 367   3                              case _MP5_ENTER_KEY_MESSAGE:                            IR_Trans_Command(0x3085,0xE01F); break;
 368   3                                  //DMB
 369   3                              case _DMB_MODE_KEY:                                            IR_Trans_Command(0x3085,0xE51A); break;//DMB/DAB
 370   3                              case _DMB_INFO_KEY:                                                   IR_Trans_Command(0x3085,0xE619); break;//INFO
 371   3                              //case _DMB_SCAN_KEY:                                          IR_Trans_Command(0x3085,0xDC23); break;//Scan
 372   3                              case _DMB_MENU_KEY:                                            IR_Trans_Command(0x3085,0xEE11); break;//Menu
 373   3                              default:        break;                          
 374   3                      }
 375   2                  }                                   
 376   1              //      ucKeyMessage = 0; // Reset IR command  
 377   1      }
 378          //--------------------------------------------------------------
 379          #endif
 380          #endif
 381          /*
 382          WORD CGetADCBValue(BYTE Port)
 383          {
 384                  WORD usValue;
 385                  MCU_ADC_BCONTROL_FF0E = 0x82;                   //start adc convert(STRT_ADC_ACKT=1) 
 386          
 387                  while(MCU_ADC_BCONTROL_FF0E & 0x80)
 388                  {
 389                          _nop_();
 390                  }
 391          
 392                  switch(Port)
 393                  {
 394                          case 0:
 395                                  usValue = ((WORD)ADC_B0H_convert_result_FF15 << 2) | ((ADC_BxL_convert_result_FF18 & 0xC0) >> 6);
 396                                  break;
 397          
 398                          case 1:
 399                                  usValue = ((WORD)ADC_B1H_convert_result_FF16 << 2) | ((ADC_BxL_convert_result_FF18 & 0x30) >> 4);
 400                                  break;
 401          
 402                          case 2:
 403                                  usValue = ((WORD)ADC_B2H_convert_result_FF17 << 2) | ((ADC_BxL_convert_result_FF18 & 0x0c) >> 2);
 404                                  break;
 405                  }
 406          
 407                  return usValue;
 408                  
 409          }
 410          */
 411          /*
 412          void CGetADCValue(BYTE *pBuf)
 413          {
 414                  BYTE xdata *p;
 415              BYTE i = 0;
 416          
 417                  MCU_ADC_ACONTROL_FF08 = 0x82;                   //start adc convert(STRT_ADC_ACKT=1) 
 418          
 419                  while(MCU_ADC_ACONTROL_FF08 & 0x80)
 420                  {
 421                          _nop_();
 422                  }
 423          
 424          #if(AD_KEY0 != MCU_ADC_NONE)
 425                  p = (0xFF09 + AD_KEY0);                 
 426                  pBuf[i] = *p;
C51 COMPILER V7.06   KEY                                                                   04/29/2010 18:06:06 PAGE 8   

 427              i++;
 428          #endif
 429          
 430          #if(AD_KEY1 != MCU_ADC_NONE)
 431                  p = (0xFF09 + AD_KEY1);                 
 432                  pBuf[i] = *p;
 433              i++;
 434          #endif
 435          
 436          #if(AD_KEY2 != MCU_ADC_NONE)
 437                  p = (0xFF09 + AD_KEY2);                 
 438                  pBuf[i] = *p;
 439              i++;
 440          #endif
 441          
 442          #if(AD_KEY3 != MCU_ADC_NONE)
 443                  p = (0xFF09 + AD_KEY3);                 
 444                  pBuf[i] = *p;
 445              i++;
 446          #endif
 447          
 448          #if(AD_KEY4 != MCU_ADC_NONE)
 449                  p = (0xFF09 + AD_KEY4);                 
 450                  pBuf[i] = *p;
 451          #endif
 452          
 453                  pBuf[0] >>= 2;
 454                  pBuf[1] >>= 2;
 455                  pBuf[2] >>= 2;
 456                  pBuf[3] >>= 2;
 457                  pBuf[4] >>= 2;
 458          }  */
 459          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    582    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      4    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
