C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE LCD_OSD
OBJECT MODULE PLACED IN .\Output\Lcd_osd.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\Lcd_osd.c OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND CODE SYMBOLS PRI
                    -NT(.\Output\Lcd_osd.lst) PREPRINT(.\Output\Lcd_osd.i) OBJECT(.\Output\Lcd_osd.obj)

stmt level    source

   1          #define __OSD__
   2          
   3          #include "reg52.h" 
   4          
   5          #include "Header\MAIN_DEF.H"
   6          #include "Header\CONFIG.H"
   7          #include "Header\ACCESS.H"
   8          #include "Header\LCD_FUNC.H"
   9          #include "Header\LCD_AUTO.H"
  10          #include "Header\LCD_MSG.H"
  11          #include "Header\LCD_MAIN.H"
  12          #include "Header\LCD_OSD.H"
  13          #include "Header\FONT.H"
  14          #include "Header\OSD.H"
  15          #include "Header\SRC_CTRL.H"
  16          #include "Header\OSD_TREE.H"
  17          
  18          #include "Header\rgb_echo.H"
  19          
  20          #if (TV_CHIP != TV_NONE)
              #include "TUNER.H"
              #endif
  23          
  24          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -////
  25          // OSD Process Dispatch Table
  26          // In this code, when input source is not VGA, AUTO CONFIG page will not be shown.
  27          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -////
  28          
  29          unsigned char GetNextPageIdx(unsigned char ucPageCurr)
  30          {
  31   1          switch (stGUD1.INPUT_SOURCE & 0x07)
  32   1          {
  33   2          case SOURCE_VGA :
  34   2              return (5 <= ucPageCurr) ? 1 : ucPageCurr + 1;
  35   2          case SOURCE_DVI :
  36   2              return (5 <= ucPageCurr) ? 1 : ucPageCurr + 1;
  37   2          case SOURCE_AV  :
  38   2              return (5 <= ucPageCurr) ? 1 : ucPageCurr + 1;
  39   2          case SOURCE_SV  :
  40   2              return (5 <= ucPageCurr) ? 1 : ucPageCurr + 1;
  41   2          case SOURCE_YUV :
  42   2              return (5 <= ucPageCurr) ? 1 : ucPageCurr + 1;
  43   2          default :
  44   2              return 1;
  45   2          }
  46   1          
  47   1      }
  48          
  49          unsigned char GetPrevPageIdx(unsigned char ucPageCurr)
  50          {
  51   1         switch (stGUD1.INPUT_SOURCE & 0x07)
  52   1          {
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 2   

  53   2          case SOURCE_VGA :
  54   2              return (1 >= ucPageCurr) ? 5 : ucPageCurr - 1;
  55   2          case SOURCE_DVI :
  56   2              return (1 >= ucPageCurr) ? 5 : ucPageCurr - 1;
  57   2          case SOURCE_AV  :
  58   2              return (1 >= ucPageCurr) ? 5 : ucPageCurr - 1;
  59   2          case SOURCE_SV  :
  60   2              return (1 >= ucPageCurr) ? 5 : ucPageCurr - 1;
  61   2          case SOURCE_YUV :
  62   2              return (1 >= ucPageCurr) ? 5 : ucPageCurr - 1;
  63   2          default :
  64   2              return 1;
  65   2          }
  66   1      
  67   1      }
  68          
  69          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -////
  70          // OSD Process Public Function
  71          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -////
  72          
  73          //  OSD Window : Control OSD Windows
  74          //  win_no     : bit 2 ~ 0   Window Number 0 ~ 7
  75          //  row_start  : bit 10 ~ 0  Window Row Start Address
  76          //  row_end    : bit 10 ~ 0  Window Row End Address
  77          //  col_start  : bit 10 ~ 0  Window Column Start Address
  78          //  col_end    : bit 10 ~ 0  Window Column End Address
  79          //  width      : bit 2 ~ 0   shadow/border width or 3D button thickness in pixel unit 1~8 pixel
  80          //  height     : bit 2 ~ 0   shadow/border height in line unit , it must the same with width for 3D button
             - thickness
  81          //  color      : bit 3 ~ 0   window color index in 16-color LUT
  82          //  color_sb   : bit 7 ~ 4   shadow color or left-top/bottom border color for 3D window
  83          //             : bit 3 ~ 0   border color or right-bottom/top border color
  84          //  gradient   : bit 7       R Gradient Polarity 0 : Decrease  1 : Increase
  85          //             : bit 6       G Gradient Polarity 0 : Decrease  1 : Increase
  86          //             : bit 5       B Gradient Polarity 0 : Decrease  1 : Increase
  87          //             : bit 4 ~ 3   Gradient level      00~11 : 1 step ~ 4 setp per level
  88          //             : bit 2       Enable Red Color Gradient
  89          //             : bit 1       Enable Green Color Gradient
  90          //             : bit 0       Enable Blue Color Gradient
  91          //  gra_level  : bit 2~0     111 ~ 001 : 7 level ~ 1 level per gradient, 000 : 8 level per gradient
  92          //  attr       : bit 6       1 - Enable Gradient function      0 - Disable Gradient function
  93          //             : bit 5       1 - Vertical Gradient             0 - Horizontal Gradient
  94          //             : bit 4       1 - Enable Shadow/Border/3D button   0 - Disable
  95          //             : bit 3 ~ 1   000 : Shadow Type 1
  96          //                           001 : Shadow Type 2
  97          //                           010 : Shadow Type 3
  98          //                           011 : Shadow Type 4
  99          //                           100 : 3D Button Type 1
 100          //                           101 : 3D Button Type 2
 101          //                           110 : Reserved
 102          //                           111 : Border
 103          //             : bit 0       1 - Enable Window            0 - Disable Window
 104          void OSD_Window(unsigned char win_no, unsigned int row_start, unsigned int row_end, unsigned int col_start
             -, unsigned int col_end,
 105                                                  unsigned char width, unsigned char height, unsigned char color, unsigned char color_sb, unsigned char
             - gradient,
 106                                                  unsigned char gray_level,unsigned char attr)
 107          {
 108   1              if(win_no > 7)  
 109   1                      return;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 3   

 110   1      
 111   1              Data[0]     = 5;
 112   1              Data[1]     = Y_INC;
 113   1              Data[2]     = OSD_ADDR_MSB_90;
 114   1              Data[3]     = 0xc1;
 115   1              Data[4]     = (win_no << 2);
 116   1              Data[5]     = 0;
 117   1              RTDWrite(Data);
 118   1              Data[0]     = 6;
 119   1              Data[1]     = N_INC;
 120   1              Data[2]     = OSD_DATA_92;
 121   1              Data[3]     = ((width & 0x07) << 3) | (height & 0x07);
 122   1              Data[4]     = color_sb;
 123   1              Data[5]     = gradient;
 124   1              Data[6]     = 0;
 125   1              RTDWrite(Data);
 126   1      
 127   1              Data[0]     = 5;
 128   1              Data[1]     = Y_INC;
 129   1              Data[2]     = OSD_ADDR_MSB_90;
 130   1              Data[3]     = 0xe1;
 131   1              Data[4]     = (win_no << 2) + 1;
 132   1              Data[5]     = 0;
 133   1              RTDWrite(Data);
 134   1              Data[0]     = 9;
 135   1              Data[1]     = N_INC;
 136   1              Data[2]     = OSD_DATA_92;
 137   1              Data[3]     = (unsigned char)((unsigned int)(row_start & 0x003f) << 2);
 138   1              Data[4]     = (unsigned char)((unsigned int)(col_start & 0x0007) << 5) | 
 139   1                                    (unsigned char)((unsigned int)(row_start & 0x07c0) >> 6);
 140   1              Data[5]     = (unsigned char)((unsigned int)(col_start & 0x07f8) >> 3);
 141   1      
 142   1              Data[6]     = (unsigned char)((unsigned int)(row_end & 0x003f) << 2);
 143   1              Data[7]    = (unsigned char)((unsigned int)(col_end & 0x0007) << 5) | 
 144   1                                        (unsigned char)((unsigned int)(row_end & 0x07c0) >> 6);
 145   1              Data[8]    = (unsigned char)((unsigned int)(col_end & 0x07f8) >> 3);
 146   1              Data[9]     = 0;
 147   1              RTDWrite(Data);
 148   1      
 149   1              Delay_Xms(25);
 150   1              
 151   1              /*
 152   1              do
 153   1              {
 154   1                      RTDRead(0x94, 0x01, Y_INC);
 155   1              }
 156   1              while( ((Data[0] >> 5) & 0x01) );
 157   1              */
 158   1              
 159   1              Data[0]     = 5;
 160   1              Data[1]     = Y_INC;
 161   1              Data[2]     = OSD_ADDR_MSB_90;
 162   1              Data[3]     = 0xc1;
 163   1              Data[4]     = (win_no << 2) + 3;
 164   1              Data[5]     = 0;
 165   1              RTDWrite(Data);
 166   1              Data[0]     = 6;
 167   1              Data[1]     = N_INC;
 168   1              Data[2]     = OSD_DATA_92;
 169   1              Data[3]    = 0x00;
 170   1              Data[4]    = (unsigned char)((gray_level & 0x07) << 4) |( color & 0x0f);
 171   1              Data[5]    = attr;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 4   

 172   1              Data[6]    = 0;
 173   1              RTDWrite(Data);
 174   1      
 175   1      }
 176          
 177          /////////////////////////////////////////////////////////////////////////////////////
 178          //anson
 179          /////////////////////////////////////////////////////////////////////////////////////
 180          void OSD_Fact_Line(unsigned char row, unsigned char col, unsigned char length,
 181                        unsigned char value, unsigned char indicate)
 182          {
 183   1              unsigned int idata usStart_Addr;
 184   1              unsigned char idata ucTemp;
 185   1      
 186   1              usStart_Addr = FONT_SELECT_ADDRESS;
 187   1      
 188   1              //The address of the first character Cn1 in Row n = FONT_SELECT_ADDRESS + Row0_length + Row1_length +...+
             -Row(n-1)_length
 189   1              for(ucTemp = 1; ucTemp < row+1; ucTemp ++)
 190   1                      usStart_Addr += FactRow_Info[0][ucTemp];
 191   1      
 192   1              Data[0] = 5;
 193   1              Data[1] = Y_INC;
 194   1              Data[2] = OSD_ADDR_MSB_90;
 195   1      
 196   1              if( (col+1) > FactRow_Info[0][row + 1]) // if column_start > row_length, then return
 197   1                      return;
 198   1              else if((col + 1 + length) > FactRow_Info[0][row + 1])  // if column_start + length > row_length, then re-
             -calculate the length
 199   1                      length = FactRow_Info[0][row + 1] - col;
 200   1      
 201   1              // indicate : 0, 1, 2, 3 set byte 0, 1, 2 and all byte
 202   1              Data[3] = (unsigned char)( ((usStart_Addr + col)  & 0x0fff) >> 8 ) | (((indicate << 2) + 1) << 4);
 203   1              Data[4] = (unsigned char)((usStart_Addr + col) & 0x00ff);
 204   1              Data[5] = 0;
 205   1              RTDWrite(Data);
 206   1      
 207   1              Data[0]     = (indicate == 3) ? length * 3 + 3 : length + 3;
 208   1              Data[1]     = BURST;
 209   1              Data[2]     = OSD_DATA_92;
 210   1              Data[3]     = value;
 211   1              Data[4]     = 0;
 212   1              RTDWrite(Data);
 213   1      
 214   1      }
 215          
 216          void OSD_Fact_Clear(unsigned char row_start, unsigned char height, unsigned char col_start, unsigned char 
             -width)
 217          {
 218   1              width = width;
 219   1              if (height)
 220   1              {
 221   2                      do
 222   2                      {
 223   3                              OSD_Fact_Line(row_start, col_start, FactRow_Info[0][row_start+1], 0x00, 3);
 224   3                              //OSD_Line(row_start, col_start, width, 0x00, 3);
 225   3                              row_start++;
 226   3                      }
 227   2                      while (--height);
 228   2              }
 229   1      }
 230          
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 5   

 231          void ShowValue(unsigned char row, unsigned char col,unsigned char value, unsigned char color)
 232          {
 233   1              unsigned int idata usStart_Addr;
 234   1              unsigned char idata ucTemp;
 235   1      
 236   1              usStart_Addr = FONT_SELECT_ADDRESS;
 237   1      
 238   1              //The address of the first character Cn1 in Row n = FONT_SELECT_ADDRESS + Row0_length + Row1_length +...+
             -Row(n-1)_length
 239   1              for(ucTemp = 1; ucTemp < row+1; ucTemp ++)
 240   1                      usStart_Addr += FactRow_Info[0][ucTemp];
 241   1      
 242   1              Data[10] = value/100;
 243   1              Data[11] = (value - (Data[10]*100))/10;
 244   1              Data[12] = value - (Data[10]*100) - (Data[11]*10);
 245   1              if(0 != Data[10])
 246   1              {
 247   2                      Data[10] += _0_;
 248   2                      Data[11] += _0_;
 249   2              }
 250   1              else
 251   1              {
 252   2                      if(0 != Data[11])       Data[11] += _0_;
 253   2              }
 254   1              Data[12] += _0_;
 255   1              //Byte1
 256   1              Data[0] = 5;
 257   1              Data[1] = Y_INC;
 258   1              Data[2] = OSD_ADDR_MSB_90;
 259   1              Data[3] = (unsigned char)( ((usStart_Addr + col)  & 0x0fff) >> 8 ) | 0x50;
 260   1              Data[4] = (unsigned char)((usStart_Addr + col) & 0x00ff);
 261   1              Data[5] = 0;
 262   1              RTDWrite(Data);
 263   1              Data[0]     = 6;
 264   1              Data[1]     = N_INC;
 265   1              Data[2]     = OSD_DATA_92;
 266   1              Data[3]     = Data[10];
 267   1              Data[4]     = Data[11];
 268   1              Data[5]     = Data[12];
 269   1              Data[6]     = 0;
 270   1              RTDWrite(Data);
 271   1              //Byte2
 272   1              Data[0] = 5;
 273   1              Data[1] = Y_INC;
 274   1              Data[2] = OSD_ADDR_MSB_90;
 275   1              Data[3] = (unsigned char)( ((usStart_Addr + col)  & 0x0fff) >> 8 ) | 0x90;
 276   1              Data[4] = (unsigned char)((usStart_Addr + col) & 0x00ff);
 277   1              Data[5] = 0;
 278   1              RTDWrite(Data);
 279   1              Data[0]     = 6;
 280   1              Data[1]     = N_INC;
 281   1              Data[2]     = OSD_DATA_92;
 282   1              Data[3]     = color;
 283   1              Data[4]     = color;
 284   1              Data[5]     = color;
 285   1              Data[6]     = 0;
 286   1              RTDWrite(Data);
 287   1      }
 288          
 289          void Value_Adjust(unsigned char *Var, unsigned char Key, unsigned char VMax, unsigned char VMin)
 290          {
 291   1              if(NOTIFY_LEFT_KEY == Key)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 6   

 292   1              {
 293   2                      if(bKeyTurbo)
 294   2                              *Var   = (*Var < (VMax - 1)) ? (*Var + 2) : VMax;
 295   2                      else
 296   2                              *Var   = (*Var < VMax) ? (*Var + 1) : VMax;
 297   2              }
 298   1              else
 299   1              {
 300   2                      if(bKeyTurbo)
 301   2                              *Var   = (*Var > (VMin + 1)) ? *Var - 2 : VMin;
 302   2                      else
 303   2                              *Var   = (*Var > VMin) ? (*Var - 1) : VMin;
 304   2              }
 305   1      }
 306          
 307          void SPREAD_Adjust(unsigned char* variable,unsigned char Key)
 308          {
 309   1              if (NOTIFY_LEFT_KEY == Key)
 310   1              {
 311   2                      if (15 <= *variable)
 312   2                              return;
 313   2       
 314   2                      if (!bKeyTurbo)
 315   2                              *variable   = 15 > *variable ? *variable + 1 : 15;
 316   2                      else
 317   2                              *variable   = 14 > *variable ? *variable + 2 : 15;
 318   2              }
 319   1              else
 320   1              {
 321   2                      if (0 == *variable)
 322   2                              return;
 323   2      
 324   2                      if (!bKeyTurbo)
 325   2                              *variable   = 0 < *variable ? *variable - 1 : 0;
 326   2                      else
 327   2                              *variable   = 1 < *variable ? *variable - 2 : 0;
 328   2              }
 329   1      }
 330          
 331          
 332          /////////////////////////////////////////////////////////////////////////////////////
 333          /////////////////////////////////////////////////////////////////////////////////////
 334          
 335          void Get_OSD_Margin(void)
 336          {
 337   1              unsigned char ucH_Min, ucH_Max, ucV_Max;
 338   1      
 339   1      #if (DISP_ALIGN)
                      RTDRead(DH_ACT_STA_27, 0x02, Y_INC);
                      Data[2] = Data[1] & 0x07;
                      Data[3] = Data[0];
              
                      ucH_Min = (((unsigned int *)Data)[1] / 4) + 1;
                      ucH_Max = OSD_HMAX;
              #else
 347   1              RTDRead(DH_ACT_END_29, 0x02, Y_INC);
 348   1              Data[2] = Data[1] & 0x07;
 349   1              Data[3] = Data[0];
 350   1      
 351   1              //ucH_Max = ((((unsigned int *)Data)[1] - 312 - 8 - 16) / 4) + 1;
 352   1              ucH_Max = ((((unsigned int *)Data)[1] - 512) / 4) + 1; 
 353   1              ucH_Min = OSD_HMIN;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 7   

 354   1      #endif
 355   1      
 356   1              RTDRead(DV_ACT_END_34, 0x02, Y_INC);
 357   1              Data[2] = Data[1] & 0x07;
 358   1              Data[3] = Data[0];
 359   1      
 360   1              ucV_Max = (((unsigned int *)Data)[1] - DV_ACT_STA_POS - 250 - 14) / 4;
 361   1      
 362   1              Data[0] = ucH_Min;
 363   1              Data[1] = ucH_Max;
 364   1              Data[2] = OSD_VMIN;
 365   1              Data[3] = ucV_Max;
 366   1              
 367   1      }
 368          
 369          // OSD_Position : Restore OSD position according to global settings
 370          // para : OSD font parameter
 371          // OSD_GLOBAL_BLINK    : 0x10
 372          // OSD_DISP_ZONE_LEFT  : 0x04
 373          // OSD_DISP_ZONE_RIGHT : 0x08
 374          // OSD_ROTATE          : 0x02
 375          // OSD_ENABLE          : 0x01
 376          
 377          void OSD_Position(unsigned char para)
 378          {
 379   1              Get_OSD_Margin();
 380   1      
 381   1              if (Data[0] > stGUD1.OSD_POSH || Data[1] < stGUD1.OSD_POSH ||
 382   1                      Data[2] > stGUD1.OSD_POSV || Data[3] < stGUD1.OSD_POSV)
 383   1              {
 384   2                      stGUD1.OSD_POSV = OSD_VMID;
 385   2                      stGUD1.OSD_POSH = OSD_HMID;
 386   2                      Save_GUD1();
 387   2              }
 388   1      
 389   1                      if(ucOSD_Page_Index == PAGE_Factory)            //anson
 390   1                      {
 391   2                              stGUD1.OSD_POSH = 230;
 392   2                              stGUD1.OSD_POSV = 100;
 393   2                      }
 394   1      
 395   1              Wait_For_Event(EVENT_DEN_STOP);
 396   1      
 397   1              Data[0]     = 5;
 398   1              Data[1]     = Y_INC;
 399   1              Data[2]     = OSD_ADDR_MSB_90;
 400   1              Data[3]     = 0xc0;
 401   1              Data[4]     = 0x00;
 402   1              Data[5]     = 6;
 403   1              Data[6]     = N_INC;
 404   1              Data[7]     = OSD_DATA_92;
 405   1              Data[8]     = stGUD1.OSD_POSV >> 1;
 406   1              Data[9]     = (unsigned char)(stGUD1.OSD_POSH >> 2);
 407   1              Data[10]    = ((unsigned char)(stGUD1.OSD_POSH & 0x0003) << 6) | ((stGUD1.OSD_POSV & 0x01) << 5) | para;
 408   1                                      //+ (unsigned char)(OSD_Enable[10] & 0x1e) + osd_en;
 409   1              Data[11]    = 0;
 410   1              RTDWrite(Data);
 411   1      
 412   1      }
 413          
 414          void OSD_Line(unsigned char row, unsigned char col, unsigned char length,
 415                        unsigned char value, unsigned char indicate)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 8   

 416          {
 417   1              unsigned int idata usStart_Addr;
 418   1              unsigned char idata ucTemp;
 419   1      
 420   1              usStart_Addr = FONT_SELECT_ADDRESS;
 421   1      
 422   1              //The address of the first character Cn1 in Row n = FONT_SELECT_ADDRESS + Row0_length + Row1_length +...+
             -Row(n-1)_length
 423   1              for(ucTemp = 1; ucTemp < row+1; ucTemp ++)
 424   1                      usStart_Addr += Row_Info[0][ucTemp];
 425   1      
 426   1              Data[0] = 5;
 427   1              Data[1] = Y_INC;
 428   1              Data[2] = OSD_ADDR_MSB_90;
 429   1      
 430   1              if( (col+1) > Row_Info[0][row + 1])     // if column_start > row_length, then return
 431   1                      return;
 432   1              else if((col + 1 + length) > Row_Info[0][row + 1])      // if column_start + length > row_length, then re-calc
             -ulate the length
 433   1                      length = Row_Info[0][row + 1] - col;
 434   1              
 435   1              // indicate : 0, 1, 2, 3 set byte 0, 1, 2 and all byte
 436   1              Data[3] = (unsigned char)( ((usStart_Addr + col)  & 0x0fff) >> 8 ) | (((indicate << 2) + 1) << 4);
 437   1              Data[4] = (unsigned char)((usStart_Addr + col) & 0x00ff);
 438   1              Data[5] = 0;  
 439   1              RTDWrite(Data);
 440   1      
 441   1              Data[0]     = (indicate == 3) ? length * 3 + 3 : length + 3;
 442   1              Data[1]     = BURST; 
 443   1              Data[2]     = OSD_DATA_92;
 444   1              Data[3]     = value;
 445   1              Data[4]     = 0;
 446   1              RTDWrite(Data);
 447   1              
 448   1      }     
 449          
 450          
 451          void OSD_Slider(unsigned char row, unsigned char col, unsigned char length, unsigned char value, unsigned 
             -char range,
 452                          unsigned char color, unsigned char color_slider)
 453          {
 454   1              unsigned int idata usStart_Addr;
 455   1              unsigned char idata ucTemp;
 456   1              unsigned int bound;
 457   1      
 458   1              usStart_Addr = FONT_SELECT_ADDRESS;
 459   1      
 460   1              for(ucTemp = 1; ucTemp < row+1; ucTemp ++)
 461   1                      usStart_Addr += Row_Info[0][ucTemp];
 462   1      
 463   1              length = length -5;
 464   1              bound   = ((length-2)*6 + 2*3) * value;
 465   1      
 466   1              // Set color
 467   1              Data[0] = 6;
 468   1              Data[1] = Y_INC;
 469   1              Data[2] = OSD_ADDR_MSB_90;
 470   1              Data[3] = (unsigned char)((((usStart_Addr + col) >>8 ) & 0x0f ) | 0x90);
 471   1              Data[4] = (unsigned char)( (usStart_Addr + col) & 0x00ff);
 472   1              Data[5] = (color << 4) & 0xf0;          
 473   1              Data[6] = 0;
 474   1              RTDWrite(Data);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 9   

 475   1      
 476   1              Data[0] = 5;
 477   1              Data[1] = N_INC;
 478   1              Data[2] = OSD_DATA_92;
 479   1              Data[3] = (color << 4) & 0xf0;          
 480   1              Data[4] = (color << 4) & 0xf0;          
 481   1              Data[5] = 0;
 482   1              RTDWrite(Data);
 483   1      
 484   1              OSD_Line(row,col+5,12,((color_slider<<4) & 0xf0),2);
 485   1              Data[0] = 6;
 486   1              Data[1] = Y_INC;
 487   1              Data[2] = OSD_ADDR_MSB_90;
 488   1      
 489   1              Data[6] = 0;
 490   1      
 491   1              for (row = 0; row < length; row++)
 492   1              {
 493   2                      Data[3] = (unsigned char)((((usStart_Addr + col + row + 5) >> 8 ) & 0x0f ) | 0x50);
 494   2                      Data[4] = (unsigned char)( (usStart_Addr + col + row + 5) & 0x00ff);
 495   2      
 496   2                      if( row == 0 || row == (length-1) )
 497   2                      {
 498   3                              if( bound )
 499   3                              {
 500   4                                      if( bound >= (range*3) )
 501   4                                      {
 502   5                                              Data[5] = (row==0) ? 0x13 : 0x1e;
 503   5                                              bound = bound - range*3;
 504   5                                      }
 505   4                                      else
 506   4                                      {
 507   5                                      color   = (bound << 4) / (range*3);
 508   5                                              bound = 0;
 509   5              
 510   5                                              if (4 > color)
 511   5                                                      Data[5] = (row==0) ? 0x10 : 0x1b;       
 512   5                                              else if (8 > color)
 513   5                                                      Data[5] = (row==0) ? 0x11 : 0x1c;
 514   5                                              else if (12 > color)
 515   5                                                      Data[5] = (row==0) ? 0x12 : 0x1d;
 516   5                                              else
 517   5                                                      Data[5] = (row==0) ? 0x13 : 0x1e;
 518   5                                      }
 519   4                              }
 520   3                              else
 521   3                              {
 522   4                                      Data[5] = (row==0) ? 0x10 : 0x1b;       
 523   4                              }
 524   3                      }
 525   2                      else
 526   2                      {
 527   3                              if( bound )
 528   3                              {
 529   4                                      if( bound >= (range*6) )
 530   4                                      {
 531   5                                              Data[5] = 0x1a;
 532   5                                              bound = bound - range*6;
 533   5                                      }
 534   4                                      else
 535   4                                      {
 536   5                                              color   = (bound << 4) / (range*6);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 10  

 537   5                                              bound = 0;
 538   5              
 539   5                                              if (1 > color)
 540   5                                                      Data[5] = 0x14;
 541   5                                              else if (4 > color)
 542   5                                                      Data[5] = 0x15;
 543   5                                              else if (6 > color)
 544   5                                                      Data[5] = 0x16;
 545   5                                              else if (9 > color)
 546   5                                                      Data[5] = 0x17;
 547   5                                              else if (11 > color)
 548   5                                                      Data[5] = 0x18;
 549   5                                              else if (14 > color)
 550   5                                                      Data[5] = 0x19;
 551   5                                              else
 552   5                                                      Data[5] = 0x1a;
 553   5                                      }
 554   4                              }
 555   3                              else
 556   3                              {
 557   4                                      Data[5] = 0x14;
 558   4                              }
 559   3                      
 560   3                      }
 561   2      
 562   2                      RTDWrite(Data);
 563   2                      
 564   2              }
 565   1      
 566   1              range   = value / 10;
 567   1              row             = value - (range * 10); // x1
 568   1              color   = range / 10;                   // x100
 569   1              range   = range - (color * 10); // x10
 570   1      
 571   1              row             = row + 0x01;
 572   1              range   = (range || color) ? range + 0x01 : 0x00;
 573   1              color   = color ? color + 0x01 : 0x00;
 574   1      
 575   1              Data[0] = 5;
 576   1              Data[1] = Y_INC;
 577   1              Data[2] = OSD_ADDR_MSB_90;
 578   1              Data[3] = (unsigned char)((((usStart_Addr + col) >>8 ) & 0x0f ) | 0x50);
 579   1              Data[4] = (unsigned char)( (usStart_Addr + col ) & 0x00ff);
 580   1              Data[5] = 0;
 581   1              RTDWrite(Data);
 582   1      
 583   1              Data[0] = 6;
 584   1              Data[1] = N_INC;
 585   1              Data[2] = OSD_DATA_92;
 586   1              Data[3] = color;                // Number x100
 587   1              Data[4] = range;                // Number x10
 588   1              Data[5] = row;          // Number x1
 589   1              Data[6] = 0;
 590   1              RTDWrite(Data);
 591   1      
 592   1      }
 593          
 594          
 595          void Init_Page(unsigned char index)
 596          {
 597   1              index = index;
 598   1              OSD_Position(OSD_ENABLE);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 11  

 599   1              OSD_Clear(5, 11, 15, 1);        //Need to be modified case by case.
 600   1              if( ucOSD_Page_Index == 1)
 601   1                      RTDOSDW(OSD_Window_Setting);
 602   1      }
 603          
 604          void Show_Osd_Page(unsigned char Page_Num,unsigned char* Page_Attr,unsigned char OSD_Table_Num)
 605          {
 606   1              Init_Page(Page_Num);
 607   1              RTDOSDW(Page_All_Atb);
 608   1              RTDOSDW(OSD_PAGE_All_TABLE[0][stGUD1.FUNCTION & 0x07]);
*** WARNING C214 IN LINE 608 OF CODE\LCD_OSD.C: 'Argument': conversion: non-pointer to pointer
 609   1              RTDOSDW(Page_Attr);
 610   1              RTDOSDW(OSD_PAGE_TABLE[OSD_Table_Num][stGUD1.FUNCTION & 0x07]);
*** WARNING C214 IN LINE 610 OF CODE\LCD_OSD.C: 'Argument': conversion: non-pointer to pointer
 611   1              Show_Mode();
 612   1      }
 613          
 614          void OSD_Clear(unsigned char row_start, unsigned char height, unsigned char col_start, unsigned char width
             -)
 615          {
 616   1              width = width;
 617   1              if (height)
 618   1              {
 619   2                      do
 620   2                      {
 621   3                              OSD_Line(row_start, col_start, Row_Info[0][row_start+1], 0x00, 3);
 622   3                              //OSD_Line(row_start, col_start, width, 0x00, 3);
 623   3                              row_start++;
 624   3                      }
 625   2                      while (--height);
 626   2              }
 627   1      }
 628          
 629          void Bright_Contrast_Adjust(unsigned char* variable,unsigned char Key)
 630          {
 631   1      //      if (NOTIFY_RIGHT_KEY == Key)
 632   1          if (NOTIFY_LEFT_KEY == Key)
 633   1              {
 634   2                      if (100 <= *variable)
 635   2                              return;
 636   2       
 637   2                      if (KEY_TURBO_ENABLE > ucKey_Issued)
 638   2                              *variable   = 100 > *variable ? *variable + 1 : 100;
 639   2                      else
 640   2                              *variable   = 99 > *variable ? *variable + 2 : 100;
 641   2              }
 642   1              else
 643   1              {
 644   2                      if (0 == *variable)
 645   2                              return;
 646   2      
 647   2                      if (KEY_TURBO_ENABLE > ucKey_Issued)
 648   2                              *variable   = 0 < *variable ? *variable - 1 : 0;
 649   2                      else
 650   2                              *variable   = 1 < *variable ? *variable - 2 : 0;
 651   2              }
 652   1      }
 653          
 654          void Osd_Change_Item(unsigned char Pess_Key,unsigned char Item_Num)
 655          {
 656   1              if (ucOSD_Item_Index0)
 657   1              {
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 12  

 658   2                      // Select and highlight the next/previous item
 659   2                      //OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
 660   2                      //      , 0, 0, 14, 251, 0, 1, 0);
 661   2                      if (NOTIFY_RIGHT_KEY == Pess_Key)
 662   2                              ucOSD_Item_Index0   = (Item_Num == ucOSD_Item_Index0) ? 1 : (ucOSD_Item_Index0 + 1);
 663   2                      else
 664   2                              ucOSD_Item_Index0   = (1 == ucOSD_Item_Index0) ? Item_Num : (ucOSD_Item_Index0 - 1);
 665   2      
 666   2                      // Move window 6
 667   2                      OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
 668   2                              , 1, 1, 14, 251, 0, 1, 25);
 669   2              }
 670   1              else
 671   1              {
 672   2                      // Change to next/previous main page
 673   2                      //OSD_Window( 5, 150, 282, (54 + (ucOSD_Page_Index-1)*(29+4)), (84 + (ucOSD_Page_Index-1)*(29+4))
 674   2                      //      , 0, 0, 14, 251, 0, 1, 0);
 675   2                      if (NOTIFY_RIGHT_KEY == Pess_Key)
 676   2                              ucOSD_Page_Index    = GetNextPageIdx(ucOSD_Page_Index);
 677   2                      else
 678   2                              ucOSD_Page_Index    = GetPrevPageIdx(ucOSD_Page_Index);
 679   2              } 
 680   1      }
 681          
 682          void Show_Mode(void)
 683          {
 684   1              unsigned int idata usStart_Addr;
 685   1              unsigned char idata ucTemp;
 686   1      
 687   1              OSD_Line(3, 12, 15, 0, 1);                       // Attribute
 688   1              usStart_Addr = FONT_SELECT_ADDRESS;
 689   1      
 690   1              //The address of the first character Cn1 in Row n = FONT_SELECT_ADDRESS + Row0_length + Row1_length +...+
             -Row(n-1)_length
 691   1              for(ucTemp = 1; ucTemp < 3+1; ucTemp ++)
 692   1                      usStart_Addr += Row_Info[0][ucTemp];
 693   1      
 694   1              Data[0] = 5;
 695   1              Data[1] = Y_INC;
 696   1              Data[2] = OSD_ADDR_MSB_90;
 697   1              Data[3] = (unsigned char)( (((usStart_Addr + 12)  & 0x0fff) >> 8 ) | 0x50);
 698   1              Data[4] = (unsigned char)( (usStart_Addr + 12) & 0x00ff);
 699   1              Data[5] = 0;
 700   1              RTDWrite(Data);
 701   1              
 702   1              
 703   1      
 704   1              switch (ucMode_Curr)
 705   1              {   
 706   2              /*
 707   2                      case MODE_NOSIGNAL:     // NO SIGNAL
 708   2                              OSD_Line(11, 2, 24, CHINESE_T <= (stGUD1.FUNCTION & 0x07) ? 0x80 | COLOR_BLUE : COLOR_BLUE, 0);
 709   2      
 710   2                              if ((SOURCE_VGA == (stGUD1.INPUT_SOURCE & 0x07)) && (VGA_ONLINE != bVGA_CONNECT))
 711   2                                      RTDOSDW(OSD_REMK_TABLE[0][stGUD1.FUNCTION & 0x07]);
 712   2                              else
 713   2                                      RTDOSDW(OSD_REMK_TABLE[1][stGUD1.FUNCTION & 0x07]);
 714   2                              break;
 715   2      
 716   2                      case MODE_UNDEFINED0:
 717   2                      case MODE_UNDEFINED1:
 718   2                      case MODE_NOSUPPORT:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 13  

 719   2                              OSD_Line(11, 2, 24, CHINESE_T <= (stGUD1.FUNCTION & 0x07) ? 0x80 | COLOR_BLUE : COLOR_BLUE, 0);
 720   2                              RTDOSDW(OSD_REMK_TABLE[2][stGUD1.FUNCTION & 0x07]);
 721   2                              break;
 722   2      
 723   2                      case MODE_VIDEO60HZ:    // NTSC 60HZ
 724   2                              OSD_Line(11, 2, 24, COLOR_BLUE, 0);     // Set characters to blue
 725   2                              RTDCodeW(Remark_Mode);
 726   2      
 727   2                              switch(ucAV_Mode)
 728   2                              {
 729   2                                      case 0x01:  RTDCodeW(Remark_V60_0); break;
 730   2                                      case 0x11:  RTDCodeW(Remark_V60_1); break;
 731   2                                      case 0x21:  RTDCodeW(Remark_V60_2); break;
 732   2                                      case 0x31:  RTDCodeW(Remark_V60_3); break;
 733   2                                      case 0x41:  RTDCodeW(Remark_V60_4); break;
 734   2                                      case 0x03:  RTDCodeW(Remark_V60_5); break;
 735   2                              }
 736   2                              break;
 737   2                              
 738   2                      case MODE_VIDEO50HZ:    // PAL 50HZ
 739   2                              OSD_Line(11, 2, 24, COLOR_BLUE, 0);     // Set characters to blue
 740   2                              RTDCodeW(Remark_Mode);
 741   2      
 742   2                              switch(ucAV_Mode)
 743   2                              {   
 744   2                                      case 0x02:  RTDCodeW(Remark_V50_0); break;
 745   2                                      case 0x12:  RTDCodeW(Remark_V50_1); break;
 746   2                                      case 0x22:  RTDCodeW(Remark_V50_2); break;
 747   2                                      case 0x32:  RTDCodeW(Remark_V50_3); break;
 748   2                                      case 0x03:  RTDCodeW(Remark_V50_5); break;
 749   2                              }
 750   2                              break;
 751   2      
 752   2                      case MODE_YUV60HZ:
 753   2                      case MODE_YUV50HZ:
 754   2                      break;
 755   2      */
 756   2                      default :
 757   2                              //OSD_Line(11, 2, 24, COLOR_BLUE, 0);     // Set characters to blue
 758   2      
 759   2                              {
 760   3                              unsigned int    usHwid;
 761   3                              unsigned char   ucTemp;
 762   3      
 763   3                              usHwid  = usIPH_ACT_WID;
 764   3      
 765   3                              if (SOURCE_VGA == (stGUD1.INPUT_SOURCE & 0x07))
 766   3                              {
 767   4                                      if (MODE_1600x1200x60HZ == ucMode_Curr)
 768   4                                      {
 769   5                                              usHwid  = 1600;
 770   5                                      }
 771   4                                      else 
 772   4                                      {
 773   5                                              if (MODE_1600x1200x60HZ > ucMode_Curr)
 774   5                                              {
 775   6                                                      if (MODE_1280x0960x60HZ <= ucMode_Curr)
 776   6                                                              usHwid  = 1280;
 777   6                                                      else if (MODE_1152x0864x75HZ <= ucMode_Curr)
 778   6                                                      usHwid  = 1152;
 779   6                                              }
 780   5                                              else
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 14  

 781   5                                              {
 782   6                                                      if (MODE_USER1600x1200 == ucMode_Curr)
 783   6                                                              usHwid  = 1600;
 784   6                                                      else if (MODE_USER1280x960 <= ucMode_Curr)
 785   6                                                              usHwid  = 1280;
 786   6                                                      else if (MODE_USER1152x864 <= ucMode_Curr)
 787   6                                                              usHwid  = 1152;
 788   6                                              }
 789   5                                      }
 790   4                                              //anson 050512
 791   4                                      if      ((MODE_0640x0400x70HZ == ucMode_Curr)||(MODE_0720x0400x70HZ == ucMode_Curr))
 792   4                                      {
 793   5                                              if(stGUD1.FUNCTION & 0x10)
 794   5                                                      usHwid  = 640;
 795   5                                              else
 796   5                                                      usHwid  = 720;
 797   5                                      }
 798   4                              }
 799   3      
 800   3                              //RTDCodeW(Remark_Mode);
 801   3      
 802   3                              Data[0] = 12;
 803   3                              Data[1] = N_INC;
 804   3                              Data[2] = OSD_DATA_92;
 805   3      
 806   3                              ucTemp  = usHwid / 100;
 807   3      
 808   3                              if (10 <= ucTemp)
 809   3                              {
 810   4                                      Data[3] = _1_;
 811   4                                      Data[4] = ucTemp - 10 + _0_;
 812   4                              }
 813   3                              else
 814   3                              {
 815   4                                      Data[3] = 0;
 816   4                                      Data[4] = ucTemp + _0_;
 817   4                              }
 818   3      
 819   3                              ucTemp  = usHwid - ((unsigned int)100 * ucTemp);
 820   3              
 821   3                              Data[5] = ucTemp / 10;
 822   3                              
 823   3                              Data[6] = ucTemp - (10 * Data[5]) + _0_;
 824   3                              Data[5] = Data[5] + _0_;
 825   3                              Data[7] = 0x0e;
 826   3      
 827   3                              ucTemp      = usIPV_ACT_LEN / 100;
 828   3                              Data[12]    = usIPV_ACT_LEN - ((unsigned int)100 * ucTemp);
 829   3      
 830   3                              if (10 <= ucTemp)
 831   3                              {
 832   4                                      Data[0]     = 13;
 833   4                                      Data[8]     = _1_;
 834   4                                      Data[9]     = ucTemp - 10 + _0_;
 835   4                                      Data[10]    = Data[12] / 10;
 836   4                                      Data[11]    = Data[12] - (10 * Data[10]) + _0_;
 837   4                                      Data[10]    = Data[10] + _0_;
 838   4                                      Data[12]    = 0x00;
 839   4                                      Data[13]    = 0;
 840   4                              }
 841   3                              else
 842   3                              {
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 15  

 843   4                                      Data[8]     = ucTemp + _0_;
 844   4                                      Data[9]     = Data[12] / 10;
 845   4                                      Data[10]    = Data[12] - (10 * Data[9]) + _0_;
 846   4                                      Data[9]     = Data[9] + _0_;
 847   4                                      Data[11]    = 0x00;
 848   4                                      Data[12]    = 0;
 849   4                              }
 850   3      
 851   3                              Data[12]    = 0;
 852   3                              RTDWrite(Data);
 853   3      
 854   3                              // Show Refresh Rate
 855   3                              //RTDCodeW(Remark_Rate);
 856   3      
 857   3                              Data[0] = 7;
 858   3                              Data[1] = N_INC;
 859   3                              Data[2] = OSD_DATA_92;
 860   3                              Data[3] = ucRefresh / 10;
 861   3                              Data[4] = ucRefresh - (Data[3] * 10) + _0_;
 862   3                              Data[3] = Data[3] + _0_;
 863   3                              Data[5] = 0x27;
 864   3                              Data[6] = 0x59;
 865   3                              Data[7] = 0;
 866   3                              RTDWrite(Data);
 867   3                              if (10 <= ucTemp)
 868   3                                      OSD_Line( 3, 21, 1, 0x8c, 0);
 869   3                              else
 870   3                                      OSD_Line( 3, 20, 1, 0x8c, 0);
 871   3                              }
 872   2      
 873   2                              break;
 874   2                              
 875   2              }
 876   1      }   
 877          
 878          ///////////////////////////////////////////////////////////////////////////////////////////
 879          //anson
 880          ///////////////////////////////////////////////////////////////////////////////////////////
 881          void FACTORY_Key_Key(void)
 882          {
 883   1              ucOSD_Page_Index = PAGE_Factory;
 884   1              ucOSD_Item_Index0 = PAGEFact_ITEM_Recall;
 885   1      }
 886          ///////////////////////////////////////////////////////////////////////////////////////////
 887          ///////////////////////////////////////////////////////////////////////////////////////////
 888          
 889          void Page0_Left_Right_Key(unsigned char Key)
 890          {
 891   1      //    RTDSetByte(HOSTCTRL_02, 0x40);  // Wake RTD up
 892   1      // Although you can add ending animation here, I don't think it is necessary.
 893   1      //    RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
 894   1      //    RTDOSDW(OSD_Reset);            // Clear OSD
 895   1              //usOSD_Timer         = 5;     // 20 sec
 896   1          if (!b_rgb_VOLUME_STATUS)
 897   1          {
 898   2            OSD_Position(OSD_ENABLE);
 899   2            RTDOSDW(rgb_OSD_VOLUME);
 900   2              RTDOSDW(strTabVOLUME_Atb[stGUD1.FUNCTION & 0x07]);              //anson
*** WARNING C214 IN LINE 900 OF CODE\LCD_OSD.C: 'Argument': conversion: non-pointer to pointer
 901   2            RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
 902   2            b_rgb_VOLUME_STATUS = 1;
 903   2          }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 16  

 904   1              //OSD_Window( 5, 10, 136, 54, 84, 1, 1, 14, 251, 0, 1, 25);
 905   1              if(NOTIFY_LEFT_KEY == Key)
 906   1              {
 907   2              if (stGUD3.VOLUME > 0x00) stGUD3.VOLUME--;
 908   2              SetVolume();
 909   2              Save_GUD3();
 910   2                      rgb_OSD_Slider(0, 7, 24, 0x1f - stGUD3.VOLUME, 0x1f, 4, 14);
 911   2              }
 912   1      
 913   1              else if(NOTIFY_RIGHT_KEY == Key)
 914   1              {
 915   2              if (stGUD3.VOLUME < 0x1f) stGUD3.VOLUME++;
 916   2              SetVolume();
 917   2              Save_GUD3();
 918   2                      rgb_OSD_Slider(0, 7, 24, 0x1f - stGUD3.VOLUME, 0x1f, 4, 14);
 919   2          }
 920   1      
 921   1      
 922   1      }
 923          
 924          void Page0_Enter_Key(void)
 925          {
 926   1              if((stGUD3.TV_SETTING & 0x08) == 0x08 )//Factory Mode           //anson
 927   1              {
 928   2                      //Into Factory mode
 929   2                      ucOSD_Page_Index    = PAGE_Factory;
 930   2                      ucOSD_Item_Index0   = PAGEFact_ITEM_Recall;
 931   2                      ucOSD_Item_Index1   = 0;
 932   2                      ucOSD_Item_Index2   = 0;
 933   2              }
 934   1              else
 935   1              {
 936   2                      // Change to OSD Main Page 1 and Main Program will show it
 937   2                      ucOSD_Page_Index    = 1;
 938   2                      ucOSD_Item_Index0   = 0;
 939   2                      ucOSD_Item_Index1   = 0;
 940   2                      ucOSD_Item_Index2   = 0;
 941   2                      b_rgb_VOLUME_STATUS = 0;
 942   2              }
 943   1      }
 944          
 945          void Page0_LR_Key(void)
 946          {
 947   1              // Go to Hidden Function Page
 948   1              if (SOURCE_VGA == (stGUD1.INPUT_SOURCE & 0x07))
 949   1              {
 950   2                      ucOSD_Page_Index    = 8;
 951   2                      ucOSD_Item_Index0   = 1;
 952   2                      ucOSD_Item_Index1   = 0;
 953   2                      ucOSD_Item_Index2   = 0;
 954   2              }
 955   1      }
 956          
 957          void Page1_Enter_Key(void)
 958          {
 959   1              if (0 == ucOSD_Item_Index0)
 960   1              {
 961   2                      if (MODE_NOSIGNAL != ucMode_Curr && MODE_NOSUPPORT != ucMode_Curr)
 962   2                      {
 963   3                              // Select and highlight the first item
 964   3                              ucOSD_Item_Index0   = PAGE1_ITEM_CONTRAST;
 965   3                              ucOSD_Item_Index1   = 0;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 17  

 966   3      
 967   3                              //Enable window 6 and draw it
 968   3                              //OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 25);
 969   3      // win_no, row_start, row_end,col_start,col_end, width, height, color, color_sb, gradient, gray_level, att
             -r
 970   3                  OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 25);
 971   3                      }
 972   2              }
 973   1              else
 974   1              {
 975   2                      if (ucOSD_Item_Index1)
 976   2                      {
 977   3                              // Leave the item and reset text color
 978   3                              switch (ucOSD_Item_Index0)
 979   3                              {
 980   4                                      case PAGE1_ITEM_AUTOBAL :
 981   4                          if (ucOSD_Item_Index1 == 1 ) //1 : Yes  ,   2 : No
 982   4                          {
 983   5                                                      if (ERROR_INPUT == Auto_Balance())
 984   5                                                      {
 985   6                                                              ucMode_Curr = MODE_OSDFORCE;
 986   6                                                              return ;
 987   6                                                      }
 988   5                          }
 989   4                                              OSD_Line( 13, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x40, 2);
 990   4                                              break;
 991   4      
 992   4                                      case PAGE1_ITEM_CONTRAST :
 993   4                                              // Redraw slider and make the number become black.
 994   4                                              OSD_Slider(5, 31, 17, stGUD0.CONTRAST, 100, 4, 14);
 995   4                                              break;
 996   4      
 997   4                                      case PAGE1_ITEM_BRIGHT :
 998   4                                              // Redraw slider and make the number become black.
 999   4                                              OSD_Slider(7, 31, 17, stGUD0.BRIGHT, 100, 4, 14);
1000   4                                              break;
1001   4      
1002   4                                      case PAGE1_ITEM_COLORTEMP :
1003   4                                              //Set words color to black
1004   4                                              OSD_Line( 11, 36 + (ucOSD_Item_Index1-1)*(4+1), 4, 0x40, 2);
1005   4                                              break;
1006   4      
1007   4                                      case PAGE1_ITEM_GAMMA :
1008   4                                              //Set words color to black
1009   4                                              OSD_Line( 9, 36 + (ucOSD_Item_Index1-1)*(2+1), 1, 0x40, 2);
1010   4                                              break;
1011   4                              }
1012   3      
1013   3                              ucOSD_Item_Index1   = 0;
1014   3      
1015   3                      }
1016   2                      else
1017   2                      {
1018   3                              if (PAGE1_ITEM_EXIT == ucOSD_Item_Index0)
1019   3                              {
1020   4                                      // Disable highlight window 6
1021   4                                      OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
1022   4                                              , 0, 0, 14, 251, 0, 1, 0);
1023   4                                      // De-select the page item and disable the hightlight window
1024   4                                      ucOSD_Item_Index0   = 0;
1025   4                                      ucOSD_Item_Index1   = 0;
1026   4                              }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 18  

1027   3                              else if (MODE_NOSIGNAL != ucMode_Curr && MODE_NOSUPPORT != ucMode_Curr)
1028   3                              {
1029   4                                      switch (ucOSD_Item_Index0)
1030   4                                      {
1031   5                                              case PAGE1_ITEM_AUTOBAL :
1032   5                              ucOSD_Item_Index1  = 2;
1033   5                                                      OSD_Line( 13, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x20, 2);
1034   5                                                      break;
1035   5      
1036   5                                              case PAGE1_ITEM_CONTRAST :
1037   5                                                      ucOSD_Item_Index1   = 1;
1038   5      
1039   5                                                      // Redraw slider and make the number become Red.
1040   5                                                      OSD_Slider(5, 31, 17, stGUD0.CONTRAST, 100, 2, 14);
1041   5                                                      break;
1042   5      
1043   5                                              case PAGE1_ITEM_BRIGHT :
1044   5                                                      ucOSD_Item_Index1   = 1;
1045   5      
1046   5                                                      // Redraw slider and make the number become Red.
1047   5                                                      OSD_Slider(7, 31, 17, stGUD0.BRIGHT, 100, 2, 14);
1048   5                                                      break;
1049   5      
1050   5                                              case PAGE1_ITEM_COLORTEMP :
1051   5                                                      ucOSD_Item_Index1 = ((stGUD1.INPUT_SOURCE & 0x18) >> 3) + 1;
1052   5      
1053   5                                                      //Here we can only change the color in Byte 2 for necessary words
1054   5                                                      OSD_Line( 11, 36 + (ucOSD_Item_Index1-1)*(4+1), 4, 0x20, 2);
1055   5                                                      break;
1056   5      
1057   5                                              case PAGE1_ITEM_GAMMA :
1058   5                                                      ucOSD_Item_Index1   = ((stGUD1.FUNCTION >> 5) & 0x03) + 1;
1059   5      
1060   5                                                      //Here we can only change the color in Byte 2 for necessary words
1061   5                                                      OSD_Line( 9, 36 + (ucOSD_Item_Index1-1)*(2+1), 1, 0x20, 2);
1062   5                                                      break;
1063   5      
1064   5                                              case PAGE1_ITEM_RGBADJ :
1065   5                                                      OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
1066   5                                                              , 0, 0, 14, 251, 0, 1, 0);
1067   5                                                      ucOSD_Item_Index1   = PAGE1B_ITEM_RED;
1068   5                                                      ucOSD_Item_Index2   = 0;
1069   5                                                      OSD_Proc_B(NOTIFY_SHOW);       // Show the sub-page
1070   5                                                      break;
1071   5                                      }
1072   4                              }
1073   3                      }
1074   2              }
1075   1      }
1076          
1077          void Page1_Left_Right_Key(unsigned char Key)
1078          {
1079   1              if (ucOSD_Item_Index1)
1080   1              {
1081   2                      switch (ucOSD_Item_Index0)
1082   2                      {
1083   3                      case PAGE1_ITEM_AUTOBAL :
1084   3      //                      ucOSD_Item_Index1   = (NOTIFY_LEFT_KEY == Key) ? 1 : 2;
1085   3                              ucOSD_Item_Index1   = (NOTIFY_RIGHT_KEY == Key) ? 1 : 2;
1086   3                                      OSD_Line( 13, 36, 14, 0x40, 2); //Set color to black
1087   3                                      OSD_Line( 13, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x20, 2);
1088   3                                      break;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 19  

1089   3      
1090   3                              case PAGE1_ITEM_CONTRAST :
1091   3                                      Bright_Contrast_Adjust(&stGUD0.CONTRAST,Key);
1092   3      
1093   3                                      OSD_Slider(5, 31, 17, stGUD0.CONTRAST, 100, 2, 14);
1094   3      
1095   3      #if(ANALOG_CONTRAST)
1096   3                                      if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
1097   3                                              SetADC_Gain();
1098   3                                      else
1099   3                                              Set_Bright_Contrast();
1100   3      #else
                                              Set_Bright_Contrast();
              #endif
1103   3      
1104   3                                      Save_GUD0();
1105   3                                      break;
1106   3      
1107   3                              case PAGE1_ITEM_BRIGHT :
1108   3                                      Bright_Contrast_Adjust(&stGUD0.BRIGHT,Key);
1109   3                      
1110   3                                      OSD_Slider(7, 31, 17, stGUD0.BRIGHT, 100, 2, 14);
1111   3                                      Set_Bright_Contrast();
1112   3                                      Save_GUD0();
1113   3                                      break;
1114   3      
1115   3                              case PAGE1_ITEM_COLORTEMP:
1116   3      //                              if(NOTIFY_RIGHT_KEY == Key)
1117   3                                      if(NOTIFY_LEFT_KEY == Key)
1118   3                                              ucOSD_Item_Index1 = (ucOSD_Item_Index1 == 4) ? 4 : ucOSD_Item_Index1 + 1;
1119   3                                      else
1120   3                                              ucOSD_Item_Index1 = (ucOSD_Item_Index1 == 1) ? 1 : ucOSD_Item_Index1 - 1;
1121   3      
1122   3                                      stGUD1.INPUT_SOURCE = (stGUD1.INPUT_SOURCE & 0xe7 ) | ((ucOSD_Item_Index1 - 1) << 3);
1123   3      
1124   3                                      //Here we can only change the color in Byte 2 for necessary words
1125   3                                      OSD_Line( 11, 36, 20, 0x40, 2); //Set color to black
1126   3                                      OSD_Line( 11, 36 + (ucOSD_Item_Index1-1)*(4+1), 4, 0x20, 2);
1127   3      
1128   3                                      Set_Bright_Contrast();
1129   3                                      Save_GUD1();
1130   3                                      break;
1131   3                                      
1132   3                              case PAGE1_ITEM_GAMMA :
1133   3      //                              if (NOTIFY_RIGHT_KEY == Key)
1134   3                                      if (NOTIFY_LEFT_KEY == Key)
1135   3                                      {
1136   4                                              if (4 <= ucOSD_Item_Index1)
1137   4                                                      break;
1138   4      
1139   4                                              ucOSD_Item_Index1   = ucOSD_Item_Index1 + 1;
1140   4                                      }
1141   3                                      else
1142   3                                      {
1143   4                                              if (1 >= ucOSD_Item_Index1)
1144   4                                                      break;
1145   4      
1146   4                                              ucOSD_Item_Index1   = ucOSD_Item_Index1 - 1;
1147   4                                      }
1148   3      
1149   3                                      stGUD1.FUNCTION = (stGUD1.FUNCTION & 0x9f) | ((ucOSD_Item_Index1 - 1) << 5);
1150   3                                      //Here we can only change the color in Byte 2 for necessary words
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 20  

1151   3                                      OSD_Line( 9, 36, 14, 0x40, 2);  //Set color to black
1152   3                                      OSD_Line( 9, 36 + (ucOSD_Item_Index1-1)*(2+1), 1, 0x20, 2);
1153   3      
1154   3                                      Set_Gamma();
1155   3                                      Save_GUD1();
1156   3                                      break;
1157   3                  
1158   3                      }
1159   2              }
1160   1              else
1161   1              {
1162   2                      Osd_Change_Item(Key,PAGE1_ITEM_NUM);
1163   2                      
1164   2              }
1165   1      }
1166          
1167          void Page1_Show(void)
1168          {
1169   1              Show_Osd_Page(0,Page1_Atb,0);
1170   1      
1171   1              //Set Window 5 to select "Colour"
1172   1              OSD_Window( 5, 10, 136, 54, 84, 1, 1, 14, 251, 0, 1, 25);
1173   1      
1174   1              if (MODE_NOSIGNAL == ucMode_Curr || MODE_NOSUPPORT == ucMode_Curr)
1175   1              {
1176   2                      //ucOSD_Item_Index0   = 0;
1177   2                      //ucOSD_Item_Index1   = 0;
1178   2              }
1179   1      
1180   1              OSD_Slider(5, 31, 17, stGUD0.CONTRAST, 100, 4, 14);
1181   1              OSD_Slider(7, 31, 17, stGUD0.BRIGHT, 100, 4, 14);
1182   1              
1183   1              switch (ucOSD_Item_Index0)
1184   1              {
1185   2                      case PAGE1_ITEM_CONTRAST :
1186   2                              break;
1187   2                              
1188   2                      case PAGE1_ITEM_BRIGHT :
1189   2                              break;
1190   2                              
1191   2                      case PAGE1_ITEM_GAMMA :
1192   2                              break;
1193   2                              
1194   2                      case PAGE1_ITEM_RGBADJ :
1195   2                              OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
1196   2                                      , 1, 1, 14, 251, 0, 1, 25);
1197   2                              break;
1198   2              }
1199   1      }
1200          
1201          void Page1B_Enter_Key(void)
1202          {
1203   1              ucOSD_Page_Index = 7;
1204   1              if (PAGE1B_ITEM_EXIT == ucOSD_Item_Index1)
1205   1              {
1206   2                      // De-select the page item and disable the hightlight window
1207   2                      OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
1208   2                              , 0, 0, 14, 251, 0, 1, 0);
1209   2                      ucOSD_Item_Index1   = 0;
1210   2                      ucOSD_Item_Index2   = 0;
1211   2              }
1212   1              else
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 21  

1213   1              {
1214   2                      if (ucOSD_Item_Index2)
1215   2                      {
1216   3                              ucOSD_Item_Index2   = 0;        // Leave the item
1217   3                              switch (ucOSD_Item_Index1)
1218   3                              {
1219   4                                      case PAGE1B_ITEM_RED :
1220   4                                              OSD_Slider(5, 31, 17, stGUD0.RTD_R_CONTRAST, 100, 4, 2);
1221   4                                              break;
1222   4                                      
1223   4                                      case PAGE1B_ITEM_GREEN :
1224   4                                              OSD_Slider(7, 31, 17, stGUD0.RTD_G_CONTRAST, 100, 4, 12);
1225   4                                              break;
1226   4                                      
1227   4                                      case PAGE1B_ITEM_BLUE :
1228   4                                              OSD_Slider(9, 31, 17, stGUD0.RTD_B_CONTRAST, 100, 4, 3);
1229   4                                              break;
1230   4                              }
1231   3                      }
1232   2                      else if (MODE_NOSIGNAL != ucMode_Curr && MODE_NOSUPPORT != ucMode_Curr)
1233   2                      {
1234   3                              ucOSD_Item_Index2   = 1;        // Enter the item
1235   3      
1236   3                              //Draw the selected slider
1237   3                              switch (ucOSD_Item_Index1)
1238   3                              {
1239   4                                      case PAGE1B_ITEM_RED :
1240   4                                              OSD_Slider(5, 31, 17, stGUD0.RTD_R_CONTRAST, 100, 2, 2);
1241   4                                              break;
1242   4                                      
1243   4                                      case PAGE1B_ITEM_GREEN :
1244   4                                              OSD_Slider(7, 31, 17, stGUD0.RTD_G_CONTRAST, 100, 12, 12);
1245   4                                              break;
1246   4                                      
1247   4                                      case PAGE1B_ITEM_BLUE :
1248   4                                              OSD_Slider(9, 31, 17, stGUD0.RTD_B_CONTRAST, 100, 3, 3);
1249   4                                              break;
1250   4                              }
1251   3                      }
1252   2              }
1253   1              ucOSD_Page_Index = 1;
1254   1      }
1255          
1256          void Page1B_Left_Right_Key(unsigned char Key)
1257          {
1258   1              ucOSD_Page_Index = 7;
1259   1              if (ucOSD_Item_Index2)
1260   1              {
1261   2                      switch (ucOSD_Item_Index1)
1262   2                      {
1263   3                              case PAGE1B_ITEM_RED :
1264   3                                      Bright_Contrast_Adjust(&stGUD0.RTD_R_CONTRAST,Key);
1265   3                      
1266   3                                      OSD_Slider(5, 31, 17, stGUD0.RTD_R_CONTRAST, 100, 2, 2);
1267   3                                      break;
1268   3                                      
1269   3                              case PAGE1B_ITEM_GREEN :
1270   3                                      Bright_Contrast_Adjust(&stGUD0.RTD_G_CONTRAST,Key);
1271   3                              
1272   3                                      OSD_Slider(7, 31, 17, stGUD0.RTD_G_CONTRAST, 100, 12, 12);
1273   3                                      break;
1274   3                                      
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 22  

1275   3                              case PAGE1B_ITEM_BLUE :
1276   3                                      Bright_Contrast_Adjust(&stGUD0.RTD_B_CONTRAST,Key);
1277   3                              
1278   3                                      OSD_Slider(9, 31, 17, stGUD0.RTD_B_CONTRAST, 100, 3, 3);
1279   3                                      break;
1280   3                      }
1281   2      
1282   2                      Set_Bright_Contrast();
1283   2                      Save_GUD0();
1284   2                      
1285   2              }
1286   1              else
1287   1              {
1288   2                      // Select and highlight the next/previous item
1289   2                      if (NOTIFY_RIGHT_KEY == Key)
1290   2                              ucOSD_Item_Index1   = (PAGE1B_ITEM_NUM == ucOSD_Item_Index1) ? 1 : (ucOSD_Item_Index1 + 1);
1291   2                      else
1292   2                              ucOSD_Item_Index1   = (1 == ucOSD_Item_Index1) ? PAGE1B_ITEM_NUM : (ucOSD_Item_Index1 - 1);
1293   2                  
1294   2                      OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index1-1)*(29+4)), (84 + (ucOSD_Item_Index1-1)*(29+4))
1295   2                              , 1, 1, 14, 251, 0, 1, 25);
1296   2              }
1297   1              ucOSD_Page_Index = 1;
1298   1      }
1299          
1300          void Page1B_Show(void)
1301          {
1302   1              Show_Osd_Page(0,Page7_Atb,6);
1303   1      
1304   1              // Set window 6 to Highlight the select item
1305   1              OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 25);
1306   1              
1307   1              if (MODE_NOSIGNAL == ucMode_Curr || MODE_NOSUPPORT == ucMode_Curr)      
1308   1                      ucOSD_Item_Index2   = 0;
1309   1      
1310   1              if (0 == ucOSD_Item_Index2)
1311   1              {
1312   2                      ucOSD_Page_Index = 7;
1313   2                      OSD_Slider(5, 31, 17, stGUD0.RTD_R_CONTRAST, 100, 4, 2);
1314   2                      OSD_Slider(7, 31, 17, stGUD0.RTD_G_CONTRAST, 100, 4, 12);
1315   2                      OSD_Slider(9, 31, 17, stGUD0.RTD_B_CONTRAST, 100, 4, 3);
1316   2                      ucOSD_Page_Index = 1;
1317   2              }
1318   1              else
1319   1              {
1320   2                      //Set the active slider (Red, Greed, Blue)
1321   2                      /*
1322   2                      OSD_Slider(11, 2, 20,
1323   2                              (PAGE1B_ITEM_RED == ucOSD_Item_Index1) ? stGUD0.RTD_R_CONTRAST 
1324   2                              : (PAGE1B_ITEM_GREEN == ucOSD_Item_Index1) ? stGUD0.RTD_G_CONTRAST
1325   2                              : stGUD0.RTD_B_CONTRAST, 100, 0x61);
1326   2      
1327   2                      */
1328   2              }
1329   1      }
1330          
1331          void Page2_Enter_Key()
1332          {
1333   1              if (0 == ucOSD_Item_Index0)
1334   1              {
1335   2                      if (MODE_NOSIGNAL != ucMode_Curr && MODE_NOSUPPORT != ucMode_Curr)
1336   2                      {
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 23  

1337   3                              // Select and highlight the first item
1338   3                              ucOSD_Item_Index0   = PAGE2_ITEM_POSH;
1339   3                              ucOSD_Item_Index1   = 0;
1340   3      
1341   3                              //Enable Window 6 and Draw it
1342   3                              OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 25);
1343   3                      }
1344   2              }
1345   1              else
1346   1              {
1347   2                      if (ucOSD_Item_Index1)
1348   2                      {
1349   3                              switch (ucOSD_Item_Index0)
1350   3                              {
1351   4                                      case PAGE2_ITEM_POSH :
1352   4                                              OSD_Slider(5, 31, 17, ucH_Max_Margin - stMUD.H_POSITION, ucH_Max_Margin - ucH_Min_Margin, 4, 14);
1353   4                                              break;
1354   4      
1355   4                                      case PAGE2_ITEM_POSV :
1356   4                                              OSD_Slider(7, 31, 17, (unsigned int)(stMUD.V_POSITION - ucV_Min_Margin) * 50 / (128 - ucV_Min_Margin)
             -, 100, 4, 14);
1357   4                                              break;
1358   4                                              
1359   4                                      case PAGE2_ITEM_PHASE :
1360   4      #if(MORE_PHASE)
                                                      OSD_Slider(11, 31, 17, stMUD.PHASE, 127, 4, 14);
              #else
1363   4                                              OSD_Slider(11, 31, 17, (stMUD.PHASE & 0x7c) >> 2, 31, 4, 14);
1364   4      #endif
1365   4                                              break;
1366   4                                              
1367   4                                      case PAGE2_ITEM_CLOCK :
1368   4      
1369   4      #if(ALIGN_LEFT == CLOCK_ALIGN)
1370   4                          OSD_Slider(13, 31, 17, stMUD.CLOCK - 78, 100, 4, 14);
1371   4      #else
                                                      OSD_Slider(13, 31, 17, stMUD.CLOCK - 28, 200, 4, 14);
              #endif
1374   4                                              break;
1375   4      
1376   4                                      case PAGE2_ITEM_SHARP :
1377   4                                              OSD_Line( 9, 36 + (ucOSD_Item_Index1-1)*(2+1), 1, 0x40, 2);
1378   4                                              break;
1379   4                                                                                                      
1380   4                              }
1381   3      
1382   3                              ucOSD_Item_Index1   = 0;    // Leave the item
1383   3                              
1384   3                      }
1385   2                      else
1386   2                      {
1387   3                              if (PAGE2_ITEM_EXIT == ucOSD_Item_Index0)
1388   3                              {
1389   4                                      // Disable Window 6 and Draw it
1390   4                                      OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
1391   4                                              , 0, 0, 14, 251, 0, 1, 0);
1392   4                                      // De-select the page item and disable the hightlight window
1393   4                                      ucOSD_Item_Index0   = 0;
1394   4                                      ucOSD_Item_Index1   = 0;
1395   4                              }
1396   3                              else if (MODE_NOSIGNAL != ucMode_Curr && MODE_NOSUPPORT != ucMode_Curr)
1397   3                              {
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 24  

1398   4                                      if (SOURCE_VGA == (stGUD1.INPUT_SOURCE & 0x07) || PAGE2_ITEM_SHARP == ucOSD_Item_Index0)
1399   4                                      {
1400   5                                              switch (ucOSD_Item_Index0)
1401   5                                              {
1402   6                                                      case PAGE2_ITEM_POSH :
1403   6                                                              ucOSD_Item_Index1   = 1;    // Enter the item
1404   6                                                              OSD_Slider(5, 31, 17, ucH_Max_Margin - stMUD.H_POSITION, ucH_Max_Margin - ucH_Min_Margin, 2, 14);
1405   6                                                              break;
1406   6                                                              
1407   6                                                      case PAGE2_ITEM_POSV :
1408   6                                                              ucOSD_Item_Index1   = 1;    // Enter the item
1409   6                                                              OSD_Slider(7, 31, 17, (unsigned int)(stMUD.V_POSITION - ucV_Min_Margin) * 50 / (128 - ucV_Min_Margi
             -n), 100, 2, 14);
1410   6                                                              break;
1411   6                                                              
1412   6                                                      case PAGE2_ITEM_PHASE :
1413   6                                                              ucOSD_Item_Index1   = 1;    // Enter the item
1414   6      #if(MORE_PHASE)
                                                                      OSD_Slider(11, 31, 17, stMUD.PHASE, 127, 2, 14);
              #else
1417   6                                                              OSD_Slider(11, 31, 17, (stMUD.PHASE & 0x7c) >> 2, 31, 2, 14);
1418   6      #endif
1419   6                                                              break;
1420   6                                                              
1421   6                                                      case PAGE2_ITEM_CLOCK :
1422   6                                                              ucOSD_Item_Index1   = 1;    // Enter the item
1423   6      #if(ALIGN_LEFT == CLOCK_ALIGN)
1424   6                                  OSD_Slider(13, 31, 17, stMUD.CLOCK - 78, 100, 2, 14);
1425   6      #else
                                                                      OSD_Slider(13, 31, 17, stMUD.CLOCK - 28, 200, 2, 14);
              #endif
1428   6                                                              break;
1429   6      
1430   6                                                      case PAGE2_ITEM_SHARP :
1431   6                                                              ucOSD_Item_Index1   = stGUD1.FILTER + 1;
1432   6                                                              OSD_Line( 9, 36 + (ucOSD_Item_Index1-1)*(2+1), 1, 0x20, 2);
1433   6                                                              break;
1434   6                                                                                                      
1435   6                                              }
1436   5                                      }
1437   4                              }
1438   3                      }
1439   2              }
1440   1      }
1441          
1442          void Page2_Left_Right_Key(unsigned char Key)
1443          {
1444   1              if (ucOSD_Item_Index1)
1445   1              {
1446   2                      switch (ucOSD_Item_Index0)
1447   2                      {
1448   3                              case PAGE2_ITEM_POSH :
1449   3      //                              if (NOTIFY_RIGHT_KEY == Key)
1450   3                                      if (NOTIFY_LEFT_KEY == Key)
1451   3                                      {
1452   4                                              if (ucH_Min_Margin >= stMUD.H_POSITION)
1453   4                                                      break;
1454   4      
1455   4                                              if (KEY_TURBO_ENABLE > ucKey_Issued)
1456   4                                                      stMUD.H_POSITION    = stMUD.H_POSITION > ucH_Min_Margin ? stMUD.H_POSITION - 1 : ucH_Min_Margin;
1457   4                                              else
1458   4                                                      stMUD.H_POSITION    = stMUD.H_POSITION > (ucH_Min_Margin + 2) ? stMUD.H_POSITION - 3 : ucH_Min_Margi
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 25  

             -n;
1459   4                                      }
1460   3                                      else
1461   3                                      {
1462   4                                              if (ucH_Max_Margin <= stMUD.H_POSITION)
1463   4                                                      break;
1464   4      
1465   4                                              if (KEY_TURBO_ENABLE > ucKey_Issued)
1466   4                                                      stMUD.H_POSITION    = stMUD.H_POSITION < ucH_Max_Margin ? stMUD.H_POSITION + 1 : ucH_Max_Margin;
1467   4                                              else
1468   4                                                      stMUD.H_POSITION    = stMUD.H_POSITION < (ucH_Max_Margin - 2) ? stMUD.H_POSITION + 3 : ucH_Max_Margi
             -n;
1469   4                                      }
1470   3      
1471   3                                      OSD_Slider(5, 31, 17, ucH_Max_Margin - stMUD.H_POSITION, ucH_Max_Margin - ucH_Min_Margin, 2, 14);
1472   3                                      Set_H_Position();
1473   3                                      Set_Phase(stMUD.PHASE);
1474   3                                      Save_MUD(ucMode_Curr);
1475   3                                      break;
1476   3                                      
1477   3                              case PAGE2_ITEM_POSV :
1478   3      //                              if (NOTIFY_RIGHT_KEY == Key)
1479   3                                      if (NOTIFY_LEFT_KEY == Key)
1480   3                                      {
1481   4                                              if ((unsigned int)256 - ucV_Min_Margin <= stMUD.V_POSITION)
1482   4                                                      break;
1483   4      
1484   4                                              stMUD.V_POSITION    += 1;
1485   4                                      }
1486   3                                      else
1487   3                                      {
1488   4                                              if (ucV_Min_Margin >= stMUD.V_POSITION)
1489   4                                                      break;
1490   4      
1491   4                                              stMUD.V_POSITION    -= 1;
1492   4                                      }
1493   3      
1494   3                                      OSD_Slider(7, 31, 17, (unsigned int)(stMUD.V_POSITION - ucV_Min_Margin) * 50 / (128 - ucV_Min_Margin),
             - 100, 2, 14);
1495   3                                      Set_V_Position();
1496   3                                      Save_MUD(ucMode_Curr);
1497   3                                      break;
1498   3                                                                      
1499   3                              case PAGE2_ITEM_PHASE :
1500   3      #if(MORE_PHASE)
              //                              if (NOTIFY_RIGHT_KEY == Key)
                                              if (NOTIFY_LEFT_KEY == Key)
                                              {
                                                      if (0x7f <= stMUD.PHASE)
                                                              break;
              
                                                      stMUD.PHASE += 1;
                                              }
                                              else
                                              {
                                                      if (0x00 == stMUD.PHASE)
                                                              break;
              
                                                      stMUD.PHASE -= 1;
                                              }
              
                                              OSD_Slider(11, 31, 17, stMUD.PHASE, 127, 2, 14);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 26  

              #else
1519   3                                      stMUD.PHASE     &= 0x7c;
1520   3      //                              if (NOTIFY_RIGHT_KEY == Key)
1521   3                                      if (NOTIFY_LEFT_KEY == Key)
1522   3                                      {
1523   4                                              if (0x7c <= stMUD.PHASE)
1524   4                                                      break;
1525   4      
1526   4                                              stMUD.PHASE += 4;
1527   4                                      }
1528   3                                      else
1529   3                                      {
1530   4                                              if (0x00 == stMUD.PHASE)
1531   4                                                      break;
1532   4      
1533   4                                              stMUD.PHASE -= 4;
1534   4                                      }
1535   3                                              
1536   3                                      OSD_Slider(11, 31, 17, (stMUD.PHASE & 0x7c) >> 2, 31, 2, 14);
1537   3      #endif
1538   3                                      Set_Phase(stMUD.PHASE);
1539   3                                      Save_MUD(ucMode_Curr);
1540   3                                      break;
1541   3                                              
1542   3                              case PAGE2_ITEM_CLOCK :
1543   3      #if(ALIGN_LEFT == CLOCK_ALIGN)
1544   3      //                              if (NOTIFY_RIGHT_KEY == Key)
1545   3                                      if (NOTIFY_LEFT_KEY == Key)
1546   3                                      {
1547   4                                              if (178 <= stMUD.CLOCK)
1548   4                                                      break;
1549   4      
1550   4                                              if (KEY_TURBO_ENABLE > ucKey_Issued)
1551   4                                                      stMUD.CLOCK = (177 >= stMUD.CLOCK) ? stMUD.CLOCK + 1 : 178;
1552   4                                              else
1553   4                                                      stMUD.CLOCK = (176 >= stMUD.CLOCK) ? stMUD.CLOCK + 2 : 178;
1554   4                          
1555   4                                              Set_Clock();
1556   4                                              Set_H_Position();
1557   4                                      }
1558   3                                      else
1559   3                                      {
1560   4                                              if (78 >= stMUD.CLOCK)
1561   4                                                      break;
1562   4      
1563   4                                              if (KEY_TURBO_ENABLE > ucKey_Issued)
1564   4                                                      stMUD.CLOCK = (79 <= stMUD.CLOCK) ? stMUD.CLOCK - 1 : 78;
1565   4                                              else
1566   4                                                      stMUD.CLOCK = (80 <= stMUD.CLOCK) ? stMUD.CLOCK - 2 : 78;
1567   4      
1568   4                                              Set_H_Position();
1569   4                                              Set_Clock();
1570   4                                      }
1571   3      
1572   3                                      OSD_Slider(13, 31, 17, stMUD.CLOCK - 78, 100, 2, 14);
1573   3      
1574   3      #else
              //                              if (NOTIFY_RIGHT_KEY == Key)
                                              if (NOTIFY_LEFT_KEY == Key)
                                              {
                                                      if (228 <= stMUD.CLOCK)
                                                              break;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 27  

              
                                                      if (KEY_TURBO_ENABLE > ucKey_Issued)
                                                              stMUD.CLOCK = (227 >= stMUD.CLOCK) ? stMUD.CLOCK + 1 : 228;
                                                      else
                                                              stMUD.CLOCK = (226 >= stMUD.CLOCK) ? stMUD.CLOCK + 2 : 228;
                                  
                                                      Set_Clock();
                                                      Set_H_Position();
                                              }
                                              else
                                              {
                                                      if (28 >= stMUD.CLOCK)
                                                              break;
              
                                                      if (KEY_TURBO_ENABLE > ucKey_Issued)
                                                              stMUD.CLOCK = (29 <= stMUD.CLOCK) ? stMUD.CLOCK - 1 : 28;
                                                      else
                                                              stMUD.CLOCK = (30 <= stMUD.CLOCK) ? stMUD.CLOCK - 2 : 28;
              
                                                      Set_H_Position();
                                                      Set_Clock();
                                              }
              
                                              OSD_Slider(13, 31, 17, stMUD.CLOCK - 28, 200, 2, 14);
              #endif
1605   3                                      Save_MUD(ucMode_Curr);
1606   3                                      break;
1607   3      
1608   3                              case PAGE2_ITEM_SHARP :
1609   3      //                              if (NOTIFY_RIGHT_KEY == Key)
1610   3                                      if (NOTIFY_LEFT_KEY == Key)
1611   3                                      {
1612   4                                              if (5 <= ucOSD_Item_Index1)
1613   4                                                      break;
1614   4      
1615   4                                              ucOSD_Item_Index1   = ucOSD_Item_Index1 + 1;
1616   4                                      }
1617   3                                      else
1618   3                                      {
1619   4                                              if (1 >= ucOSD_Item_Index1)
1620   4                                                      break;
1621   4      
1622   4                                              ucOSD_Item_Index1   = ucOSD_Item_Index1 - 1;
1623   4                                      }
1624   3      
1625   3                                      OSD_Line( 9, 36, 14, 0x40, 2);  //Set color to black
1626   3                                      OSD_Line( 9, 36 + (ucOSD_Item_Index1-1)*(2+1), 1, 0x20, 2);
1627   3                                      
1628   3                                      stGUD1.FILTER    = ucOSD_Item_Index1 - 1;
1629   3                                      Sharpness();
1630   3                      
1631   3                                      if((usIPH_ACT_WID == 1280) && (DISP_SIZE == DISP_1280x1024) && (stGUD1.FILTER == 0x02))
1632   3                                              RTDSetBit(SCALE_CTRL_15, 0xff, 0x01);   // Turn on H scale-up
1633   3                                      else if((usIPH_ACT_WID == 1280) && (DISP_SIZE == DISP_1280x1024) && (stGUD1.FILTER != 0x02))
1634   3                                              RTDSetBit(SCALE_CTRL_15, 0xfe, 0x00);   // Turn off H scale-up
1635   3      
1636   3                                      Save_GUD1();
1637   3                                      break;
1638   3                              
1639   3                                              
1640   3                      }
1641   2              }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 28  

1642   1              else
1643   1              {
1644   2                      Osd_Change_Item(Key,PAGE2_ITEM_NUM);
1645   2              }
1646   1      }
1647          
1648          
1649          void Page2_Show()
1650          {
1651   1              Show_Osd_Page(1,Page2_Atb,1);
1652   1      
1653   1              //Set Window 5 to select "Picture"
1654   1              OSD_Window( 5, 10, 136, 87, 117, 1, 1, 14, 251, 0, 1, 25);
1655   1      
1656   1              if (MODE_NOSIGNAL == ucMode_Curr || MODE_NOSUPPORT == ucMode_Curr)
1657   1              {
1658   2                      ucOSD_Item_Index0   = 0;
1659   2                      ucOSD_Item_Index1   = 0;
1660   2              }
1661   1      
1662   1              if (SOURCE_VGA != (stGUD1.INPUT_SOURCE & 0x07) && PAGE2_ITEM_SHARP != ucOSD_Item_Index0)
1663   1              {
1664   2                      ucOSD_Item_Index1   = 0;
1665   2              }
1666   1      
1667   1              if (0 == ucOSD_Item_Index1)
1668   1              {
1669   2                      OSD_Slider(5, 31, 17, ucH_Max_Margin - stMUD.H_POSITION, ucH_Max_Margin - ucH_Min_Margin, 4, 14);
1670   2                      OSD_Slider(7, 31, 17, (unsigned int)(stMUD.V_POSITION - ucV_Min_Margin) * 50 / (128 - ucV_Min_Margin), 1
             -00, 4, 14);
1671   2      #if(MORE_PHASE)
                              OSD_Slider(11, 31, 17, stMUD.PHASE, 127, 4, 14);
              #else
1674   2                      OSD_Slider(11, 31, 17, (stMUD.PHASE & 0x7c) >> 2, 31, 4, 14);
1675   2      #endif
1676   2      
1677   2      #if(ALIGN_LEFT == CLOCK_ALIGN)
1678   2              OSD_Slider(13, 31, 17, stMUD.CLOCK - 78, 100, 4, 14);
1679   2      #else
                              OSD_Slider(13, 31, 17, stMUD.CLOCK - 28, 200, 4, 14);
              #endif
1682   2              }
1683   1              else
1684   1              {
1685   2                      switch (ucOSD_Item_Index0)
1686   2                      {
1687   3                              case PAGE2_ITEM_POSH :
1688   3                                      break;
1689   3                                      
1690   3                              case PAGE2_ITEM_POSV :
1691   3                                      break;
1692   3                                      
1693   3                              case PAGE2_ITEM_PHASE :
1694   3                                      break;
1695   3                                      
1696   3                              case PAGE2_ITEM_CLOCK :
1697   3                                      break;
1698   3      
1699   3                              case PAGE2_ITEM_SHARP :
1700   3                                      break;
1701   3                      }
1702   2              }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 29  

1703   1      }
1704          
1705          /*
1706          bit Page3_Enter_Key(void)
1707          {
1708                  if (0 == ucOSD_Item_Index0)
1709                  {
1710                          if ((MODE_NOSIGNAL != ucMode_Curr) && (MODE_NOSUPPORT != ucMode_Curr) && (SOURCE_VGA == (stGUD1.INPUT_SO
             -URCE & 0x07)))
1711                          {
1712                                  // Select and highlight the first item
1713                                  ucOSD_Item_Index0   = PAGE3_ITEM_AUTOCFG;
1714                                  ucOSD_Item_Index1   = 0;
1715                                  
1716                                  OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 25);
1717                          }
1718                  }
1719                  else
1720                  {
1721                          if (PAGE3_ITEM_EXIT == ucOSD_Item_Index0)
1722                          {
1723                                  // Disable highlight window
1724                                  OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
1725                                          , 0, 0, 14, 251, 0, 1, 0);
1726                                  // De-select the page item and disable the hightlight window
1727                                  ucOSD_Item_Index0   = 0;
1728                                  ucOSD_Item_Index1   = 0;
1729                          }
1730                          else if (ucOSD_Item_Index1)
1731                          {
1732                                  if (1 == ucOSD_Item_Index1)
1733                                  {
1734                                          switch (ucOSD_Item_Index0)
1735                                          {
1736                                                  case PAGE3_ITEM_AUTOCFG :
1737                                                          if (MODE_0640x0350x70HZ <= ucMode_Curr && MODE_0720x0400x70HZ >= ucMode_Curr)
1738                                                          {
1739                                                                  unsigned char ucResult;
1740          
1741                                                                  stMUD.CLOCK = 128;
1742          
1743                                                                  Set_H_Position();
1744                                                                  Set_Clock();
1745                                                                  Save_MUD(ucMode_Curr);
1746          
1747                                                                  ucResult    = Auto_Phase();
1748          
1749                                                                  if (ERROR_SUCCEED == ucResult)
1750                                                                  {
1751                                                                          ucResult    = Auto_Position();
1752                                                                  }
1753                                                                  
1754                                                                  if (ERROR_INPUT == ucResult)
1755                                                                  {
1756                                                                          ucMode_Curr = MODE_OSDFORCE;
1757                                                                          return 0;
1758                                                                  }
1759                                                          }
1760                                                          else
1761                                                          {
1762                                                                  if (ERROR_INPUT == Auto_Config())
1763                                      {
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 30  

1764                                                                          ucMode_Curr = MODE_OSDFORCE;
1765                                                                          return 0;
1766                                                                  }
1767                                                          }
1768          
1769                                                          OSD_Line( 5, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x40, 2);
1770                                                          break;
1771          
1772                                                  case PAGE3_ITEM_AUTOBAL :
1773                                                          if (ERROR_INPUT == Auto_Balance())
1774                                                          {
1775                                                                  ucMode_Curr = MODE_OSDFORCE;
1776                                                                  return 0;
1777                                                          }
1778          
1779                                                          OSD_Line( 7, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x40, 2);
1780                                                          break;
1781                                                          
1782                                          }
1783                                  }
1784                                  
1785                                  switch (ucOSD_Item_Index0)
1786                                  {
1787                                                  case PAGE3_ITEM_AUTOCFG :
1788                                                          OSD_Line( 5, 36, 14, 0x40, 2);  //Set color to black
1789                                                          break;
1790                                                  case PAGE3_ITEM_AUTOBAL :
1791                                                          OSD_Line( 7, 36, 14, 0x40, 2);  //Set color to black
1792                                                          break;
1793                                  }
1794                                  ucOSD_Item_Index1   = 0;    // Leave the item
1795                                  //Show_Mode();
1796                          }
1797                          else
1798                          {
1799                                  if (MODE_NOSIGNAL == ucMode_Curr || MODE_NOSUPPORT == ucMode_Curr)  
1800                                          return 1;//break;
1801          
1802                                  ucOSD_Item_Index1   = 2;    // Enter the item, default NO
1803          
1804                                  switch (ucOSD_Item_Index0)
1805                                  {
1806                                                  case PAGE3_ITEM_AUTOCFG :
1807                                                          OSD_Line( 5, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x20, 2);
1808                                                          break;
1809                                                  case PAGE3_ITEM_AUTOBAL :
1810                                                          OSD_Line( 7, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x20, 2);
1811                                                          break;
1812                                  }
1813                          }
1814                  }
1815          }
1816          */
1817          
1818          /*
1819          void Page3_Left_Right_Key(unsigned char Key)
1820          {
1821                  if (ucOSD_Item_Index1)
1822                  {
1823                          ucOSD_Item_Index1   = (NOTIFY_LEFT_KEY == Key) ? 1 : 2;
1824          
1825                          switch (ucOSD_Item_Index0)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 31  

1826                          {
1827                                          case PAGE3_ITEM_AUTOCFG :
1828                                                  OSD_Line( 5, 36, 14, 0x40, 2);  //Set color to black
1829                                                  OSD_Line( 5, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x20, 2);
1830                                                  break;
1831                                          case PAGE3_ITEM_AUTOBAL :
1832                                                  OSD_Line( 7, 36, 14, 0x40, 2);  //Set color to black
1833                                                  OSD_Line( 7, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x20, 2);
1834                                                  break;
1835                          }
1836                  }
1837                  else
1838                  {
1839                          Osd_Change_Item(Key,PAGE3_ITEM_NUM);
1840                  }
1841          }
1842          
1843          void Page3_Show(void)
1844          {
1845                  Show_Osd_Page(2,Page3_Atb,2);
1846          
1847                  //Set Window 5 to select "Functuin"
1848                  OSD_Window( 5, 10, 136, 120, 150, 1, 1, 14, 251, 0, 1, 25);
1849          
1850                  if (MODE_NOSIGNAL == ucMode_Curr || MODE_NOSUPPORT == ucMode_Curr)
1851                  {
1852                          ucOSD_Item_Index0   = 0;
1853                          ucOSD_Item_Index1   = 0;
1854                  }
1855          }
1856          */
1857          
1858          void Page4_Enter_Key(void)
1859          {
1860   1              if (0 == ucOSD_Item_Index0)
1861   1              {
1862   2                      // Select and highlight the first item
1863   2                      ucOSD_Item_Index0   = PAGE4_ITEM_LANGUAGE;
1864   2                      ucOSD_Item_Index1   = 0;
1865   2      
1866   2                      OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 25);
1867   2              }
1868   1              else
1869   1              {
1870   2                      switch (ucOSD_Item_Index0)
1871   2                      {
1872   3                              case PAGE4_ITEM_LANGUAGE :
1873   3                                      ucOSD_Item_Index1 = (stGUD1.FUNCTION & 0x07) + 1;
1874   3                                      OSD_Proc_B(NOTIFY_SHOW);                // Show the sub-page
1875   3                                      break;
1876   3                                      
1877   3                              case PAGE4_ITEM_OSDH :
1878   3                                      if (ucOSD_Item_Index1)
1879   3                                      {
1880   4                                              ucOSD_Item_Index1 = 0;          // Leave the item
1881   4                                              Get_OSD_Margin();
1882   4                                              OSD_Slider(7, 31, 17, stGUD1.OSD_POSH - Data[0], Data[1] - Data[0], 4, 14);
1883   4                                      }
1884   3                                      else
1885   3                                      {
1886   4                                              ucOSD_Item_Index1 = 1;    // Enter the item, show slider
1887   4                                              Get_OSD_Margin();
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 32  

1888   4                                              OSD_Slider(7, 31, 17, stGUD1.OSD_POSH - Data[0], Data[1] - Data[0], 2, 14);
1889   4                                      }
1890   3                                      break;
1891   3                                      
1892   3                              case PAGE4_ITEM_OSDV :
1893   3                                      if (ucOSD_Item_Index1)
1894   3                                      {
1895   4                                              ucOSD_Item_Index1   = 0;    // Leave the item
1896   4                                              Get_OSD_Margin();
1897   4                                              OSD_Slider(9, 31, 17, stGUD1.OSD_POSV - Data[2], Data[3] - Data[2], 4, 14);
1898   4                                      }
1899   3                                      else
1900   3                                      {
1901   4                                              ucOSD_Item_Index1   = 1;    // Enter the item, slider
1902   4                                              Get_OSD_Margin();
1903   4                                              OSD_Slider(9, 31, 17, stGUD1.OSD_POSV - Data[2], Data[3] - Data[2], 2, 14);
1904   4                                      }
1905   3                                      break;
1906   3                                      
1907   3                              case PAGE4_ITEM_TIMEOUT :
1908   3                                      if(ucOSD_Item_Index2)
1909   3                                      {
1910   4                                              ucOSD_Item_Index2   = 0;
1911   4                                              ucOSD_Item_Index1   = 0;    // Leave the item
1912   4      
1913   4                                              //Redraw the ON/OFF words
1914   4                                              OSD_Line( 11, 31, 3, 0x40, 2);
1915   4                                              OSD_Line( 11, 31, 3, 0x00, 1);
1916   4      
1917   4                                              OSD_Line( 11, 36, 12, 0x8a, 0);
1918   4                                              OSD_Line( 11, 36, 12, 0x00, 1);
1919   4                                              switch( stGUD1.FUNCTION & 0x07 )
1920   4                                              {
1921   5                                                      case 5:
1922   5                                                              OSD_Line( 11, 37, 1, 0x8c, 0);
1923   5                                                              OSD_Line( 11, 37, 1, 0xb3, 1);
1924   5                                                              OSD_Line( 11, 43, 1, 0x8c, 0);
1925   5                                                              OSD_Line( 11, 43, 1, 0xc9, 1);
1926   5                                                              break;
1927   5      
1928   5                                                      case 6:
1929   5                                                              OSD_Line( 11, 37, 1, 0x8c, 0);
1930   5                                                              OSD_Line( 11, 37, 1, 0xdb, 1);
1931   5                                                              OSD_Line( 11, 43, 1, 0x8c, 0);
1932   5                                                              OSD_Line( 11, 43, 1, 0xe5, 1);
1933   5                                                              break;
1934   5      
1935   5                                                      case 7:
1936   5                                                              OSD_Line( 11, 37, 1, 0x8c, 0);
1937   5                                                              OSD_Line( 11, 37, 1, 0x9b, 1);
1938   5                                                              OSD_Line( 11, 43, 1, 0x8c, 0);
1939   5                                                              OSD_Line( 11, 43, 1, 0x9c, 1);
1940   5                                                              break;
1941   5      
1942   5                                                      default:
1943   5                                                              OSD_Line( 11, 37, 1, 0x2e, 1);
1944   5                                                              OSD_Line( 11, 38, 1, 0x2d, 1);
1945   5                                                              OSD_Line( 11, 43, 1, 0x2e, 1);
1946   5                                                              OSD_Line( 11, 44, 2, 0x25, 1);
1947   5                                                              break;
1948   5      
1949   5                                              }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 33  

1950   4                                              OSD_Line( 11, 36, 12, 0x40, 2);
1951   4      
1952   4                                              OSD_Line( 11, 35, 1, 0x00, 1);
1953   4                                              OSD_Line( 11, 48, 1, 0x00, 1);
1954   4                                                                                      
1955   4                                              OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
1956   4                                                      , 1, 1, 14, 251, 0, 1, 25);
1957   4      
1958   4                                      }
1959   3                                      else if (ucOSD_Item_Index1)
1960   3                                      {
1961   4                                              if(ucOSD_Item_Index1 == 2)
1962   4                                              {
1963   5                                                      OSD_Line( 11, 36 + (ucOSD_Item_Index1-1)*(6+1), 3, 0x40, 2);
1964   5                                                      ucOSD_Item_Index1 = 0;
1965   5                                              }
1966   4                                              else
1967   4                                              {
1968   5                                                      ucOSD_Item_Index2    = 1;
1969   5                                                      if(stGUD1.OSD_TIMEOUT < 5)
1970   5                                                      {
1971   6                                                              stGUD1.OSD_TIMEOUT = 20; //reset to 20 seconds
1972   6                                                              usOSD_Timer         = 1020; //20*51     
1973   6                                                              Save_GUD1();
1974   6                                                      }
1975   5                              
1976   5                                                      OSD_Line( 11, 36, 12, 0xe0, 2);
1977   5                                                      OSD_Line( 11, 36, 12, 0x8c, 0);
1978   5                                                      OSD_Line( 11, 35, 1, 0x40, 2);
1979   5                                                      OSD_Line( 11, 35, 1, 0x0d, 1);
1980   5                                                      OSD_Line( 11, 48, 1, 0x40, 2);
1981   5                                                      OSD_Line( 11, 48, 1, 0x0c, 1);
1982   5                                                      OSD_Slider(11, 31, 17, stGUD1.OSD_TIMEOUT, 60, 2, 14);
1983   5                                              }
1984   4                                      }
1985   3                                      else
1986   3                                      {
1987   4                                              ucOSD_Item_Index1   = stGUD1.OSD_TIMEOUT ? 1 : 2;
1988   4                                              OSD_Line( 11, 36 + (ucOSD_Item_Index1-1)*(6+1), 3, 0x20, 2);
1989   4                                      }
1990   3                                      break;
1991   3                                      
1992   3                              case PAGE4_ITEM_TRANSLU :
1993   3                                      if (ucOSD_Item_Index1)
1994   3                                      {
1995   4                                              ucOSD_Item_Index1   = 0;    // Leave the item
1996   4                                              OSD_Slider(13, 31, 17, (stGUD1.INPUT_SOURCE & 0xe0) >> 5, 7, 4, 14);
1997   4                                      }
1998   3                                      else
1999   3                                      {
2000   4                                              ucOSD_Item_Index1   = 1;
2001   4                                              OSD_Slider(13, 31, 17, (stGUD1.INPUT_SOURCE & 0xe0) >> 5, 7, 2, 14);
2002   4                                      }
2003   3                                      break;
2004   3                                      
2005   3                              case PAGE4_ITEM_EXIT :
2006   3                                      // Disable highlight window 6
2007   3                                      OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
2008   3                                              , 0, 0, 14, 251, 0, 1, 0);
2009   3                                      // De-select the page item and disable the hightlight window
2010   3                                      ucOSD_Item_Index0   = 0;
2011   3                                      ucOSD_Item_Index1   = 0;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 34  

2012   3                                      
2013   3                                      break;
2014   3                                      
2015   3                      }
2016   2              }
2017   1      }
2018          
2019          void Page4_Left_Right_Key(unsigned char Key)
2020          {
2021   1              if (ucOSD_Item_Index1)
2022   1              {
2023   2                      switch (ucOSD_Item_Index0)
2024   2                      {
2025   3                              case PAGE4_ITEM_OSDH :
2026   3                                      Get_OSD_Margin();
2027   3      //                              if (NOTIFY_RIGHT_KEY == Key)
2028   3                                      if (NOTIFY_LEFT_KEY == Key)
2029   3                                      {
2030   4                                              if (Data[1] <= stGUD1.OSD_POSH)
2031   4                                                      break;
2032   4      
2033   4                                              if (KEY_TURBO_ENABLE > ucKey_Issued)
2034   4                                                      stGUD1.OSD_POSH   = Data[1] > stGUD1.OSD_POSH ? stGUD1.OSD_POSH + 1 : Data[1];
2035   4                                              else
2036   4                                                      stGUD1.OSD_POSH   = (Data[1] - 1) > stGUD1.OSD_POSH ? stGUD1.OSD_POSH + 2 : Data[1];
2037   4                                      }
2038   3                                      else
2039   3                                      {
2040   4                                              if (Data[0] >= stGUD1.OSD_POSH)
2041   4                                                      break;
2042   4      
2043   4                                              if (KEY_TURBO_ENABLE > ucKey_Issued)
2044   4                                                      stGUD1.OSD_POSH   = Data[0] < stGUD1.OSD_POSH ? stGUD1.OSD_POSH - 1 : Data[0];
2045   4                                              else
2046   4                                                      stGUD1.OSD_POSH   = (Data[0] + 1) < stGUD1.OSD_POSH ? stGUD1.OSD_POSH - 2 : Data[0];
2047   4                                      }
2048   3      
2049   3                                      OSD_Slider(7, 31, 17, stGUD1.OSD_POSH - Data[0], Data[1] - Data[0], 2, 14);
2050   3                                      OSD_Position(OSD_ENABLE);
2051   3                                      Save_GUD1();
2052   3                                      break;
2053   3                                      
2054   3                              case PAGE4_ITEM_OSDV :
2055   3                                      Get_OSD_Margin();
2056   3      //                              if (NOTIFY_RIGHT_KEY == Key)
2057   3                                      if (NOTIFY_LEFT_KEY == Key)
2058   3                                      {
2059   4                                              
2060   4                                              if (Data[3] <= stGUD1.OSD_POSV)
2061   4                                                      break;
2062   4      
2063   4                                              if (KEY_TURBO_ENABLE > ucKey_Issued)
2064   4                                                      stGUD1.OSD_POSV   = Data[3] > stGUD1.OSD_POSV ? stGUD1.OSD_POSV + 1 : Data[3];
2065   4                                              else
2066   4                                                      stGUD1.OSD_POSV   = (Data[3] - 1) > stGUD1.OSD_POSV ? stGUD1.OSD_POSV + 2 : Data[3];
2067   4                                      
2068   4                                      }
2069   3                                      else
2070   3                                      {
2071   4                                      
2072   4                                              if (Data[2] >= stGUD1.OSD_POSV)
2073   4                                                      break;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 35  

2074   4      
2075   4                                              if (KEY_TURBO_ENABLE > ucKey_Issued)
2076   4                                                      stGUD1.OSD_POSV   = Data[2] < stGUD1.OSD_POSV ? stGUD1.OSD_POSV - 1 : Data[2];
2077   4                                              else
2078   4                                                      stGUD1.OSD_POSV   = (Data[2] + 1) < stGUD1.OSD_POSV ? stGUD1.OSD_POSV - 2 : Data[2];
2079   4                                                      
2080   4                                      }
2081   3                                      
2082   3                                      OSD_Slider(9, 31, 17, stGUD1.OSD_POSV - Data[2], Data[3] - Data[2], 2, 14);
2083   3                                      OSD_Position(OSD_ENABLE);
2084   3                                      Save_GUD1();
2085   3                                      break;
2086   3                                      
2087   3                              case PAGE4_ITEM_TIMEOUT :
2088   3      //                              if (NOTIFY_RIGHT_KEY == Key)
2089   3                                      if (NOTIFY_LEFT_KEY == Key)
2090   3                                      {
2091   4                                              if(ucOSD_Item_Index2)
2092   4                                              {
2093   5                                                      stGUD1.OSD_TIMEOUT = (stGUD1.OSD_TIMEOUT == 60) ? 60 : stGUD1.OSD_TIMEOUT + 1;
2094   5                                                      OSD_Slider(11, 31, 17, stGUD1.OSD_TIMEOUT, 60, 2, 14);
2095   5                                              }
2096   4                                              else if(ucOSD_Item_Index1)
2097   4                                              {
2098   5                                                      //if (2 == ucOSD_Item_Index1)     break;
2099   5                                                      ucOSD_Item_Index1  = 2;
2100   5                                                      stGUD1.OSD_TIMEOUT  = 0;
2101   5                                                      OSD_Line( 11, 36, 14, 0x40, 2);
2102   5                                                      OSD_Line( 11, 36 + (ucOSD_Item_Index1-1)*(6+1), 3, 0x20, 2);
2103   5                                              }
2104   4                                      }
2105   3                                      else
2106   3                                      {
2107   4                                              if(ucOSD_Item_Index2)
2108   4                                              {
2109   5                                                      stGUD1.OSD_TIMEOUT = (stGUD1.OSD_TIMEOUT == 5) ? 5 : stGUD1.OSD_TIMEOUT - 1;
2110   5                                                      OSD_Slider(11, 31, 17, stGUD1.OSD_TIMEOUT, 60, 2, 14);
2111   5                                              }
2112   4                                              else if(ucOSD_Item_Index1)
2113   4                                              {
2114   5                                                      //if (1 == ucOSD_Item_Index1)     break;
2115   5                                                      ucOSD_Item_Index1   = 1;
2116   5                                                      OSD_Line( 11, 36, 14, 0x40, 2);
2117   5                                                      OSD_Line( 11, 36 + (ucOSD_Item_Index1-1)*(6+1), 3, 0x20, 2);
2118   5                                              }
2119   4                                      }
2120   3      
2121   3                                      usOSD_Timer         = (unsigned int)stGUD1.OSD_TIMEOUT * 51;     // 20 sec
2122   3                                      //stGUD1.OSD_TIMEOUT  = (1 == ucOSD_Item_Index1) ? 2 : 0;
2123   3                                      Save_GUD1();
2124   3                                      break;
2125   3                                      
2126   3                              case PAGE4_ITEM_TRANSLU :
2127   3                                      Data[0] = (stGUD1.INPUT_SOURCE & 0xe0) >> 5;
2128   3      //                              if(NOTIFY_RIGHT_KEY  == Key)
2129   3                                      if (NOTIFY_LEFT_KEY == Key)
2130   3                                      {
2131   4                                              if(ucOSD_Item_Index1)
2132   4                                              {
2133   5                                                      Data[0] = (Data[0] == 0x07) ? 0x07 : Data[0] + 1;
2134   5                                                      stGUD1.INPUT_SOURCE = stGUD1.INPUT_SOURCE & 0x1f | (Data[0] << 5);
2135   5                                              }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 36  

2136   4                                      }
2137   3                                      else
2138   3                                      {
2139   4                                              if(ucOSD_Item_Index1)
2140   4                                              {
2141   5                                                      Data[0] = (Data[0] == 0x00) ? 0x00 : Data[0] - 1;
2142   5                                                      stGUD1.INPUT_SOURCE = stGUD1.INPUT_SOURCE & 0x1f | (Data[0] << 5);
2143   5                                              }
2144   4                                      }
2145   3      
2146   3                                      RTDSetBit(OVL_CTRL_6D, 0xc7, Data[0] << 3);
2147   3                                      OSD_Slider(13, 31, 17, Data[0] , 7, 2, 14);
2148   3                                      Save_GUD1();
2149   3                                      break;
2150   3                                      
2151   3                      }
2152   2              }
2153   1              else
2154   1              {
2155   2                      Osd_Change_Item(Key,PAGE4_ITEM_NUM);
2156   2              }
2157   1      }
2158          
2159          
2160          void Page4_Show(void)
2161          {
2162   1              Show_Osd_Page(2,Page4_Atb,3);
2163   1      
2164   1      
2165   1              //Set Window 5 to select "OSD Menu"
2166   1      //      OSD_Window( 5, 10, 136, 153, 183, 1, 1, 14, 251, 0, 1, 25);
2167   1              OSD_Window( 5, 10, 136, 120, 150, 1, 1, 14, 251, 0, 1, 25);
2168   1      
2169   1              if (0 == ucOSD_Item_Index1)
2170   1              {
2171   2                      Get_OSD_Margin();
2172   2                      OSD_Slider(7, 31, 17, stGUD1.OSD_POSH - Data[0], Data[1] - Data[0], 4, 14);
2173   2                      Get_OSD_Margin();
2174   2                      OSD_Slider(9, 31, 17, stGUD1.OSD_POSV - Data[2], Data[3] - Data[2], 4, 14);
2175   2      
2176   2                      OSD_Slider(13, 31, 17, (stGUD1.INPUT_SOURCE & 0xe0) >> 5, 7, 4, 14);
2177   2                      if( ucOSD_Item_Index0 == PAGE4_ITEM_LANGUAGE)
2178   2                              OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 25);
2179   2                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
2180   2              }
2181   1              else
2182   1              {
2183   2                      switch (ucOSD_Item_Index0)
2184   2                      {
2185   3                              case PAGE4_ITEM_OSDH :
2186   3                                      //Get_OSD_Margin();
2187   3                                      //OSD_Slider(11, 2, 17, stGUD1.OSD_POSH - Data[0], Data[1] - Data[0], 0x02);
2188   3                                      break;
2189   3                                      
2190   3                              case PAGE4_ITEM_OSDV :
2191   3                                      //Get_OSD_Margin();
2192   3                                      //OSD_Slider(11, 2, 17, stGUD1.OSD_POSV - Data[2], Data[3] - Data[2], 0x02);
2193   3                                      break;
2194   3                                      
2195   3                              case PAGE4_ITEM_TIMEOUT :
2196   3                                      //ucOSD_Item_Index1   = stGUD1.OSD_TIMEOUT ? 1 : 2;
2197   3                                      //OSD_Line( 10, 15 + (ucOSD_Item_Index1-1)*(4+1), 4, 0x00, 2);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 37  

2198   3                                      break;
2199   3                                      
2200   3                              case PAGE4_ITEM_TRANSLU :
2201   3                                      //ucOSD_Item_Index1   = (stGUD1.INPUT_SOURCE & 0x80) ? 1 : 2;     // 1-On, 2-Off
2202   3                                      //OSD_Line( 10, 15 + (ucOSD_Item_Index1-1)*(4+1), 4, 0x00, 2);
2203   3                                      break;
2204   3                                      
2205   3                      }
2206   2              }
2207   1      }
2208          
2209          void Page4B_Enter_Key(void)
2210          {
2211   1              if ((stGUD1.FUNCTION & 0x07) != (ucOSD_Item_Index1 - 1))
2212   1              {
2213   2                      stGUD1.FUNCTION = (stGUD1.FUNCTION & 0xf8) | ((ucOSD_Item_Index1 - 1) & 0x07);
2214   2                      Save_GUD1();
2215   2      
2216   2                      switch (stGUD1.FUNCTION & 0x07)
2217   2                      {
2218   3                              case CHINESE_T :
2219   3                              case CHINESE_S :
2220   3                                      //RTDCodeW(OSD_Reset);
2221   3                                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
2222   3                                      Load_VLC_Font(Font_East_C, 0x5a9, 0x45);
2223   3                                      Page4_Show();
2224   3                                      //RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
2225   3                                      //RTDCodeW(OSD_Enable);
2226   3                                      break;
2227   3                                      
2228   3                              case JAPANESS :
2229   3                                      //RTDCodeW(OSD_Reset);
2230   3                                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
2231   3                                      Load_VLC_Font(Font_East_J, 0x573, 0x4B);
2232   3                                      Page4_Show();
2233   3                                      //RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
2234   3                                      //RTDCodeW(OSD_Enable);
2235   3                                      break;
2236   3                                      
2237   3                              default :
2238   3                                      break;
2239   3                                      
2240   3                      }
2241   2              }
2242   1      
2243   1              ucOSD_Item_Index1   = 0;    // Quit Sub-Page
2244   1      }
2245          
2246          void Page4B_Left_Right_Key(unsigned char Key)
2247          {
2248   1              // Select and highlight the next/previous item
2249   1              OSD_Window( 6, 150 + ((ucOSD_Item_Index1-1)/4)*170, 282 + ((ucOSD_Item_Index1-1)/4)*170, 
2250   1                      54 + ((ucOSD_Item_Index1-1)%4)*33, 84 + ((ucOSD_Item_Index1-1)%4)*33, 0, 0, 14, 251, 0, 1, 0);
2251   1              if (NOTIFY_RIGHT_KEY == Key)
2252   1                      ucOSD_Item_Index1   = (PAGE4B_ITEM_NUM == ucOSD_Item_Index1) ? 1 : (ucOSD_Item_Index1 + 1);
2253   1              else
2254   1                      ucOSD_Item_Index1   = (1 == ucOSD_Item_Index1) ? PAGE4B_ITEM_NUM : (ucOSD_Item_Index1 - 1);
2255   1      
2256   1              OSD_Window( 6, 150 + ((ucOSD_Item_Index1-1)/4)*170, 282 + ((ucOSD_Item_Index1-1)/4)*170, 
2257   1                      54 + ((ucOSD_Item_Index1-1)%4)*33, 84 + ((ucOSD_Item_Index1-1)%4)*33, 1, 1, 14, 251, 0, 1, 25);
2258   1      }
2259          
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 38  

2260          void Page4B_Show(void)
2261          {
2262   1              Show_Osd_Page(3,Page8_Atb,7);
2263   1              RTDOSDW(Page8_Content);
2264   1              // Set Window 6
2265   1              OSD_Window( 6, 150 + ((ucOSD_Item_Index1-1)/4)*170, 282 + ((ucOSD_Item_Index1-1)/4)*170, 
2266   1                      54 + ((ucOSD_Item_Index1-1)%4)*33, 84 + ((ucOSD_Item_Index1-1)%4)*33, 1, 1, 14, 251, 0, 1, 25);
2267   1      }
2268          
2269          void Page5_Enter_Key(void)
2270          {
2271   1              if (0 == ucOSD_Item_Index0)
2272   1              {
2273   2                      // Select and highlight the first item
2274   2                      ucOSD_Item_Index0   = PAGE5_ITEM_SOURCE;
2275   2                      ucOSD_Item_Index1   = 0;
2276   2                      OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 0);
2277   2                      OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 25);
2278   2              }
2279   1              else
2280   1              {
2281   2                      switch (ucOSD_Item_Index0)
2282   2                      {
2283   3                              case PAGE5_ITEM_SOURCE :
2284   3                                      Data[0]             = stGUD1.INPUT_SOURCE & 0x07;
2285   3                                      ucOSD_Item_Index1   = (SOURCE_DVI == Data[0])   ? PAGE5B_ITEM_DVI 
2286   3                                              : (SOURCE_AV == Data[0])    ? PAGE5B_ITEM_CVBS 
2287   3                                              : (SOURCE_SV == Data[0])    ? PAGE5B_ITEM_SV 
2288   3                                              : (SOURCE_YUV == Data[0])   ? PAGE5B_ITEM_YUV 
2289   3                                              : (SOURCE_TV == Data[0])    ? PAGE5B_ITEM_TV : PAGE5B_ITEM_DSUB;
2290   3      
2291   3                                      OSD_Proc_B(NOTIFY_SHOW);   // Show the sub-page
2292   3                                      break;
2293   3                                      
2294   3                              case PAGE5_ITEM_OPTION :
2295   3                                      if (ucOSD_Item_Index1)
2296   3                                      {
2297   4                                              OSD_Line( 7, 36 + (ucOSD_Item_Index1-1)*(7+1), 7, 0x40, 2);
2298   4                                                                                      
2299   4                                              //ucOSD_Item_Index1   = (1 == ucOSD_Item_Index1) ? 0x00 : 0x80;
2300   4                          Data[0]   = (1 == ucOSD_Item_Index1) ? 0x00 : 0x10;
2301   4                                              //stGUD1.INPUT_SOURCE = (stGUD1.INPUT_SOURCE & 0x7f) | ucOSD_Item_Index1;
2302   4                          stGUD1.FUNCTION = stGUD1.FUNCTION & 0xef | Data[0];
2303   4                                              ucOSD_Item_Index1   = 0;
2304   4                                              Save_GUD1();
2305   4      
2306   4                                              if (SOURCE_VGA == (stGUD1.INPUT_SOURCE & 0x07) && 400 == usIPV_ACT_LEN &&
2307   4                                                      MODE_0640x0400x56HZ != ucMode_Curr && MODE_USER720x400 != ucMode_Curr)
2308   4                                              {
2309   5                                                      //if (stGUD1.INPUT_SOURCE & 0x80)
2310   5      /*                                              if (stGUD1.FUNCTION & 0x10)
2311   5                                                      {
2312   5                                                              if (720 == usIPH_ACT_WID)
2313   5                                                                      ucMode_Curr = MODE_OSDFORCE;    // Force to VGA search mode again
2314   5                                                      }
2315   5                                                      else
2316   5                                                      {
2317   5                                                              if (640 == usIPH_ACT_WID)
2318   5                                                                      ucMode_Curr = MODE_OSDFORCE;    // Force to VGA search mode again
2319   5                                                      }
2320   5      */
2321   5                                                      if (stGUD1.FUNCTION & 0x10)             //anson
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 39  

2322   5                                                      {
2323   6                                                              stGUD1.FUNCTION = (stGUD1.FUNCTION & 0xef);
2324   6                                                              ucMode_Curr = MODE_OSDFORCE;
2325   6                                                      }
2326   5                                                      else    
2327   5                                                      {
2328   6                                                              stGUD1.FUNCTION = (stGUD1.FUNCTION | 0x10);
2329   6                                                              ucMode_Curr = MODE_OSDFORCE;
2330   6                                                      }
2331   5                                              }
2332   4                                      }
2333   3                                      else
2334   3                                      {
2335   4                                              ucOSD_Item_Index1   = (stGUD1.FUNCTION & 0x10) ? 2 : 1;     // 1-720, 2-640//(stGUD1.INPUT_SOURCE & 0
             -x80) ? 2 : 1;     // 1-720, 2-640
2336   4                                              OSD_Line( 7, 36 + (ucOSD_Item_Index1-1)*(7+1), 7, 0x20, 2);
2337   4                                      }
2338   3                                      break;
2339   3                                      
2340   3                              case PAGE5_ITEM_RECALL :
2341   3                                      if (ucOSD_Item_Index1)
2342   3                                      {
2343   4                                              if (1 == ucOSD_Item_Index1)
2344   4                                              {
2345   5                                              {
2346   6                                                      unsigned char   ucTemp1, ucTemp2;
2347   6      
2348   6                                                      // Save the global settings we don't want to reset
2349   6                                                      ucTemp1 = stGUD1.FUNCTION & 0x07;       // Language select
2350   6                                                      ucTemp2 = stGUD1.INPUT_SOURCE & 0x07;   // Source select
2351   6      
2352   6                                                      if (JAPANESS < ucTemp1)
2353   6                                                              ucTemp1 = ENGLISH;
2354   6      
2355   6                                                      // Reset OSD time-out timer
2356   6                                                      usOSD_Timer = (unsigned int)2 << 9;     // 20 sec
2357   6      
2358   6                                                      // Reset global settings to default
2359   6                                                      Init_GUD();
2360   6                                                      // Reset OSD time-out timer
2361   6                                                      usOSD_Timer = (unsigned int)stGUD1.OSD_TIMEOUT << 9;
2362   6      
2363   6                                                      // Restore the global settings we don't want to reset
2364   6                                                      stGUD1.FUNCTION     = (stGUD1.FUNCTION & 0xf8) | ucTemp1;
2365   6                                                      stGUD1.INPUT_SOURCE = (stGUD1.INPUT_SOURCE & 0xf8) | ucTemp2;
2366   6                                                      Save_GUD1();
2367   6      
2368   6                                                      // Reset brightness and contrast to default
2369   6                                                      Set_Bright_Contrast();
2370   6      
2371   6      #if (AUDIO_TYPE != AUDIO_NONE)
2372   6                                                      SetVolume();
2373   6      #endif
2374   6                                                      // Reset OSD position
2375   6                                                      OSD_Position(OSD_ENABLE);
2376   6                                              }
2377   5      
2378   5                                                      // Reset all mode settings to default
2379   5                                                      Init_MUD();
2380   5      
2381   5                                                      // Read default settings for current mode
2382   5                                                      Load_MUD(ucMode_Curr);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 40  

2383   5      
2384   5                                                      // Leave current mode and search mode again
2385   5                                                      ucMode_Curr = MODE_OSDFORCE;
2386   5                                              }
2387   4      
2388   4                                              OSD_Line( 9, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x40, 2);
2389   4                                              ucOSD_Item_Index1   = 0;    // Leave the item
2390   4                                      }
2391   3                                      else
2392   3                                      {
2393   4                                              ucOSD_Item_Index1   = 2;    // Enter the item, Default NO
2394   4                                              OSD_Line( 9, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x20, 2);
2395   4                                      }
2396   3                                      break;
2397   3                                      
2398   3                              case PAGE5_ITEM_VOLUME :
2399   3                                      if (ucOSD_Item_Index1)
2400   3                                      {
2401   4                                              ucOSD_Item_Index1   = 0;    // Leave the item
2402   4                                              OSD_Slider(11, 31, 17, 0x1f - stGUD3.VOLUME, 0x1f, 4, 14);
2403   4                                      }
2404   3                                      else
2405   3                                      {
2406   4                                              ucOSD_Item_Index1   = 1;    // Enter the item, show slider
2407   4      
2408   4                                              stGUD3.VOLUME   &= 0x1f;
2409   4                                              OSD_Slider(11, 31, 17, 0x1f - stGUD3.VOLUME, 0x1f, 2, 14);
2410   4                                      }
2411   3                                      break;
2412   3                                      
2413   3                              case PAGE5_ITEM_EXIT :
2414   3                                      // Disable highlight window
2415   3                                      OSD_Window( 6, 150, 282, (54 + (ucOSD_Item_Index0-1)*(29+4)), (84 + (ucOSD_Item_Index0-1)*(29+4))
2416   3                                              , 0, 0, 14, 251, 0, 1, 0);
2417   3                                      // De-select the page item and disable the hightlight window
2418   3                                      ucOSD_Item_Index0   = 0;
2419   3                                      ucOSD_Item_Index1   = 0;
2420   3      
2421   3                                      break;
2422   3                                      
2423   3                      }
2424   2              }
2425   1      }
2426          
2427          void Page5_Left_Right_Key(unsigned char Key)
2428          {
2429   1              if (ucOSD_Item_Index1)
2430   1              {
2431   2                      switch (ucOSD_Item_Index0)
2432   2                      {
2433   3                              case PAGE5_ITEM_OPTION :
2434   3                                      ucOSD_Item_Index1   = (NOTIFY_LEFT_KEY == Key) ? 2 : 1;      // 1-720, 2-640
2435   3                                      OSD_Line( 7, 36 , 16, 0x40, 2);
2436   3                                      OSD_Line( 7, 36 + (ucOSD_Item_Index1-1)*(7+1), 7, 0x20, 2);
2437   3                                      //RTDOSDW((1 == ucOSD_Item_Index1) ? OSD_MODE_V720 : OSD_MODE_V640);
2438   3                                      break;
2439   3                                      
2440   3                              case PAGE5_ITEM_RECALL :
2441   3      //                              ucOSD_Item_Index1   = (NOTIFY_LEFT_KEY == Key) ? 1 : 2;
2442   3                                      ucOSD_Item_Index1   = (NOTIFY_RIGHT_KEY == Key) ? 1 : 2;
2443   3                                      OSD_Line( 9, 36 , 14, 0x40, 2);
2444   3                                      OSD_Line( 9, 36 + (ucOSD_Item_Index1-1)*(6+1), 4, 0x20, 2);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 41  

2445   3                                      //RTDOSDW(OSD_YESNO_TABLE[ucOSD_Item_Index1 - 1][stGUD1.FUNCTION & 0x07]);
2446   3                                      break;
2447   3                                      
2448   3                              case PAGE5_ITEM_VOLUME :
2449   3      //                              if (NOTIFY_RIGHT_KEY == Key)
2450   3                                      if (NOTIFY_LEFT_KEY == Key)
2451   3                                      {
2452   4                                              if (0x00 == stGUD3.VOLUME)
2453   4                                                      break;
2454   4      
2455   4                                              stGUD3.VOLUME   = stGUD3.VOLUME - 1;
2456   4                                      }
2457   3                                      else
2458   3                                      {
2459   4                                              if (0x1f <= stGUD3.VOLUME)
2460   4                                                      break;
2461   4      
2462   4                                              stGUD3.VOLUME   = stGUD3.VOLUME + 1;
2463   4                                      }
2464   3      
2465   3                                      OSD_Slider(11, 31, 17, 0x1f - stGUD3.VOLUME, 0x1f, 2, 14);
2466   3                                      SetVolume();
2467   3                                      Save_GUD3();
2468   3                                      break;
2469   3                                      
2470   3                              default :
2471   3                                      break;
2472   3                                      
2473   3                      }
2474   2              }
2475   1              else
2476   1              {
2477   2                      Osd_Change_Item(Key,PAGE5_ITEM_NUM);
2478   2              }
2479   1      }
2480          
2481          void Page5_Show(void)
2482          {
2483   1              Show_Osd_Page(3,Page5_Atb,4);
2484   1      
2485   1              //Set Window 5 to select "Misc."
2486   1      //      OSD_Window( 5, 10, 136, 186, 216, 1, 1, 14, 251, 0, 1, 25);
2487   1              OSD_Window( 5, 10, 136, 153, 183, 1, 1, 14, 251, 0, 1, 25);
2488   1      
2489   1      #if (AUDIO_TYPE != AUDIO_NONE)
2490   1      
2491   1              OSD_Slider(11, 31, 17, 0x1f - stGUD3.VOLUME, 0x1f, 4, 14);
2492   1      
2493   1      #endif
2494   1              if (0 == ucOSD_Item_Index1)
2495   1              {
2496   2                      if( ucOSD_Item_Index0 == PAGE5_ITEM_SOURCE)
2497   2                              OSD_Window( 6, 150, 282, 54, 84, 1, 1, 14, 251, 0, 1, 25);
2498   2              }
2499   1              else
2500   1              {
2501   2                      switch (ucOSD_Item_Index0)
2502   2                      {
2503   3                              case PAGE5_ITEM_OPTION :
2504   3                                      //OSD_Line( 10, 15 + (ucOSD_Item_Index1-1)*(4+1), 4, 0x00, 2);
2505   3                                      //RTDOSDW((1 == ucOSD_Item_Index1) ? OSD_MODE_V720 : OSD_MODE_V640);
2506   3                                      break;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 42  

2507   3                                      
2508   3                              case PAGE5_ITEM_RECALL :
2509   3                                      //OSD_Line( 10, 15 + (ucOSD_Item_Index1-1)*(4+1), 4, 0x00, 2);
2510   3                                      //RTDOSDW(OSD_YESNO_TABLE[ucOSD_Item_Index1 - 1][stGUD1.FUNCTION & 0x07]);
2511   3                                      break;
2512   3                                      
2513   3                              case PAGE5_ITEM_VOLUME :
2514   3                                      //stGUD3.VOLUME   &= 0x1f;
2515   3                                      //OSD_Slider(11, 2, 20, 0x1f - stGUD3.VOLUME, 0x1f, 0x61);
2516   3                                      break;
2517   3                                      
2518   3                              default :
2519   3                                      break;
2520   3                                      
2521   3                      }
2522   2              }
2523   1      }
2524          
2525          void Page5B_Enter_Key()
2526          {
2527   1              Data[0] = (PAGE5B_ITEM_DVI == ucOSD_Item_Index1) ?  SOURCE_DVI 
2528   1                      : (PAGE5B_ITEM_CVBS == ucOSD_Item_Index1) ? SOURCE_AV
2529   1                      : (PAGE5B_ITEM_SV == ucOSD_Item_Index1) ?   SOURCE_SV 
2530   1                      : (PAGE5B_ITEM_YUV == ucOSD_Item_Index1) ?  SOURCE_YUV 
2531   1                      : (PAGE5B_ITEM_TV == ucOSD_Item_Index1) ?   SOURCE_TV : SOURCE_VGA;
2532   1      
2533   1              if(Data[0] != ucInputSrc)
2534   1              {
2535   2                      Change_Source(Data[0]);
2536   2                      ucOSD_Page_Index = 0;
2537   2              }
2538   1              else
2539   1              {
2540   2                      ucOSD_Item_Index1 = 0;            // Quit Sub-Page
2541   2              }
2542   1      
2543   1      }
2544          
2545          void Page5B_Left_Right_Key(unsigned char Key)
2546          {
2547   1              // Select and highlight the next/previous item
2548   1              OSD_Window( 6, 150 + ((ucOSD_Item_Index1-1)/4)*170, 282 + ((ucOSD_Item_Index1-1)/4)*170, 
2549   1                      54 + ((ucOSD_Item_Index1-1)%4)*33, 84 + ((ucOSD_Item_Index1-1)%4)*33, 0, 0, 14, 251, 0, 1, 0);
2550   1              if (NOTIFY_RIGHT_KEY == Key)
2551   1                      ucOSD_Item_Index1   = (PAGE5B_ITEM_NUM == ucOSD_Item_Index1) ? 1 : (ucOSD_Item_Index1 + 1);
2552   1              else
2553   1                      ucOSD_Item_Index1   = (1 == ucOSD_Item_Index1) ? PAGE5B_ITEM_NUM : (ucOSD_Item_Index1 - 1);
2554   1      
2555   1              OSD_Window( 6, 150 + ((ucOSD_Item_Index1-1)/4)*170, 282 + ((ucOSD_Item_Index1-1)/4)*170, 
2556   1                      54 + ((ucOSD_Item_Index1-1)%4)*33, 84 + ((ucOSD_Item_Index1-1)%4)*33, 1, 1, 14, 251, 0, 1, 25);
2557   1      }
2558          
2559          void Page5B_Show()
2560          {
2561   1              Show_Osd_Page(4,Page9_Atb,8);
2562   1              RTDOSDW(Page9_Content);
2563   1      
2564   1              OSD_Window( 6, 150 + ((ucOSD_Item_Index1-1)/4)*170, 282 + ((ucOSD_Item_Index1-1)/4)*170, 
2565   1                      54 + ((ucOSD_Item_Index1-1)%4)*33, 84 + ((ucOSD_Item_Index1-1)%4)*33, 1, 1, 14, 251, 0, 1, 25);
2566   1              // Highlight the select item
2567   1              // Set Window 6
2568   1              //OSD_Window( 6, 152, 282, 56, 86, 2, 2, 14, 251, 0, 1, 25);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 43  

2569   1      
2570   1      
2571   1      }
2572          
2573          void Page6_Left_Right_Key(unsigned char Key)
2574          {
2575   1              if(Key == NOTIFY_RIGHT_KEY)
2576   1                      ucOSD_Page_Index    = GetNextPageIdx(ucOSD_Page_Index);
2577   1              else
2578   1                      ucOSD_Page_Index    = GetPrevPageIdx(ucOSD_Page_Index);
2579   1      }
2580          
2581          void Page6_Show(void)
2582          {
2583   1              //Init_Page(5);
2584   1              //RTDOSDW(OSD_PAGE_TABLE[5][stGUD1.FUNCTION & 0x07]);
2585   1      
2586   1              Show_Osd_Page(4,Page6_Atb,5);
2587   1      
2588   1              //Set Window 5 to select "Exit"
2589   1      //      OSD_Window( 5, 10, 136, 219, 249, 1, 1, 14, 251, 0, 1, 25);
2590   1              OSD_Window( 5, 10, 136, 186, 216, 1, 1, 14, 251, 0, 1, 25);
2591   1      }
2592          
2593          //////////////////////////////////////////////////////////////////////////////////
2594          //anson
2595          //////////////////////////////////////////////////////////////////////////////////
2596          void PageFactory_Show(void)
2597          {
2598   1              OSD_Fact_Clear( 0,20, 0,30);
2599   1              OSD_Position(OSD_ENABLE);
2600   1              OSD_Position(OSD_ENABLE);
2601   1      
2602   1              RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
2603   1              RTDOSDW(OSD_Reset);
2604   1              RTDOSDW(OSD_Clean_All);
2605   1              RTDOSDW(FactoryPageAtbFont);
2606   1              OSD_Fact_Line( 3, 0, 15, 0x20, 2);
2607   1              RTDOSDW(Version_Panel);
2608   1              ShowValue( 5,12, stGUD0.CONTRAST, 0x13 );               //Contrast
2609   1              ShowValue( 6,12, stGUD0.BRIGHT, 0x13 );         //Brightness
2610   1              ShowValue( 7,12, stGUD3.SPREAD, 0x13 );         //Spread
2611   1              ShowValue( 8,  9, stGUD4.C2_R, 0x13 );                  //R-6500K
2612   1              ShowValue( 8,15, stGUD4.C2_G, 0x13 );                   //G-6500K
2613   1              ShowValue( 8,21, stGUD4.C2_B, 0x13 );                   //B-6500K
2614   1      }
2615          
2616          void PageFactory_Enter_Key(void)
2617          {
2618   1              if (ucOSD_Item_Index1)
2619   1              {
2620   2                      if (ucOSD_Item_Index2)
2621   2                      {
2622   3                              switch(ucOSD_Item_Index1)
2623   3                              {
2624   4                                      case 1:
2625   4                                              OSD_Fact_Line( 8,  9, 3, 0x13, 2);
2626   4                                              ucOSD_Item_Index2   = 0;
2627   4                                              break;
2628   4                                      case 2:
2629   4                                              OSD_Fact_Line( 8,15, 3, 0x13, 2);
2630   4                                              ucOSD_Item_Index2   = 0;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 44  

2631   4                                              break;
2632   4                                      case 3:
2633   4                                              OSD_Fact_Line( 8,21, 3, 0x13, 2);
2634   4                                              ucOSD_Item_Index2   = 0;
2635   4                                              break;
2636   4                              }
2637   3                      }
2638   2                      else            //ucOSD_Item_Index2 = 0 
2639   2                      {
2640   3                              switch (ucOSD_Item_Index0)
2641   3                              {
2642   4                                      case PAGEFact_ITEM_Contrast:
2643   4                                              ShowValue(5,12, stGUD0.CONTRAST, 0x13 );
2644   4                                              ucOSD_Item_Index1   = 0;
2645   4                                              break;
2646   4      
2647   4                                      case PAGEFact_ITEM_Brightness:
2648   4                                              ShowValue(6,12, stGUD0.BRIGHT, 0x13 );
2649   4                                              ucOSD_Item_Index1   = 0;
2650   4                                              break;
2651   4      
2652   4                                      case PAGEFact_ITEM_Spread:
2653   4                                              ShowValue(7,12, stGUD3.SPREAD, 0x13 );
2654   4                                              ucOSD_Item_Index1   = 0;
2655   4                                              break;
2656   4      
2657   4                                      case PAGEFact_ITEM_6500K:
2658   4      
2659   4                                              switch(ucOSD_Item_Index1)
2660   4                                              {
2661   5                                                      case 1:
2662   5                                                              OSD_Fact_Line( 8,  9, 3, 0x23, 2);
2663   5                                                              ucOSD_Item_Index2   = 1;
2664   5                                                              break;
2665   5                                                      case 2:
2666   5                                                              OSD_Fact_Line( 8,15, 3, 0x23, 2);
2667   5                                                              ucOSD_Item_Index2   = 1;
2668   5                                                              break;
2669   5                                                      case 3:
2670   5                                                              OSD_Fact_Line( 8,21, 3, 0x23, 2);
2671   5                                                              ucOSD_Item_Index2   = 1;
2672   5                                                              break;
2673   5                                                      case 4:
2674   5                                                              OSD_Fact_Line( 8,25, 4, 0x13, 2);
2675   5                                                              ucOSD_Item_Index1   = 0;
2676   5                                                              break;
2677   5                                              }
2678   4                                              break;
2679   4                              }
2680   3                      }
2681   2              }
2682   1              else            //into ucOSD_Item_Index1 = 1 ;
2683   1              {
2684   2                      switch (ucOSD_Item_Index0)
2685   2                      {
2686   3                              case PAGEFact_ITEM_Recall:
2687   3                                      Init_FACTORY();
2688   3                                      ShowValue( 5,12, stGUD0.CONTRAST, 0x13 );               //Contrast
2689   3                                      ShowValue( 6,12, stGUD0.BRIGHT, 0x13 );         //Brightness
2690   3                                      ShowValue( 8,  9, stGUD4.C2_R, 0x13 );                  //R-6500K
2691   3                                      ShowValue( 8,15, stGUD4.C2_G, 0x13 );                   //G-6500K
2692   3                                      ShowValue( 8,21, stGUD4.C2_B, 0x13 );                   //B-6500K
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 45  

2693   3      
2694   3                                      stGUD1.INPUT_SOURCE = (stGUD1.INPUT_SOURCE & 0xE7 ) | 0x08;  //6500 mode
2695   3                                      Set_Bright_Contrast();
2696   3                                      RTDOSDW(RecallOK);
2697   3                                      break;
2698   3      
2699   3                              case PAGEFact_ITEM_Auto_Color:
2700   3                                      Auto_Balance();
2701   3                                      RTDOSDW(AutoOK);
2702   3                                      break;
2703   3      
2704   3                              case PAGEFact_ITEM_Contrast:
2705   3                                      ShowValue(5,12, stGUD0.CONTRAST, 0x23 );
2706   3                                      ucOSD_Item_Index1   = 1;
2707   3                                      break;
2708   3      
2709   3                              case PAGEFact_ITEM_Brightness:
2710   3                                      ShowValue(6,12, stGUD0.BRIGHT, 0x23 );
2711   3                                      ucOSD_Item_Index1   = 1;
2712   3                                      break;
2713   3      
2714   3                              case PAGEFact_ITEM_Spread:
2715   3                                      ShowValue(7,12, stGUD3.SPREAD, 0x23 );
2716   3                                      ucOSD_Item_Index1   = 1;
2717   3                                      break;
2718   3      
2719   3                              case PAGEFact_ITEM_6500K:
2720   3                                      OSD_Fact_Line( 8, 7, 1, 0x23, 2);
2721   3                                      ucOSD_Item_Index1   = 1;
2722   3                                      break;
2723   3      
2724   3                              case PAGEFact_ITEM_EXIT:
2725   3                                      ucOSD_Page_Index         = 0;
2726   3                                      ucOSD_Item_Index0   = 0;
2727   3                                      ucOSD_Item_Index1   = 0;
2728   3                                      ucOSD_Item_Index2   = 0;
2729   3      
2730   3                                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
2731   3                                      RTDOSDW(OSD_Reset);
2732   3                                      break;
2733   3                      }
2734   2              }
2735   1      }
2736          
2737          void PageFactory_Left_Right_Key(unsigned char Key)
2738          {
2739   1              if (ucOSD_Item_Index1)
2740   1              {
2741   2                      if (ucOSD_Item_Index2)
2742   2                      {
2743   3                              switch (ucOSD_Item_Index0)
2744   3                              {
2745   4                              //select 6500K value;
2746   4                                      case PAGEFact_ITEM_6500K:
2747   4      
2748   4                                              switch(ucOSD_Item_Index1)
2749   4                                              {
2750   5                                                      case 1:
2751   5                                                              Value_Adjust(&stGUD4.C2_R,Key,255,0);
2752   5                                                              ShowValue( 8,  9, stGUD4.C2_R, 0x23 );
2753   5                                                              break;
2754   5                                                      case 2:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 46  

2755   5                                                              Value_Adjust(&stGUD4.C2_G,Key,255,0);
2756   5                                                              ShowValue( 8,15, stGUD4.C2_G, 0x23 );
2757   5                                                              break;
2758   5                                                      case 3:
2759   5                                                              Value_Adjust(&stGUD4.C2_B,Key,255,0);
2760   5                                                              ShowValue( 8,21, stGUD4.C2_B, 0x23 );
2761   5                                                              break;
2762   5                                              }
2763   4                                              Set_Bright_Contrast();
2764   4                                              Save_GUD4();
2765   4                                              break;
2766   4      
2767   4                              }
2768   3                      }
2769   2                      else            //ucOSD_Item_Index1 = 1 , ucOSD_Item_Index2 = 0
2770   2                      {
2771   3                              switch (ucOSD_Item_Index0)
2772   3                              {
2773   4                                      if(NOTIFY_RIGHT_KEY == Key)
2774   4                                              ucOSD_Item_Index0 = (ucOSD_Item_Index0 == 1) ? 7 : ucOSD_Item_Index0 - 1;
2775   4                                      else
2776   4                                              ucOSD_Item_Index0 = (ucOSD_Item_Index0 == 7) ? 1 : ucOSD_Item_Index0 + 1;
2777   4      
2778   4                              //select Contrast value;
2779   4                                      case PAGEFact_ITEM_Contrast:
2780   4                                              Bright_Contrast_Adjust(&stGUD0.CONTRAST,Key);
2781   4                                              ShowValue(5,12, stGUD0.CONTRAST, 0x23 );
2782   4      
2783   4                                      #if(ANALOG_CONTRAST)
2784   4                                              if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
2785   4                                                      SetADC_Gain();
2786   4                                              else
2787   4                                                      Set_Bright_Contrast();
2788   4                                      #else
                                                              Set_Bright_Contrast();
                                              #endif
2791   4      
2792   4                                              Save_GUD0();
2793   4                                              break;
2794   4      
2795   4                              //select Brightness value;
2796   4                                      case PAGEFact_ITEM_Brightness:
2797   4                                              Bright_Contrast_Adjust(&stGUD0.BRIGHT,Key);
2798   4                                              ShowValue(6,12, stGUD0.BRIGHT, 0x23 );
2799   4                                              Set_Bright_Contrast();
2800   4                                              Save_GUD0();
2801   4                                              break;
2802   4      
2803   4                                      case PAGEFact_ITEM_Spread:
2804   4                                              SPREAD_Adjust(&stGUD3.SPREAD,Key);
2805   4                                              ShowValue(7,12, stGUD3.SPREAD, 0x23 );
2806   4                                              Set_Spread();
2807   4                                              Save_GUD3();
2808   4                                              break;
2809   4      
2810   4                              //select 6500K R,G,B,Exit ;
2811   4                                      case PAGEFact_ITEM_6500K:
2812   4      
2813   4                                              if(NOTIFY_RIGHT_KEY == Key)
2814   4                                                      ucOSD_Item_Index1 = (ucOSD_Item_Index1 == 4) ? 1 : ucOSD_Item_Index1 + 1;
2815   4                                              else
2816   4                                                      ucOSD_Item_Index1 = (ucOSD_Item_Index1 == 1) ? 4 : ucOSD_Item_Index1 - 1;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 47  

2817   4      
2818   4                                                      switch(ucOSD_Item_Index1)
2819   4                                                      {
2820   5                                                              case 1:
2821   5                                                                      OSD_Fact_Line( 8,  7, 1, 0x23, 2);
2822   5                                                                      OSD_Fact_Line( 8,13, 1, 0x13, 2);
2823   5                                                                      OSD_Fact_Line( 8,25, 4, 0x13, 2);
2824   5                                                                      break;
2825   5                                                              case 2:
2826   5                                                                      OSD_Fact_Line( 8,  7, 1, 0x13, 2);
2827   5                                                                      OSD_Fact_Line( 8,13, 1, 0x23, 2);
2828   5                                                                      OSD_Fact_Line( 8,19, 1, 0x13, 2);
2829   5                                                                      break;
2830   5                                                              case 3:
2831   5                                                                      OSD_Fact_Line( 8,13, 1, 0x13, 2);
2832   5                                                                      OSD_Fact_Line( 8,19, 1, 0x23, 2);
2833   5                                                                      OSD_Fact_Line( 8,25, 4, 0x13, 2);
2834   5                                                                      break;
2835   5                                                              case 4:
2836   5                                                                      OSD_Fact_Line( 8,  7, 1, 0x13, 2);
2837   5                                                                      OSD_Fact_Line( 8,19, 1, 0x13, 2);
2838   5                                                                      OSD_Fact_Line( 8,25, 4, 0x23, 2);
2839   5                                                                      break;
2840   5                                                      }
2841   4                                              break;
2842   4                              }
2843   3                      }
2844   2              }
2845   1              else    //ucOSD_Item_Index1 = 0
2846   1              {
2847   2              //select Factory Main menu ;
2848   2                      if(NOTIFY_RIGHT_KEY == Key)
2849   2                              ucOSD_Item_Index0 = (ucOSD_Item_Index0 == 7) ? 1 : ucOSD_Item_Index0 + 1;
2850   2                      else
2851   2                              ucOSD_Item_Index0 = (ucOSD_Item_Index0 == 1) ? 7 : ucOSD_Item_Index0 - 1;
2852   2      
2853   2                      switch (ucOSD_Item_Index0)
2854   2                      {
2855   3                              case PAGEFact_ITEM_Recall:
2856   3                                      OSD_Fact_Line( 9, 1,  7, 0x10, 2);
2857   3                                      OSD_Fact_Line( 3, 1, 14, 0x20, 2);
2858   3                                      OSD_Fact_Line( 4, 1, 10, 0x10, 2);
2859   3                                      break;
2860   3      
2861   3                              case PAGEFact_ITEM_Auto_Color:
2862   3                                      OSD_Fact_Line( 3, 1, 14, 0x10, 2);
2863   3                                      OSD_Fact_Line( 4, 1, 10, 0x20, 2);
2864   3                                      OSD_Fact_Line( 5, 1, 10, 0x10, 2);
2865   3                                      break;
2866   3      
2867   3                              case PAGEFact_ITEM_Contrast:
2868   3                                      OSD_Fact_Line( 4, 1, 10, 0x10, 2);
2869   3                                      OSD_Fact_Line( 5, 1, 10, 0x20, 2);
2870   3                                      OSD_Fact_Line( 6, 1, 10, 0x10, 2);
2871   3                                      break;
2872   3      
2873   3                              case PAGEFact_ITEM_Brightness:
2874   3                                      OSD_Fact_Line( 5, 1, 10, 0x10, 2);
2875   3                                      OSD_Fact_Line( 6, 1, 10, 0x20, 2);
2876   3                                      OSD_Fact_Line( 7, 1, 10, 0x10, 2);
2877   3                                      break;
2878   3      
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 48  

2879   3                              case PAGEFact_ITEM_Spread:
2880   3                                      OSD_Fact_Line( 6, 1, 10, 0x10, 2);
2881   3                                      OSD_Fact_Line( 7, 1, 10, 0x20, 2);
2882   3                                      OSD_Fact_Line( 8, 1,   5, 0x10, 2);
2883   3                                      break;
2884   3      
2885   3                              case PAGEFact_ITEM_6500K:
2886   3                                      OSD_Fact_Line( 7, 1,10, 0x10, 2);
2887   3                                      OSD_Fact_Line( 8, 1,  5, 0x20, 2);
2888   3                                      OSD_Fact_Line( 9, 1,  7, 0x10, 2);
2889   3                                      Set_Bright_Contrast();
2890   3                                      break;
2891   3      
2892   3                              case PAGEFact_ITEM_EXIT:
2893   3                                      OSD_Fact_Line( 8, 1,  5, 0x10, 2);
2894   3                                      OSD_Fact_Line( 9, 1,  7, 0x20, 2);
2895   3                                      OSD_Fact_Line( 3, 1,14, 0x10, 2);
2896   3                                      break;
2897   3                      }
2898   2              }
2899   1      }
2900          
2901          
2902          //////////////////////////////////////////////////////////////////////////////////
2903          //////////////////////////////////////////////////////////////////////////////////
2904          
2905          void PageADC_Left_Right_Key(unsigned char Key)
2906          {
2907   1              if (ucOSD_Item_Index1)
2908   1              {
2909   2                      switch (ucOSD_Item_Index0)
2910   2                      {
2911   3                              case PAGEH_ITEM_REDGAIN :
2912   3                                      if (NOTIFY_RIGHT_KEY == Key)
2913   3                                      {
2914   4                                              if (0xff == stGUD2.AD_R_GAIN)
2915   4                                                      return;
2916   4      
2917   4                                              stGUD2.AD_R_GAIN    += 1;
2918   4                                      }
2919   3                                      else
2920   3                                      {
2921   4                                              if (0x00 == stGUD2.AD_R_GAIN)
2922   4                                                      return;
2923   4      
2924   4                                              stGUD2.AD_R_GAIN    -= 1;
2925   4                                      }
2926   3      
2927   3                                      OSD_Slider(5, 36, 17, stGUD2.AD_R_GAIN, 0xff, 2, 14);
2928   3                                      SetADC_Gain();
2929   3                                      break;
2930   3                                      
2931   3                              case PAGEH_ITEM_GREENGAIN :
2932   3                                      if (NOTIFY_RIGHT_KEY == Key)
2933   3                                      {
2934   4                                              if (0xff == stGUD2.AD_G_GAIN)
2935   4                                                      return;
2936   4      
2937   4                                              stGUD2.AD_G_GAIN    += 1;
2938   4                                      }
2939   3                                      else
2940   3                                      {
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 49  

2941   4                                              if (0x00 == stGUD2.AD_G_GAIN)
2942   4                                                      return;
2943   4      
2944   4                                              stGUD2.AD_G_GAIN    -= 1;
2945   4                                      }
2946   3      
2947   3                                      OSD_Slider(7, 36, 17, stGUD2.AD_R_GAIN, 0xff, 2, 14);
2948   3                                      SetADC_Gain();
2949   3                                      break;
2950   3                                              
2951   3                              case PAGEH_ITEM_BLUEGAIN :
2952   3                                      if (NOTIFY_RIGHT_KEY == Key)
2953   3                                      {
2954   4                                              if (0xff == stGUD2.AD_B_GAIN)
2955   4                                                      return;
2956   4      
2957   4                                              stGUD2.AD_B_GAIN    += 1;
2958   4                                      }
2959   3                                      else
2960   3                                      {
2961   4                                              if (0x00 == stGUD2.AD_B_GAIN)
2962   4                                                      return;
2963   4      
2964   4                                              stGUD2.AD_B_GAIN    -= 1;
2965   4                                      }
2966   3      
2967   3                                      OSD_Slider(9, 36, 17, stGUD2.AD_R_GAIN, 0xff, 2, 14);
2968   3                                      SetADC_Gain();
2969   3                                      break;
2970   3                                      
2971   3                              case PAGEH_ITEM_REDOFFSET :
2972   3                                      if (NOTIFY_RIGHT_KEY == Key)
2973   3                                      {
2974   4                                              if (0xff == stGUD2.AD_R_OFFSET)
2975   4                                                      return;
2976   4      
2977   4                                              stGUD2.AD_R_OFFSET  += 1;
2978   4                                      }
2979   3                                      else
2980   3                                      {
2981   4                                              if (0x00 == stGUD2.AD_R_OFFSET)
2982   4                                                      return;
2983   4      
2984   4                                              stGUD2.AD_R_OFFSET  -= 1;
2985   4                                      }
2986   3                                      
2987   3                                      OSD_Slider(11, 36, 17, stGUD2.AD_R_GAIN, 0xff, 2, 14);
2988   3                                      SetADC_Offset();
2989   3                                      break;
2990   3                                      
2991   3                              case PAGEH_ITEM_GREENOFFSET :
2992   3                                      if (NOTIFY_RIGHT_KEY == Key)
2993   3                                      {
2994   4                                              if (0xff == stGUD2.AD_G_OFFSET)
2995   4                                                      return;
2996   4      
2997   4                                              stGUD2.AD_G_OFFSET  += 1;
2998   4                                      }
2999   3                                      else
3000   3                                      {
3001   4                                              if (0x00 == stGUD2.AD_G_OFFSET)
3002   4                                                      return;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 50  

3003   4      
3004   4                                              stGUD2.AD_G_OFFSET  -= 1;
3005   4                                      }
3006   3      
3007   3                                      OSD_Slider(13, 36, 17, stGUD2.AD_R_GAIN, 0xff, 2, 14);
3008   3                                      SetADC_Offset();
3009   3                                      break;
3010   3                                      
3011   3                              case PAGEH_ITEM_BLUEOFFSET :
3012   3                                      if (NOTIFY_RIGHT_KEY == Key)
3013   3                                      {
3014   4                                              if (0xff == stGUD2.AD_B_OFFSET)
3015   4                                                      return;
3016   4      
3017   4                                              stGUD2.AD_B_OFFSET  += 1;
3018   4                                      }
3019   3                                      else
3020   3                                      {
3021   4                                              if (0x00 == stGUD2.AD_B_OFFSET)
3022   4                                                      return;
3023   4      
3024   4                                              stGUD2.AD_B_OFFSET  -= 1;
3025   4                                      }
3026   3                                      
3027   3                                      OSD_Slider(15, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 2, 14);
3028   3                                      SetADC_Offset();
3029   3                                      break;
3030   3                                      
3031   3                      }
3032   2      
3033   2                      Save_GUD2();
3034   2              }
3035   1              else
3036   1              {
3037   2                      if (ucOSD_Item_Index0)
3038   2                      {
3039   3                              // Select and highlight the next/previous item
3040   3                              if (NOTIFY_RIGHT_KEY == Key)
3041   3                                      ucOSD_Item_Index0   = (PAGEH_ITEM_NUM == ucOSD_Item_Index0) ? 1 : (ucOSD_Item_Index0 + 1);
3042   3                              else
3043   3                                      ucOSD_Item_Index0   = (1 == ucOSD_Item_Index0) ? PAGEH_ITEM_NUM : (ucOSD_Item_Index0 - 1);
3044   3      
3045   3                              OSD_Window( 6, 0, 476, 0, 252, 4, 4, 0, 1, 231, 1, 113);
3046   3                      }
3047   2              }
3048   1      }
3049          
3050          void PageADC_Enter_Key(void)
3051          {
3052   1              if (0 == ucOSD_Item_Index0)
3053   1              {
3054   2                      // Select and highlight the first item
3055   2                      ucOSD_Item_Index0   = PAGEH_ITEM_REDGAIN;
3056   2                      ucOSD_Item_Index1   = 0;
3057   2                      OSD_Window( 6, 152, 282, 56, 86, 2, 2, 14, 251, 0, 1, 25);
3058   2              }
3059   1              else
3060   1              {
3061   2                      if (PAGEH_ITEM_EXIT == ucOSD_Item_Index0)
3062   2                      {                
3063   3                              ucOSD_Page_Index    = 0;        // Close OSD
3064   3                      }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 51  

3065   2                      else
3066   2                      {
3067   3                              if (ucOSD_Item_Index1)
3068   3                              {
3069   4                                      ucOSD_Item_Index1   = 0;    // Leave the item, Show Mode
3070   4                                      RTDOSDW(OSD_Version);
3071   4                              }
3072   3                              else
3073   3                              {
3074   4                                      ucOSD_Item_Index1   = 1;    // Enter the item, Show slider
3075   4      
3076   4                                      switch (ucOSD_Item_Index0)
3077   4                                      {
3078   5                                              case PAGEH_ITEM_REDGAIN :
3079   5                                                      OSD_Slider(5, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 2, 14);
3080   5                                                      break;
3081   5                                                      
3082   5                                              case PAGEH_ITEM_GREENGAIN :
3083   5                                                      OSD_Slider(7, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 2, 14);
3084   5                                                      break;
3085   5                                                      
3086   5                                              case PAGEH_ITEM_BLUEGAIN :
3087   5                                                      OSD_Slider(9, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 2, 14);
3088   5                                                      break;
3089   5                                                      
3090   5                                              case PAGEH_ITEM_REDOFFSET :
3091   5                                                      OSD_Slider(11, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 2, 14);
3092   5                                                      break;
3093   5                                                      
3094   5                                              case PAGEH_ITEM_GREENOFFSET :
3095   5                                                      OSD_Slider(13, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 2, 14);
3096   5                                                      break;
3097   5                                                      
3098   5                                              case PAGEH_ITEM_BLUEOFFSET :
3099   5                                                      OSD_Slider(15, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 2, 14);
3100   5                                                      break;
3101   5                                                      
3102   5                                      }
3103   4                              }
3104   3                      }
3105   2              }
3106   1      }
3107          
3108          void PageADC_Show(void)
3109          {
3110   1              Init_Page(0);
3111   1      
3112   1              RTDOSDW(PageADC_Atb);
3113   1              RTDOSDW(PageADC_ENG);
3114   1      
3115   1              // Highlight the select item
3116   1              //OSD_Window( 5, 0, 476, 0, 252, 4, 4, 0, 1, 231, 1, 113);              //Set Window 5
3117   1      
3118   1              if (0 == ucOSD_Item_Index1)
3119   1              {
3120   2                      RTDOSDW(OSD_Version);
3121   2              }
3122   1              else
3123   1              {
3124   2                      switch (ucOSD_Item_Index0)
3125   2                      {
3126   3                              case PAGEH_ITEM_REDGAIN :
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 52  

3127   3                                      OSD_Slider(5, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 4, 14);
3128   3                                      break;
3129   3                                      
3130   3                              case PAGEH_ITEM_GREENGAIN :
3131   3                                      OSD_Slider(7, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 4, 14);
3132   3                                      break;
3133   3                                      
3134   3                              case PAGEH_ITEM_BLUEGAIN :
3135   3                                      OSD_Slider(9, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 4, 14);
3136   3                                      break;
3137   3                                      
3138   3                              case PAGEH_ITEM_REDOFFSET :
3139   3                                      OSD_Slider(11, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 4, 14);
3140   3                                      break;
3141   3                                      
3142   3                              case PAGEH_ITEM_GREENOFFSET :
3143   3                                      OSD_Slider(13, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 4, 14);
3144   3                                      break;
3145   3                                      
3146   3                              case PAGEH_ITEM_BLUEOFFSET :
3147   3                                      OSD_Slider(15, 36, 17, stGUD2.AD_B_OFFSET, 0xff, 4, 14);
3148   3                                      break;
3149   3                                      
3150   3                      }
3151   2              }
3152   1      }
3153          
3154          
3155          
3156          
3157          
3158          unsigned char Page1_Goto_Subpage(unsigned char Key)
3159          {
3160   1              if (PAGE1_ITEM_RGBADJ == ucOSD_Item_Index0 && ucOSD_Item_Index1)
3161   1              {
3162   2                      if (MODE_NOSIGNAL == ucMode_Curr || MODE_NOSUPPORT == ucMode_Curr)
3163   2                      {
3164   3                              ucOSD_Item_Index1   = 0;
3165   3                              ucOSD_Item_Index2   = 0;
3166   3                      }
3167   2                      else
3168   2                      {
3169   3                              // When RGB adjust sub-page is open, just re-direct the message to the sub-page process
3170   3                              OSD_Proc_B(Key);
3171   3                      }
3172   2      
3173   2                      if (ucOSD_Item_Index1)  
3174   2                              return  0;      // RGB adjust sub-Page still in work
3175   2      
3176   2                      ucOSD_Item_Index2   = 0;
3177   2      
3178   2                      //Key  = NOTIFY_SHOW;  // Redraw itself when returned from sub-page
3179   2                      return 1;
3180   2                      
3181   2              }
3182   1      
3183   1              return 2;
3184   1              
3185   1      }
3186          
3187          
3188          unsigned char Page4_Goto_Subpage(unsigned char Key)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 53  

3189          {
3190   1              if (PAGE4_ITEM_LANGUAGE == ucOSD_Item_Index0 && 0 != ucOSD_Item_Index1)
3191   1              {
3192   2                      if (NOTIFY_SHOW != Key)
3193   2                      {
3194   3                              // When language setting sub-page is open, just re-direct the message to the sub-page process
3195   3                              OSD_Proc_B(Key);
3196   3      
3197   3                              if (ucOSD_Item_Index1)  
3198   3                                      return 0;     // Language Setting Sub-Page still in work
3199   3      
3200   3                              //action  = NOTIFY_SHOW;              // Redraw itself when returned from sub-page
3201   3                              return 1;
3202   3                      }
3203   2                      else
3204   2                      {
3205   3                              // Quit language sub-page if signal changed.
3206   3                              ucOSD_Item_Index1   = 0;
3207   3                      }
3208   2              }
3209   1      
3210   1              return 2;
3211   1              
3212   1      }
3213          
3214          unsigned char Page5_Goto_Subpage(unsigned char Key)
3215          {
3216   1              if (PAGE5_ITEM_SOURCE == ucOSD_Item_Index0 && 0 != ucOSD_Item_Index1)
3217   1              {
3218   2                      if (NOTIFY_SHOW != Key)
3219   2                      {
3220   3                              // When source select sub-page is open, just re-direct the message to the sub-page process
3221   3                              OSD_Proc_B(Key);
3222   3      
3223   3                              if (ucOSD_Item_Index1)  return 0;     // Source select sub-Page still in work
3224   3      
3225   3                              //action  = NOTIFY_SHOW;              // Redraw itself when returned from sub-page
3226   3                              return 1;
3227   3                      }
3228   2                      else
3229   2                      {
3230   3                              // Quit source select sub-page if signal changed.
3231   3                              ucOSD_Item_Index1   = 0;
3232   3                      }
3233   2              }
3234   1      
3235   1              return 2;
3236   1      
3237   1      }
3238          
3239          #if(VIDEO_CHIP != VDC_NONE)
              
              void PageVDC_Enter_Key(void)
              {
                         if (0 == ucOSD_Item_Index0)
                      {
                          // Select and highlight the first item
                          ucOSD_Item_Index0   = PAGEV_ITEM_CONTRAST;
                          ucOSD_Item_Index1   = 0;
                          //OSD_Window(1, (2 + ucOSD_Item_Index0), (2 + ucOSD_Item_Index0), 7, 23, 7, COLOR_CYAN);
                          OSD_Window( 5, 10, 136, 54, 84, 1, 1, 14, 251, 0, 1, 25);
                      }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 54  

                      else
                      {
                          if (PAGEV_ITEM_EXIT == ucOSD_Item_Index0)
                          {                
                              ucOSD_Page_Index    = 0;        // Close OSD
                          }
                          else
                          {
                              if (ucOSD_Item_Index1)
                              {
                                  ucOSD_Item_Index1   = 0;    // Leave the item, Show Mode
                                  
                                  RTDOSDW(OSD_Version);
              
                              }
                              else    // if (MODE_NOSIGNAL != ucMode_Curr && MODE_NOSUPPORT != ucMode_Curr)
                              {
                                  ucOSD_Item_Index1   = 1;    // Enter the item, Show slider
              
                                  switch (ucOSD_Item_Index0)
                                  {
                                  case PAGEV_ITEM_CONTRAST :
                                      //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST, 0xff, 0x61);
                                      OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST, 0xff, 2, 14);
                                      break;
                                  case PAGEV_ITEM_BRIGHT :
                                      //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT, 0xff, 0x61);
                                      OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT, 0xff, 2, 14);
                                      break;
                                  case PAGEV_ITEM_HUE :
                                      //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE, 0xff, 0x61);
                                      OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE, 0xff, 2, 14);
                                      break;
                                  case PAGEV_ITEM_SATURATION :
                                      //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION, 0xff, 0x61
             -);
                                      OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION, 0xff, 2, 14
             -);
                                      break;
                                  }
                              }
                          }
                      }
              }
              
              void PageVDC_Left_Right_Key(unsigned char Key)
              {
                 if (ucOSD_Item_Index1)
                      {
                          switch (ucOSD_Item_Index0)
                          {            
                          case PAGEV_ITEM_CONTRAST :
                              if (NOTIFY_RIGHT_KEY == Key)
                              {
                                  if (0xff == ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST)   return;
              
                                  ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST    += 1;
                              }
                              else
                              {
                                  if (0x00 == ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST)   return;
              
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 55  

                                  ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST    -= 1;
                              }
                              //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST, 0xff, 0x61);
                              OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST, 0xff, 2, 14);
                              break;
                          case PAGEV_ITEM_BRIGHT :
                              if (NOTIFY_RIGHT_KEY == Key)
                              {
                                  if (0xff == ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT)     return;
              
                                  ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT  += 1;
                              }
                              else
                              {
                                  if (0x00 == ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT)     return;
              
                                  ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT  -= 1;
                              }
                              //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT, 0xff, 0x61);
                              OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT, 0xff, 2, 14);
                              break;
                          case PAGEV_ITEM_HUE :
                              if (NOTIFY_RIGHT_KEY == Key)
                              {
                                  if (0xff == ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE)        return;
              
                                  ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE += 1;
                              }
                              else
                              {
                                  if (0x00 == ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE)        return;
              
                                  ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE -= 1;
                              }
                              //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE, 0xff, 0x61);
                              OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE, 0xff, 2, 14);
                              break;
                          case PAGEV_ITEM_SATURATION :
                              if (NOTIFY_RIGHT_KEY == Key)
                              {
                                  if (0xff == ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION)     return;
              
                                  ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION  += 1;
                              }
                              else
                              {
                                  if (0x00 == ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION)     return;
              
                                  ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION  -= 1;
                              }
                              //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION, 0xff, 0x61);
                              OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION, 0xff, 2, 14);
                              break;
                          }
                          SetVDC_Color();
                          Save_MUD(ucMode_Curr);
                      }
                      else
                      {
                          if (ucOSD_Item_Index0)
                          {
                              // Select and highlight the next/previous item
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 56  

                              if (NOTIFY_RIGHT_KEY == Key)
                                  ucOSD_Item_Index0   = (PAGEV_ITEM_NUM == ucOSD_Item_Index0) ? 1 : (ucOSD_Item_Index0 +
             - 1);
                              else
                                  ucOSD_Item_Index0   = (1 == ucOSD_Item_Index0) ? PAGEV_ITEM_NUM : (ucOSD_Item_Index0 -
             - 1);
              
                              //OSD_Window(1, (2 + ucOSD_Item_Index0), (2 + ucOSD_Item_Index0), 7, 23, 7, COLOR_CYAN);
                                Osd_Change_Item(Key,PAGEV_ITEM_NUM);
                          }
                      }
              }
              
              void PageVDC_Show(void)
              {
                        Init_Page(0);
              
                      RTDOSDW(PageVDC_Atb);
                      RTDOSDW(PageVDC_ENG);
              
                      // Highlight the select item
                      //OSD_Window(1, (2 + ucOSD_Item_Index0), (2 + ucOSD_Item_Index0), 7, 23, (ucOSD_Item_Index0 ? 7 : 
             -3), COLOR_CYAN);
                      OSD_Window( 5, 10, 136, 54, 84, 1, 1, 14, 251, 0, 1, 25);
              
                      if (0 == ucOSD_Item_Index1)
                      {
                          RTDOSDW(OSD_Version);
              
                      }
                      else
                      {
                          switch (ucOSD_Item_Index0)
                          {
                          case PAGEV_ITEM_CONTRAST :
                              //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST, 0xff, 0x61);
                              OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VCONTRAST, 0xff, 2, 14);
                              break;
                          case PAGEV_ITEM_BRIGHT :
                              //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT, 0xff, 0x61);
                              OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VBRIGHT, 0xff, 2, 14);
                              break;
                          case PAGEV_ITEM_HUE :
                              //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE, 0xff, 0x61);
                              OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VHUE, 0xff, 2, 14);
                              break;
                          case PAGEV_ITEM_SATURATION :
                              //OSD_Slider(11, 2, 20, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION, 0xff, 0x61);
                              OSD_Slider(11, 36, 17, ((LP_VIDEO_MODE_USER_DATA)&stMUD)->VSATURATION, 0xff, 2, 14);
                              break;
                          }
                      }
              }
              #endif
3424          
3425          unsigned char Sub_Page_Process(unsigned char Key)
3426          {
3427   1              unsigned char ucTemp = 2;
3428   1              
3429   1              switch(ucOSD_Page_Index)
3430   1              {
3431   2                      case 1:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 57  

3432   2                              ucTemp = Page1_Goto_Subpage(Key); 
3433   2                              break;
3434   2                              
3435   2      //              case 4:
3436   2                      case 3:     
3437   2                              ucTemp = Page4_Goto_Subpage(Key);
3438   2                              break;
3439   2      
3440   2      //              case 5:                         
3441   2                      case 4:
3442   2                              ucTemp = Page5_Goto_Subpage(Key);
3443   2                              break;
3444   2                              
3445   2                      default:
3446   2                              break;
3447   2              }
3448   1      
3449   1              return ucTemp;
3450   1              
3451   1      }
3452          
3453          ///////////////////////////////////////////////////////////////////////////////////////////
3454          //anson
3455          ///////////////////////////////////////////////////////////////////////////////////////////
3456          void FACTORY_Key_Process(void)    //anson
3457          {
3458   1              switch(ucOSD_Page_Index)
3459   1              {
3460   2                      case 0:
3461   2                              FACTORY_Key_Key();
3462   2                              break;
3463   2              }
3464   1      }
3465          
3466          ///////////////////////////////////////////////////////////////////////////////////////////
3467          ///////////////////////////////////////////////////////////////////////////////////////////
3468          void Enter_Key_Process(void)
3469          {
3470   1              switch(ucOSD_Page_Index)
3471   1              {
3472   2                      case 0:
3473   2                              Page0_Enter_Key();
3474   2                              break;
3475   2                              
3476   2                      case 1:
3477   2                              Page1_Enter_Key();
3478   2                              break;
3479   2                              
3480   2                      case 2:
3481   2                              Page2_Enter_Key();
3482   2                              break;
3483   2      /*                      
3484   2                      case 3:
3485   2                              if(Page3_Enter_Key())  
3486   2                                      break;
3487   2                              else
3488   2                                      return;
3489   2                              break;
3490   2      */                      
3491   2                      case 3:
3492   2                              Page4_Enter_Key();
3493   2                              break;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 58  

3494   2                              
3495   2                      case 4:
3496   2                              Page5_Enter_Key();
3497   2                              break;
3498   2                              
3499   2                      case 5:
3500   2                              // Just set ucOSD_Page_Index to 0 and wait for main program to clear screen
3501   2                              ucOSD_Page_Index    = 0;
3502   2                              break;
3503   2                              
3504   2                      case 8:
3505   2                              if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
3506   2                                      PageADC_Enter_Key();
3507   2      
3508   2      #if(VIDEO_CHIP != VDC_NONE)
                                      else
                                              PageVDC_Enter_Key();
              #endif
3512   2                              break;
3513   2                              
3514   2                      case PAGE_Factory:
3515   2                              PageFactory_Enter_Key();
3516   2                              break;
3517   2                              
3518   2              }
3519   1      }
3520          
3521          void Enter_Key_B_Process(void)
3522          {
3523   1              switch(ucOSD_Page_Index)
3524   1              {
3525   2                      case 1:
3526   2                              Page1B_Enter_Key();
3527   2                              break;
3528   2                              
3529   2      //              case 4:
3530   2                      case 3:     
3531   2                              Page4B_Enter_Key();
3532   2                              break;
3533   2      
3534   2                              
3535   2      //              case 5:    
3536   2              case 4:
3537   2                              Page5B_Enter_Key();
3538   2                              break;
3539   2                              
3540   2              }
3541   1      }
3542          void Left_Right_Key_Process(unsigned char Key)
3543          {
3544   1              switch(ucOSD_Page_Index)
3545   1              {
3546   2                      case 0:
3547   2                              Page0_Left_Right_Key(Key);
3548   2                              break;
3549   2                              
3550   2                      case 1:        
3551   2                              Page1_Left_Right_Key(Key);
3552   2                              break;
3553   2                              
3554   2                      case 2:        
3555   2                              Page2_Left_Right_Key(Key);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 59  

3556   2                              break;
3557   2      /*                      
3558   2                      case 3:        
3559   2                              Page3_Left_Right_Key(Key);
3560   2                              break;
3561   2      */                      
3562   2                      case 3:        
3563   2                              Page4_Left_Right_Key(Key);
3564   2                              break;
3565   2                              
3566   2                      case 4:        
3567   2                              Page5_Left_Right_Key(Key);
3568   2                              break;
3569   2                              
3570   2                      case 5:        
3571   2                              Page6_Left_Right_Key(Key);
3572   2                              break;
3573   2                              
3574   2                      case 8:
3575   2                              if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
3576   2                                      PageADC_Left_Right_Key(Key);
3577   2      
3578   2      #if(VIDEO_CHIP != VDC_NONE)
                                      else
                                              PageVDC_Left_Right_Key(Key);
              #endif
3582   2                              break;
3583   2      
3584   2                      case PAGE_Factory:
3585   2                              PageFactory_Left_Right_Key(Key);
3586   2                              break;
3587   2      
3588   2              }
3589   1      }
3590          
3591          void Left_Right_Key_B_Process(unsigned char Key)
3592          {
3593   1              switch(ucOSD_Page_Index)
3594   1              {
3595   2                      case 1:      
3596   2                              Page1B_Left_Right_Key(Key);
3597   2                              break;
3598   2                              
3599   2      //              case 4:      
3600   2                      case 3:     
3601   2                              Page4B_Left_Right_Key(Key);
3602   2                              break;
3603   2      
3604   2      
3605   2      //              case 5:      
3606   2                      case 4:     
3607   2                              Page5B_Left_Right_Key(Key);
3608   2                              break;
3609   2                              
3610   2              }
3611   1      }
3612          
3613          void Show_Process(void)
3614          {
3615   1              switch(ucOSD_Page_Index)
3616   1              {
3617   2                      case 1:      
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 60  

3618   2                              Page1_Show();
3619   2                              break;
3620   2                              
3621   2                      case 2:      
3622   2                              Page2_Show();
3623   2                              break;
3624   2      /*                      
3625   2                      case 3:      
3626   2                              Page3_Show();
3627   2                              break;
3628   2      */                      
3629   2                      case 3:      
3630   2                              Page4_Show();
3631   2                              break;
3632   2                              
3633   2                      case 4:      
3634   2                              Page5_Show();
3635   2                              break;
3636   2                              
3637   2                      case 5:      
3638   2                              Page6_Show();
3639   2                              break;
3640   2                              
3641   2                      case 8:
3642   2                              if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
3643   2                                      PageADC_Show();
3644   2      
3645   2      #if(VIDEO_CHIP != VDC_NONE)
                                      else
                                              PageVDC_Show();
              #endif
3649   2                              break;
3650   2      
3651   2                      case PAGE_Factory:
3652   2                              PageFactory_Show();
3653   2                              break;
3654   2      
3655   2              }
3656   1      }
3657          
3658          void Show_B_Process(void)
3659          {
3660   1              switch(ucOSD_Page_Index)
3661   1              {
3662   2                      case 1:
3663   2                              Page1B_Show();
3664   2                              break;
3665   2                              
3666   2      //              case 4:     
3667   2                      case 3:     
3668   2                              Page4B_Show();
3669   2                              break;
3670   2                              
3671   2      
3672   2      //              case 5:     
3673   2                      case 4:     
3674   2                              Page5B_Show();
3675   2                              break;
3676   2                              
3677   2              }
3678   1      }
3679          
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 61  

3680          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -////
3681          // OSD Process Routine
3682          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -////
3683          
3684          // In all OSD main page process, you CANNOT call other main page process directly.
3685          // You CAN only change ucOSD_Page_Index to indicate other main page.
3686          // Main program will detect the change of ucOSD_Page_Index and send NOTIFY_SHOW to the new page.
3687          // The only constraint is YOU CANNOT change ucOSD_Page_Index when receive NOTIFY_SHOW.
3688          // p.s. You can call sub-page process directly.
3689          
3690          // OSD_Proc0 handles messages when there is no OSD window on screen (ucOSD_Page_Index = 0)
3691          void OSD_Proc(unsigned char action)
3692          {
3693   1      
3694   1      #if (TV_CHIP != TV_NONE)
                     if(ucOSD_Page_Index == 0)
                         {
                                //if (SOURCE_TV == (stGUD1.INPUT_SOURCE & 0x07) && OSD_Proc[1][stGUD1.INPUT_SOURCE & 0x07])
                                if (SOURCE_TV == (stGUD1.INPUT_SOURCE & 0x07))
                                {
                                        // Change to OSD Main Page 1 and Main Program will show it
                                        ucOSD_Page_Index    = 1;
                                        ucOSD_Item_Index0   = 0;
                                        ucOSD_Item_Index1   = 0;
                                        ucOSD_Item_Index2   = 0;
              
                              b_rgb_VOLUME_STATUS = 0;
              
                                        return;
                                }
                        }
              #endif
3712   1      
3713   1              Data[0] = Sub_Page_Process(action);
3714   1      
3715   1              if(Data[0] == 1)
3716   1                      action = NOTIFY_SHOW;   // Redraw itself when returned from sub-page
3717   1              else if(Data[0] == 0)
3718   1                      return; // Source select sub-Page still in work
3719   1             
3720   1              if((MODE_NOSIGNAL != ucMode_Curr)&&(MODE_NOSUPPORT != ucMode_Curr))     //anson
3721   1              {
3722   2                      switch(action)
3723   2                      {
3724   3                              case NOTIFY_AUTO_KEY :
3725   3                                      
3726   3      //                              if ((b_rgb_VOLUME_STATUS)|(ucOSD_Page_Index)) //eric test
3727   3      //                              {
3728   3      //                                      ucOSD_Page_Index    = 0;
3729   3      //                                      ucOSD_Item_Index0   = 0;
3730   3      //                                      ucOSD_Item_Index1   = 0;
3731   3      //                                      ucOSD_Item_Index2   = 0;
3732   3                                              
3733   3      //                                      b_rgb_VOLUME_STATUS = 0;
3734   3      //                                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
3735   3      //                              
3736   3      //                              }
3737   3      //                              else
3738   3      //                              {
3739   3                                      if (SOURCE_VGA == (stGUD1.INPUT_SOURCE & 0x07) && MODE_NOSIGNAL != ucMode_Curr && MODE_NOSUPPORT != uc
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 62  

             -Mode_Curr)
3740   3                                      {
3741   4                                              RTDOSDW(OSD_Reset);
3742   4                                              OSD_Position(OSD_ENABLE);
3743   4                                              RTDOSDW(OSD_AUTO);
3744   4                                              RTDOSDW(strTabAuto_Atb[stGUD1.FUNCTION & 0x07]);                //anson
*** WARNING C214 IN LINE 3744 OF CODE\LCD_OSD.C: 'Argument': conversion: non-pointer to pointer
3745   4                                              RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
3746   4                                              if (MODE_0640x0350x70HZ <= ucMode_Curr && MODE_0720x0400x70HZ >= ucMode_Curr)
3747   4                                              {
3748   5                                                      stMUD.CLOCK = 128;
3749   5                                                      Set_H_Position();
3750   5                                                      Set_Clock();
3751   5                                                      Save_MUD(ucMode_Curr);
3752   5                                                      if (ERROR_INPUT == Auto_Phase())
3753   5                                                              ucMode_Curr = MODE_OSDFORCE;
3754   5                                                      if (ERROR_INPUT == Auto_Position())
3755   5                                                              ucMode_Curr = MODE_OSDFORCE;
3756   5                                              }
3757   4                                              else
3758   4                                              {
3759   5                                                      if (ERROR_INPUT == Auto_Config())   ucMode_Curr = MODE_OSDFORCE;
3760   5                                                      //if (ERROR_INPUT == Auto_Phase())   ucMode_Curr = MODE_OSDFORCE;
3761   5                                              }
3762   4                                              b_rgb_VOLUME_STATUS = 0;
3763   4                                              ucOSD_Page_Index    = 0;
3764   4                                              RTDSetByte(HOSTCTRL_02, 0x40);  // Wake RTD up
3765   4                                              // Although you can add ending animation here, I don't think it is necessary.
3766   4                                              RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
3767   4                                              RTDOSDW(OSD_Reset);            // Clear OSD
3768   4      //                              }
3769   4                                      
3770   4                                      }
3771   3                                      break;
3772   3      
3773   3                              case NOTIFY_ENTER_KEY:
3774   3                                              b_rgb_VOLUME_STATUS = 0;
3775   3                                              Enter_Key_Process();
3776   3                                      break;
3777   3                              
3778   3                              case NOTIFY_RIGHT_KEY:
3779   3                              case NOTIFY_LEFT_KEY:
3780   3                                              Left_Right_Key_Process(action);
3781   3                                      break;
3782   3                              
3783   3                              case NOTIFY_EXIT_KEY :
3784   3                                              rgb_EXIT_KEY();
3785   3                                      break;
3786   3      
3787   3                              case NOTIFY_SHOW:
3788   3                                              Show_Process();
3789   3                                      break;
3790   3                              
3791   3                              case NOTIFY_LR_KEY:
3792   3                                              if(ucOSD_Page_Index == 0)
3793   3                                                      Page0_LR_Key();
3794   3                                      break;
3795   3                              
3796   3                              case NOTIFY_FACTORY_KEY:             //anson 
3797   3                                      if((stGUD3.TV_SETTING & 0x08) == 0x08 )//Factory Mode           
3798   3                                      {
3799   4                                              FACTORY_Key_Process();
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 63  

3800   4                                      }
3801   3                                      break;
3802   3      
3803   3                              default:
3804   3                                      break;
3805   3                              
3806   3                      }
3807   2              }
3808   1      }
3809          
3810          void OSD_Proc_B(unsigned char action)
3811          {
3812   1              switch(action)
3813   1              {
3814   2                      case NOTIFY_ENTER_KEY:
3815   2                              Enter_Key_B_Process();
3816   2                              break;
3817   2                              
3818   2                      case NOTIFY_RIGHT_KEY:
3819   2                      case NOTIFY_LEFT_KEY:
3820   2                              Left_Right_Key_B_Process(action);
3821   2                              break;
3822   2                              
3823   2              case NOTIFY_EXIT_KEY :
3824   2                 rgb_EXIT_KEY();
3825   2                      case NOTIFY_SHOW:
3826   2                              Show_B_Process();
3827   2                              break;
3828   2                              
3829   2                      default:
3830   2                              break;
3831   2                              
3832   2              }
3833   1      }
3834          
3835          
3836          #if (TV_NONE != TV_CHIP)
              
              
              void TV_AutoScan(void)
              {
                  unsigned char   ucTemp0, ucTemp1, ucTemp2;
              
                  RTDOSDW(OSD_Reset); 
                  RTDCodeW(FreeV);                        // FreeRun V registers & Background & disable
                  RTDSetBit(VGIP_CTRL_04, 0xfe, 0x00);    // Input Run Disable
              
                  RTDSetBit(VDIS_SIGINV_21, 0x0f, 0x10| DISP_EO_SWAP | DISP_RB_SWAP | DISP_ML_SWAP);
              
                  I2CWrite(AV_DETECT);
                  I2CWrite(TV_SOURCE_SEL);
                  I2CWrite(TV_SCAN_GAIN);
              
                  RTDCodeW(OSD_Enable);
              
                  ucTemp0 = 0;
                  ucTemp1 = 0;
                  ucTemp2 = stGUD3.CURR_CHANNEL;
              
                  stGUD3.CURR_CHANNEL = 1;
              
                  while (1)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 64  

                  {
                      Set_TV_Channel();
                      Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
              
                      if (0 == (ucTemp0 & 0x07))
                      {
                          I2CRead(ADDR_EROM1, 0xd0 + (ucTemp0 >> 3), 0x01);
                          ucTemp1 = Data[0];
                      }
                      
                      Data[1] = 12;
                      do
                      {
                          Delay_Xms(50);
                          I2CRead(ADDR_VIDEO, 0x1f, 0x01);
                          if (Data[0] & 0x40)     break;
                      }
                      while (--Data[1]);
                      
                      if (Data[1])
                      {
                          ucTemp1 &= 0xff - (1 << (7 - (ucTemp0 & 0x07)));
                      }
                      else
                      {
                          ucTemp1 |= 1 << (7 - (ucTemp0 & 0x07));
                      }      
                      
                      Data[0] = 4;
                      Data[1] = ADDR_EROM1;
                      Data[2] = 0xd0 + (ucTemp0 >> 3);
                      Data[3] = ucTemp1;
                      I2CWrite(Data);
              
                      if (stGUD3.TV_SETTING & 0x01)
                      {
                          if (MAX_CATV_NUM == stGUD3.CURR_CHANNEL)    break;
                      }
                      else
                      {
                          if (MAX_AIR_NUM == stGUD3.CURR_CHANNEL)     break;
                      }
              
                      stGUD3.CURR_CHANNEL += 1;
                      ucTemp0             += 1;
                  }        
                  stGUD3.CURR_CHANNEL = ucTemp2;
                  Set_TV_Channel();
                  Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
              
                  Delay_Xms(SET_2404_DELAY);
              }
              
              void Show_TV_Info(unsigned channel, unsigned char option)
              {
                  RTDSetBit(OVL_CTRL_6D, 0xfd, 0x00);     // Set the OSD become two times of original width (dual pixel)
              
                  if (2 < option)     option  = 2;
              
                  RTDOSDW(OSD_CHANNEL);
                  Show_TV_Number(channel, 1, 5 - option, option);
                      
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 65  

                  if (stGUD3.TV_SETTING & 0x02)
                  {
                      RTDOSDW(OSD_MUTE);
                  }
                  else
                  {
                      RTDOSDW((stGUD3.TV_SETTING & 0x04) ? OSD_SAP : OSD_STEREO);
                  }
              }
              
              void Show_TV_Number(unsigned char num, unsigned char row, unsigned char col, unsigned char option)
              {
                  RTDSetBit(OVL_CTRL_6D, 0xfd, 0x00);     // Set the OSD become two times of original width (dual pixel)
              
                  Data[0]     = 5;
                  Data[1]     = Y_INC;
                  Data[2]     = OSD_ROW_90;
                  Data[3]     = 0x80 | row;
                  Data[4]     = col;
              
                  Data[6]     = N_INC;
                  Data[7]     = OSD_DATA_92;
              
                  if (1 < option)
                  {
                      Data[5]     = 6;
                      Data[11]    = 0;
              
                      Data[8]     = num / 100;
              
                      num         = num - (Data[8] * 100);
              
                      Data[9]     = num / 10;
                      Data[10]    = num - (Data[9] * 10) + _0_;        
                      Data[8]     = Data[8] + _0_;
                      Data[9]     = Data[9] + _0_;
                  }
                  else if (1 == option)
                  {
                      Data[5]     = 5;
                      Data[10]    = 0;
              
                      Data[8]     = num / 10;
                      Data[9]     = num - (Data[8] * 10) + _0_;
                      Data[8]     = Data[8] + _0_;
                  }
                  else
                  {
                      Data[5]     = 4;
                      Data[9]     = 0;
              
                      Data[8]     = num + _0_;
                  }
                  RTDWrite(Data);
              }
              
              void OSD_TV_Proc(unsigned char action)
              {
                  switch (ucOSD_Item_Index0)
                  {
                  case 1 :
                      // ucOSD_Item_Index0 will be 1 when we are in TV control menu
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 66  

                      OSD_TV_Menu(action);
              
                      if (ucOSD_Item_Index0)  return;
              
                      ucOSD_Item_Index1   = 0;
                      ucOSD_Item_Index2   = 0;
              
                      if (NOTIFY_ENTER_KEY == action || NOTIFY_IR_MENU == action || NOTIFY_NONE == action)    action  = 
             -NOTIFY_SHOW;
              
                      OSD_Clear(0, 15, 0, 30);
                      Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                      break;
                  case 2 :
                      // ucOSD_Item_Index0 will be 2 when volume level is shown on screen.
                      if (ucOSD_Item_Index2)      ucOSD_Item_Index2   -= 1;
              
                      if (0 == ucOSD_Item_Index2 || (NOTIFY_NONE != action && NOTIFY_IR_VOLINC != action && NOTIFY_IR_VO
             -LDEC != action))
                      {
                          ucOSD_Item_Index0   = 0;
                          ucOSD_Item_Index1   = 0;
                          ucOSD_Item_Index2   = 0;
              
                          OSD_Clear(0, 15, 0, 30);
                          Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                      }
                      break;
                  case 3 :
                      // ucOSD_Item_Index0 will be 3 when channel number is not shown on screen.
                      ucOSD_Item_Index1   = 0;
                      ucOSD_Item_Index2   = 0;
                      break;
              
                  default :
                      // ucOSD_Item_Index0 is 0xff~0xfd and ucOSD_Item_Index1 is non-zero when user inputs channel numbe
             -r.
                      // We will issue NOTIFY_IR_ENTER automatically to end input when channel no. is identified or key 
             -is timeout.
                      // We will abort if any other key is pressed.
                      if (0xfd < ucOSD_Item_Index0)
                      {
                          if (0 == ucOSD_Item_Index2)
                              ucOSD_Item_Index0   = 0xfd;
                          else
                              ucOSD_Item_Index2   = ucOSD_Item_Index2 - 1;
              
                          if (NOTIFY_NONE != action && NOTIFY_SHOW != action && 
                              NOTIFY_IR_ENTER != action && (NOTIFY_IR_NUM0 > action || NOTIFY_IR_NUM9 < action))
                          {
                              ucOSD_Item_Index0   = 0;
                              ucOSD_Item_Index1   = 0;
                              ucOSD_Item_Index2   = 0;
                              Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                          }
                      }
              
                      if (0xfd == ucOSD_Item_Index0)
                      {
                          ucOSD_Item_Index2   = 0;
                          action              = NOTIFY_IR_ENTER;
                      }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 67  

                      break;
                  }
              
                  switch (action)
                  {
                  case NOTIFY_SHOW :
                      OSD_Clear(0, 15, 0, 30);
              
                      if (0xfd > ucOSD_Item_Index0)
                      {
                          if (3 != ucOSD_Item_Index0)
                          {
                              ucOSD_Item_Index0   = 0;
                              ucOSD_Item_Index1   = 0;
                              ucOSD_Item_Index2   = 0;
                              Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                          }
                      }
                      else
                      {
                          Show_TV_Info(ucOSD_Item_Index1, 0xff - ucOSD_Item_Index0);
                      }
                      break;
              
                  case NOTIFY_ENTER_KEY :
                  case NOTIFY_IR_MENU :
                      ucOSD_Item_Index0   = 1;
                      ucOSD_Item_Index1   = 1;
                      ucOSD_Item_Index2   = 0;
                      OSD_TV_Menu(NOTIFY_SHOW);
                      break;
              
                  case NOTIFY_RIGHT_KEY :
                  case NOTIFY_IR_CHINC :
                      // Increase the channel
                      Next_Channel();
                      Save_GUD3();
              
                      Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                      ucOSD_Item_Index0   = 0;
                      ucOSD_Item_Index1   = 0;
                      ucOSD_Item_Index2   = 0;
                      break;
              
                  case NOTIFY_LEFT_KEY :
                  case NOTIFY_IR_CHDEC :
                      // Decrease the channel
                      Prev_Channel();
                      Save_GUD3();
              
                      Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                      ucOSD_Item_Index0   = 0;
                      ucOSD_Item_Index1   = 0;
                      ucOSD_Item_Index2   = 0;
                      break;
              
                  case NOTIFY_IR_JUMP :
                      Data[0]             = stGUD3.CURR_CHANNEL;
                      stGUD3.CURR_CHANNEL = stGUD3.PREV_CHANNEL;
                      stGUD3.PREV_CHANNEL = Data[0];
                      Set_TV_Channel();
                      Save_GUD3();
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 68  

              
                      Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                      ucOSD_Item_Index0   = 0;
                      ucOSD_Item_Index1   = 0;
                      ucOSD_Item_Index2   = 0;
                      break;
              
                  case NOTIFY_IR_VOLINC :
                  case NOTIFY_IR_VOLDEC :
                      // Disable mute when changing volume
                      stGUD3.TV_SETTING   = stGUD3.TV_SETTING & 0xfd;
              
                      if (NOTIFY_IR_VOLINC == action)
                          stGUD3.VOLUME   = 31 > stGUD3.VOLUME ? stGUD3.VOLUME + 1 : 31;
                      else
                          stGUD3.VOLUME   = 0 < stGUD3.VOLUME ? stGUD3.VOLUME - 1 : 0;
              
                      SetVolume();
                      Save_GUD3();
              
                      RTDOSDW(OSD_VOLUME);    
                      Show_TV_Number(stGUD3.VOLUME, 2, 4, 1);
              
                      ucOSD_Item_Index0   = 2;
                      ucOSD_Item_Index1   = 0;
                      ucOSD_Item_Index2   = 50;   // For time-out counter
                      break;
              
                  case NOTIFY_IR_MUTE :
                      stGUD3.TV_SETTING   = stGUD3.TV_SETTING ^ 0x02;
                      SetVolume();
                      Save_GUD3();
              
                      Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                      ucOSD_Item_Index0   = 0;
                      ucOSD_Item_Index1   = 0;
                      ucOSD_Item_Index2   = 0;
                      break;
              
                  case NOTIFY_IR_ENTER :
                      if (ucOSD_Item_Index1)
                      {
                          ucOSD_Item_Index0   = 0;
              
                          if (stGUD3.TV_SETTING & 0x01)
                          {
                              if (MAX_CATV_NUM >= ucOSD_Item_Index1)
                              {
                                  stGUD3.PREV_CHANNEL = stGUD3.CURR_CHANNEL;
                                  stGUD3.CURR_CHANNEL = ucOSD_Item_Index1;
              
                                  ucOSD_Item_Index0   = 1;    // Valid channel
                              }
                          }
                          else
                          {
                              if (MAX_AIR_NUM >= ucOSD_Item_Index1)
                              {
                                  stGUD3.PREV_CHANNEL = stGUD3.CURR_CHANNEL;
                                  stGUD3.CURR_CHANNEL = ucOSD_Item_Index1;
              
                                  ucOSD_Item_Index0   = 1;    // Valid channel
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 69  

                              }
                          }
              
                          if (ucOSD_Item_Index0)
                          {
                              Set_TV_Channel();
              
                              if (stGUD3.PREV_CHANNEL != stGUD3.CURR_CHANNEL)
                              {
                                  // Disable mute when changing channel
                                  stGUD3.TV_SETTING   = stGUD3.TV_SETTING & 0xfd;
                                  SetVolume();
                              }
              
                              Save_GUD3();
                          }
                      }
                      ucOSD_Item_Index0   = 0;
                      ucOSD_Item_Index1   = 0;
                      ucOSD_Item_Index2   = 0;
                      Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                      break;
              
                  case NOTIFY_IR_DISP :
                      ucOSD_Item_Index1   = 0;
                      ucOSD_Item_Index2   = 0;
                      OSD_Clear(0, 15, 0, 30);
              
                      if (ucOSD_Item_Index0)
                      {
                          ucOSD_Item_Index0   = 0;
                          Show_TV_Info(stGUD3.CURR_CHANNEL, 2);
                      }
                      else
                      {
                          ucOSD_Item_Index0   = 3;
                      }
                      break;
              
                  default :
                      // We handle IR messages
                      if (NOTIFY_IR_NUM0 <= action && NOTIFY_IR_NUM9 >= action)
                      {
                          if (0xfd > ucOSD_Item_Index0)
                          {
                              ucOSD_Item_Index0   = 0xff;
                              ucOSD_Item_Index1   = action - NOTIFY_IR_NUM0;
                          }
                          else
                          {
                              ucOSD_Item_Index0   = ucOSD_Item_Index0 - 1;
                              ucOSD_Item_Index1   = (ucOSD_Item_Index1 * 10) + (action - NOTIFY_IR_NUM0);
                          }
              
                          ucOSD_Item_Index2   = 80;   // For time-out counter
              
                          if (6 < ucOSD_Item_Index1)
                          {
              #if (TV_SYSTEM == TV_NTSC)
                              if (0 == (stGUD3.TV_SETTING & 0x01) || 12 < ucOSD_Item_Index1)
              #endif
                              {
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 70  

                                  ucOSD_Item_Index0   = 0xfd;
                              }
                          }
              
                          Show_TV_Info(ucOSD_Item_Index1, 0xff - ucOSD_Item_Index0);
                      }
                      break;
                  }
              }
              
              
              
              void Highlight_Item(unsigned char index1, unsigned char index2)
              {
                  switch (index1)
                  {
                  case PAGE_TV_ITEM_SYSTEM :
                      if (index2)
                          OSD_Window(1, 0, 0, 0x13, 0x18, 7, COLOR_CYAN);
                      else
                          OSD_Window(1, 0, 0, 0x0a, 0x0e, 7, COLOR_CYAN);
                      break;
                  case PAGE_TV_ITEM_CONTRAST :
                      OSD_Window(1, 2, 2, 0x0a, 0x0e, 7, COLOR_CYAN);
                      break;
                  case PAGE_TV_ITEM_BRIGHT :
                      OSD_Window(1, 4, 4, 0x0a, 0x0e, 7, COLOR_CYAN);
                      break;
                  case PAGE_TV_ITEM_SOUND :
                      if (index2)
                          OSD_Window(1, 6, 6, 0x13, 0x17, 7, COLOR_CYAN);
                      else
                          OSD_Window(1, 6, 6, 0x0a, 0x11, 7, COLOR_CYAN);
                      break;
                  case PAGE_TV_ITEM_CHANNEL :
                      OSD_Window(1, 8, 8, 0x0a, 0x0e, 7, COLOR_CYAN);
                      break;
                  case PAGE_TV_ITEM_VOLUME :
                      OSD_Window(1, 10, 10, 0x0a, 0x0d, 7, COLOR_CYAN);
                      break;
                  case PAGE_TV_ITEM_AUTOSCAN :
                      if (index2)
                          OSD_Window(1, 12, 12, 0x13, 0x17, 7, COLOR_CYAN);
                      else
                          OSD_Window(1, 12, 12, 0x0a, 0x0d, 7, COLOR_CYAN);
                      break;
                  case PAGE_TV_ITEM_EXIT :
                      OSD_Window(1, 14, 14, 0x00, 0x03, 7, COLOR_CYAN);
                      break;
                  }        
              }
              
              void OSD_TV_Menu(unsigned char action)
              {
                  switch (action)
                  {
                  case NOTIFY_ENTER_KEY :
                      switch (ucOSD_Item_Index1)
                      {
                      case PAGE_TV_ITEM_SYSTEM :
                          ucOSD_Item_Index1   = PAGE_TV_ITEM_CONTRAST;
                          break;
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 71  

                      case PAGE_TV_ITEM_CONTRAST :
                          ucOSD_Item_Index1   = PAGE_TV_ITEM_BRIGHT;
                          break;
                      case PAGE_TV_ITEM_BRIGHT :
                          ucOSD_Item_Index1   = PAGE_TV_ITEM_SOUND;
                          ucOSD_Item_Index2   = (stGUD3.TV_SETTING & 0x04) ? 1 : 0;
                          break;
                      case PAGE_TV_ITEM_SOUND :
                          ucOSD_Item_Index1   = PAGE_TV_ITEM_CHANNEL;
                          break;
                      case PAGE_TV_ITEM_CHANNEL :
                          ucOSD_Item_Index1   = PAGE_TV_ITEM_VOLUME;   
                          break;
                      case PAGE_TV_ITEM_VOLUME :
                          ucOSD_Item_Index1   = PAGE_TV_ITEM_AUTOSCAN;
                          ucOSD_Item_Index2   = 0;
                          break;
                      case PAGE_TV_ITEM_AUTOSCAN :
                          if (ucOSD_Item_Index2)
                          {
                              TV_AutoScan();
                              
                              ucMode_Curr = MODE_OSDFORCE;
              
                              return;                 // Return, not break
                          }
                          else
                          {
                              ucOSD_Item_Index1   = PAGE_TV_ITEM_EXIT;
                          }
                          break;
                      case PAGE_TV_ITEM_EXIT:
                          ucOSD_Item_Index0   = 0;
                          ucOSD_Item_Index1   = 0;
                          ucOSD_Item_Index2   = 0;
                          RTDOSDW(OSD_Reset);
                          RTDCodeW(OSD_Enable);
                          return;                     // Return, not break
                      }
                      // Hightlight next item if not returned
                      Highlight_Item(ucOSD_Item_Index1, ucOSD_Item_Index2);
                      break;
              
                  case NOTIFY_RIGHT_KEY :     // Right-key to Increase; Left-key to Decrease
                  case NOTIFY_LEFT_KEY :
                      switch (ucOSD_Item_Index1)
                      {
                      case PAGE_TV_ITEM_SYSTEM :
                          ucOSD_Item_Index2   = ucOSD_Item_Index2 ? 0 : 1;
                          stGUD3.TV_SETTING   = ucOSD_Item_Index2 ? (stGUD3.TV_SETTING | 0x01) : (stGUD3.TV_SETTING & 0x
             -fe);
                          Set_TV_Channel();
                          Save_GUD3();
                          break;
                      case PAGE_TV_ITEM_CONTRAST :
                          if (NOTIFY_RIGHT_KEY == action)
                          {
                              if (KEY_TURBO_ENABLE > ucKey_Issued)
                                  stGUD0.CONTRAST   = 100 > stGUD0.CONTRAST ? stGUD0.CONTRAST + 1 : 100;
                              else
                                  stGUD0.CONTRAST   = 99 > stGUD0.CONTRAST ? stGUD0.CONTRAST + 2 : 100;
                          }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 72  

                          else
                          {
                              if (KEY_TURBO_ENABLE > ucKey_Issued)
                                  stGUD0.CONTRAST   = 0 < stGUD0.CONTRAST ? stGUD0.CONTRAST - 1 : 0;
                              else
                                  stGUD0.CONTRAST   = 1 < stGUD0.CONTRAST ? stGUD0.CONTRAST - 2 : 0;
                          }
                          Show_TV_Number(stGUD0.CONTRAST, 0x02, 0x0b, 0x02);
                          Set_Bright_Contrast();
                          Save_GUD0();
                          break;
                      case PAGE_TV_ITEM_BRIGHT :
                          if (NOTIFY_RIGHT_KEY == action)
                          {
                              if (KEY_TURBO_ENABLE > ucKey_Issued)
                                  stGUD0.BRIGHT   = 100 > stGUD0.BRIGHT ? stGUD0.BRIGHT + 1 : 100;
                              else
                                  stGUD0.BRIGHT   = 99 > stGUD0.BRIGHT ? stGUD0.BRIGHT + 2 : 100;
                          }
                          else
                          {
                              if (KEY_TURBO_ENABLE > ucKey_Issued)
                                  stGUD0.BRIGHT   = 0 < stGUD0.BRIGHT ? stGUD0.BRIGHT - 1 : 0;
                              else
                                  stGUD0.BRIGHT   = 1 < stGUD0.BRIGHT ? stGUD0.BRIGHT - 2 : 0;
                          }
                          Show_TV_Number(stGUD0.BRIGHT, 0x04, 0x0b, 0x02);
                          Set_Bright_Contrast();
                          Save_GUD0();
                          break;
                      case PAGE_TV_ITEM_SOUND :
                          ucOSD_Item_Index2   = ucOSD_Item_Index2 ? 0 : 1;
                          stGUD3.TV_SETTING   = ucOSD_Item_Index2 ? (stGUD3.TV_SETTING | 0x04) : (stGUD3.TV_SETTING & 0x
             -fb);
                          // Disable mute when changing TV sound mode
                          stGUD3.TV_SETTING   = stGUD3.TV_SETTING & 0xfd;
                          SetVolume();
                          Save_GUD3();
                          break;
                      case PAGE_TV_ITEM_CHANNEL :
                          if (NOTIFY_RIGHT_KEY == action)
                              Next_Channel();
                          else
                              Prev_Channel();
                          Show_TV_Number(stGUD3.CURR_CHANNEL, 0x08, 0x0b, 0x02);
                          Save_GUD3();
                          break;
              
                      case PAGE_TV_ITEM_VOLUME :
                          if (NOTIFY_RIGHT_KEY == action)
                              stGUD3.VOLUME   = (31 == stGUD3.VOLUME) ? 31 : stGUD3.VOLUME + 1;
                          else
                              stGUD3.VOLUME   = (0 == stGUD3.VOLUME) ? 0 : stGUD3.VOLUME - 1;
                          Show_TV_Number(stGUD3.VOLUME, 0x0a, 0x0b, 0x01);
                          SetVolume();
                          Save_GUD3();
                          break;
                      case PAGE_TV_ITEM_AUTOSCAN :
                          ucOSD_Item_Index2   = ucOSD_Item_Index2 ? 0 : 1;
                          break;
                      }       
                      Highlight_Item(ucOSD_Item_Index1, ucOSD_Item_Index2);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 73  

                      break;
              
                  case NOTIFY_SHOW :
                      OSD_Clear(0, 15, 0, 30);
                      RTDSetBit(OVL_CTRL_6D, 0xfd, 0x00);     // Set the OSD become two times of original width (dual pi
             -xel)
              
                      RTDOSDW(OSD_PageTV);    
                      
                      switch (ucOSD_Item_Index1)
                      {
                      case PAGE_TV_ITEM_SYSTEM :
                          ucOSD_Item_Index2   = (stGUD3.TV_SETTING & 0x01) ? 1 : 0;
                          break;
                      case PAGE_TV_ITEM_SOUND :
                          ucOSD_Item_Index2   = (stGUD3.TV_SETTING & 0x04) ? 1 : 0;
                          break;
                      }        
                      Highlight_Item(ucOSD_Item_Index1, ucOSD_Item_Index2);
              
                      Show_TV_Number(stGUD0.CONTRAST, 0x02, 0x0b, 0x02);
                      Show_TV_Number(stGUD0.BRIGHT, 0x04, 0x0b, 0x02);
                      Show_TV_Number(stGUD3.CURR_CHANNEL, 0x08, 0x0b, 0x02);
                      Show_TV_Number(stGUD3.VOLUME, 0x0a, 0x0b, 0x01);
                      break;
              
                  default :
                      // We don't handle other messages
                      if (NOTIFY_NONE != action || (0 == usOSD_Timer && 0 != stGUD1.OSD_TIMEOUT))
                      {
                          ucOSD_Item_Index0   = 0;
                          ucOSD_Item_Index1   = 0;
                          ucOSD_Item_Index2   = 0;
                          RTDOSDW(OSD_Reset);
                          RTDCodeW(OSD_Enable);
                      }
                      break;
                  }
              }
              
              #endif
4454          
4455          
4456          void OSD_Opening(void)
4457          {
4458   1              int idata num;
4459   1      
4460   1              //OSD_Position(OSD_ENABLE);
4461   1      
4462   1              OSD_Window( 7, 0 , 488, 0, 264,
4463   1                       0, 0, 14, 251, 0, 1, 1);
4464   1      
4465   1              Delay_Xms(128);
4466   1      
4467   1              RTDCodeW(OSD_Enable);
4468   1              RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
4469   1                                                      
4470   1              for(num = 0;num < 112; num+=6)
4471   1              {
4472   2                      OSD_Window( 7, 0 + num*2, 488 - num*2 , 0 + num, 264 - num,
4473   2                               0, 0, 14, 251, 0, 1, 1);
4474   2              }
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 74  

4475   1      
4476   1              OSD_Window( 7, 0 + num*2, 488 - num*2 , 0 + num, 264 - num,
4477   1                       0, 0, 14, 251, 0, 1, 0);
4478   1      
4479   1              
4480   1      
4481   1      /*
4482   1      #if (1)
4483   1      
4484   1          RTDCodeW(OSD_Enable);
4485   1      
4486   1      #else
4487   1      
4488   1          // For OSD animetion
4489   1      
4490   1          RTDCodeW(Palette_Open);
4491   1          RTDCodeW(Palette_1);
4492   1      
4493   1          RTDCodeW(OSD_Enable);
4494   1          
4495   1          Delay_Xms(16);
4496   1          Wait_For_Event(EVENT_DEN_STOP);     // Wait for Frame End                                    
4497   1          RTDCodeW(Palette_2);
4498   1      
4499   1          Delay_Xms(16);
4500   1          Wait_For_Event(EVENT_DEN_STOP);     // Wait for Frame End
4501   1          RTDCodeW(Palette_3);
4502   1          
4503   1          Delay_Xms(28);
4504   1          Wait_For_Event(EVENT_DEN_STOP);     // Wait for Frame End
4505   1          RTDCodeW(Palette_4);
4506   1          
4507   1          Delay_Xms(28);
4508   1          Wait_For_Event(EVENT_DEN_STOP);     // Wait for Frame End
4509   1          RTDCodeW(Palette_5);
4510   1      
4511   1          Delay_Xms(28);
4512   1          Wait_For_Event(EVENT_DEN_STOP);     // Wait for Frame End
4513   1          RTDCodeW(Palette_6);
4514   1      
4515   1          Delay_Xms(28);
4516   1          Wait_For_Event(EVENT_DEN_STOP);     // Wait for Frame End
4517   1          RTDCodeW(Palette_7);
4518   1      
4519   1          RTDCodeW(Palette_Close);
4520   1      
4521   1      #endif
4522   1      
4523   1      */
4524   1      }
4525          
4526          void OSD_Ending(void)
4527          {
4528   1              int idata num;
4529   1      
4530   1              for(num = 112;num > 0; num-=6)
4531   1              {
4532   2                      OSD_Window( 7, 0 + num*2, 488 - num*2 , 0 + num, 264 - num,
4533   2                               0, 0, 14, 251, 0, 1, 1);
4534   2              }
4535   1      
4536   1              RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);     
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 75  

4537   1              RTDOSDW(OSD_Reset);            // Clear OSD
4538   1              //Delay_Xms(128);
4539   1              OSD_Window( 7, 0 + num*2, 488 - num*2 , 0 + num, 264 - num,
4540   1                       0, 0, 14, 251, 0, 1, 0);
4541   1      
4542   1      
4543   1      #if (0)
              
                  // For OSD animetion
              
                  unsigned char ucTemp;
              
                  // First, clear debug information drawn by OSD_Show_Check()
                  OSD_Line(13, 2, 24, 0x00, 0);
                  OSD_Line(13, 2, 24, 0x00, 1);
              
                  // Close unused window
                  OSD_Window(0, 0, 0, 0, 0, 0, 0);
                  OSD_Window(1, 0, 0, 0, 0, 0, 0);
                  OSD_Window(2, 0, 0, 0, 0, 0, 0);
              
                  OSD_Line(11, 2, 24, 0x00, 0);
                  OSD_Line(11, 2, 24, 0x00, 1);
              
                  for (ucTemp = 0; ucTemp < 5; ucTemp ++)
                  {
                      OSD_Line(ucTemp, 2, 24, 0x00, 0);          // Attribute
                      OSD_Line(ucTemp, 2, 24, 0x00, 1);          // Display
                      OSD_Line(10 - ucTemp, 2, 24, 0x00, 0);     // Attribute
                      OSD_Line(10 - ucTemp, 2, 24, 0x00, 1);     // Display
                      OSD_Window(3, ucTemp + 1, 9 - ucTemp, 2, 25,
                          OSD_WINDOW_ENABLE | OSD_WINDOW_SHADOWING, COLOR_CYAN);  // Main OSD window
              
                      Wait_For_Event(EVENT_DEN_STOP);     // Wait for Frame End
                  }
              
                  OSD_Line(5, 2, 24, 0x00, 0);    // Attribute
                  OSD_Line(5, 2, 24, 0x00, 1);    // Display
              
                  for (ucTemp = 0; ucTemp < 12; ucTemp += 2)
                  {
                      OSD_Window(3, 5, 5, ucTemp + 3, 23 - ucTemp,
                          OSD_WINDOW_ENABLE | OSD_WINDOW_SHADOWING, COLOR_CYAN);
              
                      Wait_For_Event(EVENT_DEN_STOP);     // Wait for Frame End
                  }
              
              #endif
4585   1      }
4586          
4587          
4588          //Not modified yet
4589          void Show_Note(void)
4590          {
4591   1              RTDSetByte(HOSTCTRL_02, 0x40);  // Wake RTD up
4592   1              RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
4593   1              //RTDCodeW(OSD_Reset);
4594   1              OSD_Position(OSD_ENABLE);
4595   1      
4596   1      
4597   1              // When input format changed, OSD will be cleared by Detect_VGA_Mode() and Detect_AV_Mode()
4598   1              switch (stGUD1.INPUT_SOURCE & 0x07)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 76  

4599   1              {
4600   2                      case SOURCE_VGA:
4601   2      //#if (VIDEO_CHIP != VDC_NONE)
4602   2                              RTDOSDW(OSD_RGB);  // OSD RGB note
4603   2      //#endif
4604   2                              break;
4605   2                              
4606   2                      case SOURCE_DVI:
4607   2                              RTDOSDW(OSD_DVI);  // OSD DVI note
4608   2                              break;
4609   2                              
4610   2                      case SOURCE_AV:
4611   2                              RTDOSDW(OSD_AV);   // OSD AV note
4612   2                              break;
4613   2                              
4614   2                      case SOURCE_SV:
4615   2                              RTDOSDW(OSD_SV);   // OSD S-Video note
4616   2                              break;
4617   2                              
4618   2                      case SOURCE_YUV:
4619   2                              RTDOSDW(OSD_YUV);  // OSD YUV note
4620   2                              break;
4621   2                              
4622   2                      case SOURCE_TV:
4623   2                              RTDOSDW(OSD_TV);
4624   2                              break;
4625   2                              
4626   2              }
4627   1      
4628   1              
4629   1              RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
4630   1              //RTDCodeW(OSD_Enable);
4631   1              
4632   1      }
4633          
4634          
4635          //Not modified yet
4636          void Show_Hint(void)
4637          {
4638   1              if (MODE_NOSIGNAL == ucMode_Curr)
4639   1              {
4640   2                      RTDSetByte(HOSTCTRL_02, 0x40);  // Wake RTD up
4641   2                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
4642   2                      //RTDCodeW(OSD_Reset);
4643   2      
4644   2      #if(MCU_TYPE == MCU_WINBOND)
4645   2                      if ((SOURCE_VGA == (stGUD1.INPUT_SOURCE & 0x07)) && (VGA_ONLINE != bVGA_CONNECT))
4646   2      #else
                              if ((SOURCE_VGA == (stGUD1.INPUT_SOURCE & 0x07)) && (VGA_ONLINE != MCU_ReadVgaConnect()))
              #endif
4649   2                      {
4650   3                              RTDOSDW(OSD_HINT_TABLE[0][stGUD1.FUNCTION & 0x07]);
*** WARNING C214 IN LINE 4650 OF CODE\LCD_OSD.C: 'Argument': conversion: non-pointer to pointer
4651   3                      }
4652   2                      else
4653   2                      {
4654   3                              RTDOSDW(OSD_Clean_All);
4655   3                              RTDOSDW(OSD_HINT_TABLE[1][stGUD1.FUNCTION & 0x07]);
*** WARNING C214 IN LINE 4655 OF CODE\LCD_OSD.C: 'Argument': conversion: non-pointer to pointer
4656   3                      }
4657   2      
4658   2                      //RTDCodeW(OSD_Enable);
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 77  

4659   2                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
4660   2              }
4661   1              else if ((MODE_NOSUPPORT == ucMode_Curr) || bOverSpec)
4662   1              {
4663   2                      RTDSetByte(HOSTCTRL_02, 0x40);  // Wake RTD up
4664   2                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
4665   2                      //RTDCodeW(OSD_Reset);
4666   2      
4667   2                      RTDOSDW(OSD_HINT_TABLE[2][stGUD1.FUNCTION & 0x07]);
*** WARNING C214 IN LINE 4667 OF CODE\LCD_OSD.C: 'Argument': conversion: non-pointer to pointer
4668   2      
4669   2                      //RTDCodeW(OSD_Enable);
4670   2                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
4671   2              }
4672   1      }
4673          
4674          
4675          #if (SHOW_CHECK)
              void OSD_Show_Check(void)
              {
                      OSD_Line(17, 2, 38, 0, 1);                       // Attribute
              
                      //OSD_Show_Num(0x02, ucOSD_Page_Index);                       // Status
                      //OSD_Show_Num(0x02, ucDebug_Value0);                       // Status
                      OSD_Show_Num(0x02, ucDebug_Value0);                       // Status
                      
                      OSD_Show_Num(0x05, ucDebug_Value1);                    // ucMode_Curr
                      //OSD_Show_Num(0x05, stMUD.V_POSITION);                    // ucMode_Curr
              
                      OSD_Show_Num(0x08, ucDebug_Value2);
                  //OSD_Show_Num(0x08, ucMode_Curr);
              
                      RTDRead(LAST_LINE_H_2C, 1, N_INC);                  // Last Line Length
                      Data[15]    = Data[0] & 0xf8;
                      OSD_Show_Num(0x0b, Data[15] >> 6);
                      RTDRead(LAST_LINE_L_26, 1, N_INC);
                      OSD_Show_Num(0x0d, (Data[15] << 2) | (Data[0] >> 3));
              
              #if (RTDDEBUG)
                      OSD_Show_Num(0x10, (unsigned char)(usPE_Sum >> 8));
                      OSD_Show_Num(0x12, (unsigned char)usPE_Sum);
                      OSD_Show_Num(0x17, (unsigned char)ucPE_Level);
              #else
                      OSD_Show_Num(0x10, (unsigned char)(usHsync >> 8));  // usHsync
                      OSD_Show_Num(0x12, (unsigned char)usHsync);
                      OSD_Show_Num(0x15, (unsigned char)(usVsync >> 8));  // usVsync
                      OSD_Show_Num(0x17, (unsigned char)usVsync);   
              
              #endif
              
              }
              
              void OSD_Show_Num(unsigned char column, unsigned char no)
              {
                      unsigned int idata usStart_Addr;
                      unsigned char idata ucTemp;
              
                      usStart_Addr = FONT_SELECT_ADDRESS;
              
                      //The address of the first character Cn1 in Row n = FONT_SELECT_ADDRESS + Row0_length + Row1_length +...+
             -Row(n-1)_length
                      for(ucTemp = 1; ucTemp < 17+1; ucTemp ++)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 78  

                              usStart_Addr += Row_Info[0][ucTemp];
              
                      Data[0]     = 5;
                      Data[1]     = Y_INC;
                      Data[2]     = OSD_ROW_90;
                      Data[3] = (unsigned char)( (((usStart_Addr + column)  & 0x0fff) >> 8 ) | 0x50);
                      Data[4] = (unsigned char)( (usStart_Addr + column) & 0x00ff);
                      Data[5]     = 0;                        
                      RTDWrite(Data);
              
                      column  = no / 16;              // Bit 7~4
                      no      = no - (column * 16);   // Bit 3~0
              
                      column  = (9 < column) ? (column + (0x20 - 10)) : (column + _0_);
                      no      = (9 < no) ? (no + (0x20 - 10)) : (no + _0_);
                  
                      Data[0] = 5;
                      Data[1] = N_INC;
                      Data[2] = OSD_DATA_92;
                      Data[3] = column;
                      Data[4] = no;
                      Data[5] = 0;
                      RTDWrite(Data);
              }
              #endif
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 79  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com03FF (BEGIN)
0000         L?1024:
0000         L?1025:
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0002 E6                MOV     A,@R0
0003 14                DEC     A
0004 F9                MOV     R1,A
0005 13                RRC     A
0006 13                RRC     A
0007 543F              ANL     A,#03FH
0009 75F0AA            MOV     B,#0AAH
000C A4                MUL     AB
000D FF                MOV     R7,A
000E AEF0              MOV     R6,B
0010 2496              ADD     A,#096H
0012 FD                MOV     R5,A
0013 E4                CLR     A
0014 3E                ADDC    A,R6
0015 FC                MOV     R4,A
0016 EF                MOV     A,R7
0017 241A              ADD     A,#01AH
0019 FB                MOV     R3,A
001A EE                MOV     A,R6
001B 3401              ADDC    A,#01H
001D FA                MOV     R2,A
001E E9                MOV     A,R1
001F 5403              ANL     A,#03H
0021 75F021            MOV     B,#021H
0024 A4                MUL     AB
0025 FF                MOV     R7,A
0026 AEF0              MOV     R6,B
0028 2436              ADD     A,#036H
002A F582              MOV     DPL,A
002C E4                CLR     A
002D 3E                ADDC    A,R6
002E F583              MOV     DPH,A
0030 EF                MOV     A,R7
0031 2454              ADD     A,#054H
0033 F500        R     MOV     ?_OSD_Window?BYTE+08H,A
0035 E4                CLR     A
0036 3E                ADDC    A,R6
0037 F500        R     MOV     ?_OSD_Window?BYTE+07H,A
0039 858300      R     MOV     ?_OSD_Window?BYTE+05H,DPH
003C 858200      R     MOV     ?_OSD_Window?BYTE+06H,DPL
003F         L?1026:
003F 750001      R     MOV     ?_OSD_Window?BYTE+09H,#01H
0042 750001      R     MOV     ?_OSD_Window?BYTE+0AH,#01H
0045 75000E      R     MOV     ?_OSD_Window?BYTE+0BH,#0EH
0048 7500FB      R     MOV     ?_OSD_Window?BYTE+0CH,#0FBH
004B E4                CLR     A
004C         L?1027:
004C F500        R     MOV     ?_OSD_Window?BYTE+0DH,A
004E 750001      R     MOV     ?_OSD_Window?BYTE+0EH,#01H
0051 750019      R     MOV     ?_OSD_Window?BYTE+0FH,#019H
0054 22                RET     
0055         L?1028:
0055         L?1029:
0055 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0057         L?1030:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 80  

0057 E6                MOV     A,@R0
0058 FF                MOV     R7,A
0059 7E00              MOV     R6,#00H
005B 7C00              MOV     R4,#00H
005D         L?1031:
005D 7D21              MOV     R5,#021H
005F 120000      E     LCALL   ?C?IMUL
0062 EF                MOV     A,R7
0063 2415              ADD     A,#015H
0065 FD                MOV     R5,A
0066 E4                CLR     A
0067 3E                ADDC    A,R6
0068 FC                MOV     R4,A
0069 EF                MOV     A,R7
006A 2433              ADD     A,#033H
006C F500        R     MOV     ?_OSD_Window?BYTE+08H,A
006E E4                CLR     A
006F 3E                ADDC    A,R6
0070 F500        R     MOV     ?_OSD_Window?BYTE+07H,A
0072 8C00        R     MOV     ?_OSD_Window?BYTE+05H,R4
0074 8D00        R     MOV     ?_OSD_Window?BYTE+06H,R5
0076 E4                CLR     A
0077 F500        R     MOV     ?_OSD_Window?BYTE+09H,A
0079 F500        R     MOV     ?_OSD_Window?BYTE+0AH,A
007B         L?1032:
007B 75000E      R     MOV     ?_OSD_Window?BYTE+0BH,#0EH
007E 7500FB      R     MOV     ?_OSD_Window?BYTE+0CH,#0FBH
0081 F500        R     MOV     ?_OSD_Window?BYTE+0DH,A
0083 750001      R     MOV     ?_OSD_Window?BYTE+0EH,#01H
0086 F500        R     MOV     ?_OSD_Window?BYTE+0FH,A
0088         L?1033:
0088 7D96              MOV     R5,#096H
008A         L?1034:
008A 7B1A              MOV     R3,#01AH
008C 7A01              MOV     R2,#01H
008E FC                MOV     R4,A
008F 7F06              MOV     R7,#06H
0091 22                RET     
0092         L?1035:
0092 7800        E     MOV     R0,#LOW ucV_Min_Margin
0094 E6                MOV     A,@R0
0095 FB                MOV     R3,A
0096 7A00              MOV     R2,#00H
0098 C3                CLR     C
0099 E500        E     MOV     A,stMUD+01H
009B 9B                SUBB    A,R3
009C FF                MOV     R7,A
009D E4                CLR     A
009E 9A                SUBB    A,R2
009F FE                MOV     R6,A
00A0 7C00              MOV     R4,#00H
00A2 7D32              MOV     R5,#032H
00A4 120000      E     LCALL   ?C?IMUL
00A7 C3                CLR     C
00A8 7480              MOV     A,#080H
00AA 9B                SUBB    A,R3
00AB FD                MOV     R5,A
00AC E4                CLR     A
00AD 9A                SUBB    A,R2
00AE FC                MOV     R4,A
00AF 120000      E     LCALL   ?C?UIDIV
00B2 8F00        R     MOV     ?_OSD_Slider?BYTE+03H,R7
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 81  

00B4         L?1036:
00B4 750064      R     MOV     ?_OSD_Slider?BYTE+04H,#064H
00B7         L?1037:
00B7 750002      R     MOV     ?_OSD_Slider?BYTE+05H,#02H
00BA         L?1038:
00BA 75000E      R     MOV     ?_OSD_Slider?BYTE+06H,#0EH
00BD 7B11              MOV     R3,#011H
00BF 7D1F              MOV     R5,#01FH
00C1 22                RET     
00C2         L?1039:
00C2 EF                MOV     A,R7
00C3 25E0              ADD     A,ACC
00C5 FD                MOV     R5,A
00C6 EE                MOV     A,R6
00C7 33                RLC     A
00C8 FC                MOV     R4,A
00C9 C3                CLR     C
00CA 74E8              MOV     A,#0E8H
00CC 9D                SUBB    A,R5
00CD FB                MOV     R3,A
00CE 7401              MOV     A,#01H
00D0 9C                SUBB    A,R4
00D1 FA                MOV     R2,A
00D2 18                DEC     R0
00D3         L?1040:
00D3 E6                MOV     A,@R0
00D4 FE                MOV     R6,A
00D5 08                INC     R0
00D6 E6                MOV     A,@R0
00D7 FF                MOV     R7,A
00D8 8E00        R     MOV     ?_OSD_Window?BYTE+05H,R6
00DA F500        R     MOV     ?_OSD_Window?BYTE+06H,A
00DC C3                CLR     C
00DD 7408              MOV     A,#08H
00DF 9F                SUBB    A,R7
00E0 F500        R     MOV     ?_OSD_Window?BYTE+08H,A
00E2 7401              MOV     A,#01H
00E4 9E                SUBB    A,R6
00E5 F500        R     MOV     ?_OSD_Window?BYTE+07H,A
00E7         L?1041:
00E7 E4                CLR     A
00E8         L?1042:
00E8 F500        R     MOV     ?_OSD_Window?BYTE+09H,A
00EA F500        R     MOV     ?_OSD_Window?BYTE+0AH,A
00EC 75000E      R     MOV     ?_OSD_Window?BYTE+0BH,#0EH
00EF 7500FB      R     MOV     ?_OSD_Window?BYTE+0CH,#0FBH
00F2 F500        R     MOV     ?_OSD_Window?BYTE+0DH,A
00F4 750001      R     MOV     ?_OSD_Window?BYTE+0EH,#01H
00F7 22                RET     
00F8         L?1043:
00F8         L?1044:
00F8 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD2+05H
00FB         L?1045:
00FB 7500FF      R     MOV     ?_OSD_Slider?BYTE+04H,#0FFH
00FE 750002      R     MOV     ?_OSD_Slider?BYTE+05H,#02H
0101         L?1046:
0101 75000E      R     MOV     ?_OSD_Slider?BYTE+06H,#0EH
0104 7B11              MOV     R3,#011H
0106 7D24              MOV     R5,#024H
0108 22                RET     
0109         L?1048:
0109 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 82  

010B 7602              MOV     @R0,#02H
010D 7402              MOV     A,#02H
010F         L?1049:
010F 75F007            MOV     B,#07H
0112 A4                MUL     AB
0113 241D              ADD     A,#01DH
0115         L?1050:
0115 FD                MOV     R5,A
0116 750020      R     MOV     ?_OSD_Line?BYTE+03H,#020H
0119 750002      R     MOV     ?_OSD_Line?BYTE+04H,#02H
011C 22                RET     
011D         L?1051:
011D 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
011F         L?1052:
011F E6                MOV     A,@R0
0120 FF                MOV     R7,A
0121         L?1053:
0121 7E00              MOV     R6,#00H
0123 7C00              MOV     R4,#00H
0125 7D21              MOV     R5,#021H
0127 120000      E     LCALL   ?C?IMUL
012A EF                MOV     A,R7
012B 2415              ADD     A,#015H
012D FD                MOV     R5,A
012E E4                CLR     A
012F 3E                ADDC    A,R6
0130 FC                MOV     R4,A
0131 EF                MOV     A,R7
0132 2433              ADD     A,#033H
0134 F500        R     MOV     ?_OSD_Window?BYTE+08H,A
0136 E4                CLR     A
0137 3E                ADDC    A,R6
0138 F500        R     MOV     ?_OSD_Window?BYTE+07H,A
013A 8C00        R     MOV     ?_OSD_Window?BYTE+05H,R4
013C 8D00        R     MOV     ?_OSD_Window?BYTE+06H,R5
013E 22                RET     
013F         L?1055:
013F 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0141 7601              MOV     @R0,#01H
0143 E4                CLR     A
0144         L?1056:
0144 08                INC     R0
0145 F6                MOV     @R0,A
0146         L?1057:
0146 F500        R     MOV     ?_OSD_Window?BYTE+05H,A
0148 750036      R     MOV     ?_OSD_Window?BYTE+06H,#036H
014B F500        R     MOV     ?_OSD_Window?BYTE+07H,A
014D 750054      R     MOV     ?_OSD_Window?BYTE+08H,#054H
0150         L?1058:
0150 750001      R     MOV     ?_OSD_Window?BYTE+09H,#01H
0153 750001      R     MOV     ?_OSD_Window?BYTE+0AH,#01H
0156         L?1059:
0156 75000E      R     MOV     ?_OSD_Window?BYTE+0BH,#0EH
0159 7500FB      R     MOV     ?_OSD_Window?BYTE+0CH,#0FBH
015C 22                RET     
015D         L?1060:
015D 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
015F         L?1061:
015F E6                MOV     A,@R0
0160 75F007            MOV     B,#07H
0163 A4                MUL     AB
0164 241D              ADD     A,#01DH
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 83  

0166         L?1062:
0166 FD                MOV     R5,A
0167         L?1063:
0167 750040      R     MOV     ?_OSD_Line?BYTE+03H,#040H
016A 750002      R     MOV     ?_OSD_Line?BYTE+04H,#02H
016D 22                RET     
016E         L?1064:
016E 7800        E     MOV     R0,#LOW ucV_Min_Margin
0170 E6                MOV     A,@R0
0171 FB                MOV     R3,A
0172 7A00              MOV     R2,#00H
0174 C3                CLR     C
0175 E500        E     MOV     A,stMUD+01H
0177 9B                SUBB    A,R3
0178 FF                MOV     R7,A
0179 E4                CLR     A
017A 9A                SUBB    A,R2
017B FE                MOV     R6,A
017C 7C00              MOV     R4,#00H
017E 7D32              MOV     R5,#032H
0180 120000      E     LCALL   ?C?IMUL
0183 C3                CLR     C
0184 7480              MOV     A,#080H
0186 9B                SUBB    A,R3
0187 FD                MOV     R5,A
0188 E4                CLR     A
0189 9A                SUBB    A,R2
018A FC                MOV     R4,A
018B 120000      E     LCALL   ?C?UIDIV
018E 8F00        R     MOV     ?_OSD_Slider?BYTE+03H,R7
0190         L?1065:
0190 750064      R     MOV     ?_OSD_Slider?BYTE+04H,#064H
0193 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
0196 22                RET     
0197         L?1067:
0197         L?1068:
0197 750005      E     MOV     Data,#05H
019A         L?1069:
019A E4                CLR     A
019B F500        E     MOV     Data+01H,A
019D 750090      E     MOV     Data+02H,#090H
01A0 22                RET     
01A1         L?1070:
01A1 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01A3 E6                MOV     A,@R0
01A4 14                DEC     A
01A5 F9                MOV     R1,A
01A6 13                RRC     A
01A7 13                RRC     A
01A8 543F              ANL     A,#03FH
01AA 75F0AA            MOV     B,#0AAH
01AD A4                MUL     AB
01AE FF                MOV     R7,A
01AF AEF0              MOV     R6,B
01B1 2496              ADD     A,#096H
01B3 FD                MOV     R5,A
01B4 E4                CLR     A
01B5 3E                ADDC    A,R6
01B6 FC                MOV     R4,A
01B7 EF                MOV     A,R7
01B8 241A              ADD     A,#01AH
01BA FB                MOV     R3,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 84  

01BB EE                MOV     A,R6
01BC 3401              ADDC    A,#01H
01BE FA                MOV     R2,A
01BF E9                MOV     A,R1
01C0 5403              ANL     A,#03H
01C2 75F021            MOV     B,#021H
01C5 A4                MUL     AB
01C6 FF                MOV     R7,A
01C7 AEF0              MOV     R6,B
01C9 2436              ADD     A,#036H
01CB F582              MOV     DPL,A
01CD E4                CLR     A
01CE 3E                ADDC    A,R6
01CF F583              MOV     DPH,A
01D1 EF                MOV     A,R7
01D2 2454              ADD     A,#054H
01D4 F500        R     MOV     ?_OSD_Window?BYTE+08H,A
01D6 E4                CLR     A
01D7 3E                ADDC    A,R6
01D8 F500        R     MOV     ?_OSD_Window?BYTE+07H,A
01DA 858300      R     MOV     ?_OSD_Window?BYTE+05H,DPH
01DD 858200      R     MOV     ?_OSD_Window?BYTE+06H,DPL
01E0 22                RET     
01E1         L?1073:
01E1 25E0              ADD     A,ACC
01E3 25E0              ADD     A,ACC
01E5 04                INC     A
01E6 FE                MOV     R6,A
01E7 C4                SWAP    A
01E8 54F0              ANL     A,#0F0H
01EA 4F                ORL     A,R7
01EB F500        E     MOV     Data+03H,A
01ED 08                INC     R0
01EE E6                MOV     A,@R0
01EF 2D                ADD     A,R5
01F0         L?1074:
01F0 F500        E     MOV     Data+04H,A
01F2 E4                CLR     A
01F3 F500        E     MOV     Data+05H,A
01F5 7F00        E     MOV     R7,#LOW Data
01F7 22                RET     
01F8         L?1078:
01F8         L?1079:
01F8 7800        E     MOV     R0,#LOW ucH_Max_Margin
01FA E6                MOV     A,@R0
01FB FF                MOV     R7,A
01FC C3                CLR     C
01FD 9500        E     SUBB    A,stMUD
01FF F500        R     MOV     ?_OSD_Slider?BYTE+03H,A
0201 C3                CLR     C
0202 EF                MOV     A,R7
0203 7800        E     MOV     R0,#LOW ucH_Min_Margin
0205 96                SUBB    A,@R0
0206 F500        R     MOV     ?_OSD_Slider?BYTE+04H,A
0208 22                RET     
0209         L?1081:
0209         L?1082:
0209 750006      E     MOV     Data,#06H
020C         L?1083:
020C 750001      E     MOV     Data+01H,#01H
020F 750092      E     MOV     Data+02H,#092H
0212 22                RET     
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 85  

0213         L?1086:
0213         L?1087:
0213 C3                CLR     C
0214 E500        E     MOV     A,stGUD1+04H
0216 9500        E     SUBB    A,Data
0218 F500        R     MOV     ?_OSD_Slider?BYTE+03H,A
021A C3                CLR     C
021B E500        E     MOV     A,Data+01H
021D 9500        E     SUBB    A,Data
021F F500        R     MOV     ?_OSD_Slider?BYTE+04H,A
0221 22                RET     
0222         L?1088:
0222         L?1089:
0222 C3                CLR     C
0223 E500        E     MOV     A,stGUD1+05H
0225 9500        E     SUBB    A,Data+02H
0227 F500        R     MOV     ?_OSD_Slider?BYTE+03H,A
0229 C3                CLR     C
022A E500        E     MOV     A,Data+03H
022C 9500        E     SUBB    A,Data+02H
022E F500        R     MOV     ?_OSD_Slider?BYTE+04H,A
0230 22                RET     
0231         L?1090:
0231 E9                MOV     A,R1
0232 2401              ADD     A,#01H
0234 FF                MOV     R7,A
0235 E4                CLR     A
0236 33                RLC     A
0237 FE                MOV     R6,A
0238 E6                MOV     A,@R0
0239 FC                MOV     R4,A
023A         L?1091:
023A C3                CLR     C
023B 9F                SUBB    A,R7
023C EE                MOV     A,R6
023D         L?1092:
023D 6480              XRL     A,#080H
023F F8                MOV     R0,A
0240 7480              MOV     A,#080H
0242 98                SUBB    A,R0
0243 22                RET     
0244         L?1093:
0244         L?1094:
0244 E500        E     MOV     A,stMUD+03H
0246 547C              ANL     A,#07CH
0248 13                RRC     A
0249 13                RRC     A
024A 543F              ANL     A,#03FH
024C F500        R     MOV     ?_OSD_Slider?BYTE+03H,A
024E 75001F      R     MOV     ?_OSD_Slider?BYTE+04H,#01FH
0251 22                RET     
0252         L?1095:
0252         L?1096:
0252 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD2+05H
0255 7500FF      R     MOV     ?_OSD_Slider?BYTE+04H,#0FFH
0258 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
025B 22                RET     
025C         L?1097:
025C E500        R     MOV     A,range
025E A4                MUL     AB
025F FD                MOV     R5,A
0260 ACF0              MOV     R4,B
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 86  

0262 E500        R     MOV     A,bound+01H
0264 C4                SWAP    A
0265 F8                MOV     R0,A
0266 540F              ANL     A,#0FH
0268 C8                XCH     A,R0
0269 68                XRL     A,R0
026A FF                MOV     R7,A
026B E500        R     MOV     A,bound
026D C4                SWAP    A
026E 54F0              ANL     A,#0F0H
0270 48                ORL     A,R0
0271 FE                MOV     R6,A
0272 120000      E     LCALL   ?C?UIDIV
0275 8F00        R     MOV     color,R7
0277 E4                CLR     A
0278 F500        R     MOV     bound,A
027A F500        R     MOV     bound+01H,A
027C 22                RET     
027D         L?1098:
027D         L?1099:
027D F583              MOV     DPH,A
027F         L?1100:
027F E4                CLR     A
0280 93                MOVC    A,@A+DPTR
0281 FE                MOV     R6,A
0282 7401              MOV     A,#01H
0284 93                MOVC    A,@A+DPTR
0285 FF                MOV     R7,A
0286 22                RET     
0287         L?1101:
0287         L?1102:
0287 740F              MOV     A,#0FH
0289 D3                SETB    C
028A 7800        E     MOV     R0,#LOW ucKey_Issued
028C 96                SUBB    A,@R0
028D 22                RET     
028E         L?1103:
028E         L?1104:
028E 750000      R     MOV     ?_OSD_Window?BYTE+05H,#00H
0291 750036      R     MOV     ?_OSD_Window?BYTE+06H,#036H
0294 750000      R     MOV     ?_OSD_Window?BYTE+07H,#00H
0297 750054      R     MOV     ?_OSD_Window?BYTE+08H,#054H
029A 22                RET     
029B         L?1107:
029B 900000      E     MOV     DPTR,#Row_Info
029E 93                MOVC    A,@A+DPTR
029F         L?1108:
029F 26                ADD     A,@R0
02A0 F6                MOV     @R0,A
02A1 18                DEC     R0
02A2 E4                CLR     A
02A3 36                ADDC    A,@R0
02A4 F6                MOV     @R0,A
02A5 22                RET     
02A6         L?1109:
02A6         L?1110:
02A6 E500        E     MOV     A,stGUD1
02A8 5407              ANL     A,#07H
02AA 75F002            MOV     B,#02H
02AD A4                MUL     AB
02AE 22                RET     
02AF         L?1111:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 87  

02AF         L?1112:
02AF 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
02B1 E6                MOV     A,@R0
02B2         L?1113:
02B2 75F003            MOV     B,#03H
02B5 A4                MUL     AB
02B6 2421              ADD     A,#021H
02B8 22                RET     
02B9         L?1114:
02B9 A907              MOV     R1,AR7
02BB         L?1115:
02BB 7600              MOV     @R0,#00H
02BD 08                INC     R0
02BE 7613              MOV     @R0,#013H
02C0 08                INC     R0
02C1 7601              MOV     @R0,#01H
02C3 22                RET     
02C4         L?1117:
02C4         L?1118:
02C4 E4                CLR     A
02C5 FB                MOV     R3,A
02C6 7DFE              MOV     R5,#0FEH
02C8 7F6D              MOV     R7,#06DH
02CA 22                RET     
02CB         L?1119:
02CB         L?1120:
02CB C3                CLR     C
02CC 741F              MOV     A,#01FH
02CE 9500        E     SUBB    A,stGUD3
02D0 F500        R     MOV     ?_OSD_Slider?BYTE+03H,A
02D2 75001F      R     MOV     ?_OSD_Slider?BYTE+04H,#01FH
02D5 22                RET     
02D6         L?1121:
02D6         L?1122:
02D6 750013      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#013H
02D9 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
02DC 22                RET     
02DD         L?1123:
02DD         L?1124:
02DD 750010      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#010H
02E0 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
02E3 22                RET     
02E4         L?1125:
02E4 E9                MOV     A,R1
02E5 93                MOVC    A,@A+DPTR
02E6 FF                MOV     R7,A
02E7 FB                MOV     R3,A
02E8 ED                MOV     A,R5
02E9 2401              ADD     A,#01H
02EB F582              MOV     DPL,A
02ED E4                CLR     A
02EE 33                RLC     A
02EF F583              MOV     DPH,A
02F1 D3                SETB    C
02F2 E582              MOV     A,DPL
02F4 9B                SUBB    A,R3
02F5 7480              MOV     A,#080H
02F7 F8                MOV     R0,A
02F8 6583              XRL     A,DPH
02FA 98                SUBB    A,R0
02FB 22                RET     
02FC         L?1126:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 88  

02FC 26                ADD     A,@R0
02FD E4                CLR     A
02FE 18                DEC     R0
02FF         L?1127:
02FF 36                ADDC    A,@R0
0300         L?1128:
0300 540F              ANL     A,#0FH
0302 4450              ORL     A,#050H
0304 F500        E     MOV     Data+03H,A
0306 08                INC     R0
0307 E6                MOV     A,@R0
0308 22                RET     
0309         L?1129:
0309         L?1130:
0309 7B88              MOV     R3,#088H
030B FA                MOV     R2,A
030C 7D0A              MOV     R5,#0AH
030E FC                MOV     R4,A
030F 7F05              MOV     R7,#05H
0311 22                RET     
0312         L?1131:
0312         L?1132:
0312 E500        E     MOV     A,stGUD1+01H
0314 54E0              ANL     A,#0E0H
0316 C4                SWAP    A
0317 13                RRC     A
0318 5407              ANL     A,#07H
031A F500        R     MOV     ?_OSD_Slider?BYTE+03H,A
031C 750007      R     MOV     ?_OSD_Slider?BYTE+04H,#07H
031F 22                RET     
0320         L?1133:
0320         L?1134:
0320 750013      R     MOV     ?_ShowValue?BYTE+03H,#013H
0323         L?1135:
0323 AB00        E     MOV     R3,stGUD0
0325 7D0C              MOV     R5,#0CH
0327 7F05              MOV     R7,#05H
0329 22                RET     
032A         L?1136:
032A         L?1137:
032A 750013      R     MOV     ?_ShowValue?BYTE+03H,#013H
032D         L?1138:
032D AB00        E     MOV     R3,stGUD0+01H
032F 7D0C              MOV     R5,#0CH
0331 7F06              MOV     R7,#06H
0333 22                RET     
0334         L?1139:
0334         L?1140:
0334 750023      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#023H
0337 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
033A 22                RET     
033B         L?1142:
033B         L?1143:
033B 7B01              MOV     R3,#01H
033D 7DFE              MOV     R5,#0FEH
033F 7F6D              MOV     R7,#06DH
0341 22                RET     
0342         L?1144:
0342         L?1145:
0342 E4                CLR     A
0343 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0345 F6                MOV     @R0,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 89  

0346 08                INC     R0
0347 F6                MOV     @R0,A
0348 22                RET     
0349         L?1146:
0349 758300            MOV     DPH,#00H
034C 2B                ADD     A,R3
034D FB                MOV     R3,A
034E E583              MOV     A,DPH
0350 3A                ADDC    A,R2
0351 FA                MOV     R2,A
0352 D3                SETB    C
0353 EB                MOV     A,R3
0354 9F                SUBB    A,R7
0355 7480              MOV     A,#080H
0357 F8                MOV     R0,A
0358 6A                XRL     A,R2
0359 98                SUBB    A,R0
035A 22                RET     
035B         L?1147:
035B         L?1148:
035B 75F003            MOV     B,#03H
035E A4                MUL     AB
035F C583              XCH     A,DPH
0361 25F0              ADD     A,B
0363 C583              XCH     A,DPH
0365 22                RET     
0366         L?1149:
0366 E6                MOV     A,@R0
0367 25E0              ADD     A,ACC
0369 FD                MOV     R5,A
036A 18                DEC     R0
036B E6                MOV     A,@R0
036C 33                RLC     A
036D FC                MOV     R4,A
036E C3                CLR     C
036F 74E8              MOV     A,#0E8H
0371 9D                SUBB    A,R5
0372 FB                MOV     R3,A
0373 7401              MOV     A,#01H
0375 9C                SUBB    A,R4
0376 FA                MOV     R2,A
0377 22                RET     
0378         L?1151:
0378         L?1152:
0378 75F00A            MOV     B,#0AH
037B A4                MUL     AB
037C FF                MOV     R7,A
037D C3                CLR     C
037E 22                RET     
037F         L?1153:
037F         L?1154:
037F 750002      R     MOV     ?_OSD_Slider?BYTE+06H,#02H
0382 7B11              MOV     R3,#011H
0384 7D1F              MOV     R5,#01FH
0386 7F05              MOV     R7,#05H
0388 22                RET     
0389         L?1155:
0389         L?1156:
0389 75000C      R     MOV     ?_OSD_Slider?BYTE+06H,#0CH
038C 7B11              MOV     R3,#011H
038E 7D1F              MOV     R5,#01FH
0390 7F07              MOV     R7,#07H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 90  

0392 22                RET     
0393         L?1157:
0393         L?1158:
0393 750003      R     MOV     ?_OSD_Slider?BYTE+06H,#03H
0396 7B11              MOV     R3,#011H
0398 7D1F              MOV     R5,#01FH
039A 7F09              MOV     R7,#09H
039C 22                RET     
039D         L?1159:
039D 750013      R     MOV     ?_ShowValue?BYTE+03H,#013H
03A0         L?1160:
03A0 AB00        E     MOV     R3,stGUD3+04H
03A2 7D0C              MOV     R5,#0CH
03A4 7F07              MOV     R7,#07H
03A6 22                RET     
03A7         L?1163:
03A7 ED                MOV     A,R5
03A8         L?1164:
03A8 26                ADD     A,@R0
03A9 E4                CLR     A
03AA 18                DEC     R0
03AB 36                ADDC    A,@R0
03AC 540F              ANL     A,#0FH
03AE 22                RET     
03AF         L?1165:
03AF E500        R     MOV     A,range
03B1 A4                MUL     AB
03B2 FF                MOV     R7,A
03B3 AEF0              MOV     R6,B
03B5 C3                CLR     C
03B6 E500        R     MOV     A,bound+01H
03B8 9F                SUBB    A,R7
03B9 E500        R     MOV     A,bound
03BB 9E                SUBB    A,R6
03BC 22                RET     
03BD         L?1167:
03BD D3                SETB    C
03BE         L?1168:
03BE EF                MOV     A,R7
03BF 9500        E     SUBB    A,stGUD1+04H
03C1 EE                MOV     A,R6
03C2 9500        E     SUBB    A,stGUD1+03H
03C4 22                RET     
03C5         L?1170:
03C5 7500C1      E     MOV     Data+03H,#0C1H
03C8         L?1171:
03C8 E500        R     MOV     A,win_no
03CA 25E0              ADD     A,ACC
03CC 25E0              ADD     A,ACC
03CE 22                RET     
03CF         L?1172:
03CF         L?1173:
03CF 75008C      R     MOV     ?_OSD_Line?BYTE+03H,#08CH
03D2 E4                CLR     A
03D3 F500        R     MOV     ?_OSD_Line?BYTE+04H,A
03D5 22                RET     
03D6         L?1174:
03D6 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
03D8 E6                MOV     A,@R0
03D9         L?1175:
03D9 75F005            MOV     B,#05H
03DC A4                MUL     AB
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 91  

03DD 241F              ADD     A,#01FH
03DF 22                RET     
03E0         L?1176:
03E0         L?1177:
03E0 E500        E     MOV     A,stMUD+02H
03E2 24B2              ADD     A,#0B2H
03E4 F500        R     MOV     ?_OSD_Slider?BYTE+03H,A
03E6 22                RET     
03E7         L?1178:
03E7 7B00              MOV     R3,#00H
03E9 AD00        R     MOV     R5,Key
03EB 020000      R     LJMP    _Bright_Contrast_Adjust
03EE         L?1181:
03EE FF                MOV     R7,A
03EF E500        E     MOV     A,Data+02H
03F1 34FE              ADDC    A,#0FEH
03F3 FE                MOV     R6,A
03F4 EF                MOV     A,R7
03F5 7802              MOV     R0,#02H
03F7 22                RET     
03F8         L?1182:
03F8         L?1183:
03F8 2401              ADD     A,#01H
03FA FF                MOV     R7,A
03FB E4                CLR     A
03FC 33                RLC     A
03FD FE                MOV     R6,A
03FE 22                RET     
03FF         L?1184:
03FF         L?1185:
03FF E4                CLR     A
0400 F500        R     MOV     ?_OSD_Line?BYTE+03H,A
0402 750001      R     MOV     ?_OSD_Line?BYTE+04H,#01H
0405 22                RET     
0406         L?1186:
0406 7C00              MOV     R4,#00H
0408 7D64              MOV     R5,#064H
040A 120000      E     LCALL   ?C?UIDIV
040D 8F00        R     MOV     ucTemp,R7
040F 22                RET     
0410         L?1187:
0410 7B00              MOV     R3,#00H
0412 7A00        E     MOV     R2,#HIGH stGUD0+01H
0414 7900        E     MOV     R1,#LOW stGUD0+01H
0416 020000      R     LJMP    _Bright_Contrast_Adjust
0419         L?1188:
0419         L?1189:
0419 7B0E              MOV     R3,#0EH
041B 7D24              MOV     R5,#024H
041D 7F09              MOV     R7,#09H
041F 22                RET     
0420         L?1190:
0420 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+02H
0423 750064      R     MOV     ?_OSD_Slider?BYTE+04H,#064H
0426 750002      R     MOV     ?_OSD_Slider?BYTE+05H,#02H
0429 22                RET     
042A         L?1191:
042A 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+03H
042D 750064      R     MOV     ?_OSD_Slider?BYTE+04H,#064H
0430 75000C      R     MOV     ?_OSD_Slider?BYTE+05H,#0CH
0433 22                RET     
0434         L?1192:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 92  

0434 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+04H
0437 750064      R     MOV     ?_OSD_Slider?BYTE+04H,#064H
043A 750003      R     MOV     ?_OSD_Slider?BYTE+05H,#03H
043D 22                RET     
043E         L?1193:
043E         L?1194:
043E 75F008            MOV     B,#08H
0441 A4                MUL     AB
0442 241C              ADD     A,#01CH
0444 22                RET     
             ; FUNCTION Com03FF (END)

             ; FUNCTION _GetNextPageIdx (BEGIN)
                                           ; SOURCE LINE # 29
;---- Variable 'ucPageCurr' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
0002 E500        E     MOV     A,stGUD1+01H
0004 5407              ANL     A,#07H
0006 14                DEC     A
0007 601A              JZ      ?C0006
0009 14                DEC     A
000A 6024              JZ      ?C0009
000C 14                DEC     A
000D 602E              JZ      ?C0012
000F 14                DEC     A
0010 6038              JZ      ?C0015
0012 2404              ADD     A,#04H
0014 7041              JNZ     ?C0018
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
0016         ?C0002:
                                           ; SOURCE LINE # 34
0016 7405              MOV     A,#05H
0018 D3                SETB    C
0019 9E                SUBB    A,R6
001A 5003              JNC     ?C0003
001C 7F01              MOV     R7,#01H
001E 22                RET     
001F         ?C0003:
001F EE                MOV     A,R6
0020 04                INC     A
0021 FF                MOV     R7,A
0022         ?C0004:
0022 22                RET     
                                           ; SOURCE LINE # 35
0023         ?C0006:
                                           ; SOURCE LINE # 36
0023 7405              MOV     A,#05H
0025 D3                SETB    C
0026 9E                SUBB    A,R6
0027 5003              JNC     ?C0007
0029 7F01              MOV     R7,#01H
002B 22                RET     
002C         ?C0007:
002C EE                MOV     A,R6
002D 04                INC     A
002E FF                MOV     R7,A
002F         ?C0008:
002F 22                RET     
                                           ; SOURCE LINE # 37
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 93  

0030         ?C0009:
                                           ; SOURCE LINE # 38
0030 7405              MOV     A,#05H
0032 D3                SETB    C
0033 9E                SUBB    A,R6
0034 5003              JNC     ?C0010
0036 7F01              MOV     R7,#01H
0038 22                RET     
0039         ?C0010:
0039 EE                MOV     A,R6
003A 04                INC     A
003B FF                MOV     R7,A
003C         ?C0011:
003C 22                RET     
                                           ; SOURCE LINE # 39
003D         ?C0012:
                                           ; SOURCE LINE # 40
003D 7405              MOV     A,#05H
003F D3                SETB    C
0040 9E                SUBB    A,R6
0041 5003              JNC     ?C0013
0043 7F01              MOV     R7,#01H
0045 22                RET     
0046         ?C0013:
0046 EE                MOV     A,R6
0047 04                INC     A
0048 FF                MOV     R7,A
0049         ?C0014:
0049 22                RET     
                                           ; SOURCE LINE # 41
004A         ?C0015:
                                           ; SOURCE LINE # 42
004A 7405              MOV     A,#05H
004C D3                SETB    C
004D 9E                SUBB    A,R6
004E 5003              JNC     ?C0016
0050 7F01              MOV     R7,#01H
0052 22                RET     
0053         ?C0016:
0053 EE                MOV     A,R6
0054 04                INC     A
0055 FF                MOV     R7,A
0056         ?C0017:
0056 22                RET     
                                           ; SOURCE LINE # 43
0057         ?C0018:
                                           ; SOURCE LINE # 44
0057 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 47
0059         ?C0005:
0059 22                RET     
             ; FUNCTION _GetNextPageIdx (END)

             ; FUNCTION _GetPrevPageIdx (BEGIN)
                                           ; SOURCE LINE # 49
;---- Variable 'ucPageCurr' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0002 E500        E     MOV     A,stGUD1+01H
0004 5407              ANL     A,#07H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 94  

0006 14                DEC     A
0007 601A              JZ      ?C0024
0009 14                DEC     A
000A 6024              JZ      ?C0027
000C 14                DEC     A
000D 602E              JZ      ?C0030
000F 14                DEC     A
0010 6038              JZ      ?C0033
0012 2404              ADD     A,#04H
0014 7041              JNZ     ?C0036
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
0016         ?C0020:
                                           ; SOURCE LINE # 54
0016 7401              MOV     A,#01H
0018 C3                CLR     C
0019 9E                SUBB    A,R6
001A 4003              JC      ?C0021
001C 7F05              MOV     R7,#05H
001E 22                RET     
001F         ?C0021:
001F EE                MOV     A,R6
0020 14                DEC     A
0021 FF                MOV     R7,A
0022         ?C0022:
0022 22                RET     
                                           ; SOURCE LINE # 55
0023         ?C0024:
                                           ; SOURCE LINE # 56
0023 7401              MOV     A,#01H
0025 C3                CLR     C
0026 9E                SUBB    A,R6
0027 4003              JC      ?C0025
0029 7F05              MOV     R7,#05H
002B 22                RET     
002C         ?C0025:
002C EE                MOV     A,R6
002D 14                DEC     A
002E FF                MOV     R7,A
002F         ?C0026:
002F 22                RET     
                                           ; SOURCE LINE # 57
0030         ?C0027:
                                           ; SOURCE LINE # 58
0030 7401              MOV     A,#01H
0032 C3                CLR     C
0033 9E                SUBB    A,R6
0034 4003              JC      ?C0028
0036 7F05              MOV     R7,#05H
0038 22                RET     
0039         ?C0028:
0039 EE                MOV     A,R6
003A 14                DEC     A
003B FF                MOV     R7,A
003C         ?C0029:
003C 22                RET     
                                           ; SOURCE LINE # 59
003D         ?C0030:
                                           ; SOURCE LINE # 60
003D 7401              MOV     A,#01H
003F C3                CLR     C
0040 9E                SUBB    A,R6
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 95  

0041 4003              JC      ?C0031
0043 7F05              MOV     R7,#05H
0045 22                RET     
0046         ?C0031:
0046 EE                MOV     A,R6
0047 14                DEC     A
0048 FF                MOV     R7,A
0049         ?C0032:
0049 22                RET     
                                           ; SOURCE LINE # 61
004A         ?C0033:
                                           ; SOURCE LINE # 62
004A 7401              MOV     A,#01H
004C C3                CLR     C
004D 9E                SUBB    A,R6
004E 4003              JC      ?C0034
0050 7F05              MOV     R7,#05H
0052 22                RET     
0053         ?C0034:
0053 EE                MOV     A,R6
0054 14                DEC     A
0055 FF                MOV     R7,A
0056         ?C0035:
0056 22                RET     
                                           ; SOURCE LINE # 63
0057         ?C0036:
                                           ; SOURCE LINE # 64
0057 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 67
0059         ?C0023:
0059 22                RET     
             ; FUNCTION _GetPrevPageIdx (END)

             ; FUNCTION _OSD_Window (BEGIN)
                                           ; SOURCE LINE # 104
0000 8F00        R     MOV     win_no,R7
0002 8C00        R     MOV     row_start,R4
0004 8D00        R     MOV     row_start+01H,R5
0006 8A00        R     MOV     row_end,R2
0008 8B00        R     MOV     row_end+01H,R3
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
000A E500        R     MOV     A,win_no
000C D3                SETB    C
000D 9407              SUBB    A,#07H
000F 4003              JC      $ + 5H
0011 020000      R     LJMP    ?C0038
0014         ?C0037:
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
0014 120000      R     LCALL   L?1067
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
0017 120000      R     LCALL   L?1170
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
001A 120000      R     LCALL   L?1074
001D 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 96  

                                           ; SOURCE LINE # 120
0020 120000      R     LCALL   L?1081
                                           ; SOURCE LINE # 121
0023 E500        R     MOV     A,width
0025 5407              ANL     A,#07H
0027 33                RLC     A
0028 33                RLC     A
0029 33                RLC     A
002A 54F8              ANL     A,#0F8H
002C FF                MOV     R7,A
002D E500        R     MOV     A,height
002F 5407              ANL     A,#07H
0031 4F                ORL     A,R7
0032 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 122
0034 850000      E     MOV     Data+04H,color_sb
                                           ; SOURCE LINE # 123
0037 850000      E     MOV     Data+05H,gradient
                                           ; SOURCE LINE # 124
003A E4                CLR     A
003B F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 125
003D 7F00        E     MOV     R7,#LOW Data
003F 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
0042 120000      R     LCALL   L?1067
                                           ; SOURCE LINE # 130
0045 7500E1      E     MOV     Data+03H,#0E1H
                                           ; SOURCE LINE # 131
0048 120000      R     LCALL   L?1171
004B 04                INC     A
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
004C 120000      R     LCALL   L?1074
004F 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 134
0052 750009      E     MOV     Data,#09H
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
0055 120000      R     LCALL   L?1083
                                           ; SOURCE LINE # 137
0058 7E00              MOV     R6,#00H
005A E500        R     MOV     A,row_start+01H
005C 543F              ANL     A,#03FH
005E 7802              MOV     R0,#02H
0060         ?C0881:
0060 C3                CLR     C
0061 33                RLC     A
0062 CE                XCH     A,R6
0063 33                RLC     A
0064 CE                XCH     A,R6
0065 D8F9              DJNZ    R0,?C0881
0067 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 139
0069 E500        R     MOV     A,row_start
006B 5407              ANL     A,#07H
006D FE                MOV     R6,A
006E E500        R     MOV     A,row_start+01H
0070 54C0              ANL     A,#0C0H
0072 7806              MOV     R0,#06H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 97  

0074         ?C0882:
0074 CE                XCH     A,R6
0075 C3                CLR     C
0076 13                RRC     A
0077 CE                XCH     A,R6
0078 13                RRC     A
0079 D8F9              DJNZ    R0,?C0882
007B FD                MOV     R5,A
007C 7E00              MOV     R6,#00H
007E E500        R     MOV     A,col_start+01H
0080 5407              ANL     A,#07H
0082 7805              MOV     R0,#05H
0084         ?C0883:
0084 C3                CLR     C
0085 33                RLC     A
0086 CE                XCH     A,R6
0087 33                RLC     A
0088 CE                XCH     A,R6
0089 D8F9              DJNZ    R0,?C0883
008B 4D                ORL     A,R5
008C F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 140
008E E500        R     MOV     A,col_start
0090 5407              ANL     A,#07H
0092 FE                MOV     R6,A
0093 E500        R     MOV     A,col_start+01H
0095 54F8              ANL     A,#0F8H
0097 7803              MOV     R0,#03H
0099         ?C0884:
0099 CE                XCH     A,R6
009A C3                CLR     C
009B 13                RRC     A
009C CE                XCH     A,R6
009D 13                RRC     A
009E D8F9              DJNZ    R0,?C0884
00A0 F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 142
00A2 7E00              MOV     R6,#00H
00A4 E500        R     MOV     A,row_end+01H
00A6 543F              ANL     A,#03FH
00A8 7802              MOV     R0,#02H
00AA         ?C0885:
00AA C3                CLR     C
00AB 33                RLC     A
00AC CE                XCH     A,R6
00AD 33                RLC     A
00AE CE                XCH     A,R6
00AF D8F9              DJNZ    R0,?C0885
00B1 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 144
00B3 E500        R     MOV     A,row_end
00B5 5407              ANL     A,#07H
00B7 FE                MOV     R6,A
00B8 E500        R     MOV     A,row_end+01H
00BA 54C0              ANL     A,#0C0H
00BC 7806              MOV     R0,#06H
00BE         ?C0886:
00BE CE                XCH     A,R6
00BF C3                CLR     C
00C0 13                RRC     A
00C1 CE                XCH     A,R6
00C2 13                RRC     A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 98  

00C3 D8F9              DJNZ    R0,?C0886
00C5 FD                MOV     R5,A
00C6 7E00              MOV     R6,#00H
00C8 E500        R     MOV     A,col_end+01H
00CA 5407              ANL     A,#07H
00CC 7805              MOV     R0,#05H
00CE         ?C0887:
00CE C3                CLR     C
00CF 33                RLC     A
00D0 CE                XCH     A,R6
00D1 33                RLC     A
00D2 CE                XCH     A,R6
00D3 D8F9              DJNZ    R0,?C0887
00D5 4D                ORL     A,R5
00D6 F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 145
00D8 E500        R     MOV     A,col_end
00DA 5407              ANL     A,#07H
00DC FE                MOV     R6,A
00DD E500        R     MOV     A,col_end+01H
00DF 54F8              ANL     A,#0F8H
00E1 7803              MOV     R0,#03H
00E3         ?C0888:
00E3 CE                XCH     A,R6
00E4 C3                CLR     C
00E5 13                RRC     A
00E6 CE                XCH     A,R6
00E7 13                RRC     A
00E8 D8F9              DJNZ    R0,?C0888
00EA F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 146
00EC E4                CLR     A
00ED F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 147
00EF 7F00        E     MOV     R7,#LOW Data
00F1 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 149
00F4 7F19              MOV     R7,#019H
00F6 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
00F9 120000      R     LCALL   L?1068
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
00FC 120000      R     LCALL   L?1170
00FF 2403              ADD     A,#03H
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0101 120000      R     LCALL   L?1074
0104 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
0107 120000      R     LCALL   L?1081
                                           ; SOURCE LINE # 169
010A E4                CLR     A
010B F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 170
010D E500        R     MOV     A,gray_level
010F 5407              ANL     A,#07H
0111 C4                SWAP    A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 99  

0112 54F0              ANL     A,#0F0H
0114 FF                MOV     R7,A
0115 E500        R     MOV     A,color
0117 540F              ANL     A,#0FH
0119 4F                ORL     A,R7
011A F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 171
011C 850000      E     MOV     Data+05H,attr
                                           ; SOURCE LINE # 172
011F E4                CLR     A
0120 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 173
0122 7F00        E     MOV     R7,#LOW Data
0124 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 175
0127         ?C0038:
0127 22                RET     
             ; FUNCTION _OSD_Window (END)

             ; FUNCTION _OSD_Fact_Line (BEGIN)
                                           ; SOURCE LINE # 180
0000 8B00        R     MOV     length,R3
;---- Variable 'col' assigned to Register 'R5' ----
;---- Variable 'row' assigned to Register 'R1' ----
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 186
0002 7800        R     MOV     R0,#LOW usStart_Addr
                                           ; SOURCE LINE # 189
0004 120000      R     LCALL   L?1114
0007         ?C0039:
0007 7800        R     MOV     R0,#LOW ucTemp
0009 120000      R     LCALL   L?1090
000C 500F              JNC     ?C0040
                                           ; SOURCE LINE # 190
000E EC                MOV     A,R4
000F 900000      E     MOV     DPTR,#FactRow_Info
0012 93                MOVC    A,@A+DPTR
0013 7800        R     MOV     R0,#LOW usStart_Addr+01H
0015 120000      R     LCALL   L?1108
0018 7800        R     MOV     R0,#LOW ucTemp
001A 06                INC     @R0
001B 80EA              SJMP    ?C0039
001D         ?C0040:
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
001D 120000      R     LCALL   L?1068
                                           ; SOURCE LINE # 196
0020 900000      E     MOV     DPTR,#FactRow_Info+01H
0023 120000      R     LCALL   L?1125
0026 5049              JNC     ?C0043
0028         ?C0042:
                                           ; SOURCE LINE # 198
0028 ED                MOV     A,R5
0029 2401              ADD     A,#01H
002B FB                MOV     R3,A
002C E4                CLR     A
002D 33                RLC     A
002E FA                MOV     R2,A
002F E500        R     MOV     A,length
0031 120000      R     LCALL   L?1146
0034 4008              JC      ?C0044
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 100 

                                           ; SOURCE LINE # 199
0036 E9                MOV     A,R1
0037 900000      E     MOV     DPTR,#FactRow_Info+01H
003A 93                MOVC    A,@A+DPTR
003B 9D                SUBB    A,R5
003C F500        R     MOV     length,A
003E         ?C0044:
                                           ; SOURCE LINE # 202
003E 7800        R     MOV     R0,#LOW usStart_Addr+01H
0040 120000      R     LCALL   L?1163
0043 FF                MOV     R7,A
0044 E500        R     MOV     A,indicate
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
0046 120000      R     LCALL   L?1073
0049 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 207
004C E500        R     MOV     A,indicate
004E B40308            CJNE    A,#03H,?C0046
0051 E500        R     MOV     A,length
0053 75F003            MOV     B,#03H
0056 A4                MUL     AB
0057 8002              SJMP    ?C0901
0059         ?C0046:
0059 E500        R     MOV     A,length
005B         ?C0901:
005B 2403              ADD     A,#03H
005D FF                MOV     R7,A
005E         ?C0047:
005E 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 208
0060 750002      E     MOV     Data+01H,#02H
                                           ; SOURCE LINE # 209
0063 750092      E     MOV     Data+02H,#092H
                                           ; SOURCE LINE # 210
0066 850000      E     MOV     Data+03H,value
                                           ; SOURCE LINE # 211
0069 E4                CLR     A
006A F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 212
006C 7F00        E     MOV     R7,#LOW Data
006E 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 214
0071         ?C0043:
0071 22                RET     
             ; FUNCTION _OSD_Fact_Line (END)

             ; FUNCTION _OSD_Fact_Clear (BEGIN)
                                           ; SOURCE LINE # 216
0000 8F00        R     MOV     row_start,R7
0002 8D00        R     MOV     height,R5
0004 8B00        R     MOV     col_start,R3
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0006 850000      R     MOV     width,width
                                           ; SOURCE LINE # 219
0009 E500        R     MOV     A,height
000B 6019              JZ      ?C0052
                                           ; SOURCE LINE # 220
000D         ?C0051:
                                           ; SOURCE LINE # 222
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 101 

                                           ; SOURCE LINE # 223
000D E500        R     MOV     A,row_start
000F 900000      E     MOV     DPTR,#FactRow_Info+01H
0012 93                MOVC    A,@A+DPTR
0013 FB                MOV     R3,A
0014 E4                CLR     A
0015 F500        R     MOV     ?_OSD_Fact_Line?BYTE+03H,A
0017 750003      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#03H
001A AD00        R     MOV     R5,col_start
001C AF00        R     MOV     R7,row_start
001E 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 225
0021 0500        R     INC     row_start
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
0023 D500E7      R     DJNZ    height,?C0051
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0026         ?C0052:
0026 22                RET     
             ; FUNCTION _OSD_Fact_Clear (END)

             ; FUNCTION _ShowValue (BEGIN)
                                           ; SOURCE LINE # 231
0000 8D00        R     MOV     col,R5
;---- Variable 'row' assigned to Register 'R7' ----
;---- Variable 'value' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 236
0002 7800        R     MOV     R0,#LOW usStart_Addr
                                           ; SOURCE LINE # 239
0004 120000      R     LCALL   L?1115
0007         ?C0053:
0007 EF                MOV     A,R7
0008 2401              ADD     A,#01H
000A FD                MOV     R5,A
000B E4                CLR     A
000C 33                RLC     A
000D FC                MOV     R4,A
000E 7800        R     MOV     R0,#LOW ucTemp
0010 E6                MOV     A,@R0
0011 F9                MOV     R1,A
0012 C3                CLR     C
0013 9D                SUBB    A,R5
0014 EC                MOV     A,R4
0015 120000      R     LCALL   L?1092
0018 500F              JNC     ?C0054
                                           ; SOURCE LINE # 240
001A E9                MOV     A,R1
001B 900000      E     MOV     DPTR,#FactRow_Info
001E 93                MOVC    A,@A+DPTR
001F 7800        R     MOV     R0,#LOW usStart_Addr+01H
0021 120000      R     LCALL   L?1108
0024 7800        R     MOV     R0,#LOW ucTemp
0026 06                INC     @R0
0027 80DE              SJMP    ?C0053
0029         ?C0054:
                                           ; SOURCE LINE # 242
0029 EB                MOV     A,R3
002A 75F064            MOV     B,#064H
002D 84                DIV     AB
002E F500        E     MOV     Data+0AH,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 102 

                                           ; SOURCE LINE # 243
0030 75F064            MOV     B,#064H
0033 A4                MUL     AB
0034 FF                MOV     R7,A
0035 C3                CLR     C
0036 EB                MOV     A,R3
0037 9F                SUBB    A,R7
0038 75F00A            MOV     B,#0AH
003B 84                DIV     AB
003C F500        E     MOV     Data+0BH,A
                                           ; SOURCE LINE # 244
003E E500        E     MOV     A,Data+0AH
0040 75F064            MOV     B,#064H
0043 A4                MUL     AB
0044 FF                MOV     R7,A
0045 C3                CLR     C
0046 EB                MOV     A,R3
0047 9F                SUBB    A,R7
0048 FF                MOV     R7,A
0049 E500        E     MOV     A,Data+0BH
004B 75F00A            MOV     B,#0AH
004E A4                MUL     AB
004F FE                MOV     R6,A
0050 C3                CLR     C
0051 EF                MOV     A,R7
0052 9E                SUBB    A,R6
0053 F500        E     MOV     Data+0CH,A
                                           ; SOURCE LINE # 245
0055 E500        E     MOV     A,Data+0AH
0057 6006              JZ      ?C0056
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
0059 0500        E     INC     Data+0AH
                                           ; SOURCE LINE # 248
005B 0500        E     INC     Data+0BH
                                           ; SOURCE LINE # 249
005D 8006              SJMP    ?C0057
005F         ?C0056:
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
005F E500        E     MOV     A,Data+0BH
0061 6002              JZ      ?C0057
0063 0500        E     INC     Data+0BH
                                           ; SOURCE LINE # 253
0065         ?C0057:
                                           ; SOURCE LINE # 254
0065 0500        E     INC     Data+0CH
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
0067 120000      R     LCALL   L?1068
                                           ; SOURCE LINE # 259
006A E500        R     MOV     A,col
006C 7800        R     MOV     R0,#LOW usStart_Addr+01H
                                           ; SOURCE LINE # 260
006E 120000      R     LCALL   L?1126
0071 2500        R     ADD     A,col
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
0073 120000      R     LCALL   L?1074
0076 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 263
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 103 

                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
0079 120000      R     LCALL   L?1082
                                           ; SOURCE LINE # 266
007C 850000      E     MOV     Data+03H,Data+0AH
                                           ; SOURCE LINE # 267
007F 850000      E     MOV     Data+04H,Data+0BH
                                           ; SOURCE LINE # 268
0082 850000      E     MOV     Data+05H,Data+0CH
                                           ; SOURCE LINE # 269
0085 E4                CLR     A
0086 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 270
0088 7F00        E     MOV     R7,#LOW Data
008A 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
008D 120000      R     LCALL   L?1068
                                           ; SOURCE LINE # 275
0090 E500        R     MOV     A,col
0092 7800        R     MOV     R0,#LOW usStart_Addr+01H
0094 120000      R     LCALL   L?1164
0097 4490              ORL     A,#090H
0099 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 276
009B 08                INC     R0
009C E6                MOV     A,@R0
009D 2500        R     ADD     A,col
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
009F 120000      R     LCALL   L?1074
00A2 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
00A5 120000      R     LCALL   L?1082
                                           ; SOURCE LINE # 282
00A8 850000      E     MOV     Data+03H,color
                                           ; SOURCE LINE # 283
00AB 850000      E     MOV     Data+04H,color
                                           ; SOURCE LINE # 284
00AE 850000      E     MOV     Data+05H,color
                                           ; SOURCE LINE # 285
00B1 E4                CLR     A
00B2 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 286
00B4 7F00        E     MOV     R7,#LOW Data
00B6 020000      E     LJMP    _RTDWrite
             ; FUNCTION _ShowValue (END)

             ; FUNCTION _Value_Adjust (BEGIN)
                                           ; SOURCE LINE # 289
;---- Variable 'Var' assigned to Register 'R1/R2/R3' ----
;---- Variable 'Key' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
0000 ED                MOV     A,R5
0001 6404              XRL     A,#04H
0003 702C              JNZ     ?C0060
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 104 

0005 300017      E     JNB     bKeyTurbo,?C0061
                                           ; SOURCE LINE # 294
0008 120000      E     LCALL   ?C?CLDPTR
000B FF                MOV     R7,A
000C E500        R     MOV     A,VMax
000E 14                DEC     A
000F FE                MOV     R6,A
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9E                SUBB    A,R6
0013 5006              JNC     ?C0062
0015 EF                MOV     A,R7
0016 2402              ADD     A,#02H
0018 FF                MOV     R7,A
0019 804A              SJMP    ?C0904
001B         ?C0062:
001B AF00        R     MOV     R7,VMax
001D         ?C0063:
001D 8046              SJMP    ?C0904
001F         ?C0061:
                                           ; SOURCE LINE # 296
001F 120000      E     LCALL   ?C?CLDPTR
0022 FF                MOV     R7,A
0023 C3                CLR     C
0024 9500        R     SUBB    A,VMax
0026 5005              JNC     ?C0065
0028 EF                MOV     A,R7
0029 04                INC     A
002A FF                MOV     R7,A
002B 8002              SJMP    ?C0066
002D         ?C0065:
002D AF00        R     MOV     R7,VMax
002F         ?C0066:
002F         ?C0902:
                                           ; SOURCE LINE # 297
002F 8034              SJMP    ?C0904
0031         ?C0060:
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
0031 300021      E     JNB     bKeyTurbo,?C0068
                                           ; SOURCE LINE # 301
0034 120000      E     LCALL   ?C?CLDPTR
0037 FF                MOV     R7,A
0038 E500        R     MOV     A,VMin
003A 2401              ADD     A,#01H
003C FD                MOV     R5,A
003D E4                CLR     A
003E 33                RLC     A
003F FC                MOV     R4,A
0040 D3                SETB    C
0041 EF                MOV     A,R7
0042 9D                SUBB    A,R5
0043 EC                MOV     A,R4
0044 120000      R     LCALL   L?1092
0047 4008              JC      ?C0069
0049 120000      E     LCALL   ?C?CLDPTR
004C 24FE              ADD     A,#0FEH
004E FF                MOV     R7,A
004F 8002              SJMP    ?C0070
0051         ?C0069:
0051 AF00        R     MOV     R7,VMin
0053         ?C0070:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 105 

0053         ?C0903:
0053 8010              SJMP    ?C0904
0055         ?C0068:
                                           ; SOURCE LINE # 303
0055 120000      E     LCALL   ?C?CLDPTR
0058 FF                MOV     R7,A
0059 D3                SETB    C
005A 9500        R     SUBB    A,VMin
005C 4005              JC      ?C0072
005E EF                MOV     A,R7
005F 14                DEC     A
0060 FF                MOV     R7,A
0061 8002              SJMP    ?C0073
0063         ?C0072:
0063 AF00        R     MOV     R7,VMin
0065         ?C0073:
0065         ?C0904:
0065 EF                MOV     A,R7
0066 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0069         ?C0074:
0069 22                RET     
             ; FUNCTION _Value_Adjust (END)

             ; FUNCTION _SPREAD_Adjust (BEGIN)
                                           ; SOURCE LINE # 307
;---- Variable 'variable' assigned to Register 'R1/R2/R3' ----
;---- Variable 'Key' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
0000 ED                MOV     A,R5
0001 6404              XRL     A,#04H
0003 7030              JNZ     ?C0075
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0005 120000      E     LCALL   ?C?CLDPTR
0008 FF                MOV     R7,A
0009 740F              MOV     A,#0FH
000B D3                SETB    C
000C 9F                SUBB    A,R7
000D 4053              JC      ?C0077
000F         ?C0076:
                                           ; SOURCE LINE # 314
000F 20000F      E     JB      bKeyTurbo,?C0078
                                           ; SOURCE LINE # 315
0012 740F              MOV     A,#0FH
0014 D3                SETB    C
0015 9F                SUBB    A,R7
0016 4005              JC      ?C0079
0018 EF                MOV     A,R7
0019 04                INC     A
001A FF                MOV     R7,A
001B 8041              SJMP    ?C0907
001D         ?C0079:
001D 7F0F              MOV     R7,#0FH
001F         ?C0080:
001F 803D              SJMP    ?C0907
0021         ?C0078:
                                           ; SOURCE LINE # 317
0021 120000      E     LCALL   ?C?CLDPTR
0024 FF                MOV     R7,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 106 

0025 740E              MOV     A,#0EH
0027 D3                SETB    C
0028 9F                SUBB    A,R7
0029 4006              JC      ?C0082
002B EF                MOV     A,R7
002C 2402              ADD     A,#02H
002E FF                MOV     R7,A
002F 8002              SJMP    ?C0083
0031         ?C0082:
0031 7F0F              MOV     R7,#0FH
0033         ?C0083:
0033         ?C0905:
                                           ; SOURCE LINE # 318
0033 8029              SJMP    ?C0907
0035         ?C0075:
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0035 120000      E     LCALL   ?C?CLDPTR
0038 FF                MOV     R7,A
0039 6027              JZ      ?C0077
003B         ?C0085:
                                           ; SOURCE LINE # 324
003B 20000E      E     JB      bKeyTurbo,?C0086
                                           ; SOURCE LINE # 325
003E E4                CLR     A
003F C3                CLR     C
0040 9F                SUBB    A,R7
0041 5005              JNC     ?C0087
0043 EF                MOV     A,R7
0044 14                DEC     A
0045 FF                MOV     R7,A
0046 8002              SJMP    ?C0088
0048         ?C0087:
0048 7F00              MOV     R7,#00H
004A         ?C0088:
004A         ?C0906:
004A 8012              SJMP    ?C0907
004C         ?C0086:
                                           ; SOURCE LINE # 327
004C 120000      E     LCALL   ?C?CLDPTR
004F FF                MOV     R7,A
0050 7401              MOV     A,#01H
0052 C3                CLR     C
0053 9F                SUBB    A,R7
0054 5006              JNC     ?C0090
0056 EF                MOV     A,R7
0057 24FE              ADD     A,#0FEH
0059 FF                MOV     R7,A
005A 8002              SJMP    ?C0091
005C         ?C0090:
005C 7F00              MOV     R7,#00H
005E         ?C0091:
005E         ?C0907:
005E EF                MOV     A,R7
005F 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
0062         ?C0077:
0062 22                RET     
             ; FUNCTION _SPREAD_Adjust (END)

             ; FUNCTION Get_OSD_Margin (BEGIN)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 107 

                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 347
0000 7F29              MOV     R7,#029H
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0002 120000      R     LCALL   L?1150
                                           ; SOURCE LINE # 352
0005 E4                CLR     A
0006 2500        E     ADD     A,Data+03H
0008 120000      R     LCALL   L?1181
000B         ?C0889:
000B CE                XCH     A,R6
000C C3                CLR     C
000D 13                RRC     A
000E CE                XCH     A,R6
000F 13                RRC     A
0010 D8F9              DJNZ    R0,?C0889
0012 04                INC     A
0013 F500        R     MOV     ucH_Max,A
                                           ; SOURCE LINE # 353
0015 750009      R     MOV     ucH_Min,#09H
                                           ; SOURCE LINE # 356
0018 7F34              MOV     R7,#034H
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
001A 120000      R     LCALL   L?1150
                                           ; SOURCE LINE # 360
001D E500        E     MOV     A,Data+03H
001F 24EC              ADD     A,#0ECH
0021 120000      R     LCALL   L?1181
0024         ?C0890:
0024 CE                XCH     A,R6
0025 C3                CLR     C
0026 13                RRC     A
0027 CE                XCH     A,R6
0028 13                RRC     A
0029 D8F9              DJNZ    R0,?C0890
;---- Variable 'ucV_Max' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 362
002B 850000      E     MOV     Data,ucH_Min
                                           ; SOURCE LINE # 363
002E 850000      E     MOV     Data+01H,ucH_Max
                                           ; SOURCE LINE # 364
0031 750003      E     MOV     Data+02H,#03H
                                           ; SOURCE LINE # 365
0034 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 367
0036 22                RET     
0037         L?1150:
0037 E4                CLR     A
0038 FB                MOV     R3,A
0039 7D02              MOV     R5,#02H
003B 120000      E     LCALL   _RTDRead
003E E500        E     MOV     A,Data+01H
0040 5407              ANL     A,#07H
0042 F500        E     MOV     Data+02H,A
0044 850000      E     MOV     Data+03H,Data
0047 22                RET     
             ; FUNCTION Get_OSD_Margin (END)

             ; FUNCTION _OSD_Position (BEGIN)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 108 

                                           ; SOURCE LINE # 377
0000 8F00        R     MOV     para,R7
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
0002 120000      R     LCALL   Get_OSD_Margin
                                           ; SOURCE LINE # 381
0005 D3                SETB    C
0006 E500        E     MOV     A,Data
0008 9500        E     SUBB    A,stGUD1+04H
000A E4                CLR     A
000B 9500        E     SUBB    A,stGUD1+03H
000D 5018              JNC     ?C0094
000F C3                CLR     C
0010 E500        E     MOV     A,Data+01H
0012 9500        E     SUBB    A,stGUD1+04H
0014 E4                CLR     A
0015 9500        E     SUBB    A,stGUD1+03H
0017 400E              JC      ?C0094
0019 E500        E     MOV     A,Data+02H
001B D3                SETB    C
001C 9500        E     SUBB    A,stGUD1+05H
001E 5007              JNC     ?C0094
0020 E500        E     MOV     A,Data+03H
0022 C3                CLR     C
0023 9500        E     SUBB    A,stGUD1+05H
0025 500C              JNC     ?C0093
0027         ?C0094:
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
0027 750060      E     MOV     stGUD1+05H,#060H
                                           ; SOURCE LINE # 385
002A 750000      E     MOV     stGUD1+03H,#00H
002D 750065      E     MOV     stGUD1+04H,#065H
                                           ; SOURCE LINE # 386
0030 120000      E     LCALL   Save_GUD1
                                           ; SOURCE LINE # 387
0033         ?C0093:
                                           ; SOURCE LINE # 389
0033 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0035 E6                MOV     A,@R0
0036 B40F09            CJNE    A,#0FH,?C0095
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
0039 750000      E     MOV     stGUD1+03H,#00H
003C 7500E6      E     MOV     stGUD1+04H,#0E6H
                                           ; SOURCE LINE # 392
003F 750064      E     MOV     stGUD1+05H,#064H
                                           ; SOURCE LINE # 393
0042         ?C0095:
                                           ; SOURCE LINE # 395
0042 7F20              MOV     R7,#020H
0044 120000      E     LCALL   _Wait_For_Event
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0047 120000      R     LCALL   L?1068
                                           ; SOURCE LINE # 400
004A 7500C0      E     MOV     Data+03H,#0C0H
                                           ; SOURCE LINE # 401
004D F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 402
004F 750006      E     MOV     Data+05H,#06H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 109 

                                           ; SOURCE LINE # 403
0052 750001      E     MOV     Data+06H,#01H
                                           ; SOURCE LINE # 404
0055 750092      E     MOV     Data+07H,#092H
                                           ; SOURCE LINE # 405
0058 E500        E     MOV     A,stGUD1+05H
005A C3                CLR     C
005B 13                RRC     A
005C F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 406
005E E500        E     MOV     A,stGUD1+04H
0060 AE00        E     MOV     R6,stGUD1+03H
0062 7802              MOV     R0,#02H
0064         ?C0891:
0064 CE                XCH     A,R6
0065 C3                CLR     C
0066 13                RRC     A
0067 CE                XCH     A,R6
0068 13                RRC     A
0069 D8F9              DJNZ    R0,?C0891
006B F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 407
006D E500        E     MOV     A,stGUD1+04H
006F 5403              ANL     A,#03H
0071 C4                SWAP    A
0072 33                RLC     A
0073 33                RLC     A
0074 54C0              ANL     A,#0C0H
0076 FF                MOV     R7,A
0077 E500        E     MOV     A,stGUD1+05H
0079 5401              ANL     A,#01H
007B FE                MOV     R6,A
007C C4                SWAP    A
007D 33                RLC     A
007E 54E0              ANL     A,#0E0H
0080 4F                ORL     A,R7
0081 4500        R     ORL     A,para
0083 F500        E     MOV     Data+0AH,A
                                           ; SOURCE LINE # 409
0085 E4                CLR     A
0086 F500        E     MOV     Data+0BH,A
                                           ; SOURCE LINE # 410
0088 7F00        E     MOV     R7,#LOW Data
008A 020000      E     LJMP    _RTDWrite
             ; FUNCTION _OSD_Position (END)

             ; FUNCTION _OSD_Line (BEGIN)
                                           ; SOURCE LINE # 414
0000 8B00        R     MOV     length,R3
;---- Variable 'col' assigned to Register 'R5' ----
;---- Variable 'row' assigned to Register 'R1' ----
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 420
0002 7800        R     MOV     R0,#LOW usStart_Addr
                                           ; SOURCE LINE # 423
0004 120000      R     LCALL   L?1114
0007         ?C0097:
0007 7800        R     MOV     R0,#LOW ucTemp
0009 120000      R     LCALL   L?1090
000C 500B              JNC     ?C0098
                                           ; SOURCE LINE # 424
000E EC                MOV     A,R4
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 110 

000F 7800        R     MOV     R0,#LOW usStart_Addr+01H
0011 120000      R     LCALL   L?1107
0014 7800        R     MOV     R0,#LOW ucTemp
0016 06                INC     @R0
0017 80EE              SJMP    ?C0097
0019         ?C0098:
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
0019 120000      R     LCALL   L?1068
                                           ; SOURCE LINE # 430
001C 900000      E     MOV     DPTR,#Row_Info+01H
001F 120000      R     LCALL   L?1125
0022 5049              JNC     ?C0101
0024         ?C0100:
                                           ; SOURCE LINE # 432
0024 ED                MOV     A,R5
0025 2401              ADD     A,#01H
0027 FB                MOV     R3,A
0028 E4                CLR     A
0029 33                RLC     A
002A FA                MOV     R2,A
002B E500        R     MOV     A,length
002D 120000      R     LCALL   L?1146
0030 4008              JC      ?C0102
                                           ; SOURCE LINE # 433
0032 E9                MOV     A,R1
0033 900000      E     MOV     DPTR,#Row_Info+01H
0036 93                MOVC    A,@A+DPTR
0037 9D                SUBB    A,R5
0038 F500        R     MOV     length,A
003A         ?C0102:
                                           ; SOURCE LINE # 436
003A 7800        R     MOV     R0,#LOW usStart_Addr+01H
003C 120000      R     LCALL   L?1163
003F FF                MOV     R7,A
0040 E500        R     MOV     A,indicate
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
0042 120000      R     LCALL   L?1073
0045 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 441
0048 E500        R     MOV     A,indicate
004A B40308            CJNE    A,#03H,?C0104
004D E500        R     MOV     A,length
004F 75F003            MOV     B,#03H
0052 A4                MUL     AB
0053 8002              SJMP    ?C0908
0055         ?C0104:
0055 E500        R     MOV     A,length
0057         ?C0908:
0057 2403              ADD     A,#03H
0059 FF                MOV     R7,A
005A         ?C0105:
005A 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 442
005C 750002      E     MOV     Data+01H,#02H
                                           ; SOURCE LINE # 443
005F 750092      E     MOV     Data+02H,#092H
                                           ; SOURCE LINE # 444
0062 850000      E     MOV     Data+03H,value
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 111 

                                           ; SOURCE LINE # 445
0065 E4                CLR     A
0066 F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 446
0068 7F00        E     MOV     R7,#LOW Data
006A 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 448
006D         ?C0101:
006D 22                RET     
             ; FUNCTION _OSD_Line (END)

             ; FUNCTION _OSD_Slider (BEGIN)
                                           ; SOURCE LINE # 451
0000 8F00        R     MOV     row,R7
0002 8D00        R     MOV     col,R5
0004 8B00        R     MOV     length,R3
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 458
0006 7800        R     MOV     R0,#LOW usStart_Addr
                                           ; SOURCE LINE # 460
0008 120000      R     LCALL   L?1115
000B         ?C0106:
000B E500        R     MOV     A,row
000D 120000      R     LCALL   L?1182
0010 7800        R     MOV     R0,#LOW ucTemp
0012 E6                MOV     A,@R0
0013 FD                MOV     R5,A
0014 120000      R     LCALL   L?1091
0017 500B              JNC     ?C0107
                                           ; SOURCE LINE # 461
0019 ED                MOV     A,R5
001A 7800        R     MOV     R0,#LOW usStart_Addr+01H
001C 120000      R     LCALL   L?1107
001F 7800        R     MOV     R0,#LOW ucTemp
0021 06                INC     @R0
0022 80E7              SJMP    ?C0106
0024         ?C0107:
                                           ; SOURCE LINE # 463
0024 74FB              MOV     A,#0FBH
0026 2500        R     ADD     A,length
0028 F500        R     MOV     length,A
                                           ; SOURCE LINE # 464
002A FF                MOV     R7,A
002B 7E00              MOV     R6,#00H
002D 7C00              MOV     R4,#00H
002F 7D06              MOV     R5,#06H
0031 120000      E     LCALL   ?C?IMUL
0034 EF                MOV     A,R7
0035 24FA              ADD     A,#0FAH
0037 FF                MOV     R7,A
0038 EE                MOV     A,R6
0039 34FF              ADDC    A,#0FFH
003B FE                MOV     R6,A
003C AD00        R     MOV     R5,value
003E 120000      E     LCALL   ?C?IMUL
0041 8E00        R     MOV     bound,R6
0043 8F00        R     MOV     bound+01H,R7
                                           ; SOURCE LINE # 467
0045 750006      E     MOV     Data,#06H
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
0048 120000      R     LCALL   L?1069
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 112 

                                           ; SOURCE LINE # 470
004B E500        R     MOV     A,col
004D 7800        R     MOV     R0,#LOW usStart_Addr+01H
004F 120000      R     LCALL   L?1164
0052 4490              ORL     A,#090H
0054 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 471
0056 08                INC     R0
0057 E6                MOV     A,@R0
0058 2500        R     ADD     A,col
005A F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 472
005C E500        R     MOV     A,color
005E C4                SWAP    A
005F 54F0              ANL     A,#0F0H
0061 F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 473
0063 E4                CLR     A
0064 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 474
0066 7F00        E     MOV     R7,#LOW Data
0068 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 476
006B 750005      E     MOV     Data,#05H
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
006E 120000      R     LCALL   L?1083
                                           ; SOURCE LINE # 479
0071 E500        R     MOV     A,color
0073 C4                SWAP    A
0074 54F0              ANL     A,#0F0H
0076 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
0078 120000      R     LCALL   L?1074
007B 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 484
007E E500        R     MOV     A,col
0080 2405              ADD     A,#05H
0082 FD                MOV     R5,A
0083 E500        R     MOV     A,color_slider
0085 C4                SWAP    A
0086 54F0              ANL     A,#0F0H
0088 F500        R     MOV     ?_OSD_Line?BYTE+03H,A
008A 750002      R     MOV     ?_OSD_Line?BYTE+04H,#02H
008D 7B0C              MOV     R3,#0CH
008F AF00        R     MOV     R7,row
0091 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 485
0094 750006      E     MOV     Data,#06H
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
0097 120000      R     LCALL   L?1069
                                           ; SOURCE LINE # 489
009A F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 491
009C F500        R     MOV     row,A
009E         ?C0109:
009E E500        R     MOV     A,row
00A0 C3                CLR     C
00A1 9500        R     SUBB    A,length
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 113 

00A3 4003              JC      $ + 5H
00A5 020000      R     LJMP    ?C0110
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
00A8 E500        R     MOV     A,col
00AA 7800        R     MOV     R0,#LOW usStart_Addr+01H
00AC 26                ADD     A,@R0
00AD FF                MOV     R7,A
00AE E4                CLR     A
00AF 18                DEC     R0
00B0 36                ADDC    A,@R0
00B1 FE                MOV     R6,A
00B2 7C00              MOV     R4,#00H
00B4 EF                MOV     A,R7
00B5 2500        R     ADD     A,row
00B7 FF                MOV     R7,A
00B8 EC                MOV     A,R4
00B9 3E                ADDC    A,R6
00BA CF                XCH     A,R7
00BB 2405              ADD     A,#05H
00BD CF                XCH     A,R7
00BE 3400              ADDC    A,#00H
                                           ; SOURCE LINE # 494
00C0 120000      R     LCALL   L?1128
00C3 2500        R     ADD     A,col
00C5 2500        R     ADD     A,row
00C7 2405              ADD     A,#05H
00C9 F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 496
00CB E500        R     MOV     A,row
00CD 600A              JZ      ?C0113
00CF E500        R     MOV     A,length
00D1 14                DEC     A
00D2 6500        R     XRL     A,row
00D4 6003              JZ      $ + 5H
00D6 020000      R     LJMP    ?C0112
00D9         ?C0113:
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
00D9 E500        R     MOV     A,bound+01H
00DB 4500        R     ORL     A,bound
00DD 606F              JZ      ?C0114
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
00DF 75F003            MOV     B,#03H
00E2 120000      R     LCALL   L?1165
00E5 4010              JC      ?C0115
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
00E7 E500        R     MOV     A,row
00E9 7004              JNZ     ?C0116
00EB 7D13              MOV     R5,#013H
00ED 8002              SJMP    ?C0117
00EF         ?C0116:
00EF 7D1E              MOV     R5,#01EH
00F1         ?C0117:
00F1 8D00        E     MOV     Data+05H,R5
                                           ; SOURCE LINE # 503
00F3 C3                CLR     C
                                           ; SOURCE LINE # 504
00F4 020000      R     LJMP    ?C0909
00F7         ?C0115:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 114 

                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
00F7 75F003            MOV     B,#03H
                                           ; SOURCE LINE # 508
00FA 120000      R     LCALL   L?1097
                                           ; SOURCE LINE # 510
00FD 7404              MOV     A,#04H
00FF D3                SETB    C
0100 9500        R     SUBB    A,color
0102 400F              JC      ?C0119
                                           ; SOURCE LINE # 511
0104 E500        R     MOV     A,row
0106 7004              JNZ     ?C0120
0108 7F10              MOV     R7,#010H
010A 8002              SJMP    ?C0121
010C         ?C0120:
010C 7F1B              MOV     R7,#01BH
010E         ?C0121:
010E 8F00        E     MOV     Data+05H,R7
0110 020000      R     LJMP    ?C0136
0113         ?C0119:
                                           ; SOURCE LINE # 512
0113 7408              MOV     A,#08H
0115 D3                SETB    C
0116 9500        R     SUBB    A,color
0118 400F              JC      ?C0123
                                           ; SOURCE LINE # 513
011A E500        R     MOV     A,row
011C 7004              JNZ     ?C0124
011E 7F11              MOV     R7,#011H
0120 8002              SJMP    ?C0125
0122         ?C0124:
0122 7F1C              MOV     R7,#01CH
0124         ?C0125:
0124 8F00        E     MOV     Data+05H,R7
0126 020000      R     LJMP    ?C0136
0129         ?C0123:
                                           ; SOURCE LINE # 514
0129 740C              MOV     A,#0CH
012B D3                SETB    C
012C 9500        R     SUBB    A,color
012E 400F              JC      ?C0127
                                           ; SOURCE LINE # 515
0130 E500        R     MOV     A,row
0132 7004              JNZ     ?C0128
0134 7F12              MOV     R7,#012H
0136 8002              SJMP    ?C0129
0138         ?C0128:
0138 7F1D              MOV     R7,#01DH
013A         ?C0129:
013A 8F00        E     MOV     Data+05H,R7
013C 020000      R     LJMP    ?C0136
013F         ?C0127:
                                           ; SOURCE LINE # 517
013F E500        R     MOV     A,row
0141 7004              JNZ     ?C0131
0143 7F13              MOV     R7,#013H
0145 8002              SJMP    ?C0132
0147         ?C0131:
0147 7F1E              MOV     R7,#01EH
0149         ?C0132:
0149 8F00        E     MOV     Data+05H,R7
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 115 

                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
014B 020000      R     LJMP    ?C0136
014E         ?C0114:
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 522
014E E500        R     MOV     A,row
0150 7004              JNZ     ?C0134
0152 7F10              MOV     R7,#010H
0154 8002              SJMP    ?C0135
0156         ?C0134:
0156 7F1B              MOV     R7,#01BH
0158         ?C0135:
0158 8F00        E     MOV     Data+05H,R7
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
015A 020000      R     LJMP    ?C0136
015D         ?C0112:
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
015D E500        R     MOV     A,bound+01H
015F 4500        R     ORL     A,bound
0161 6066              JZ      ?C0137
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
0163 75F006            MOV     B,#06H
0166 120000      R     LCALL   L?1165
0169 400F              JC      ?C0138
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
016B 75001A      E     MOV     Data+05H,#01AH
                                           ; SOURCE LINE # 532
016E         ?C0909:
016E E500        R     MOV     A,bound+01H
0170 9F                SUBB    A,R7
0171 F500        R     MOV     bound+01H,A
0173 E500        R     MOV     A,bound
0175 9E                SUBB    A,R6
0176 F500        R     MOV     bound,A
                                           ; SOURCE LINE # 533
0178 8052              SJMP    ?C0136
017A         ?C0138:
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 536
017A 75F006            MOV     B,#06H
                                           ; SOURCE LINE # 537
017D 120000      R     LCALL   L?1097
                                           ; SOURCE LINE # 539
0180 04                INC     A
0181 D3                SETB    C
0182 9500        R     SUBB    A,color
0184 4002              JC      ?C0140
                                           ; SOURCE LINE # 540
0186 8041              SJMP    ?C0910
0188         ?C0140:
                                           ; SOURCE LINE # 541
0188 7404              MOV     A,#04H
018A D3                SETB    C
018B 9500        R     SUBB    A,color
018D 4005              JC      ?C0142
                                           ; SOURCE LINE # 542
018F 750015      E     MOV     Data+05H,#015H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 116 

0192 8038              SJMP    ?C0136
0194         ?C0142:
                                           ; SOURCE LINE # 543
0194 7406              MOV     A,#06H
0196 D3                SETB    C
0197 9500        R     SUBB    A,color
0199 4005              JC      ?C0144
                                           ; SOURCE LINE # 544
019B 750016      E     MOV     Data+05H,#016H
019E 802C              SJMP    ?C0136
01A0         ?C0144:
                                           ; SOURCE LINE # 545
01A0 7409              MOV     A,#09H
01A2 D3                SETB    C
01A3 9500        R     SUBB    A,color
01A5 4005              JC      ?C0146
                                           ; SOURCE LINE # 546
01A7 750017      E     MOV     Data+05H,#017H
01AA 8020              SJMP    ?C0136
01AC         ?C0146:
                                           ; SOURCE LINE # 547
01AC 740B              MOV     A,#0BH
01AE D3                SETB    C
01AF 9500        R     SUBB    A,color
01B1 4005              JC      ?C0148
                                           ; SOURCE LINE # 548
01B3 750018      E     MOV     Data+05H,#018H
01B6 8014              SJMP    ?C0136
01B8         ?C0148:
                                           ; SOURCE LINE # 549
01B8 740E              MOV     A,#0EH
01BA D3                SETB    C
01BB 9500        R     SUBB    A,color
01BD 4005              JC      ?C0150
                                           ; SOURCE LINE # 550
01BF 750019      E     MOV     Data+05H,#019H
01C2 8008              SJMP    ?C0136
01C4         ?C0150:
                                           ; SOURCE LINE # 552
01C4 75001A      E     MOV     Data+05H,#01AH
                                           ; SOURCE LINE # 553
                                           ; SOURCE LINE # 554
01C7 8003              SJMP    ?C0136
01C9         ?C0137:
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 557
01C9         ?C0910:
01C9 750014      E     MOV     Data+05H,#014H
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 560
01CC         ?C0136:
                                           ; SOURCE LINE # 562
01CC 7F00        E     MOV     R7,#LOW Data
01CE 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 564
01D1 0500        R     INC     row
01D3 020000      R     LJMP    ?C0109
01D6         ?C0110:
                                           ; SOURCE LINE # 566
01D6 E500        R     MOV     A,value
01D8 75F00A            MOV     B,#0AH
01DB 84                DIV     AB
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 117 

01DC F500        R     MOV     range,A
                                           ; SOURCE LINE # 567
01DE 120000      R     LCALL   L?1151
01E1 E500        R     MOV     A,value
01E3 9F                SUBB    A,R7
01E4 F500        R     MOV     row,A
                                           ; SOURCE LINE # 568
01E6 E500        R     MOV     A,range
01E8 75F00A            MOV     B,#0AH
01EB 84                DIV     AB
01EC F500        R     MOV     color,A
                                           ; SOURCE LINE # 569
01EE 120000      R     LCALL   L?1151
01F1 E500        R     MOV     A,range
01F3 9F                SUBB    A,R7
01F4 F500        R     MOV     range,A
                                           ; SOURCE LINE # 571
01F6 0500        R     INC     row
                                           ; SOURCE LINE # 572
01F8 7004              JNZ     ?C0155
01FA E500        R     MOV     A,color
01FC 6006              JZ      ?C0153
01FE         ?C0155:
01FE E500        R     MOV     A,range
0200 04                INC     A
0201 FF                MOV     R7,A
0202 8002              SJMP    ?C0154
0204         ?C0153:
0204 7F00              MOV     R7,#00H
0206         ?C0154:
0206 8F00        R     MOV     range,R7
                                           ; SOURCE LINE # 573
0208 E500        R     MOV     A,color
020A 6004              JZ      ?C0156
020C 04                INC     A
020D FF                MOV     R7,A
020E 8002              SJMP    ?C0157
0210         ?C0156:
0210 7F00              MOV     R7,#00H
0212         ?C0157:
0212 8F00        R     MOV     color,R7
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
0214 120000      R     LCALL   L?1068
                                           ; SOURCE LINE # 578
0217 E500        R     MOV     A,col
0219 7800        R     MOV     R0,#LOW usStart_Addr+01H
                                           ; SOURCE LINE # 579
021B 120000      R     LCALL   L?1126
021E 2500        R     ADD     A,col
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
0220 120000      R     LCALL   L?1074
0223 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
0226 120000      R     LCALL   L?1082
                                           ; SOURCE LINE # 586
0229 850000      E     MOV     Data+03H,color
                                           ; SOURCE LINE # 587
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 118 

022C 850000      E     MOV     Data+04H,range
                                           ; SOURCE LINE # 588
022F 850000      E     MOV     Data+05H,row
                                           ; SOURCE LINE # 589
0232 E4                CLR     A
0233 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 590
0235 7F00        E     MOV     R7,#LOW Data
0237 020000      E     LJMP    _RTDWrite
             ; FUNCTION _OSD_Slider (END)

             ; FUNCTION _Init_Page (BEGIN)
                                           ; SOURCE LINE # 595
;---- Variable 'index' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 598
0000 7F01              MOV     R7,#01H
0002 120000      R     LCALL   _OSD_Position
                                           ; SOURCE LINE # 599
0005 750001      R     MOV     ?_OSD_Clear?BYTE+03H,#01H
0008 7B0F              MOV     R3,#0FH
000A 7D0B              MOV     R5,#0BH
000C 7F05              MOV     R7,#05H
000E 120000      R     LCALL   _OSD_Clear
                                           ; SOURCE LINE # 600
0011 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0013 E6                MOV     A,@R0
0014 B40107            CJNE    A,#01H,?C0160
                                           ; SOURCE LINE # 601
0017 7E00        E     MOV     R6,#HIGH OSD_Window_Setting
0019 7F00        E     MOV     R7,#LOW OSD_Window_Setting
001B 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 602
001E         ?C0160:
001E 22                RET     
             ; FUNCTION _Init_Page (END)

             ; FUNCTION _Show_Osd_Page (BEGIN)
                                           ; SOURCE LINE # 604
0000 8B00        R     MOV     Page_Attr,R3
0002 8A00        R     MOV     Page_Attr+01H,R2
0004 8900        R     MOV     Page_Attr+02H,R1
;---- Variable 'Page_Num' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 606
0006 120000      R     LCALL   _Init_Page
                                           ; SOURCE LINE # 607
0009 7E00        E     MOV     R6,#HIGH Page_All_Atb
000B 7F00        E     MOV     R7,#LOW Page_All_Atb
000D 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 608
0010 120000      R     LCALL   L?1109
0013 2400        E     ADD     A,#LOW OSD_PAGE_All_TABLE
0015 F582              MOV     DPL,A
0017 E5F0              MOV     A,B
0019 3400        E     ADDC    A,#HIGH OSD_PAGE_All_TABLE
001B 120000      R     LCALL   L?1098
001E 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 609
0021 AE00        R     MOV     R6,Page_Attr+01H
0023 AF00        R     MOV     R7,Page_Attr+02H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 119 

0025 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 610
0028 75F010            MOV     B,#010H
002B E500        R     MOV     A,OSD_Table_Num
002D A4                MUL     AB
002E 2400        E     ADD     A,#LOW OSD_PAGE_TABLE
0030 F582              MOV     DPL,A
0032 E5F0              MOV     A,B
0034 3400        E     ADDC    A,#HIGH OSD_PAGE_TABLE
0036 F583              MOV     DPH,A
0038 E500        E     MOV     A,stGUD1
003A 5407              ANL     A,#07H
003C 75F002            MOV     B,#02H
003F 120000      E     LCALL   ?C?OFFXADD
0042 120000      R     LCALL   L?1100
0045 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 611
0048 020000      R     LJMP    Show_Mode
             ; FUNCTION _Show_Osd_Page (END)

             ; FUNCTION _OSD_Clear (BEGIN)
                                           ; SOURCE LINE # 614
0000 8F00        R     MOV     row_start,R7
0002 8D00        R     MOV     height,R5
0004 8B00        R     MOV     col_start,R3
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
0006 850000      R     MOV     width,width
                                           ; SOURCE LINE # 617
0009 E500        R     MOV     A,height
000B 6019              JZ      ?C0166
                                           ; SOURCE LINE # 618
000D         ?C0165:
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 621
000D E500        R     MOV     A,row_start
000F 900000      E     MOV     DPTR,#Row_Info+01H
0012 93                MOVC    A,@A+DPTR
0013 FB                MOV     R3,A
0014 E4                CLR     A
0015 F500        R     MOV     ?_OSD_Line?BYTE+03H,A
0017 750003      R     MOV     ?_OSD_Line?BYTE+04H,#03H
001A AD00        R     MOV     R5,col_start
001C AF00        R     MOV     R7,row_start
001E 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 623
0021 0500        R     INC     row_start
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
0023 D500E7      R     DJNZ    height,?C0165
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 627
0026         ?C0166:
0026 22                RET     
             ; FUNCTION _OSD_Clear (END)

             ; FUNCTION L?1166 (BEGIN)
0000 7B00              MOV     R3,#00H
0002 7A00        E     MOV     R2,#HIGH stGUD0
0004 7900        E     MOV     R1,#LOW stGUD0
             ; FUNCTION _Bright_Contrast_Adjust (BEGIN)
                                           ; SOURCE LINE # 629
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 120 

;---- Variable 'variable' assigned to Register 'R1/R2/R3' ----
;---- Variable 'Key' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 632
0006 ED                MOV     A,R5
0007 6404              XRL     A,#04H
0009 7034              JNZ     ?C0167
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 634
000B 120000      E     LCALL   ?C?CLDPTR
000E FF                MOV     R7,A
000F 7464              MOV     A,#064H
0011 D3                SETB    C
0012 9F                SUBB    A,R7
0013 405A              JC      ?C0169
0015         ?C0168:
                                           ; SOURCE LINE # 637
0015 120000      R     LCALL   L?1101
0018 4011              JC      ?C0170
                                           ; SOURCE LINE # 638
001A 7464              MOV     A,#064H
001C D3                SETB    C
001D 9F                SUBB    A,R7
001E 4007              JC      ?C0171
0020 120000      E     LCALL   ?C?CLDPTR
0023 04                INC     A
0024 FF                MOV     R7,A
0025 8044              SJMP    ?C0913
0027         ?C0171:
0027 7F64              MOV     R7,#064H
0029         ?C0172:
0029 8040              SJMP    ?C0913
002B         ?C0170:
                                           ; SOURCE LINE # 640
002B 120000      E     LCALL   ?C?CLDPTR
002E FF                MOV     R7,A
002F 7463              MOV     A,#063H
0031 D3                SETB    C
0032 9F                SUBB    A,R7
0033 4006              JC      ?C0174
0035 EF                MOV     A,R7
0036 2402              ADD     A,#02H
0038 FF                MOV     R7,A
0039 8002              SJMP    ?C0175
003B         ?C0174:
003B 7F64              MOV     R7,#064H
003D         ?C0175:
003D         ?C0911:
                                           ; SOURCE LINE # 641
003D 802C              SJMP    ?C0913
003F         ?C0167:
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
003F 120000      E     LCALL   ?C?CLDPTR
0042 FF                MOV     R7,A
0043 602A              JZ      ?C0169
0045         ?C0177:
                                           ; SOURCE LINE # 647
0045 120000      R     LCALL   L?1101
0048 400F              JC      ?C0178
                                           ; SOURCE LINE # 648
004A E4                CLR     A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 121 

004B 9F                SUBB    A,R7
004C 5007              JNC     ?C0179
004E 120000      E     LCALL   ?C?CLDPTR
0051 14                DEC     A
0052 FF                MOV     R7,A
0053 8002              SJMP    ?C0180
0055         ?C0179:
0055 7F00              MOV     R7,#00H
0057         ?C0180:
0057         ?C0912:
0057 8012              SJMP    ?C0913
0059         ?C0178:
                                           ; SOURCE LINE # 650
0059 120000      E     LCALL   ?C?CLDPTR
005C FF                MOV     R7,A
005D 7401              MOV     A,#01H
005F C3                CLR     C
0060 9F                SUBB    A,R7
0061 5006              JNC     ?C0182
0063 EF                MOV     A,R7
0064 24FE              ADD     A,#0FEH
0066 FF                MOV     R7,A
0067 8002              SJMP    ?C0183
0069         ?C0182:
0069 7F00              MOV     R7,#00H
006B         ?C0183:
006B         ?C0913:
006B EF                MOV     A,R7
006C 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
006F         ?C0169:
006F 22                RET     
             ; FUNCTION _Bright_Contrast_Adjust (END)

             ; FUNCTION _Osd_Change_Item (BEGIN)
                                           ; SOURCE LINE # 654
0000 8F00        R     MOV     Pess_Key,R7
;---- Variable 'Item_Num' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
0002 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0004 E6                MOV     A,@R0
0005 FF                MOV     R7,A
0006 6034              JZ      ?C0184
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 661
0008 E500        R     MOV     A,Pess_Key
000A B4030F            CJNE    A,#03H,?C0185
                                           ; SOURCE LINE # 662
000D ED                MOV     A,R5
000E B50704            CJNE    A,AR7,?C0186
0011 7F01              MOV     R7,#01H
0013 8017              SJMP    ?C0914
0015         ?C0186:
0015 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0017 E6                MOV     A,@R0
0018 04                INC     A
0019 FF                MOV     R7,A
001A         ?C0187:
001A 8010              SJMP    ?C0914
001C         ?C0185:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 122 

                                           ; SOURCE LINE # 664
001C 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
001E E6                MOV     A,@R0
001F FF                MOV     R7,A
0020 B40106            CJNE    A,#01H,?C0189
0023 AE05              MOV     R6,AR5
0025 AF06              MOV     R7,AR6
0027 8003              SJMP    ?C0190
0029         ?C0189:
0029 EF                MOV     A,R7
002A 14                DEC     A
002B FF                MOV     R7,A
002C         ?C0190:
002C         ?C0914:
002C 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
002E A607              MOV     @R0,AR7
0030         ?C0188:
                                           ; SOURCE LINE # 667
0030 120000      R     LCALL   L?1051
0033 120000      R     LCALL   L?1026
0036 120000      R     LCALL   L?1033
0039 020000      R     LJMP    _OSD_Window
                                           ; SOURCE LINE # 669
003C         ?C0184:
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 675
003C E500        R     MOV     A,Pess_Key
003E 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0040 B40308            CJNE    A,#03H,?C0192
                                           ; SOURCE LINE # 676
0043 E6                MOV     A,@R0
0044 FF                MOV     R7,A
0045 120000      R     LCALL   _GetNextPageIdx
0048 A607              MOV     @R0,AR7
004A 22                RET     
004B         ?C0192:
                                           ; SOURCE LINE # 678
004B E6                MOV     A,@R0
004C FF                MOV     R7,A
004D 120000      R     LCALL   _GetPrevPageIdx
0050 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 680
0052         ?C0194:
0052 22                RET     
             ; FUNCTION _Osd_Change_Item (END)

             ; FUNCTION Show_Mode (BEGIN)
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 683
                                           ; SOURCE LINE # 687
0000 120000      R     LCALL   L?1184
0003 7B0F              MOV     R3,#0FH
0005 7D0C              MOV     R5,#0CH
0007 7F03              MOV     R7,#03H
0009 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 688
000C 7800        R     MOV     R0,#LOW usStart_Addr
                                           ; SOURCE LINE # 691
000E 120000      R     LCALL   L?1115
0011         ?C0195:
0011 7800        R     MOV     R0,#LOW ucTemp
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 123 

0013 E6                MOV     A,@R0
0014 FF                MOV     R7,A
0015 C3                CLR     C
0016 9404              SUBB    A,#04H
0018 500E              JNC     ?C0196
                                           ; SOURCE LINE # 692
001A EF                MOV     A,R7
001B 900000      E     MOV     DPTR,#Row_Info
001E 93                MOVC    A,@A+DPTR
001F 18                DEC     R0
0020 120000      R     LCALL   L?1108
0023 7800        R     MOV     R0,#LOW ucTemp
0025 06                INC     @R0
0026 80E9              SJMP    ?C0195
0028         ?C0196:
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 696
0028 120000      R     LCALL   L?1068
                                           ; SOURCE LINE # 697
002B 7800        R     MOV     R0,#LOW usStart_Addr+01H
002D E6                MOV     A,@R0
002E 240C              ADD     A,#0CH
0030 18                DEC     R0
0031 E4                CLR     A
                                           ; SOURCE LINE # 698
0032 120000      R     LCALL   L?1127
0035 240C              ADD     A,#0CH
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
0037 120000      R     LCALL   L?1074
003A 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 704
003D 7800        E     MOV     R0,#LOW ucMode_Curr
003F E6                MOV     A,@R0
0040 FF                MOV     R7,A
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 756
0041         ?C0199:
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 763
0041 7800        E     MOV     R0,#LOW usIPH_ACT_WID
0043 E6                MOV     A,@R0
0044 F500        R     MOV     usHwid,A
0046 08                INC     R0
0047 E6                MOV     A,@R0
0048 F500        R     MOV     usHwid+01H,A
                                           ; SOURCE LINE # 765
004A E500        E     MOV     A,stGUD1+01H
004C 5407              ANL     A,#07H
004E 7065              JNZ     ?C0200
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
0050 EF                MOV     A,R7
0051 B42E02            CJNE    A,#02EH,?C0201
                                           ; SOURCE LINE # 768
                                           ; SOURCE LINE # 769
                                           ; SOURCE LINE # 770
0054 801E              SJMP    ?C0916
0056         ?C0201:
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 124 

0056 7800        E     MOV     R0,#LOW ucMode_Curr
0058 E6                MOV     A,@R0
0059 FF                MOV     R7,A
005A 742E              MOV     A,#02EH
005C D3                SETB    C
005D 9F                SUBB    A,R7
005E 4010              JC      ?C0203
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 775
0060 7427              MOV     A,#027H
0062 D3                SETB    C
0063 9F                SUBB    A,R7
0064 5002              JNC     ?C0204
                                           ; SOURCE LINE # 776
0066 801A              SJMP    ?C0917
0068         ?C0204:
                                           ; SOURCE LINE # 777
0068 7423              MOV     A,#023H
006A D3                SETB    C
006B 9F                SUBB    A,R7
006C 5028              JNC     ?C0202
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
006E 8020              SJMP    ?C0918
0070         ?C0203:
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
0070 EF                MOV     A,R7
0071 B43B08            CJNE    A,#03BH,?C0208
                                           ; SOURCE LINE # 783
0074         ?C0916:
0074 750006      R     MOV     usHwid,#06H
0077 750040      R     MOV     usHwid+01H,#040H
007A 801A              SJMP    ?C0202
007C         ?C0208:
                                           ; SOURCE LINE # 784
007C 7439              MOV     A,#039H
007E D3                SETB    C
007F 9F                SUBB    A,R7
0080 5008              JNC     ?C0210
                                           ; SOURCE LINE # 785
0082         ?C0917:
0082 750005      R     MOV     usHwid,#05H
0085 750000      R     MOV     usHwid+01H,#00H
0088 800C              SJMP    ?C0202
008A         ?C0210:
                                           ; SOURCE LINE # 786
008A 7437              MOV     A,#037H
008C D3                SETB    C
008D 9F                SUBB    A,R7
008E 5006              JNC     ?C0202
                                           ; SOURCE LINE # 787
0090         ?C0918:
0090 750004      R     MOV     usHwid,#04H
0093 750080      R     MOV     usHwid+01H,#080H
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
0096         ?C0202:
                                           ; SOURCE LINE # 791
0096 7800        E     MOV     R0,#LOW ucMode_Curr
0098 E6                MOV     A,@R0
0099 FF                MOV     R7,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 125 

009A 6408              XRL     A,#08H
009C 6004              JZ      ?C0214
009E EF                MOV     A,R7
009F B40913            CJNE    A,#09H,?C0200
00A2         ?C0214:
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
00A2 E500        E     MOV     A,stGUD1
00A4 30E408            JNB     ACC.4,?C0215
                                           ; SOURCE LINE # 794
00A7 750002      R     MOV     usHwid,#02H
00AA 750080      R     MOV     usHwid+01H,#080H
00AD 8006              SJMP    ?C0200
00AF         ?C0215:
                                           ; SOURCE LINE # 796
00AF 750002      R     MOV     usHwid,#02H
00B2 7500D0      R     MOV     usHwid+01H,#0D0H
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
00B5         ?C0200:
                                           ; SOURCE LINE # 802
00B5 75000C      E     MOV     Data,#0CH
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
00B8 120000      R     LCALL   L?1083
                                           ; SOURCE LINE # 806
00BB AE00        R     MOV     R6,usHwid
00BD AF00        R     MOV     R7,usHwid+01H
00BF 120000      R     LCALL   L?1186
                                           ; SOURCE LINE # 808
00C2 740A              MOV     A,#0AH
00C4 D3                SETB    C
00C5 9500        R     SUBB    A,ucTemp
00C7 500B              JNC     ?C0217
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 810
00C9 750002      E     MOV     Data+03H,#02H
                                           ; SOURCE LINE # 811
00CC E500        R     MOV     A,ucTemp
00CE 24F7              ADD     A,#0F7H
00D0 F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 812
00D2 8008              SJMP    ?C0218
00D4         ?C0217:
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 815
00D4 E4                CLR     A
00D5 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 816
00D7 E500        R     MOV     A,ucTemp
00D9 04                INC     A
00DA F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 817
00DC         ?C0218:
                                           ; SOURCE LINE # 819
00DC E500        R     MOV     A,ucTemp
00DE 75F064            MOV     B,#064H
00E1 A4                MUL     AB
00E2 FE                MOV     R6,A
00E3 C3                CLR     C
00E4 E500        R     MOV     A,usHwid+01H
00E6 9E                SUBB    A,R6
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 126 

00E7 F500        R     MOV     ucTemp,A
                                           ; SOURCE LINE # 821
00E9 75F00A            MOV     B,#0AH
00EC 84                DIV     AB
00ED F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 823
00EF 120000      R     LCALL   L?1152
00F2 E500        R     MOV     A,ucTemp
00F4 9F                SUBB    A,R7
00F5 04                INC     A
00F6 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 824
00F8 0500        E     INC     Data+05H
                                           ; SOURCE LINE # 825
00FA 75000E      E     MOV     Data+07H,#0EH
                                           ; SOURCE LINE # 827
00FD 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
00FF E6                MOV     A,@R0
0100 FE                MOV     R6,A
0101 08                INC     R0
0102 E6                MOV     A,@R0
0103 FF                MOV     R7,A
0104 120000      R     LCALL   L?1186
                                           ; SOURCE LINE # 828
0107 7800        E     MOV     R0,#LOW usIPV_ACT_LEN+01H
0109 E6                MOV     A,@R0
010A FF                MOV     R7,A
010B E500        R     MOV     A,ucTemp
010D 75F064            MOV     B,#064H
0110 A4                MUL     AB
0111 FE                MOV     R6,A
0112 C3                CLR     C
0113 EF                MOV     A,R7
0114 9E                SUBB    A,R6
0115 F500        E     MOV     Data+0CH,A
                                           ; SOURCE LINE # 830
0117 740A              MOV     A,#0AH
0119 D3                SETB    C
011A 9500        R     SUBB    A,ucTemp
011C 5026              JNC     ?C0219
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
011E 75000D      E     MOV     Data,#0DH
                                           ; SOURCE LINE # 833
0121 750002      E     MOV     Data+08H,#02H
                                           ; SOURCE LINE # 834
0124 E500        R     MOV     A,ucTemp
0126 24F7              ADD     A,#0F7H
0128 F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 835
012A E500        E     MOV     A,Data+0CH
012C 75F00A            MOV     B,#0AH
012F 84                DIV     AB
0130 F500        E     MOV     Data+0AH,A
                                           ; SOURCE LINE # 836
0132 120000      R     LCALL   L?1152
0135 E500        E     MOV     A,Data+0CH
0137 9F                SUBB    A,R7
0138 04                INC     A
0139 F500        E     MOV     Data+0BH,A
                                           ; SOURCE LINE # 837
013B 0500        E     INC     Data+0AH
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 127 

                                           ; SOURCE LINE # 838
013D E4                CLR     A
013E F500        E     MOV     Data+0CH,A
                                           ; SOURCE LINE # 839
0140 F500        E     MOV     Data+0DH,A
                                           ; SOURCE LINE # 840
0142 801D              SJMP    ?C0220
0144         ?C0219:
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 843
0144 E500        R     MOV     A,ucTemp
0146 04                INC     A
0147 F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 844
0149 E500        E     MOV     A,Data+0CH
014B 75F00A            MOV     B,#0AH
014E 84                DIV     AB
014F F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 845
0151 120000      R     LCALL   L?1152
0154 E500        E     MOV     A,Data+0CH
0156 9F                SUBB    A,R7
0157 04                INC     A
0158 F500        E     MOV     Data+0AH,A
                                           ; SOURCE LINE # 846
015A 0500        E     INC     Data+09H
                                           ; SOURCE LINE # 847
015C E4                CLR     A
015D F500        E     MOV     Data+0BH,A
                                           ; SOURCE LINE # 848
015F F500        E     MOV     Data+0CH,A
                                           ; SOURCE LINE # 849
0161         ?C0220:
                                           ; SOURCE LINE # 851
0161 E4                CLR     A
0162 F500        E     MOV     Data+0CH,A
                                           ; SOURCE LINE # 852
0164 7F00        E     MOV     R7,#LOW Data
0166 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 857
0169 750007      E     MOV     Data,#07H
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
016C 120000      R     LCALL   L?1083
                                           ; SOURCE LINE # 860
016F 7800        E     MOV     R0,#LOW ucRefresh
0171 E6                MOV     A,@R0
0172 FF                MOV     R7,A
0173 75F00A            MOV     B,#0AH
0176 84                DIV     AB
0177 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 861
0179 75F00A            MOV     B,#0AH
017C A4                MUL     AB
017D FE                MOV     R6,A
017E C3                CLR     C
017F EF                MOV     A,R7
0180 9E                SUBB    A,R6
0181 04                INC     A
0182 F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 862
0184 0500        E     INC     Data+03H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 128 

                                           ; SOURCE LINE # 863
0186 750027      E     MOV     Data+05H,#027H
                                           ; SOURCE LINE # 864
0189 750059      E     MOV     Data+06H,#059H
                                           ; SOURCE LINE # 865
018C E4                CLR     A
018D F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 866
018F 7F00        E     MOV     R7,#LOW Data
0191 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 867
0194 740A              MOV     A,#0AH
0196 D3                SETB    C
0197 9500        R     SUBB    A,ucTemp
0199 5009              JNC     ?C0221
                                           ; SOURCE LINE # 868
019B 120000      R     LCALL   L?1172
019E 7B01              MOV     R3,#01H
01A0 7D15              MOV     R5,#015H
01A2 8007              SJMP    ?C0915
01A4         ?C0221:
                                           ; SOURCE LINE # 870
01A4 120000      R     LCALL   L?1172
01A7 7B01              MOV     R3,#01H
01A9 7D14              MOV     R5,#014H
01AB         ?C0915:
01AB 7F03              MOV     R7,#03H
01AD 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 871
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
01B0         ?C0223:
01B0 22                RET     
             ; FUNCTION Show_Mode (END)

             ; FUNCTION FACTORY_Key_Key (BEGIN)
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
0000 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0002 760F              MOV     @R0,#0FH
                                           ; SOURCE LINE # 884
0004 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0006 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 885
0008 22                RET     
             ; FUNCTION FACTORY_Key_Key (END)

             ; FUNCTION _Page0_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 889
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 896
0002 200025      R     JB      b_rgb_VOLUME_STATUS,?C0225
                                           ; SOURCE LINE # 897
                                           ; SOURCE LINE # 898
0005 7F01              MOV     R7,#01H
0007 120000      R     LCALL   _OSD_Position
                                           ; SOURCE LINE # 899
000A 7E00        E     MOV     R6,#HIGH rgb_OSD_VOLUME
000C 7F00        E     MOV     R7,#LOW rgb_OSD_VOLUME
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 129 

000E 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 900
0011 120000      R     LCALL   L?1109
0014 2400        E     ADD     A,#LOW strTabVOLUME_Atb
0016 F582              MOV     DPL,A
0018 E5F0              MOV     A,B
001A 3400        E     ADDC    A,#HIGH strTabVOLUME_Atb
001C 120000      R     LCALL   L?1098
001F 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 901
0022 120000      R     LCALL   L?1142
0025 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 902
0028 D200        R     SETB    b_rgb_VOLUME_STATUS
                                           ; SOURCE LINE # 903
002A         ?C0225:
                                           ; SOURCE LINE # 905
002A E500        R     MOV     A,Key
002C 6404              XRL     A,#04H
002E 700B              JNZ     ?C0226
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 907
0030 E500        E     MOV     A,stGUD3
0032 D3                SETB    C
0033 9400              SUBB    A,#00H
0035 4013              JC      ?C0919
0037 1500        E     DEC     stGUD3
0039         ?C0227:
                                           ; SOURCE LINE # 908
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
                                           ; SOURCE LINE # 911
0039 800F              SJMP    ?C0919
003B         ?C0226:
                                           ; SOURCE LINE # 913
003B E500        R     MOV     A,Key
003D 6403              XRL     A,#03H
003F 7028              JNZ     ?C0231
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 915
0041 E500        E     MOV     A,stGUD3
0043 C3                CLR     C
0044 941F              SUBB    A,#01FH
0046 5002              JNC     ?C0230
0048 0500        E     INC     stGUD3
004A         ?C0230:
                                           ; SOURCE LINE # 916
004A         ?C0919:
004A 120000      E     LCALL   SetVolume
                                           ; SOURCE LINE # 917
004D 120000      E     LCALL   Save_GUD3
                                           ; SOURCE LINE # 918
0050 C3                CLR     C
0051 741F              MOV     A,#01FH
0053 9500        E     SUBB    A,stGUD3
0055 F500        E     MOV     ?_rgb_OSD_Slider?BYTE+03H,A
0057 75001F      E     MOV     ?_rgb_OSD_Slider?BYTE+04H,#01FH
005A 750004      E     MOV     ?_rgb_OSD_Slider?BYTE+05H,#04H
005D 75000E      E     MOV     ?_rgb_OSD_Slider?BYTE+06H,#0EH
0060 7B18              MOV     R3,#018H
0062 7D07              MOV     R5,#07H
0064 E4                CLR     A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 130 

0065 FF                MOV     R7,A
0066 120000      E     LCALL   _rgb_OSD_Slider
                                           ; SOURCE LINE # 919
                                           ; SOURCE LINE # 922
0069         ?C0231:
0069 22                RET     
             ; FUNCTION _Page0_Left_Right_Key (END)

             ; FUNCTION Page0_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
0000 E500        E     MOV     A,stGUD3+03H
0002 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0004 30E30C            JNB     ACC.3,?C0232
                                           ; SOURCE LINE # 927
                                           ; SOURCE LINE # 929
0007 760F              MOV     @R0,#0FH
                                           ; SOURCE LINE # 930
0009 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
000B 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 931
000D E4                CLR     A
000E 08                INC     R0
000F F6                MOV     @R0,A
                                           ; SOURCE LINE # 932
0010 08                INC     R0
0011 F6                MOV     @R0,A
                                           ; SOURCE LINE # 933
0012 22                RET     
0013         ?C0232:
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 937
0013 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 938
                                           ; SOURCE LINE # 939
0015 120000      R     LCALL   L?1144
                                           ; SOURCE LINE # 940
0018 08                INC     R0
0019 F6                MOV     @R0,A
                                           ; SOURCE LINE # 941
001A C200        R     CLR     b_rgb_VOLUME_STATUS
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 943
001C         ?C0234:
001C 22                RET     
             ; FUNCTION Page0_Enter_Key (END)

             ; FUNCTION Page0_LR_Key (BEGIN)
                                           ; SOURCE LINE # 945
                                           ; SOURCE LINE # 946
                                           ; SOURCE LINE # 948
0000 E500        E     MOV     A,stGUD1+01H
0002 5407              ANL     A,#07H
0004 700C              JNZ     ?C0236
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
0006 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0008 7608              MOV     @R0,#08H
                                           ; SOURCE LINE # 951
000A 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
000C 7601              MOV     @R0,#01H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 131 

                                           ; SOURCE LINE # 952
000E 08                INC     R0
000F F6                MOV     @R0,A
                                           ; SOURCE LINE # 953
0010 08                INC     R0
0011 F6                MOV     @R0,A
                                           ; SOURCE LINE # 954
                                           ; SOURCE LINE # 955
0012         ?C0236:
0012 22                RET     
             ; FUNCTION Page0_LR_Key (END)

             ; FUNCTION Page1_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 958
                                           ; SOURCE LINE # 959
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0002 E6                MOV     A,@R0
0003 701A              JNZ     ?C0237
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 961
0005 7800        E     MOV     R0,#LOW ucMode_Curr
0007 E6                MOV     A,@R0
0008 7003              JNZ     $ + 5H
000A 020000      R     LJMP    ?C0245
000D F4                CPL     A
000E 7003              JNZ     $ + 5H
0010 020000      R     LJMP    ?C0245
                                           ; SOURCE LINE # 962
                                           ; SOURCE LINE # 964
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 970
0013 120000      R     LCALL   L?1055
0016 120000      R     LCALL   L?1027
0019 120000      R     LCALL   L?1033
001C 020000      R     LJMP    _OSD_Window
                                           ; SOURCE LINE # 971
                                           ; SOURCE LINE # 972
001F         ?C0237:
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 975
001F 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0021 E6                MOV     A,@R0
0022 FF                MOV     R7,A
0023 6066              JZ      ?C0240
                                           ; SOURCE LINE # 976
                                           ; SOURCE LINE # 978
0025 18                DEC     R0
0026 E6                MOV     A,@R0
0027 14                DEC     A
0028 6026              JZ      ?C0246
002A 14                DEC     A
002B 6030              JZ      ?C0247
002D 14                DEC     A
002E 6049              JZ      ?C0249
0030 24FC              ADD     A,#0FCH
0032 6039              JZ      ?C0248
0034 2402              ADD     A,#02H
0036 704E              JNZ     ?C0241
                                           ; SOURCE LINE # 979
                                           ; SOURCE LINE # 980
0038         ?C0242:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 132 

                                           ; SOURCE LINE # 981
0038 EF                MOV     A,R7
0039 B4010B            CJNE    A,#01H,?C0243
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 983
003C 120000      E     LCALL   Auto_Balance
003F BFFC05            CJNE    R7,#0FCH,?C0243
                                           ; SOURCE LINE # 984
                                           ; SOURCE LINE # 985
0042 7800        E     MOV     R0,#LOW ucMode_Curr
0044 76FE              MOV     @R0,#0FEH
0046 22                RET     
                                           ; SOURCE LINE # 987
                                           ; SOURCE LINE # 988
0047         ?C0243:
                                           ; SOURCE LINE # 989
0047 120000      R     LCALL   L?1060
004A 7B04              MOV     R3,#04H
004C 7F0D              MOV     R7,#0DH
                                           ; SOURCE LINE # 990
004E 8033              SJMP    ?C0922
                                           ; SOURCE LINE # 992
0050         ?C0246:
                                           ; SOURCE LINE # 994
0050 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0
0053 120000      R     LCALL   L?1065
0056 120000      R     LCALL   L?1038
0059 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 995
005B 800B              SJMP    ?C0921
                                           ; SOURCE LINE # 997
005D         ?C0247:
                                           ; SOURCE LINE # 999
005D 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+01H
0060 120000      R     LCALL   L?1065
0063 120000      R     LCALL   L?1038
0066 7F07              MOV     R7,#07H
0068         ?C0921:
0068 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1000
006B 8019              SJMP    ?C0241
                                           ; SOURCE LINE # 1002
006D         ?C0248:
                                           ; SOURCE LINE # 1004
006D 120000      R     LCALL   L?1174
0070 120000      R     LCALL   L?1062
0073 7B04              MOV     R3,#04H
0075 7F0B              MOV     R7,#0BH
0077         ?C0920:
                                           ; SOURCE LINE # 1005
0077 800A              SJMP    ?C0922
                                           ; SOURCE LINE # 1007
0079         ?C0249:
                                           ; SOURCE LINE # 1009
0079 120000      R     LCALL   L?1111
007C 120000      R     LCALL   L?1062
007F 7B01              MOV     R3,#01H
0081 7F09              MOV     R7,#09H
0083         ?C0922:
0083 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1010
                                           ; SOURCE LINE # 1011
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 133 

0086         ?C0241:
                                           ; SOURCE LINE # 1013
0086 E4                CLR     A
0087 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0089 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1015
008A 22                RET     
008B         ?C0240:
                                           ; SOURCE LINE # 1017
                                           ; SOURCE LINE # 1018
008B 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
008D E6                MOV     A,@R0
008E FF                MOV     R7,A
008F 6406              XRL     A,#06H
0091 700C              JNZ     ?C0251
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1021
0093 FE                MOV     R6,A
0094 FC                MOV     R4,A
0095 120000      R     LCALL   L?1031
0098 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
009B 120000      R     LCALL   L?1144
                                           ; SOURCE LINE # 1026
009E 22                RET     
009F         ?C0251:
                                           ; SOURCE LINE # 1027
009F 7800        E     MOV     R0,#LOW ucMode_Curr
00A1 E6                MOV     A,@R0
00A2 7003              JNZ     $ + 5H
00A4 020000      R     LJMP    ?C0245
00A7 F4                CPL     A
00A8 7003              JNZ     $ + 5H
00AA 020000      R     LJMP    ?C0245
                                           ; SOURCE LINE # 1028
                                           ; SOURCE LINE # 1029
00AD 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
00AF E6                MOV     A,@R0
00B0 14                DEC     A
00B1 601A              JZ      ?C0256
00B3 14                DEC     A
00B4 6025              JZ      ?C0257
00B6 14                DEC     A
00B7 604A              JZ      ?C0259
00B9 14                DEC     A
00BA 605E              JZ      ?C0260
00BC 24FD              ADD     A,#0FDH
00BE 602A              JZ      ?C0258
00C0 2402              ADD     A,#02H
00C2 7068              JNZ     ?C0245
                                           ; SOURCE LINE # 1030
                                           ; SOURCE LINE # 1031
00C4         ?C0255:
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
00C4 120000      R     LCALL   L?1048
00C7 7B04              MOV     R3,#04H
00C9 7F0D              MOV     R7,#0DH
                                           ; SOURCE LINE # 1034
00CB 804A              SJMP    ?C0925
                                           ; SOURCE LINE # 1036
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 134 

00CD         ?C0256:
                                           ; SOURCE LINE # 1037
00CD 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00CF 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1040
00D1 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0
00D4 120000      R     LCALL   L?1036
00D7 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 1041
00D9 800C              SJMP    ?C0924
                                           ; SOURCE LINE # 1043
00DB         ?C0257:
                                           ; SOURCE LINE # 1044
00DB 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00DD 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1047
00DF 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+01H
00E2 120000      R     LCALL   L?1036
00E5 7F07              MOV     R7,#07H
00E7         ?C0924:
00E7 020000      R     LJMP    _OSD_Slider
                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1050
00EA         ?C0258:
                                           ; SOURCE LINE # 1051
00EA E500        E     MOV     A,stGUD1+01H
00EC 5418              ANL     A,#018H
00EE 13                RRC     A
00EF 13                RRC     A
00F0 13                RRC     A
00F1 541F              ANL     A,#01FH
00F3 04                INC     A
00F4 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00F6 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1054
00F7 120000      R     LCALL   L?1175
00FA 120000      R     LCALL   L?1050
00FD 7B04              MOV     R3,#04H
00FF 7F0B              MOV     R7,#0BH
0101         ?C0923:
                                           ; SOURCE LINE # 1055
0101 8014              SJMP    ?C0925
                                           ; SOURCE LINE # 1057
0103         ?C0259:
                                           ; SOURCE LINE # 1058
0103 E500        E     MOV     A,stGUD1
0105 C4                SWAP    A
0106 13                RRC     A
0107 5403              ANL     A,#03H
0109 04                INC     A
010A 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
010C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1061
010D 120000      R     LCALL   L?1113
0110 120000      R     LCALL   L?1050
0113 7B01              MOV     R3,#01H
0115 7F09              MOV     R7,#09H
0117         ?C0925:
0117 020000      R     LJMP    _OSD_Line
                                           ; SOURCE LINE # 1062
                                           ; SOURCE LINE # 1064
011A         ?C0260:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 135 

                                           ; SOURCE LINE # 1065
011A 120000      R     LCALL   L?1028
011D 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 1067
0120 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0122 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1068
0124 E4                CLR     A
0125 08                INC     R0
0126 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1069
0127 7F83              MOV     R7,#083H
0129 120000      R     LCALL   _OSD_Proc_B
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1072
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1075
012C         ?C0245:
012C 22                RET     
             ; FUNCTION Page1_Enter_Key (END)

             ; FUNCTION _Page1_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 1077
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
0002 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0004 E6                MOV     A,@R0
0005 7003              JNZ     $ + 5H
0007 020000      R     LJMP    ?C0261
                                           ; SOURCE LINE # 1080
                                           ; SOURCE LINE # 1081
000A 18                DEC     R0
000B E6                MOV     A,@R0
000C 14                DEC     A
000D 603C              JZ      ?C0266
000F 14                DEC     A
0010 6059              JZ      ?C0269
0012 14                DEC     A
0013 7003              JNZ     $ + 5H
0015 020000      R     LJMP    ?C0277
0018 24FC              ADD     A,#0FCH
001A 6065              JZ      ?C0270
001C 2402              ADD     A,#02H
001E 6003              JZ      $ + 5H
0020 020000      R     LJMP    ?C0283
                                           ; SOURCE LINE # 1082
                                           ; SOURCE LINE # 1083
0023         ?C0263:
                                           ; SOURCE LINE # 1085
0023 E500        R     MOV     A,Key
0025 B40304            CJNE    A,#03H,?C0264
0028 7F01              MOV     R7,#01H
002A 8002              SJMP    ?C0265
002C         ?C0264:
002C 7F02              MOV     R7,#02H
002E         ?C0265:
002E 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0030 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1086
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 136 

0032 120000      R     LCALL   L?1063
0035 7B0E              MOV     R3,#0EH
0037 7D24              MOV     R5,#024H
0039 7F0D              MOV     R7,#0DH
003B 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1087
003E 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0040 E6                MOV     A,@R0
0041 120000      R     LCALL   L?1049
0044 7B04              MOV     R3,#04H
0046 7F0D              MOV     R7,#0DH
0048 020000      R     LJMP    _OSD_Line
                                           ; SOURCE LINE # 1088
                                           ; SOURCE LINE # 1090
004B         ?C0266:
                                           ; SOURCE LINE # 1091
004B AD00        R     MOV     R5,Key
004D 120000      R     LCALL   L?1166
                                           ; SOURCE LINE # 1093
0050 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0
0053 120000      R     LCALL   L?1036
0056 7F05              MOV     R7,#05H
0058 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1096
005B E500        E     MOV     A,stGUD1+01H
005D 5407              ANL     A,#07H
005F 7005              JNZ     ?C0267
                                           ; SOURCE LINE # 1097
0061 120000      E     LCALL   SetADC_Gain
0064 8018              SJMP    ?C0926
0066         ?C0267:
                                           ; SOURCE LINE # 1099
0066 120000      E     LCALL   Set_Bright_Contrast
0069         ?C0268:
                                           ; SOURCE LINE # 1104
                                           ; SOURCE LINE # 1105
0069 8013              SJMP    ?C0926
                                           ; SOURCE LINE # 1107
006B         ?C0269:
                                           ; SOURCE LINE # 1108
006B AD00        R     MOV     R5,Key
006D 120000      R     LCALL   L?1187
                                           ; SOURCE LINE # 1110
0070 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+01H
0073 120000      R     LCALL   L?1036
0076 7F07              MOV     R7,#07H
0078 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1111
007B 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 1112
007E         ?C0926:
007E 020000      E     LJMP    Save_GUD0
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1115
0081         ?C0270:
                                           ; SOURCE LINE # 1117
0081 E500        R     MOV     A,Key
0083 B40412            CJNE    A,#04H,?C0271
                                           ; SOURCE LINE # 1118
0086 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0088 E6                MOV     A,@R0
0089 FF                MOV     R7,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 137 

008A B40406            CJNE    A,#04H,?C0272
008D 7E04              MOV     R6,#04H
008F 7F04              MOV     R7,#04H
0091 8015              SJMP    ?C0927
0093         ?C0272:
0093 EF                MOV     A,R7
0094 04                INC     A
0095 FF                MOV     R7,A
0096         ?C0273:
0096 8010              SJMP    ?C0927
0098         ?C0271:
                                           ; SOURCE LINE # 1120
0098 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
009A E6                MOV     A,@R0
009B FF                MOV     R7,A
009C B40106            CJNE    A,#01H,?C0275
009F 7E01              MOV     R6,#01H
00A1 7F01              MOV     R7,#01H
00A3 8003              SJMP    ?C0276
00A5         ?C0275:
00A5 EF                MOV     A,R7
00A6 14                DEC     A
00A7 FF                MOV     R7,A
00A8         ?C0276:
00A8         ?C0927:
00A8 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00AA A607              MOV     @R0,AR7
00AC         ?C0274:
                                           ; SOURCE LINE # 1122
00AC 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00AE E6                MOV     A,@R0
00AF 14                DEC     A
00B0 33                RLC     A
00B1 33                RLC     A
00B2 33                RLC     A
00B3 54F8              ANL     A,#0F8H
00B5 FF                MOV     R7,A
00B6 E500        E     MOV     A,stGUD1+01H
00B8 54E7              ANL     A,#0E7H
00BA 4F                ORL     A,R7
00BB F500        E     MOV     stGUD1+01H,A
                                           ; SOURCE LINE # 1125
00BD 120000      R     LCALL   L?1063
00C0 7B14              MOV     R3,#014H
00C2 7D24              MOV     R5,#024H
00C4 7F0B              MOV     R7,#0BH
00C6 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1126
00C9 120000      R     LCALL   L?1174
00CC 120000      R     LCALL   L?1050
00CF 7B04              MOV     R3,#04H
00D1 7F0B              MOV     R7,#0BH
00D3 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1128
00D6 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
00D9 8046              SJMP    ?C0928
                                           ; SOURCE LINE # 1132
00DB         ?C0277:
                                           ; SOURCE LINE # 1134
00DB E500        R     MOV     A,Key
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 138 

00DD B4040D            CJNE    A,#04H,?C0278
                                           ; SOURCE LINE # 1135
                                           ; SOURCE LINE # 1136
00E0 7404              MOV     A,#04H
00E2 D3                SETB    C
00E3 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00E5 96                SUBB    A,@R0
00E6 4043              JC      ?C0283
                                           ; SOURCE LINE # 1137
00E8         ?C0279:
                                           ; SOURCE LINE # 1139
00E8 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00EA 06                INC     @R0
                                           ; SOURCE LINE # 1140
00EB 800B              SJMP    ?C0280
00ED         ?C0278:
                                           ; SOURCE LINE # 1142
                                           ; SOURCE LINE # 1143
00ED 7401              MOV     A,#01H
00EF C3                CLR     C
00F0 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00F2 96                SUBB    A,@R0
00F3 5036              JNC     ?C0283
                                           ; SOURCE LINE # 1144
00F5         ?C0281:
                                           ; SOURCE LINE # 1146
00F5 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00F7 16                DEC     @R0
                                           ; SOURCE LINE # 1147
00F8         ?C0280:
                                           ; SOURCE LINE # 1149
00F8 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00FA E6                MOV     A,@R0
00FB 14                DEC     A
00FC C4                SWAP    A
00FD 33                RLC     A
00FE 54E0              ANL     A,#0E0H
0100 FF                MOV     R7,A
0101 E500        E     MOV     A,stGUD1
0103 549F              ANL     A,#09FH
0105 4F                ORL     A,R7
0106 F500        E     MOV     stGUD1,A
                                           ; SOURCE LINE # 1151
0108 120000      R     LCALL   L?1063
010B 120000      R     LCALL   L?1188
010E 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1152
0111 120000      R     LCALL   L?1111
0114 120000      R     LCALL   L?1050
0117 7B01              MOV     R3,#01H
0119 7F09              MOV     R7,#09H
011B 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1154
011E 120000      E     LCALL   Set_Gamma
                                           ; SOURCE LINE # 1155
0121         ?C0928:
0121 020000      E     LJMP    Save_GUD1
                                           ; SOURCE LINE # 1156
                                           ; SOURCE LINE # 1158
                                           ; SOURCE LINE # 1159
0124         ?C0261:
                                           ; SOURCE LINE # 1161
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 139 

                                           ; SOURCE LINE # 1162
0124 7D06              MOV     R5,#06H
0126 AF00        R     MOV     R7,Key
0128 120000      R     LCALL   _Osd_Change_Item
                                           ; SOURCE LINE # 1164
                                           ; SOURCE LINE # 1165
012B         ?C0283:
012B 22                RET     
             ; FUNCTION _Page1_Left_Right_Key (END)

             ; FUNCTION Page1_Show (BEGIN)
                                           ; SOURCE LINE # 1167
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1169
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH Page1_Atb
0004 7900        E     MOV     R1,#LOW Page1_Atb
0006 E4                CLR     A
0007 F500        R     MOV     ?_Show_Osd_Page?BYTE+04H,A
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _Show_Osd_Page
                                           ; SOURCE LINE # 1172
000D 120000      R     LCALL   L?1103
0010 120000      R     LCALL   L?1026
0013 120000      R     LCALL   L?1129
0016 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 1174
                                           ; SOURCE LINE # 1175
                                           ; SOURCE LINE # 1178
0019         ?C0284:
                                           ; SOURCE LINE # 1180
0019 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0
001C 120000      R     LCALL   L?1065
001F 120000      R     LCALL   L?1038
0022 7F05              MOV     R7,#05H
0024 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1181
0027 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+01H
002A 120000      R     LCALL   L?1065
002D 120000      R     LCALL   L?1038
0030 7F07              MOV     R7,#07H
0032 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1183
0035 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0037 E6                MOV     A,@R0
0038 FF                MOV     R7,A
0039 24FC              ADD     A,#0FCH
003B 700C              JNZ     ?C0291
                                           ; SOURCE LINE # 1184
                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1186
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1189
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1192
                                           ; SOURCE LINE # 1194
003D         ?C0290:
                                           ; SOURCE LINE # 1195
003D 120000      R     LCALL   L?1053
0040 120000      R     LCALL   L?1026
0043 120000      R     LCALL   L?1033
0046 120000      R     LCALL   _OSD_Window
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 140 

                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1198
                                           ; SOURCE LINE # 1199
0049         ?C0291:
0049 22                RET     
             ; FUNCTION Page1_Show (END)

             ; FUNCTION Page1B_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1202
                                           ; SOURCE LINE # 1203
0000 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0002 7607              MOV     @R0,#07H
                                           ; SOURCE LINE # 1204
0004 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0006 E6                MOV     A,@R0
0007 6404              XRL     A,#04H
0009 7010              JNZ     ?C0292
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1207
000B 18                DEC     R0
000C 120000      R     LCALL   L?1030
000F 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 1209
0012 E4                CLR     A
0013 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0015 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1210
0016 08                INC     R0
0017 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1211
0018 020000      R     LJMP    ?C0293
001B         ?C0292:
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1214
001B 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
001D E6                MOV     A,@R0
001E 6027              JZ      ?C0294
                                           ; SOURCE LINE # 1215
                                           ; SOURCE LINE # 1216
0020 E4                CLR     A
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1217
0022 18                DEC     R0
0023 E6                MOV     A,@R0
0024 24FE              ADD     A,#0FEH
0026 600F              JZ      ?C0297
0028 14                DEC     A
0029 6014              JZ      ?C0298
002B 2402              ADD     A,#02H
002D 704A              JNZ     ?C0293
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
002F         ?C0296:
                                           ; SOURCE LINE # 1220
002F 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+02H
0032 120000      R     LCALL   L?1065
                                           ; SOURCE LINE # 1221
0035 802C              SJMP    ?C0929
                                           ; SOURCE LINE # 1223
0037         ?C0297:
                                           ; SOURCE LINE # 1224
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 141 

0037 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+03H
003A 120000      R     LCALL   L?1065
                                           ; SOURCE LINE # 1225
003D 802C              SJMP    ?C0930
                                           ; SOURCE LINE # 1227
003F         ?C0298:
                                           ; SOURCE LINE # 1228
003F 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+04H
0042 120000      R     LCALL   L?1065
                                           ; SOURCE LINE # 1229
0045 802C              SJMP    ?C0931
                                           ; SOURCE LINE # 1230
                                           ; SOURCE LINE # 1231
0047         ?C0294:
                                           ; SOURCE LINE # 1232
0047 7800        E     MOV     R0,#LOW ucMode_Curr
0049 E6                MOV     A,@R0
004A 602D              JZ      ?C0293
004C F4                CPL     A
004D 602A              JZ      ?C0293
                                           ; SOURCE LINE # 1233
                                           ; SOURCE LINE # 1234
004F 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
0051 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1237
0053 18                DEC     R0
0054 E6                MOV     A,@R0
0055 24FE              ADD     A,#0FEH
0057 600F              JZ      ?C0303
0059 14                DEC     A
005A 6014              JZ      ?C0304
005C 2402              ADD     A,#02H
005E 7019              JNZ     ?C0293
                                           ; SOURCE LINE # 1238
                                           ; SOURCE LINE # 1239
0060         ?C0302:
                                           ; SOURCE LINE # 1240
0060 120000      R     LCALL   L?1190
0063         ?C0929:
0063 120000      R     LCALL   L?1153
                                           ; SOURCE LINE # 1241
0066 800E              SJMP    ?C0933
                                           ; SOURCE LINE # 1243
0068         ?C0303:
                                           ; SOURCE LINE # 1244
0068 120000      R     LCALL   L?1191
006B         ?C0930:
006B 120000      R     LCALL   L?1155
006E         ?C0932:
                                           ; SOURCE LINE # 1245
006E 8006              SJMP    ?C0933
                                           ; SOURCE LINE # 1247
0070         ?C0304:
                                           ; SOURCE LINE # 1248
0070 120000      R     LCALL   L?1192
0073         ?C0931:
0073 120000      R     LCALL   L?1157
0076         ?C0933:
0076 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1249
                                           ; SOURCE LINE # 1250
                                           ; SOURCE LINE # 1251
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 142 

                                           ; SOURCE LINE # 1252
0079         ?C0293:
                                           ; SOURCE LINE # 1253
0079 7800        R     MOV     R0,#LOW ucOSD_Page_Index
007B 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1254
007D 22                RET     
             ; FUNCTION Page1B_Enter_Key (END)

             ; FUNCTION _Page1B_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 1256
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1258
0002 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0004 7607              MOV     @R0,#07H
                                           ; SOURCE LINE # 1259
0006 18                DEC     R0
0007 E6                MOV     A,@R0
0008 6047              JZ      ?C0306
                                           ; SOURCE LINE # 1260
                                           ; SOURCE LINE # 1261
000A 18                DEC     R0
000B E6                MOV     A,@R0
000C 24FE              ADD     A,#0FEH
000E 6016              JZ      ?C0309
0010 14                DEC     A
0011 6022              JZ      ?C0310
0013 2402              ADD     A,#02H
0015 7032              JNZ     ?C0307
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1263
0017         ?C0308:
                                           ; SOURCE LINE # 1264
0017 7A00        E     MOV     R2,#HIGH stGUD0+02H
0019 7900        E     MOV     R1,#LOW stGUD0+02H
001B 120000      R     LCALL   L?1178
                                           ; SOURCE LINE # 1266
001E 120000      R     LCALL   L?1190
0021 120000      R     LCALL   L?1153
                                           ; SOURCE LINE # 1267
0024 8020              SJMP    ?C0935
                                           ; SOURCE LINE # 1269
0026         ?C0309:
                                           ; SOURCE LINE # 1270
0026 7A00        E     MOV     R2,#HIGH stGUD0+03H
0028 7900        E     MOV     R1,#LOW stGUD0+03H
002A 120000      R     LCALL   L?1178
                                           ; SOURCE LINE # 1272
002D 120000      R     LCALL   L?1191
0030 120000      R     LCALL   L?1155
0033         ?C0934:
                                           ; SOURCE LINE # 1273
0033 8011              SJMP    ?C0935
                                           ; SOURCE LINE # 1275
0035         ?C0310:
                                           ; SOURCE LINE # 1276
0035 7B00              MOV     R3,#00H
0037 7A00        E     MOV     R2,#HIGH stGUD0+04H
0039 7900        E     MOV     R1,#LOW stGUD0+04H
003B AD00        R     MOV     R5,Key
003D 120000      R     LCALL   _Bright_Contrast_Adjust
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 143 

                                           ; SOURCE LINE # 1278
0040 120000      R     LCALL   L?1192
0043 120000      R     LCALL   L?1157
0046         ?C0935:
0046 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1280
0049         ?C0307:
                                           ; SOURCE LINE # 1282
0049 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 1283
004C 120000      E     LCALL   Save_GUD0
                                           ; SOURCE LINE # 1285
004F 8035              SJMP    ?C0311
0051         ?C0306:
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1289
0051 E500        R     MOV     A,Key
0053 B40310            CJNE    A,#03H,?C0312
                                           ; SOURCE LINE # 1290
0056 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0058 E6                MOV     A,@R0
0059 FF                MOV     R7,A
005A B40404            CJNE    A,#04H,?C0313
005D 7F01              MOV     R7,#01H
005F 8013              SJMP    ?C0936
0061         ?C0313:
0061 EF                MOV     A,R7
0062 04                INC     A
0063 FF                MOV     R7,A
0064         ?C0314:
0064 800E              SJMP    ?C0936
0066         ?C0312:
                                           ; SOURCE LINE # 1292
0066 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0068 E6                MOV     A,@R0
0069 FF                MOV     R7,A
006A B40104            CJNE    A,#01H,?C0316
006D 7F04              MOV     R7,#04H
006F 8003              SJMP    ?C0317
0071         ?C0316:
0071 EF                MOV     A,R7
0072 14                DEC     A
0073 FF                MOV     R7,A
0074         ?C0317:
0074         ?C0936:
0074 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0076 A607              MOV     @R0,AR7
0078         ?C0315:
                                           ; SOURCE LINE # 1294
0078 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
007A 120000      R     LCALL   L?1052
007D 120000      R     LCALL   L?1026
0080 120000      R     LCALL   L?1033
0083 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 1296
0086         ?C0311:
                                           ; SOURCE LINE # 1297
0086 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0088 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1298
008A 22                RET     
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 144 

             ; FUNCTION _Page1B_Left_Right_Key (END)

             ; FUNCTION Page1B_Show (BEGIN)
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
                                           ; SOURCE LINE # 1302
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH Page7_Atb
0004 7900        E     MOV     R1,#LOW Page7_Atb
0006 750006      R     MOV     ?_Show_Osd_Page?BYTE+04H,#06H
0009 E4                CLR     A
000A FF                MOV     R7,A
000B 120000      R     LCALL   _Show_Osd_Page
                                           ; SOURCE LINE # 1305
000E 120000      R     LCALL   L?1103
0011 120000      R     LCALL   L?1026
0014 120000      R     LCALL   L?1033
0017 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 1307
001A 7800        E     MOV     R0,#LOW ucMode_Curr
001C E6                MOV     A,@R0
001D 6003              JZ      ?C0320
001F B4FF04            CJNE    A,#0FFH,?C0319
0022         ?C0320:
                                           ; SOURCE LINE # 1308
0022 E4                CLR     A
0023 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
0025 F6                MOV     @R0,A
0026         ?C0319:
                                           ; SOURCE LINE # 1310
0026 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
0028 E6                MOV     A,@R0
0029 702B              JNZ     ?C0323
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1312
002B 08                INC     R0
002C 7607              MOV     @R0,#07H
                                           ; SOURCE LINE # 1313
002E 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+02H
0031 120000      R     LCALL   L?1065
0034 120000      R     LCALL   L?1154
0037 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1314
003A 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+03H
003D 120000      R     LCALL   L?1065
0040 120000      R     LCALL   L?1156
0043 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1315
0046 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD0+04H
0049 120000      R     LCALL   L?1065
004C 120000      R     LCALL   L?1158
004F 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1316
0052 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0054 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1319
                                           ; SOURCE LINE # 1328
                                           ; SOURCE LINE # 1329
0056         ?C0323:
0056 22                RET     
             ; FUNCTION Page1B_Show (END)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 145 


             ; FUNCTION Page2_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 1331
                                           ; SOURCE LINE # 1332
                                           ; SOURCE LINE # 1333
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0002 E6                MOV     A,@R0
0003 701A              JNZ     ?C0324
                                           ; SOURCE LINE # 1334
                                           ; SOURCE LINE # 1335
0005 7800        E     MOV     R0,#LOW ucMode_Curr
0007 E6                MOV     A,@R0
0008 7003              JNZ     $ + 5H
000A 020000      R     LJMP    ?C0346
000D F4                CPL     A
000E 7003              JNZ     $ + 5H
0010 020000      R     LJMP    ?C0346
                                           ; SOURCE LINE # 1336
                                           ; SOURCE LINE # 1338
                                           ; SOURCE LINE # 1339
                                           ; SOURCE LINE # 1342
0013 120000      R     LCALL   L?1055
0016 120000      R     LCALL   L?1027
0019 120000      R     LCALL   L?1033
001C 020000      R     LJMP    _OSD_Window
                                           ; SOURCE LINE # 1343
                                           ; SOURCE LINE # 1344
001F         ?C0324:
                                           ; SOURCE LINE # 1346
                                           ; SOURCE LINE # 1347
001F 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0021 E6                MOV     A,@R0
0022 6059              JZ      ?C0327
                                           ; SOURCE LINE # 1348
                                           ; SOURCE LINE # 1349
0024 18                DEC     R0
0025 E6                MOV     A,@R0
0026 24FE              ADD     A,#0FEH
0028 601A              JZ      ?C0330
002A 14                DEC     A
002B 603E              JZ      ?C0333
002D 14                DEC     A
002E 601E              JZ      ?C0331
0030 14                DEC     A
0031 6028              JZ      ?C0332
0033 2404              ADD     A,#04H
0035 7041              JNZ     ?C0328
                                           ; SOURCE LINE # 1350
                                           ; SOURCE LINE # 1351
0037         ?C0329:
                                           ; SOURCE LINE # 1352
0037 120000      R     LCALL   L?1078
003A 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
003D 120000      R     LCALL   L?1038
0040 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 1353
0042 8022              SJMP    ?C0939
                                           ; SOURCE LINE # 1355
0044         ?C0330:
                                           ; SOURCE LINE # 1356
0044 120000      R     LCALL   L?1064
0047 120000      R     LCALL   L?1038
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 146 

004A 7F07              MOV     R7,#07H
004C         ?C0937:
                                           ; SOURCE LINE # 1357
004C 8018              SJMP    ?C0939
                                           ; SOURCE LINE # 1359
004E         ?C0331:
                                           ; SOURCE LINE # 1363
004E 120000      R     LCALL   L?1093
0051 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
0054 120000      R     LCALL   L?1038
0057 7F0B              MOV     R7,#0BH
0059         ?C0938:
                                           ; SOURCE LINE # 1365
0059 800B              SJMP    ?C0939
                                           ; SOURCE LINE # 1367
005B         ?C0332:
                                           ; SOURCE LINE # 1370
005B 120000      R     LCALL   L?1176
005E 120000      R     LCALL   L?1065
0061 120000      R     LCALL   L?1038
0064 7F0D              MOV     R7,#0DH
0066         ?C0939:
0066 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1374
0069 800D              SJMP    ?C0328
                                           ; SOURCE LINE # 1376
006B         ?C0333:
                                           ; SOURCE LINE # 1377
006B 120000      R     LCALL   L?1112
006E 120000      R     LCALL   L?1062
0071 7B01              MOV     R3,#01H
0073 7F09              MOV     R7,#09H
0075 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1378
                                           ; SOURCE LINE # 1380
0078         ?C0328:
                                           ; SOURCE LINE # 1382
0078 E4                CLR     A
0079 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
007B F6                MOV     @R0,A
                                           ; SOURCE LINE # 1384
007C 22                RET     
007D         ?C0327:
                                           ; SOURCE LINE # 1386
                                           ; SOURCE LINE # 1387
007D 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
007F E6                MOV     A,@R0
0080 FF                MOV     R7,A
0081 6406              XRL     A,#06H
0083 700C              JNZ     ?C0335
                                           ; SOURCE LINE # 1388
                                           ; SOURCE LINE # 1390
0085 FE                MOV     R6,A
0086 FC                MOV     R4,A
0087 120000      R     LCALL   L?1031
008A 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 1393
                                           ; SOURCE LINE # 1394
008D 120000      R     LCALL   L?1145
                                           ; SOURCE LINE # 1395
0090 22                RET     
0091         ?C0335:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 147 

                                           ; SOURCE LINE # 1396
0091 7800        E     MOV     R0,#LOW ucMode_Curr
0093 E6                MOV     A,@R0
0094 606D              JZ      ?C0346
0096 F4                CPL     A
0097 606A              JZ      ?C0346
                                           ; SOURCE LINE # 1397
                                           ; SOURCE LINE # 1398
0099 E500        E     MOV     A,stGUD1+01H
009B 5407              ANL     A,#07H
009D 6007              JZ      ?C0339
009F 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
00A1 E6                MOV     A,@R0
00A2 6403              XRL     A,#03H
00A4 705D              JNZ     ?C0346
00A6         ?C0339:
                                           ; SOURCE LINE # 1399
                                           ; SOURCE LINE # 1400
00A6 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
00A8 E6                MOV     A,@R0
00A9 24FE              ADD     A,#0FEH
00AB 601B              JZ      ?C0342
00AD 14                DEC     A
00AE 6040              JZ      ?C0345
00B0 14                DEC     A
00B1 6020              JZ      ?C0343
00B3 14                DEC     A
00B4 602B              JZ      ?C0344
00B6 2404              ADD     A,#04H
00B8 7049              JNZ     ?C0346
                                           ; SOURCE LINE # 1401
                                           ; SOURCE LINE # 1402
00BA         ?C0341:
                                           ; SOURCE LINE # 1403
00BA 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00BC 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1404
00BE 120000      R     LCALL   L?1078
00C1 120000      R     LCALL   L?1037
00C4 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 1405
00C6 8025              SJMP    ?C0942
                                           ; SOURCE LINE # 1407
00C8         ?C0342:
                                           ; SOURCE LINE # 1408
00C8 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00CA 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1409
00CC 120000      R     LCALL   L?1035
00CF 7F07              MOV     R7,#07H
00D1         ?C0940:
                                           ; SOURCE LINE # 1410
00D1 801A              SJMP    ?C0942
                                           ; SOURCE LINE # 1412
00D3         ?C0343:
                                           ; SOURCE LINE # 1413
00D3 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00D5 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1417
00D7 120000      R     LCALL   L?1093
00DA 120000      R     LCALL   L?1037
00DD 7F0B              MOV     R7,#0BH
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 148 

00DF         ?C0941:
                                           ; SOURCE LINE # 1419
00DF 800C              SJMP    ?C0942
                                           ; SOURCE LINE # 1421
00E1         ?C0344:
                                           ; SOURCE LINE # 1422
00E1 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00E3 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1424
00E5 120000      R     LCALL   L?1176
00E8 120000      R     LCALL   L?1036
00EB 7F0D              MOV     R7,#0DH
00ED         ?C0942:
00ED 020000      R     LJMP    _OSD_Slider
                                           ; SOURCE LINE # 1428
                                           ; SOURCE LINE # 1430
00F0         ?C0345:
                                           ; SOURCE LINE # 1431
00F0 E500        E     MOV     A,stGUD1+02H
00F2 04                INC     A
00F3 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00F5 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1432
00F6 120000      R     LCALL   L?1113
00F9 120000      R     LCALL   L?1050
00FC 7B01              MOV     R3,#01H
00FE 7F09              MOV     R7,#09H
0100 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1433
                                           ; SOURCE LINE # 1435
                                           ; SOURCE LINE # 1436
                                           ; SOURCE LINE # 1437
                                           ; SOURCE LINE # 1438
                                           ; SOURCE LINE # 1439
                                           ; SOURCE LINE # 1440
0103         ?C0346:
0103 22                RET     
             ; FUNCTION Page2_Enter_Key (END)

             ; FUNCTION _Page2_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 1442
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 1443
                                           ; SOURCE LINE # 1444
0002 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0004 E6                MOV     A,@R0
0005 7003              JNZ     $ + 5H
0007 020000      R     LJMP    ?C0347
                                           ; SOURCE LINE # 1445
                                           ; SOURCE LINE # 1446
000A 18                DEC     R0
000B E6                MOV     A,@R0
000C 24FE              ADD     A,#0FEH
000E 7003              JNZ     $ + 5H
0010 020000      R     LJMP    ?C0366
0013 14                DEC     A
0014 7003              JNZ     $ + 5H
0016 020000      R     LJMP    ?C0393
0019 14                DEC     A
001A 7003              JNZ     $ + 5H
001C 020000      R     LJMP    ?C0371
001F 14                DEC     A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 149 

0020 7003              JNZ     $ + 5H
0022 020000      R     LJMP    ?C0376
0025 2404              ADD     A,#04H
0027 6003              JZ      $ + 5H
0029 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 1447
                                           ; SOURCE LINE # 1448
002C         ?C0349:
                                           ; SOURCE LINE # 1450
002C E500        R     MOV     A,Key
002E 6404              XRL     A,#04H
0030 7045              JNZ     ?C0350
                                           ; SOURCE LINE # 1451
                                           ; SOURCE LINE # 1452
0032 7800        E     MOV     R0,#LOW ucH_Min_Margin
0034 E6                MOV     A,@R0
0035 FF                MOV     R7,A
0036 C3                CLR     C
0037 9500        E     SUBB    A,stMUD
0039 4003              JC      $ + 5H
003B 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 1453
003E         ?C0351:
                                           ; SOURCE LINE # 1455
003E 120000      R     LCALL   L?1102
0041 4014              JC      ?C0352
                                           ; SOURCE LINE # 1456
0043 E500        E     MOV     A,stMUD
0045 D3                SETB    C
0046 9F                SUBB    A,R7
0047 4006              JC      ?C0353
0049 E500        E     MOV     A,stMUD
004B 14                DEC     A
004C FF                MOV     R7,A
004D 8004              SJMP    ?C0354
004F         ?C0353:
004F 7800        E     MOV     R0,#LOW ucH_Min_Margin
0051 E6                MOV     A,@R0
0052 FF                MOV     R7,A
0053         ?C0354:
0053 8F00        E     MOV     stMUD,R7
0055 805B              SJMP    ?C0358
0057         ?C0352:
                                           ; SOURCE LINE # 1458
0057 7800        E     MOV     R0,#LOW ucH_Min_Margin
0059 E6                MOV     A,@R0
005A FF                MOV     R7,A
005B 2402              ADD     A,#02H
005D FD                MOV     R5,A
005E E4                CLR     A
005F 33                RLC     A
0060 FC                MOV     R4,A
0061 E500        E     MOV     A,stMUD
0063 D3                SETB    C
0064 9D                SUBB    A,R5
0065 EC                MOV     A,R4
0066 120000      R     LCALL   L?1092
0069 4008              JC      ?C0356
006B E500        E     MOV     A,stMUD
006D 24FD              ADD     A,#0FDH
006F FE                MOV     R6,A
0070 FF                MOV     R7,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 150 

0071 8000              SJMP    ?C0357
0073         ?C0356:
0073         ?C0357:
0073 8F00        E     MOV     stMUD,R7
                                           ; SOURCE LINE # 1459
0075 803B              SJMP    ?C0358
0077         ?C0350:
                                           ; SOURCE LINE # 1461
                                           ; SOURCE LINE # 1462
0077 7800        E     MOV     R0,#LOW ucH_Max_Margin
0079 E6                MOV     A,@R0
007A FF                MOV     R7,A
007B D3                SETB    C
007C 9500        E     SUBB    A,stMUD
007E 5003              JNC     $ + 5H
0080 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 1463
0083         ?C0359:
                                           ; SOURCE LINE # 1465
0083 120000      R     LCALL   L?1102
0086 4013              JC      ?C0360
                                           ; SOURCE LINE # 1466
0088 E500        E     MOV     A,stMUD
008A 9F                SUBB    A,R7
008B 5006              JNC     ?C0361
008D E500        E     MOV     A,stMUD
008F 04                INC     A
0090 FF                MOV     R7,A
0091 8004              SJMP    ?C0362
0093         ?C0361:
0093 7800        E     MOV     R0,#LOW ucH_Max_Margin
0095 E6                MOV     A,@R0
0096 FF                MOV     R7,A
0097         ?C0362:
0097 8F00        E     MOV     stMUD,R7
0099 8017              SJMP    ?C0358
009B         ?C0360:
                                           ; SOURCE LINE # 1468
009B 7800        E     MOV     R0,#LOW ucH_Max_Margin
009D E6                MOV     A,@R0
009E FF                MOV     R7,A
009F 24FE              ADD     A,#0FEH
00A1 FE                MOV     R6,A
00A2 E500        E     MOV     A,stMUD
00A4 C3                CLR     C
00A5 9E                SUBB    A,R6
00A6 5008              JNC     ?C0364
00A8 E500        E     MOV     A,stMUD
00AA 2403              ADD     A,#03H
00AC FE                MOV     R6,A
00AD FF                MOV     R7,A
00AE 8000              SJMP    ?C0365
00B0         ?C0364:
00B0         ?C0365:
00B0 8F00        E     MOV     stMUD,R7
                                           ; SOURCE LINE # 1469
00B2         ?C0358:
                                           ; SOURCE LINE # 1471
00B2 120000      R     LCALL   L?1079
00B5 120000      R     LCALL   L?1037
00B8 7F05              MOV     R7,#05H
00BA 120000      R     LCALL   _OSD_Slider
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 151 

                                           ; SOURCE LINE # 1472
00BD 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1473
                                           ; SOURCE LINE # 1474
                                           ; SOURCE LINE # 1475
00C0 020000      R     LJMP    ?C0943
                                           ; SOURCE LINE # 1477
00C3         ?C0366:
                                           ; SOURCE LINE # 1479
00C3 E500        R     MOV     A,Key
00C5 B4041D            CJNE    A,#04H,?C0367
                                           ; SOURCE LINE # 1480
                                           ; SOURCE LINE # 1481
00C8 7800        E     MOV     R0,#LOW ucV_Min_Margin
00CA E6                MOV     A,@R0
00CB FF                MOV     R7,A
00CC C3                CLR     C
00CD E4                CLR     A
00CE 9F                SUBB    A,R7
00CF FF                MOV     R7,A
00D0 7401              MOV     A,#01H
00D2 9400              SUBB    A,#00H
00D4 FE                MOV     R6,A
00D5 D3                SETB    C
00D6 EF                MOV     A,R7
00D7 9500        E     SUBB    A,stMUD+01H
00D9 EE                MOV     A,R6
00DA 9400              SUBB    A,#00H
00DC 5003              JNC     $ + 5H
00DE 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 1482
00E1         ?C0368:
                                           ; SOURCE LINE # 1484
00E1 0500        E     INC     stMUD+01H
                                           ; SOURCE LINE # 1485
00E3 800D              SJMP    ?C0369
00E5         ?C0367:
                                           ; SOURCE LINE # 1487
                                           ; SOURCE LINE # 1488
00E5 7800        E     MOV     R0,#LOW ucV_Min_Margin
00E7 E6                MOV     A,@R0
00E8 C3                CLR     C
00E9 9500        E     SUBB    A,stMUD+01H
00EB 4003              JC      $ + 5H
00ED 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 1489
00F0         ?C0370:
                                           ; SOURCE LINE # 1491
00F0 1500        E     DEC     stMUD+01H
                                           ; SOURCE LINE # 1492
00F2         ?C0369:
                                           ; SOURCE LINE # 1494
00F2 120000      R     LCALL   L?1035
00F5 7F07              MOV     R7,#07H
00F7 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1495
00FA 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 1496
                                           ; SOURCE LINE # 1497
00FD 020000      R     LJMP    ?C0946
                                           ; SOURCE LINE # 1499
0100         ?C0371:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 152 

                                           ; SOURCE LINE # 1519
0100 53007C      E     ANL     stMUD+03H,#07CH
                                           ; SOURCE LINE # 1521
0103 E500        R     MOV     A,Key
0105 B4040E            CJNE    A,#04H,?C0372
                                           ; SOURCE LINE # 1522
                                           ; SOURCE LINE # 1523
0108 747C              MOV     A,#07CH
010A D3                SETB    C
010B 9500        E     SUBB    A,stMUD+03H
010D 5003              JNC     $ + 5H
010F 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 1524
0112         ?C0373:
                                           ; SOURCE LINE # 1526
0112 7404              MOV     A,#04H
                                           ; SOURCE LINE # 1527
0114 8009              SJMP    ?C0945
0116         ?C0372:
                                           ; SOURCE LINE # 1529
                                           ; SOURCE LINE # 1530
0116 E500        E     MOV     A,stMUD+03H
0118 7003              JNZ     $ + 5H
011A 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 1531
011D         ?C0375:
                                           ; SOURCE LINE # 1533
011D 74FC              MOV     A,#0FCH
011F         ?C0945:
011F 2500        E     ADD     A,stMUD+03H
0121 F500        E     MOV     stMUD+03H,A
                                           ; SOURCE LINE # 1534
0123         ?C0374:
                                           ; SOURCE LINE # 1536
0123 120000      R     LCALL   L?1094
0126 120000      R     LCALL   L?1037
0129 7F0B              MOV     R7,#0BH
012B 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1538
012E         ?C0943:
012E AF00        E     MOV     R7,stMUD+03H
0130 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 1539
0133         ?C0944:
                                           ; SOURCE LINE # 1540
0133 020000      R     LJMP    ?C0946
                                           ; SOURCE LINE # 1542
0136         ?C0376:
                                           ; SOURCE LINE # 1545
0136 E500        R     MOV     A,Key
0138 6404              XRL     A,#04H
013A 7043              JNZ     ?C0377
                                           ; SOURCE LINE # 1546
                                           ; SOURCE LINE # 1547
013C 74B2              MOV     A,#0B2H
013E D3                SETB    C
013F 9500        E     SUBB    A,stMUD+02H
0141 5003              JNC     $ + 5H
0143 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 1548
0146         ?C0378:
                                           ; SOURCE LINE # 1550
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 153 

0146 120000      R     LCALL   L?1102
0149 4015              JC      ?C0379
                                           ; SOURCE LINE # 1551
014B 74B1              MOV     A,#0B1H
014D 9500        E     SUBB    A,stMUD+02H
014F 4007              JC      ?C0380
0151 E500        E     MOV     A,stMUD+02H
0153 120000      R     LCALL   L?1182
0156 8004              SJMP    ?C0381
0158         ?C0380:
0158 7E00              MOV     R6,#00H
015A 7FB2              MOV     R7,#0B2H
015C         ?C0381:
015C 8F00        E     MOV     stMUD+02H,R7
015E 8017              SJMP    ?C0382
0160         ?C0379:
                                           ; SOURCE LINE # 1553
0160 74B0              MOV     A,#0B0H
0162 C3                CLR     C
0163 9500        E     SUBB    A,stMUD+02H
0165 400A              JC      ?C0383
0167 E500        E     MOV     A,stMUD+02H
0169 2402              ADD     A,#02H
016B FF                MOV     R7,A
016C E4                CLR     A
016D 33                RLC     A
016E FE                MOV     R6,A
016F 8004              SJMP    ?C0384
0171         ?C0383:
0171 7E00              MOV     R6,#00H
0173 7FB2              MOV     R7,#0B2H
0175         ?C0384:
0175 8F00        E     MOV     stMUD+02H,R7
0177         ?C0382:
                                           ; SOURCE LINE # 1555
0177 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 1556
017A 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1557
017D 803A              SJMP    ?C0385
017F         ?C0377:
                                           ; SOURCE LINE # 1559
                                           ; SOURCE LINE # 1560
017F 744E              MOV     A,#04EH
0181 C3                CLR     C
0182 9500        E     SUBB    A,stMUD+02H
0184 4003              JC      $ + 5H
0186 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 1561
0189         ?C0386:
                                           ; SOURCE LINE # 1563
0189 120000      R     LCALL   L?1102
018C 4013              JC      ?C0387
                                           ; SOURCE LINE # 1564
018E 744F              MOV     A,#04FH
0190 D3                SETB    C
0191 9500        E     SUBB    A,stMUD+02H
0193 5006              JNC     ?C0388
0195 E500        E     MOV     A,stMUD+02H
0197 14                DEC     A
0198 FF                MOV     R7,A
0199 8002              SJMP    ?C0389
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 154 

019B         ?C0388:
019B 7F4E              MOV     R7,#04EH
019D         ?C0389:
019D 8F00        E     MOV     stMUD+02H,R7
019F 8012              SJMP    ?C0390
01A1         ?C0387:
                                           ; SOURCE LINE # 1566
01A1 7450              MOV     A,#050H
01A3 D3                SETB    C
01A4 9500        E     SUBB    A,stMUD+02H
01A6 5007              JNC     ?C0391
01A8 E500        E     MOV     A,stMUD+02H
01AA 24FE              ADD     A,#0FEH
01AC FF                MOV     R7,A
01AD 8002              SJMP    ?C0392
01AF         ?C0391:
01AF 7F4E              MOV     R7,#04EH
01B1         ?C0392:
01B1 8F00        E     MOV     stMUD+02H,R7
01B3         ?C0390:
                                           ; SOURCE LINE # 1568
01B3 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1569
01B6 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 1570
01B9         ?C0385:
                                           ; SOURCE LINE # 1572
01B9 120000      R     LCALL   L?1177
01BC 120000      R     LCALL   L?1036
01BF 7F0D              MOV     R7,#0DH
01C1 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1605
01C4         ?C0946:
01C4 7800        E     MOV     R0,#LOW ucMode_Curr
01C6 E6                MOV     A,@R0
01C7 FF                MOV     R7,A
01C8 020000      E     LJMP    _Save_MUD
                                           ; SOURCE LINE # 1606
                                           ; SOURCE LINE # 1608
01CB         ?C0393:
                                           ; SOURCE LINE # 1610
01CB E500        R     MOV     A,Key
01CD B4040D            CJNE    A,#04H,?C0394
                                           ; SOURCE LINE # 1611
                                           ; SOURCE LINE # 1612
01D0 7405              MOV     A,#05H
01D2 D3                SETB    C
01D3 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01D5 96                SUBB    A,@R0
01D6 4069              JC      ?C0402
                                           ; SOURCE LINE # 1613
01D8         ?C0395:
                                           ; SOURCE LINE # 1615
01D8 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01DA 06                INC     @R0
                                           ; SOURCE LINE # 1616
01DB 800B              SJMP    ?C0396
01DD         ?C0394:
                                           ; SOURCE LINE # 1618
                                           ; SOURCE LINE # 1619
01DD 7401              MOV     A,#01H
01DF C3                CLR     C
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 155 

01E0 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01E2 96                SUBB    A,@R0
01E3 505C              JNC     ?C0402
                                           ; SOURCE LINE # 1620
01E5         ?C0397:
                                           ; SOURCE LINE # 1622
01E5 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01E7 16                DEC     @R0
                                           ; SOURCE LINE # 1623
01E8         ?C0396:
                                           ; SOURCE LINE # 1625
01E8 120000      R     LCALL   L?1063
01EB 120000      R     LCALL   L?1188
01EE 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1626
01F1 120000      R     LCALL   L?1112
01F4 120000      R     LCALL   L?1050
01F7 7B01              MOV     R3,#01H
01F9 7F09              MOV     R7,#09H
01FB 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1628
01FE 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0200 E6                MOV     A,@R0
0201 14                DEC     A
0202 F500        E     MOV     stGUD1+02H,A
                                           ; SOURCE LINE # 1629
0204 120000      E     LCALL   Sharpness
                                           ; SOURCE LINE # 1631
0207 7800        E     MOV     R0,#LOW usIPH_ACT_WID+01H
0209 E6                MOV     A,@R0
020A B40010            CJNE    A,#00H,?C0398
020D 18                DEC     R0
020E E6                MOV     A,@R0
020F B4050B            CJNE    A,#05H,?C0398
0212 E500        E     MOV     A,stGUD1+02H
0214 B40206            CJNE    A,#02H,?C0398
                                           ; SOURCE LINE # 1632
0217 7B01              MOV     R3,#01H
0219 7DFF              MOV     R5,#0FFH
021B 8015              SJMP    ?C0947
021D         ?C0398:
                                           ; SOURCE LINE # 1633
021D 7800        E     MOV     R0,#LOW usIPH_ACT_WID+01H
021F E6                MOV     A,@R0
0220 B40014            CJNE    A,#00H,?C0399
0223 18                DEC     R0
0224 E6                MOV     A,@R0
0225 B4050F            CJNE    A,#05H,?C0399
0228 E500        E     MOV     A,stGUD1+02H
022A 6402              XRL     A,#02H
022C 6009              JZ      ?C0399
                                           ; SOURCE LINE # 1634
022E E4                CLR     A
022F FB                MOV     R3,A
0230 7DFE              MOV     R5,#0FEH
0232         ?C0947:
0232 7F15              MOV     R7,#015H
0234 120000      E     LCALL   _RTDSetBit
0237         ?C0399:
                                           ; SOURCE LINE # 1636
0237 020000      E     LJMP    Save_GUD1
                                           ; SOURCE LINE # 1637
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 156 

                                           ; SOURCE LINE # 1640
                                           ; SOURCE LINE # 1641
023A         ?C0347:
                                           ; SOURCE LINE # 1643
                                           ; SOURCE LINE # 1644
023A 7D06              MOV     R5,#06H
023C AF00        R     MOV     R7,Key
023E 120000      R     LCALL   _Osd_Change_Item
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1646
0241         ?C0402:
0241 22                RET     
             ; FUNCTION _Page2_Left_Right_Key (END)

             ; FUNCTION Page2_Show (BEGIN)
                                           ; SOURCE LINE # 1649
                                           ; SOURCE LINE # 1650
                                           ; SOURCE LINE # 1651
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH Page2_Atb
0004 7900        E     MOV     R1,#LOW Page2_Atb
0006 750001      R     MOV     ?_Show_Osd_Page?BYTE+04H,#01H
0009 7F01              MOV     R7,#01H
000B 120000      R     LCALL   _Show_Osd_Page
                                           ; SOURCE LINE # 1654
000E 750000      R     MOV     ?_OSD_Window?BYTE+05H,#00H
0011 750057      R     MOV     ?_OSD_Window?BYTE+06H,#057H
0014 750000      R     MOV     ?_OSD_Window?BYTE+07H,#00H
0017 750075      R     MOV     ?_OSD_Window?BYTE+08H,#075H
001A 120000      R     LCALL   L?1026
001D 120000      R     LCALL   L?1129
0020 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 1656
0023 7800        E     MOV     R0,#LOW ucMode_Curr
0025 E6                MOV     A,@R0
0026 6003              JZ      ?C0404
0028 B4FF03            CJNE    A,#0FFH,?C0403
002B         ?C0404:
                                           ; SOURCE LINE # 1657
                                           ; SOURCE LINE # 1658
                                           ; SOURCE LINE # 1659
002B 120000      R     LCALL   L?1145
                                           ; SOURCE LINE # 1660
002E         ?C0403:
                                           ; SOURCE LINE # 1662
002E E500        E     MOV     A,stGUD1+01H
0030 5407              ANL     A,#07H
0032 600A              JZ      ?C0405
0034 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0036 E6                MOV     A,@R0
0037 6403              XRL     A,#03H
0039 6003              JZ      ?C0405
                                           ; SOURCE LINE # 1663
                                           ; SOURCE LINE # 1664
003B E4                CLR     A
003C 08                INC     R0
003D F6                MOV     @R0,A
                                           ; SOURCE LINE # 1665
003E         ?C0405:
                                           ; SOURCE LINE # 1667
003E 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0040 E6                MOV     A,@R0
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 157 

0041 7035              JNZ     ?C0414
                                           ; SOURCE LINE # 1668
                                           ; SOURCE LINE # 1669
0043 120000      R     LCALL   L?1079
0046 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
0049 120000      R     LCALL   L?1038
004C 7F05              MOV     R7,#05H
004E 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1670
0051 120000      R     LCALL   L?1064
0054 120000      R     LCALL   L?1038
0057 7F07              MOV     R7,#07H
0059 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1674
005C 120000      R     LCALL   L?1094
005F 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
0062 120000      R     LCALL   L?1038
0065 7F0B              MOV     R7,#0BH
0067 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 1678
006A 120000      R     LCALL   L?1177
006D 120000      R     LCALL   L?1065
0070 120000      R     LCALL   L?1038
0073 7F0D              MOV     R7,#0DH
0075 020000      R     LJMP    _OSD_Slider
                                           ; SOURCE LINE # 1682
0078         ?C0414:
0078 22                RET     
             ; FUNCTION Page2_Show (END)

             ; FUNCTION Page4_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 1858
                                           ; SOURCE LINE # 1859
                                           ; SOURCE LINE # 1860
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0002 E6                MOV     A,@R0
0003 7008              JNZ     ?C0415
                                           ; SOURCE LINE # 1861
                                           ; SOURCE LINE # 1863
0005 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1864
                                           ; SOURCE LINE # 1866
0007 120000      R     LCALL   L?1056
                                           ; SOURCE LINE # 1867
000A 020000      R     LJMP    ?C0951
000D         ?C0415:
                                           ; SOURCE LINE # 1869
                                           ; SOURCE LINE # 1870
000D 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
000F E6                MOV     A,@R0
0010 24FE              ADD     A,#0FEH
0012 6026              JZ      ?C0419
0014 14                DEC     A
0015 604A              JZ      ?C0422
0017 14                DEC     A
0018 606E              JZ      ?C0425
001A 14                DEC     A
001B 7003              JNZ     $ + 5H
001D 020000      R     LJMP    ?C0440
0020 14                DEC     A
0021 7003              JNZ     $ + 5H
0023 020000      R     LJMP    ?C0443
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 158 

0026 2405              ADD     A,#05H
0028 6003              JZ      $ + 5H
002A 020000      R     LJMP    ?C0444
                                           ; SOURCE LINE # 1871
                                           ; SOURCE LINE # 1872
002D         ?C0418:
                                           ; SOURCE LINE # 1873
002D E500        E     MOV     A,stGUD1
002F 5407              ANL     A,#07H
0031 04                INC     A
0032 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0034 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1874
0035 7F83              MOV     R7,#083H
0037 020000      R     LJMP    _OSD_Proc_B
                                           ; SOURCE LINE # 1875
                                           ; SOURCE LINE # 1877
003A         ?C0419:
                                           ; SOURCE LINE # 1878
003A 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
003C E6                MOV     A,@R0
003D 600D              JZ      ?C0420
                                           ; SOURCE LINE # 1879
                                           ; SOURCE LINE # 1880
003F E4                CLR     A
0040 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1881
0041 120000      R     LCALL   Get_OSD_Margin
                                           ; SOURCE LINE # 1882
0044 120000      R     LCALL   L?1086
0047 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
                                           ; SOURCE LINE # 1883
004A 800D              SJMP    ?C0948
004C         ?C0420:
                                           ; SOURCE LINE # 1885
                                           ; SOURCE LINE # 1886
004C 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
004E 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1887
0050 120000      R     LCALL   Get_OSD_Margin
                                           ; SOURCE LINE # 1888
0053 120000      R     LCALL   L?1086
0056 750002      R     MOV     ?_OSD_Slider?BYTE+05H,#02H
0059         ?C0948:
0059 120000      R     LCALL   L?1038
005C 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 1889
                                           ; SOURCE LINE # 1890
005E 020000      R     LJMP    ?C0957
                                           ; SOURCE LINE # 1892
0061         ?C0422:
                                           ; SOURCE LINE # 1893
0061 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0063 E6                MOV     A,@R0
0064 600D              JZ      ?C0423
                                           ; SOURCE LINE # 1894
                                           ; SOURCE LINE # 1895
0066 E4                CLR     A
0067 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1896
0068 120000      R     LCALL   Get_OSD_Margin
                                           ; SOURCE LINE # 1897
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 159 

006B 120000      R     LCALL   L?1088
006E 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
                                           ; SOURCE LINE # 1898
0071 800D              SJMP    ?C0949
0073         ?C0423:
                                           ; SOURCE LINE # 1900
                                           ; SOURCE LINE # 1901
0073 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0075 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1902
0077 120000      R     LCALL   Get_OSD_Margin
                                           ; SOURCE LINE # 1903
007A 120000      R     LCALL   L?1088
007D 750002      R     MOV     ?_OSD_Slider?BYTE+05H,#02H
0080         ?C0949:
0080 120000      R     LCALL   L?1038
0083 7F09              MOV     R7,#09H
0085         ?C0952:
                                           ; SOURCE LINE # 1904
                                           ; SOURCE LINE # 1905
0085 020000      R     LJMP    ?C0957
                                           ; SOURCE LINE # 1907
0088         ?C0425:
                                           ; SOURCE LINE # 1908
0088 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
008A E6                MOV     A,@R0
008B 7003              JNZ     $ + 5H
008D 020000      R     LJMP    ?C0426
                                           ; SOURCE LINE # 1909
                                           ; SOURCE LINE # 1910
0090 E4                CLR     A
0091 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1911
0092 18                DEC     R0
0093 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1914
0094 120000      R     LCALL   L?1063
0097 120000      R     LCALL   L?1195
                                           ; SOURCE LINE # 1915
009A 120000      R     LCALL   L?1184
009D 120000      R     LCALL   L?1195
                                           ; SOURCE LINE # 1917
00A0 75008A      R     MOV     ?_OSD_Line?BYTE+03H,#08AH
00A3 120000      R     LCALL   L?1105
                                           ; SOURCE LINE # 1918
00A6 120000      R     LCALL   L?1185
00A9 120000      R     LCALL   L?1161
                                           ; SOURCE LINE # 1919
00AC E500        E     MOV     A,stGUD1
00AE 5407              ANL     A,#07H
00B0 24FA              ADD     A,#0FAH
00B2 6015              JZ      ?C0429
00B4 14                DEC     A
00B5 6020              JZ      ?C0430
00B7 2402              ADD     A,#02H
00B9 703C              JNZ     ?C0431
                                           ; SOURCE LINE # 1920
                                           ; SOURCE LINE # 1921
00BB         ?C0428:
                                           ; SOURCE LINE # 1922
00BB 120000      R     LCALL   L?1066
                                           ; SOURCE LINE # 1923
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 160 

00BE 7500B3      R     MOV     ?_OSD_Line?BYTE+03H,#0B3H
                                           ; SOURCE LINE # 1924
00C1 120000      R     LCALL   L?1047
                                           ; SOURCE LINE # 1925
00C4 7500C9      R     MOV     ?_OSD_Line?BYTE+03H,#0C9H
                                           ; SOURCE LINE # 1926
00C7 8025              SJMP    ?C0955
                                           ; SOURCE LINE # 1928
00C9         ?C0429:
                                           ; SOURCE LINE # 1929
00C9 120000      R     LCALL   L?1066
                                           ; SOURCE LINE # 1930
00CC 7500DB      R     MOV     ?_OSD_Line?BYTE+03H,#0DBH
                                           ; SOURCE LINE # 1931
00CF 120000      R     LCALL   L?1047
                                           ; SOURCE LINE # 1932
00D2 7500E5      R     MOV     ?_OSD_Line?BYTE+03H,#0E5H
00D5         ?C0954:
                                           ; SOURCE LINE # 1933
00D5 8017              SJMP    ?C0955
                                           ; SOURCE LINE # 1935
00D7         ?C0430:
                                           ; SOURCE LINE # 1936
00D7 120000      R     LCALL   L?1173
00DA 7D25              MOV     R5,#025H
00DC 120000      R     LCALL   L?1162
                                           ; SOURCE LINE # 1937
00DF 75009B      R     MOV     ?_OSD_Line?BYTE+03H,#09BH
00E2 120000      R     LCALL   L?1075
                                           ; SOURCE LINE # 1938
00E5 120000      R     LCALL   L?1173
00E8 120000      R     LCALL   L?1116
                                           ; SOURCE LINE # 1939
00EB 75009C      R     MOV     ?_OSD_Line?BYTE+03H,#09CH
00EE         ?C0955:
00EE 750001      R     MOV     ?_OSD_Line?BYTE+04H,#01H
00F1 7B01              MOV     R3,#01H
00F3 7D2B              MOV     R5,#02BH
                                           ; SOURCE LINE # 1940
00F5 8024              SJMP    ?C0956
                                           ; SOURCE LINE # 1942
00F7         ?C0431:
                                           ; SOURCE LINE # 1943
00F7 75002E      R     MOV     ?_OSD_Line?BYTE+03H,#02EH
00FA 120000      R     LCALL   L?1075
                                           ; SOURCE LINE # 1944
00FD 75002D      R     MOV     ?_OSD_Line?BYTE+03H,#02DH
0100 750001      R     MOV     ?_OSD_Line?BYTE+04H,#01H
0103 7D26              MOV     R5,#026H
0105 120000      R     LCALL   L?1162
                                           ; SOURCE LINE # 1945
0108 75002E      R     MOV     ?_OSD_Line?BYTE+03H,#02EH
010B 750001      R     MOV     ?_OSD_Line?BYTE+04H,#01H
010E 120000      R     LCALL   L?1116
                                           ; SOURCE LINE # 1946
0111 750025      R     MOV     ?_OSD_Line?BYTE+03H,#025H
0114 750001      R     MOV     ?_OSD_Line?BYTE+04H,#01H
0117 7B02              MOV     R3,#02H
0119 7D2C              MOV     R5,#02CH
011B         ?C0956:
011B 7F0B              MOV     R7,#0BH
011D 120000      R     LCALL   _OSD_Line
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 161 

                                           ; SOURCE LINE # 1947
                                           ; SOURCE LINE # 1949
0120         ?C0427:
                                           ; SOURCE LINE # 1950
0120 120000      R     LCALL   L?1063
0123 120000      R     LCALL   L?1161
                                           ; SOURCE LINE # 1952
0126 E4                CLR     A
0127 F500        R     MOV     ?_OSD_Line?BYTE+03H,A
0129 120000      R     LCALL   L?1077
                                           ; SOURCE LINE # 1953
012C E4                CLR     A
012D F500        R     MOV     ?_OSD_Line?BYTE+03H,A
012F 120000      R     LCALL   L?1084
                                           ; SOURCE LINE # 1955
0132 120000      R     LCALL   L?1051
0135 120000      R     LCALL   L?1058
0138 E4                CLR     A
0139         ?C0951:
0139 120000      R     LCALL   L?1027
013C 120000      R     LCALL   L?1033
013F 020000      R     LJMP    _OSD_Window
                                           ; SOURCE LINE # 1958
0142         ?C0426:
                                           ; SOURCE LINE # 1959
0142 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0144 E6                MOV     A,@R0
0145 FF                MOV     R7,A
0146 6070              JZ      ?C0433
                                           ; SOURCE LINE # 1960
                                           ; SOURCE LINE # 1961
0148 B4020F            CJNE    A,#02H,?C0434
                                           ; SOURCE LINE # 1962
                                           ; SOURCE LINE # 1963
014B 120000      R     LCALL   L?1061
014E 7B03              MOV     R3,#03H
0150 7F0B              MOV     R7,#0BH
0152 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1964
0155 E4                CLR     A
0156 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0158 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1965
0159 22                RET     
015A         ?C0434:
                                           ; SOURCE LINE # 1967
                                           ; SOURCE LINE # 1968
015A 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
015C 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1969
015E E500        E     MOV     A,stGUD1+06H
0160 C3                CLR     C
0161 9405              SUBB    A,#05H
0163 500D              JNC     ?C0436
                                           ; SOURCE LINE # 1970
                                           ; SOURCE LINE # 1971
0165 750014      E     MOV     stGUD1+06H,#014H
                                           ; SOURCE LINE # 1972
0168 7800        E     MOV     R0,#LOW usOSD_Timer
016A 7603              MOV     @R0,#03H
016C 08                INC     R0
016D 76FC              MOV     @R0,#0FCH
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 162 

                                           ; SOURCE LINE # 1973
016F 120000      E     LCALL   Save_GUD1
                                           ; SOURCE LINE # 1974
0172         ?C0436:
                                           ; SOURCE LINE # 1976
0172 7500E0      R     MOV     ?_OSD_Line?BYTE+03H,#0E0H
0175 750002      R     MOV     ?_OSD_Line?BYTE+04H,#02H
0178 7B0C              MOV     R3,#0CH
017A 7D24              MOV     R5,#024H
017C 7F0B              MOV     R7,#0BH
017E 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1977
0181 75008C      R     MOV     ?_OSD_Line?BYTE+03H,#08CH
0184 120000      R     LCALL   L?1105
                                           ; SOURCE LINE # 1978
0187 120000      R     LCALL   L?1063
018A 7B01              MOV     R3,#01H
018C 7D23              MOV     R5,#023H
018E 7F0B              MOV     R7,#0BH
0190 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1979
0193 75000D      R     MOV     ?_OSD_Line?BYTE+03H,#0DH
0196 120000      R     LCALL   L?1077
                                           ; SOURCE LINE # 1980
0199 120000      R     LCALL   L?1063
019C 7B01              MOV     R3,#01H
019E 7D30              MOV     R5,#030H
01A0 7F0B              MOV     R7,#0BH
01A2 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 1981
01A5 75000C      R     MOV     ?_OSD_Line?BYTE+03H,#0CH
01A8 120000      R     LCALL   L?1084
                                           ; SOURCE LINE # 1982
01AB 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD1+06H
01AE 75003C      R     MOV     ?_OSD_Slider?BYTE+04H,#03CH
01B1 120000      R     LCALL   L?1037
01B4 7F0B              MOV     R7,#0BH
01B6         ?C0953:
                                           ; SOURCE LINE # 1983
                                           ; SOURCE LINE # 1984
01B6 8036              SJMP    ?C0957
01B8         ?C0433:
                                           ; SOURCE LINE # 1986
                                           ; SOURCE LINE # 1987
01B8 E500        E     MOV     A,stGUD1+06H
01BA 6004              JZ      ?C0438
01BC 7F01              MOV     R7,#01H
01BE 8002              SJMP    ?C0439
01C0         ?C0438:
01C0 7F02              MOV     R7,#02H
01C2         ?C0439:
01C2 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01C4 EF                MOV     A,R7
01C5 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1988
01C6 120000      R     LCALL   L?1049
01C9 7B03              MOV     R3,#03H
01CB 7F0B              MOV     R7,#0BH
01CD 020000      R     LJMP    _OSD_Line
                                           ; SOURCE LINE # 1989
                                           ; SOURCE LINE # 1990
                                           ; SOURCE LINE # 1992
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 163 

01D0         ?C0440:
                                           ; SOURCE LINE # 1993
01D0 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01D2 E6                MOV     A,@R0
01D3 600A              JZ      ?C0441
                                           ; SOURCE LINE # 1994
                                           ; SOURCE LINE # 1995
01D5 E4                CLR     A
01D6 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1996
01D7 120000      R     LCALL   L?1131
01DA 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
                                           ; SOURCE LINE # 1997
01DD 800A              SJMP    ?C0950
01DF         ?C0441:
                                           ; SOURCE LINE # 1999
                                           ; SOURCE LINE # 2000
01DF 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01E1 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 2001
01E3 120000      R     LCALL   L?1131
01E6 750002      R     MOV     ?_OSD_Slider?BYTE+05H,#02H
01E9         ?C0950:
01E9 120000      R     LCALL   L?1038
01EC 7F0D              MOV     R7,#0DH
01EE         ?C0957:
01EE 020000      R     LJMP    _OSD_Slider
                                           ; SOURCE LINE # 2002
                                           ; SOURCE LINE # 2003
                                           ; SOURCE LINE # 2005
01F1         ?C0443:
                                           ; SOURCE LINE # 2007
01F1 120000      R     LCALL   L?1028
01F4 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 2010
                                           ; SOURCE LINE # 2011
01F7 120000      R     LCALL   L?1145
                                           ; SOURCE LINE # 2013
                                           ; SOURCE LINE # 2015
                                           ; SOURCE LINE # 2016
                                           ; SOURCE LINE # 2017
01FA         ?C0444:
01FA 22                RET     
01FB         L?1047:
01FB 750001      R     MOV     ?_OSD_Line?BYTE+04H,#01H
01FE 7B01              MOV     R3,#01H
0200 7D25              MOV     R5,#025H
0202 7F0B              MOV     R7,#0BH
0204 120000      R     LCALL   _OSD_Line
0207 75008C      R     MOV     ?_OSD_Line?BYTE+03H,#08CH
020A E4                CLR     A
020B F500        R     MOV     ?_OSD_Line?BYTE+04H,A
020D 7B01              MOV     R3,#01H
020F 7D2B              MOV     R5,#02BH
0211 7F0B              MOV     R7,#0BH
0213 120000      R     LCALL   _OSD_Line
0216 22                RET     
0217         L?1066:
0217 75008C      R     MOV     ?_OSD_Line?BYTE+03H,#08CH
021A E4                CLR     A
021B F500        R     MOV     ?_OSD_Line?BYTE+04H,A
021D 7B01              MOV     R3,#01H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 164 

021F 7D25              MOV     R5,#025H
0221 7F0B              MOV     R7,#0BH
0223 120000      R     LCALL   _OSD_Line
0226 22                RET     
0227         L?1075:
0227 750001      R     MOV     ?_OSD_Line?BYTE+04H,#01H
022A 7B01              MOV     R3,#01H
022C 7D25              MOV     R5,#025H
022E 7F0B              MOV     R7,#0BH
0230 120000      R     LCALL   _OSD_Line
0233 22                RET     
0234         L?1077:
0234 750001      R     MOV     ?_OSD_Line?BYTE+04H,#01H
0237 7B01              MOV     R3,#01H
0239 7D23              MOV     R5,#023H
023B 7F0B              MOV     R7,#0BH
023D 120000      R     LCALL   _OSD_Line
0240 22                RET     
0241         L?1084:
0241 750001      R     MOV     ?_OSD_Line?BYTE+04H,#01H
0244 7B01              MOV     R3,#01H
0246 7D30              MOV     R5,#030H
0248 7F0B              MOV     R7,#0BH
024A 120000      R     LCALL   _OSD_Line
024D 22                RET     
024E         L?1105:
024E E4                CLR     A
024F F500        R     MOV     ?_OSD_Line?BYTE+04H,A
0251 7B0C              MOV     R3,#0CH
0253 7D24              MOV     R5,#024H
0255 7F0B              MOV     R7,#0BH
0257 120000      R     LCALL   _OSD_Line
025A 22                RET     
025B         L?1116:
025B 7B01              MOV     R3,#01H
025D 7D2B              MOV     R5,#02BH
025F 7F0B              MOV     R7,#0BH
0261 120000      R     LCALL   _OSD_Line
0264 22                RET     
0265         L?1161:
0265 7B0C              MOV     R3,#0CH
0267 7D24              MOV     R5,#024H
0269 7F0B              MOV     R7,#0BH
026B 120000      R     LCALL   _OSD_Line
026E 22                RET     
026F         L?1162:
026F 7B01              MOV     R3,#01H
0271 7F0B              MOV     R7,#0BH
0273 120000      R     LCALL   _OSD_Line
0276 22                RET     
0277         L?1195:
0277 7B03              MOV     R3,#03H
0279 7D1F              MOV     R5,#01FH
027B 7F0B              MOV     R7,#0BH
027D 120000      R     LCALL   _OSD_Line
0280 22                RET     
             ; FUNCTION Page4_Enter_Key (END)

             ; FUNCTION _Page4_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 2019
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 2020
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 165 

                                           ; SOURCE LINE # 2021
0002 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0004 E6                MOV     A,@R0
0005 7003              JNZ     $ + 5H
0007 020000      R     LJMP    ?C0445
                                           ; SOURCE LINE # 2022
                                           ; SOURCE LINE # 2023
000A 18                DEC     R0
000B E6                MOV     A,@R0
000C 24FD              ADD     A,#0FDH
000E 7003              JNZ     $ + 5H
0010 020000      R     LJMP    ?C0464
0013 14                DEC     A
0014 7003              JNZ     $ + 5H
0016 020000      R     LJMP    ?C0481
0019 14                DEC     A
001A 7003              JNZ     $ + 5H
001C 020000      R     LJMP    ?C0494
001F 2403              ADD     A,#03H
0021 6003              JZ      $ + 5H
0023 020000      R     LJMP    ?C0504
                                           ; SOURCE LINE # 2024
                                           ; SOURCE LINE # 2025
0026         ?C0447:
                                           ; SOURCE LINE # 2026
0026 120000      R     LCALL   Get_OSD_Margin
                                           ; SOURCE LINE # 2028
0029 E500        R     MOV     A,Key
002B 6404              XRL     A,#04H
002D 704C              JNZ     ?C0448
                                           ; SOURCE LINE # 2029
                                           ; SOURCE LINE # 2030
002F AF00        E     MOV     R7,Data+01H
0031 FE                MOV     R6,A
0032 120000      R     LCALL   L?1167
0035 5003              JNC     $ + 5H
0037 020000      R     LJMP    ?C0504
                                           ; SOURCE LINE # 2031
003A         ?C0449:
                                           ; SOURCE LINE # 2033
003A 120000      R     LCALL   L?1102
003D 4017              JC      ?C0450
                                           ; SOURCE LINE # 2034
003F 120000      R     LCALL   L?1167
0042 400C              JC      ?C0451
0044 E500        E     MOV     A,stGUD1+04H
0046 2401              ADD     A,#01H
0048 FF                MOV     R7,A
0049 E4                CLR     A
004A 3500        E     ADDC    A,stGUD1+03H
004C FE                MOV     R6,A
004D 020000      R     LJMP    ?C0960
0050         ?C0451:
0050 AF00        E     MOV     R7,Data+01H
0052 7E00              MOV     R6,#00H
0054         ?C0452:
0054 8071              SJMP    ?C0960
0056         ?C0450:
                                           ; SOURCE LINE # 2036
0056 AF00        E     MOV     R7,Data+01H
0058 7E00              MOV     R6,#00H
005A EF                MOV     A,R7
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 166 

005B 24FF              ADD     A,#0FFH
005D FD                MOV     R5,A
005E EE                MOV     A,R6
005F 34FF              ADDC    A,#0FFH
0061 FC                MOV     R4,A
0062 D3                SETB    C
0063 ED                MOV     A,R5
0064 9500        E     SUBB    A,stGUD1+04H
0066 EC                MOV     A,R4
0067 9500        E     SUBB    A,stGUD1+03H
0069 400E              JC      ?C0454
006B E500        E     MOV     A,stGUD1+04H
006D 2402              ADD     A,#02H
006F FD                MOV     R5,A
0070 E4                CLR     A
0071 3500        E     ADDC    A,stGUD1+03H
0073 FC                MOV     R4,A
0074 FE                MOV     R6,A
0075 AF05              MOV     R7,AR5
0077 8000              SJMP    ?C0455
0079         ?C0454:
0079         ?C0455:
0079         ?C0958:
                                           ; SOURCE LINE # 2037
0079 804C              SJMP    ?C0960
007B         ?C0448:
                                           ; SOURCE LINE # 2039
                                           ; SOURCE LINE # 2040
007B AF00        E     MOV     R7,Data
007D 7E00              MOV     R6,#00H
007F C3                CLR     C
0080 120000      R     LCALL   L?1168
0083 4003              JC      $ + 5H
0085 020000      R     LJMP    ?C0504
                                           ; SOURCE LINE # 2041
0088         ?C0457:
                                           ; SOURCE LINE # 2043
0088 120000      R     LCALL   L?1102
008B 4017              JC      ?C0458
                                           ; SOURCE LINE # 2044
008D 120000      R     LCALL   L?1168
0090 500C              JNC     ?C0459
0092 E500        E     MOV     A,stGUD1+04H
0094 24FF              ADD     A,#0FFH
0096 FF                MOV     R7,A
0097 E500        E     MOV     A,stGUD1+03H
0099 34FF              ADDC    A,#0FFH
009B FE                MOV     R6,A
009C 8004              SJMP    ?C0460
009E         ?C0459:
009E AF00        E     MOV     R7,Data
00A0 7E00              MOV     R6,#00H
00A2         ?C0460:
00A2         ?C0959:
00A2 8023              SJMP    ?C0960
00A4         ?C0458:
                                           ; SOURCE LINE # 2046
00A4 AF00        E     MOV     R7,Data
00A6 7E00              MOV     R6,#00H
00A8 EF                MOV     A,R7
00A9 2401              ADD     A,#01H
00AB FD                MOV     R5,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 167 

00AC EE                MOV     A,R6
00AD 33                RLC     A
00AE FC                MOV     R4,A
00AF C3                CLR     C
00B0 ED                MOV     A,R5
00B1 9500        E     SUBB    A,stGUD1+04H
00B3 EC                MOV     A,R4
00B4 9500        E     SUBB    A,stGUD1+03H
00B6 500F              JNC     ?C0462
00B8 E500        E     MOV     A,stGUD1+04H
00BA 24FE              ADD     A,#0FEH
00BC FD                MOV     R5,A
00BD E500        E     MOV     A,stGUD1+03H
00BF 34FF              ADDC    A,#0FFH
00C1 FC                MOV     R4,A
00C2 FE                MOV     R6,A
00C3 AF05              MOV     R7,AR5
00C5 8000              SJMP    ?C0463
00C7         ?C0462:
00C7         ?C0463:
00C7         ?C0960:
00C7 8E00        E     MOV     stGUD1+03H,R6
00C9 8F00        E     MOV     stGUD1+04H,R7
                                           ; SOURCE LINE # 2047
00CB         ?C0456:
                                           ; SOURCE LINE # 2049
00CB 120000      R     LCALL   L?1087
00CE 120000      R     LCALL   L?1037
00D1 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2050
                                           ; SOURCE LINE # 2051
                                           ; SOURCE LINE # 2052
00D3 020000      R     LJMP    ?C0961
                                           ; SOURCE LINE # 2054
00D6         ?C0464:
                                           ; SOURCE LINE # 2055
00D6 120000      R     LCALL   Get_OSD_Margin
                                           ; SOURCE LINE # 2057
00D9 E500        R     MOV     A,Key
00DB 6404              XRL     A,#04H
00DD 7037              JNZ     ?C0465
                                           ; SOURCE LINE # 2058
                                           ; SOURCE LINE # 2060
00DF E500        E     MOV     A,Data+03H
00E1 D3                SETB    C
00E2 9500        E     SUBB    A,stGUD1+05H
00E4 5003              JNC     $ + 5H
00E6 020000      R     LJMP    ?C0504
                                           ; SOURCE LINE # 2061
00E9         ?C0466:
                                           ; SOURCE LINE # 2063
00E9 120000      R     LCALL   L?1102
00EC 4013              JC      ?C0467
                                           ; SOURCE LINE # 2064
00EE E500        E     MOV     A,Data+03H
00F0 D3                SETB    C
00F1 9500        E     SUBB    A,stGUD1+05H
00F3 4006              JC      ?C0468
00F5 E500        E     MOV     A,stGUD1+05H
00F7 04                INC     A
00F8 FF                MOV     R7,A
00F9 8002              SJMP    ?C0469
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 168 

00FB         ?C0468:
00FB AF00        E     MOV     R7,Data+03H
00FD         ?C0469:
00FD 8F00        E     MOV     stGUD1+05H,R7
00FF 8051              SJMP    ?C0473
0101         ?C0467:
                                           ; SOURCE LINE # 2066
0101 E500        E     MOV     A,Data+03H
0103 14                DEC     A
0104 D3                SETB    C
0105 9500        E     SUBB    A,stGUD1+05H
0107 4007              JC      ?C0471
0109 E500        E     MOV     A,stGUD1+05H
010B 2402              ADD     A,#02H
010D FF                MOV     R7,A
010E 8002              SJMP    ?C0472
0110         ?C0471:
0110 AF00        E     MOV     R7,Data+03H
0112         ?C0472:
0112 8F00        E     MOV     stGUD1+05H,R7
                                           ; SOURCE LINE # 2068
0114 803C              SJMP    ?C0473
0116         ?C0465:
                                           ; SOURCE LINE # 2070
                                           ; SOURCE LINE # 2072
0116 E500        E     MOV     A,Data+02H
0118 C3                CLR     C
0119 9500        E     SUBB    A,stGUD1+05H
011B 4003              JC      $ + 5H
011D 020000      R     LJMP    ?C0504
                                           ; SOURCE LINE # 2073
0120         ?C0474:
                                           ; SOURCE LINE # 2075
0120 120000      R     LCALL   L?1102
0123 4012              JC      ?C0475
                                           ; SOURCE LINE # 2076
0125 E500        E     MOV     A,Data+02H
0127 9500        E     SUBB    A,stGUD1+05H
0129 5006              JNC     ?C0476
012B E500        E     MOV     A,stGUD1+05H
012D 14                DEC     A
012E FF                MOV     R7,A
012F 8002              SJMP    ?C0477
0131         ?C0476:
0131 AF00        E     MOV     R7,Data+02H
0133         ?C0477:
0133 8F00        E     MOV     stGUD1+05H,R7
0135 801B              SJMP    ?C0473
0137         ?C0475:
                                           ; SOURCE LINE # 2078
0137 E500        E     MOV     A,Data+02H
0139 120000      R     LCALL   L?1183
013C C3                CLR     C
013D EF                MOV     A,R7
013E 9500        E     SUBB    A,stGUD1+05H
0140 7480              MOV     A,#080H
0142 F8                MOV     R0,A
0143 6E                XRL     A,R6
0144 98                SUBB    A,R0
0145 5007              JNC     ?C0479
0147 E500        E     MOV     A,stGUD1+05H
0149 24FE              ADD     A,#0FEH
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 169 

014B FF                MOV     R7,A
014C 8002              SJMP    ?C0480
014E         ?C0479:
014E AF00        E     MOV     R7,Data+02H
0150         ?C0480:
0150 8F00        E     MOV     stGUD1+05H,R7
                                           ; SOURCE LINE # 2080
0152         ?C0473:
                                           ; SOURCE LINE # 2082
0152 120000      R     LCALL   L?1089
0155 120000      R     LCALL   L?1037
0158 7F09              MOV     R7,#09H
015A         ?C0961:
015A 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 2083
015D 7F01              MOV     R7,#01H
015F 120000      R     LCALL   _OSD_Position
                                           ; SOURCE LINE # 2084
                                           ; SOURCE LINE # 2085
0162 020000      R     LJMP    ?C0965
                                           ; SOURCE LINE # 2087
0165         ?C0481:
                                           ; SOURCE LINE # 2089
0165 E500        R     MOV     A,Key
0167 6404              XRL     A,#04H
0169 7020              JNZ     ?C0482
                                           ; SOURCE LINE # 2090
                                           ; SOURCE LINE # 2091
016B 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
016D E6                MOV     A,@R0
016E 600F              JZ      ?C0483
                                           ; SOURCE LINE # 2092
                                           ; SOURCE LINE # 2093
0170 E500        E     MOV     A,stGUD1+06H
0172 B43C04            CJNE    A,#03CH,?C0484
0175 7F3C              MOV     R7,#03CH
0177 8024              SJMP    ?C0963
0179         ?C0484:
0179 E500        E     MOV     A,stGUD1+06H
017B 04                INC     A
017C FF                MOV     R7,A
017D         ?C0485:
                                           ; SOURCE LINE # 2094
                                           ; SOURCE LINE # 2095
017D 801E              SJMP    ?C0963
017F         ?C0483:
                                           ; SOURCE LINE # 2096
017F 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0181 E6                MOV     A,@R0
0182 604B              JZ      ?C0488
                                           ; SOURCE LINE # 2097
                                           ; SOURCE LINE # 2099
0184 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 2100
0186 E4                CLR     A
0187 F500        E     MOV     stGUD1+06H,A
                                           ; SOURCE LINE # 2101
                                           ; SOURCE LINE # 2102
                                           ; SOURCE LINE # 2103
                                           ; SOURCE LINE # 2104
0189 802B              SJMP    ?C0964
018B         ?C0482:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 170 

                                           ; SOURCE LINE # 2106
                                           ; SOURCE LINE # 2107
018B 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
018D E6                MOV     A,@R0
018E 601F              JZ      ?C0489
                                           ; SOURCE LINE # 2108
                                           ; SOURCE LINE # 2109
0190 E500        E     MOV     A,stGUD1+06H
0192 B40504            CJNE    A,#05H,?C0490
0195 7F05              MOV     R7,#05H
0197 8004              SJMP    ?C0491
0199         ?C0490:
0199 E500        E     MOV     A,stGUD1+06H
019B 14                DEC     A
019C FF                MOV     R7,A
019D         ?C0491:
019D         ?C0963:
019D 8F00        E     MOV     stGUD1+06H,R7
                                           ; SOURCE LINE # 2110
019F 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD1+06H
01A2 75003C      R     MOV     ?_OSD_Slider?BYTE+04H,#03CH
01A5 120000      R     LCALL   L?1037
01A8 7F0B              MOV     R7,#0BH
01AA 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 2111
01AD 8020              SJMP    ?C0488
01AF         ?C0489:
                                           ; SOURCE LINE # 2112
01AF 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01B1 E6                MOV     A,@R0
01B2 601B              JZ      ?C0488
                                           ; SOURCE LINE # 2113
                                           ; SOURCE LINE # 2115
01B4 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 2116
01B6         ?C0964:
01B6 120000      R     LCALL   L?1063
01B9 7B0E              MOV     R3,#0EH
01BB 7D24              MOV     R5,#024H
01BD 7F0B              MOV     R7,#0BH
01BF 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 2117
01C2 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01C4 E6                MOV     A,@R0
01C5 120000      R     LCALL   L?1049
01C8 7B03              MOV     R3,#03H
01CA 7F0B              MOV     R7,#0BH
01CC 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 2118
                                           ; SOURCE LINE # 2119
01CF         ?C0488:
                                           ; SOURCE LINE # 2121
01CF AF00        E     MOV     R7,stGUD1+06H
01D1 7E00              MOV     R6,#00H
01D3 7C00              MOV     R4,#00H
01D5 7D33              MOV     R5,#033H
01D7 120000      E     LCALL   ?C?IMUL
01DA 7800        E     MOV     R0,#LOW usOSD_Timer
01DC A606              MOV     @R0,AR6
01DE 08                INC     R0
01DF A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 2123
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 171 

01E1         ?C0962:
                                           ; SOURCE LINE # 2124
01E1 8061              SJMP    ?C0965
                                           ; SOURCE LINE # 2126
01E3         ?C0494:
                                           ; SOURCE LINE # 2127
01E3 E500        E     MOV     A,stGUD1+01H
01E5 54E0              ANL     A,#0E0H
01E7 C4                SWAP    A
01E8 13                RRC     A
01E9 5407              ANL     A,#07H
01EB F500        E     MOV     Data,A
                                           ; SOURCE LINE # 2129
01ED E500        R     MOV     A,Key
01EF 6404              XRL     A,#04H
01F1 7014              JNZ     ?C0495
                                           ; SOURCE LINE # 2130
                                           ; SOURCE LINE # 2131
01F3 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
01F5 E6                MOV     A,@R0
01F6 602F              JZ      ?C0499
                                           ; SOURCE LINE # 2132
                                           ; SOURCE LINE # 2133
01F8 E500        E     MOV     A,Data
01FA B40704            CJNE    A,#07H,?C0497
01FD 7F07              MOV     R7,#07H
01FF 8016              SJMP    ?C0966
0201         ?C0497:
0201 E500        E     MOV     A,Data
0203 04                INC     A
0204 FF                MOV     R7,A
0205         ?C0498:
                                           ; SOURCE LINE # 2134
                                           ; SOURCE LINE # 2135
                                           ; SOURCE LINE # 2136
0205 8010              SJMP    ?C0966
0207         ?C0495:
                                           ; SOURCE LINE # 2138
                                           ; SOURCE LINE # 2139
0207 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0209 E6                MOV     A,@R0
020A 601B              JZ      ?C0499
                                           ; SOURCE LINE # 2140
                                           ; SOURCE LINE # 2141
020C E500        E     MOV     A,Data
020E 7003              JNZ     ?C0501
0210 FF                MOV     R7,A
0211 8004              SJMP    ?C0502
0213         ?C0501:
0213 E500        E     MOV     A,Data
0215 14                DEC     A
0216 FF                MOV     R7,A
0217         ?C0502:
0217         ?C0966:
0217 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 2142
0219 E500        E     MOV     A,Data
021B C4                SWAP    A
021C 33                RLC     A
021D 54E0              ANL     A,#0E0H
021F FF                MOV     R7,A
0220 E500        E     MOV     A,stGUD1+01H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 172 

0222 541F              ANL     A,#01FH
0224 4F                ORL     A,R7
0225 F500        E     MOV     stGUD1+01H,A
                                           ; SOURCE LINE # 2143
                                           ; SOURCE LINE # 2144
0227         ?C0499:
                                           ; SOURCE LINE # 2146
0227 E500        E     MOV     A,Data
0229 33                RLC     A
022A 33                RLC     A
022B 33                RLC     A
022C 54F8              ANL     A,#0F8H
022E FB                MOV     R3,A
022F 7DC7              MOV     R5,#0C7H
0231 7F6D              MOV     R7,#06DH
0233 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 2147
0236 850000      R     MOV     ?_OSD_Slider?BYTE+03H,Data
0239 750007      R     MOV     ?_OSD_Slider?BYTE+04H,#07H
023C 120000      R     LCALL   L?1037
023F 7F0D              MOV     R7,#0DH
0241 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 2148
0244         ?C0965:
0244 020000      E     LJMP    Save_GUD1
                                           ; SOURCE LINE # 2149
                                           ; SOURCE LINE # 2151
                                           ; SOURCE LINE # 2152
0247         ?C0445:
                                           ; SOURCE LINE # 2154
                                           ; SOURCE LINE # 2155
0247 7D06              MOV     R5,#06H
0249 AF00        R     MOV     R7,Key
024B 120000      R     LCALL   _Osd_Change_Item
                                           ; SOURCE LINE # 2156
                                           ; SOURCE LINE # 2157
024E         ?C0504:
024E 22                RET     
             ; FUNCTION _Page4_Left_Right_Key (END)

             ; FUNCTION Page4_Show (BEGIN)
                                           ; SOURCE LINE # 2160
                                           ; SOURCE LINE # 2161
                                           ; SOURCE LINE # 2162
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH Page4_Atb
0004 7900        E     MOV     R1,#LOW Page4_Atb
0006 750003      R     MOV     ?_Show_Osd_Page?BYTE+04H,#03H
0009 7F02              MOV     R7,#02H
000B 120000      R     LCALL   _Show_Osd_Page
                                           ; SOURCE LINE # 2167
000E 750000      R     MOV     ?_OSD_Window?BYTE+05H,#00H
0011 750078      R     MOV     ?_OSD_Window?BYTE+06H,#078H
0014 750000      R     MOV     ?_OSD_Window?BYTE+07H,#00H
0017 750096      R     MOV     ?_OSD_Window?BYTE+08H,#096H
001A 120000      R     LCALL   L?1026
001D 120000      R     LCALL   L?1130
0020 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 2169
0023 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0025 E6                MOV     A,@R0
0026 7048              JNZ     ?C0513
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 173 

                                           ; SOURCE LINE # 2170
                                           ; SOURCE LINE # 2171
0028 120000      R     LCALL   Get_OSD_Margin
                                           ; SOURCE LINE # 2172
002B 120000      R     LCALL   L?1087
002E 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
0031 120000      R     LCALL   L?1038
0034 7F07              MOV     R7,#07H
0036 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 2173
0039 120000      R     LCALL   Get_OSD_Margin
                                           ; SOURCE LINE # 2174
003C 120000      R     LCALL   L?1089
003F 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
0042 120000      R     LCALL   L?1038
0045 7F09              MOV     R7,#09H
0047 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 2176
004A 120000      R     LCALL   L?1132
004D 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
0050 120000      R     LCALL   L?1038
0053 7F0D              MOV     R7,#0DH
0055 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 2177
0058 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
005A E6                MOV     A,@R0
005B B4010C            CJNE    A,#01H,?C0506
                                           ; SOURCE LINE # 2178
005E 120000      R     LCALL   L?1104
0061 120000      R     LCALL   L?1026
0064 120000      R     LCALL   L?1033
0067 120000      R     LCALL   _OSD_Window
006A         ?C0506:
                                           ; SOURCE LINE # 2179
006A 120000      R     LCALL   L?1142
006D 020000      E     LJMP    _RTDSetBit
                                           ; SOURCE LINE # 2180
0070         ?C0513:
0070 22                RET     
             ; FUNCTION Page4_Show (END)

             ; FUNCTION Page4B_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 2209
                                           ; SOURCE LINE # 2210
                                           ; SOURCE LINE # 2211
0000 E500        E     MOV     A,stGUD1
0002 5407              ANL     A,#07H
0004 FF                MOV     R7,A
0005 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0007 E6                MOV     A,@R0
0008 14                DEC     A
0009 FE                MOV     R6,A
000A 6F                XRL     A,R7
000B 6047              JZ      ?C0514
                                           ; SOURCE LINE # 2212
                                           ; SOURCE LINE # 2213
000D EE                MOV     A,R6
000E 5407              ANL     A,#07H
0010 FF                MOV     R7,A
0011 E500        E     MOV     A,stGUD1
0013 54F8              ANL     A,#0F8H
0015 4F                ORL     A,R7
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 174 

0016 F500        E     MOV     stGUD1,A
                                           ; SOURCE LINE # 2214
0018 120000      E     LCALL   Save_GUD1
                                           ; SOURCE LINE # 2216
001B E500        E     MOV     A,stGUD1
001D 5407              ANL     A,#07H
001F 24FA              ADD     A,#0FAH
0021 6007              JZ      ?C0517
0023 14                DEC     A
0024 6016              JZ      ?C0518
0026 2402              ADD     A,#02H
0028 702A              JNZ     ?C0514
                                           ; SOURCE LINE # 2217
                                           ; SOURCE LINE # 2218
                                           ; SOURCE LINE # 2219
002A         ?C0517:
                                           ; SOURCE LINE # 2221
002A 120000      R     LCALL   L?1117
002D 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 2222
0030 7E00        E     MOV     R6,#HIGH Font_East_C
0032 7F00        E     MOV     R7,#LOW Font_East_C
0034 7B45              MOV     R3,#045H
0036 7A00              MOV     R2,#00H
0038 7DA9              MOV     R5,#0A9H
                                           ; SOURCE LINE # 2223
                                           ; SOURCE LINE # 2226
003A 8010              SJMP    ?C0967
                                           ; SOURCE LINE # 2228
003C         ?C0518:
                                           ; SOURCE LINE # 2230
003C 120000      R     LCALL   L?1117
003F 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 2231
0042 7E00        E     MOV     R6,#HIGH Font_East_J
0044 7F00        E     MOV     R7,#LOW Font_East_J
0046 7B4B              MOV     R3,#04BH
0048 7A00              MOV     R2,#00H
004A 7D73              MOV     R5,#073H
004C         ?C0967:
004C 7C05              MOV     R4,#05H
004E 120000      E     LCALL   _Load_VLC_Font
                                           ; SOURCE LINE # 2232
0051 120000      R     LCALL   Page4_Show
                                           ; SOURCE LINE # 2235
                                           ; SOURCE LINE # 2237
                                           ; SOURCE LINE # 2238
                                           ; SOURCE LINE # 2240
                                           ; SOURCE LINE # 2241
0054         ?C0514:
                                           ; SOURCE LINE # 2243
0054 E4                CLR     A
0055 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0057 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2244
0058 22                RET     
             ; FUNCTION Page4B_Enter_Key (END)

             ; FUNCTION _Page4B_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 2246
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 2247
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 175 

                                           ; SOURCE LINE # 2249
0002 120000      R     LCALL   L?1070
0005 120000      R     LCALL   L?1041
0008 F500        R     MOV     ?_OSD_Window?BYTE+0FH,A
000A 7F06              MOV     R7,#06H
000C 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 2251
000F E500        R     MOV     A,Key
0011 B40310            CJNE    A,#03H,?C0521
                                           ; SOURCE LINE # 2252
0014 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0016 E6                MOV     A,@R0
0017 FF                MOV     R7,A
0018 B40804            CJNE    A,#08H,?C0522
001B 7F01              MOV     R7,#01H
001D 8013              SJMP    ?C0968
001F         ?C0522:
001F EF                MOV     A,R7
0020 04                INC     A
0021 FF                MOV     R7,A
0022         ?C0523:
0022 800E              SJMP    ?C0968
0024         ?C0521:
                                           ; SOURCE LINE # 2254
0024 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0026 E6                MOV     A,@R0
0027 FF                MOV     R7,A
0028 B40104            CJNE    A,#01H,?C0525
002B 7F08              MOV     R7,#08H
002D 8003              SJMP    ?C0526
002F         ?C0525:
002F EF                MOV     A,R7
0030 14                DEC     A
0031 FF                MOV     R7,A
0032         ?C0526:
0032         ?C0968:
0032 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0034 A607              MOV     @R0,AR7
0036         ?C0524:
                                           ; SOURCE LINE # 2256
0036 120000      R     LCALL   L?1024
0039 7F06              MOV     R7,#06H
003B 020000      R     LJMP    _OSD_Window
             ; FUNCTION _Page4B_Left_Right_Key (END)

             ; FUNCTION Page4B_Show (BEGIN)
                                           ; SOURCE LINE # 2260
                                           ; SOURCE LINE # 2261
                                           ; SOURCE LINE # 2262
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH Page8_Atb
0004 7900        E     MOV     R1,#LOW Page8_Atb
0006 750007      R     MOV     ?_Show_Osd_Page?BYTE+04H,#07H
0009 7F03              MOV     R7,#03H
000B 120000      R     LCALL   _Show_Osd_Page
                                           ; SOURCE LINE # 2263
000E 7E00        E     MOV     R6,#HIGH Page8_Content
0010 7F00        E     MOV     R7,#LOW Page8_Content
0012 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 2265
0015 120000      R     LCALL   L?1024
0018 7F06              MOV     R7,#06H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 176 

001A 020000      R     LJMP    _OSD_Window
             ; FUNCTION Page4B_Show (END)

             ; FUNCTION Page5_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 2269
                                           ; SOURCE LINE # 2270
                                           ; SOURCE LINE # 2271
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0002 E6                MOV     A,@R0
0003 7026              JNZ     ?C0529
                                           ; SOURCE LINE # 2272
                                           ; SOURCE LINE # 2274
0005 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 2275
0007 08                INC     R0
0008 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2276
0009 F500        R     MOV     ?_OSD_Window?BYTE+05H,A
000B 750036      R     MOV     ?_OSD_Window?BYTE+06H,#036H
000E F500        R     MOV     ?_OSD_Window?BYTE+07H,A
0010 750054      R     MOV     ?_OSD_Window?BYTE+08H,#054H
0013 750001      R     MOV     ?_OSD_Window?BYTE+09H,#01H
0016 750001      R     MOV     ?_OSD_Window?BYTE+0AH,#01H
0019 120000      R     LCALL   L?1032
001C 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 2277
001F 120000      R     LCALL   L?1104
0022 120000      R     LCALL   L?1026
0025 120000      R     LCALL   L?1033
0028 020000      R     LJMP    _OSD_Window
                                           ; SOURCE LINE # 2278
002B         ?C0529:
                                           ; SOURCE LINE # 2280
                                           ; SOURCE LINE # 2281
002B 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
002D E6                MOV     A,@R0
002E 24FE              ADD     A,#0FEH
0030 6055              JZ      ?C0543
0032 14                DEC     A
0033 7003              JNZ     $ + 5H
0035 020000      R     LJMP    ?C0553
0038 14                DEC     A
0039 7003              JNZ     $ + 5H
003B 020000      R     LJMP    ?C0558
003E 14                DEC     A
003F 7003              JNZ     $ + 5H
0041 020000      R     LJMP    ?C0561
0044 2404              ADD     A,#04H
0046 6003              JZ      $ + 5H
0048 020000      R     LJMP    ?C0562
                                           ; SOURCE LINE # 2282
                                           ; SOURCE LINE # 2283
004B         ?C0532:
                                           ; SOURCE LINE # 2284
004B E500        E     MOV     A,stGUD1+01H
004D 5407              ANL     A,#07H
004F F500        E     MOV     Data,A
                                           ; SOURCE LINE # 2285
0051 B40104            CJNE    A,#01H,?C0533
0054 7F02              MOV     R7,#02H
0056 8026              SJMP    ?C0534
0058         ?C0533:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 177 

0058 E500        E     MOV     A,Data
005A B40204            CJNE    A,#02H,?C0535
005D 7F03              MOV     R7,#03H
005F 801D              SJMP    ?C0536
0061         ?C0535:
0061 E500        E     MOV     A,Data
0063 B40304            CJNE    A,#03H,?C0537
0066 7F04              MOV     R7,#04H
0068 8014              SJMP    ?C0538
006A         ?C0537:
006A E500        E     MOV     A,Data
006C B40404            CJNE    A,#04H,?C0539
006F 7F05              MOV     R7,#05H
0071 800B              SJMP    ?C0540
0073         ?C0539:
0073 E500        E     MOV     A,Data
0075 B40504            CJNE    A,#05H,?C0541
0078 7F06              MOV     R7,#06H
007A 8002              SJMP    ?C0542
007C         ?C0541:
007C 7F01              MOV     R7,#01H
007E         ?C0542:
007E         ?C0540:
007E         ?C0538:
007E         ?C0536:
007E         ?C0534:
007E 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0080 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 2291
0082 7F83              MOV     R7,#083H
0084 020000      R     LJMP    _OSD_Proc_B
                                           ; SOURCE LINE # 2292
                                           ; SOURCE LINE # 2294
0087         ?C0543:
                                           ; SOURCE LINE # 2295
0087 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0089 E6                MOV     A,@R0
008A 6069              JZ      ?C0544
                                           ; SOURCE LINE # 2296
                                           ; SOURCE LINE # 2297
008C 120000      R     LCALL   L?1193
008F 120000      R     LCALL   L?1062
0092 7B07              MOV     R3,#07H
0094 7F07              MOV     R7,#07H
0096 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 2300
0099 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
009B E6                MOV     A,@R0
009C B40104            CJNE    A,#01H,?C0545
009F 7F00              MOV     R7,#00H
00A1 8002              SJMP    ?C0546
00A3         ?C0545:
00A3 7F10              MOV     R7,#010H
00A5         ?C0546:
00A5 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 2302
00A7 E500        E     MOV     A,stGUD1
00A9 54EF              ANL     A,#0EFH
00AB 4500        E     ORL     A,Data
00AD F500        E     MOV     stGUD1,A
                                           ; SOURCE LINE # 2303
00AF E4                CLR     A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 178 

00B0 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00B2 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2304
00B3 120000      E     LCALL   Save_GUD1
                                           ; SOURCE LINE # 2306
00B6 E500        E     MOV     A,stGUD1+01H
00B8 5407              ANL     A,#07H
00BA 6003              JZ      $ + 5H
00BC 020000      R     LJMP    ?C0562
00BF 7800        E     MOV     R0,#LOW usIPV_ACT_LEN+01H
00C1 E6                MOV     A,@R0
00C2 6490              XRL     A,#090H
00C4 7004              JNZ     ?C0894
00C6 18                DEC     R0
00C7 E6                MOV     A,@R0
00C8 6401              XRL     A,#01H
00CA         ?C0894:
00CA 6003              JZ      $ + 5H
00CC 020000      R     LJMP    ?C0562
00CF 7800        E     MOV     R0,#LOW ucMode_Curr
00D1 E6                MOV     A,@R0
00D2 FF                MOV     R7,A
00D3 6405              XRL     A,#05H
00D5 7003              JNZ     $ + 5H
00D7 020000      R     LJMP    ?C0562
00DA EF                MOV     A,R7
00DB 6433              XRL     A,#033H
00DD 7003              JNZ     $ + 5H
00DF 020000      R     LJMP    ?C0562
                                           ; SOURCE LINE # 2308
                                           ; SOURCE LINE # 2321
00E2 E500        E     MOV     A,stGUD1
00E4 30E406            JNB     ACC.4,?C0548
                                           ; SOURCE LINE # 2322
                                           ; SOURCE LINE # 2323
00E7 5300EF      E     ANL     stGUD1,#0EFH
                                           ; SOURCE LINE # 2324
00EA 76FE              MOV     @R0,#0FEH
                                           ; SOURCE LINE # 2325
00EC 22                RET     
00ED         ?C0548:
                                           ; SOURCE LINE # 2327
                                           ; SOURCE LINE # 2328
00ED 430010      E     ORL     stGUD1,#010H
                                           ; SOURCE LINE # 2329
00F0 7800        E     MOV     R0,#LOW ucMode_Curr
00F2 76FE              MOV     @R0,#0FEH
                                           ; SOURCE LINE # 2330
                                           ; SOURCE LINE # 2331
                                           ; SOURCE LINE # 2332
00F4 22                RET     
00F5         ?C0544:
                                           ; SOURCE LINE # 2334
                                           ; SOURCE LINE # 2335
00F5 E500        E     MOV     A,stGUD1
00F7 30E404            JNB     ACC.4,?C0551
00FA 7F02              MOV     R7,#02H
00FC 8002              SJMP    ?C0552
00FE         ?C0551:
00FE 7F01              MOV     R7,#01H
0100         ?C0552:
0100 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 179 

0102 EF                MOV     A,R7
0103 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2336
0104 120000      R     LCALL   L?1193
0107 120000      R     LCALL   L?1050
010A 7B07              MOV     R3,#07H
010C 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2337
                                           ; SOURCE LINE # 2338
010E 020000      R     LJMP    ?C0970
                                           ; SOURCE LINE # 2340
0111         ?C0553:
                                           ; SOURCE LINE # 2341
0111 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0113 E6                MOV     A,@R0
0114 FF                MOV     R7,A
0115 606B              JZ      ?C0554
                                           ; SOURCE LINE # 2342
                                           ; SOURCE LINE # 2343
0117 6401              XRL     A,#01H
0119 7058              JNZ     ?C0555
                                           ; SOURCE LINE # 2344
                                           ; SOURCE LINE # 2345
                                           ; SOURCE LINE # 2349
011B E500        E     MOV     A,stGUD1
011D 5407              ANL     A,#07H
011F F500        R     MOV     ucTemp1,A
                                           ; SOURCE LINE # 2350
0121 E500        E     MOV     A,stGUD1+01H
0123 5407              ANL     A,#07H
0125 F500        R     MOV     ucTemp2,A
                                           ; SOURCE LINE # 2352
0127 7407              MOV     A,#07H
0129 C3                CLR     C
012A 9500        R     SUBB    A,ucTemp1
012C 5003              JNC     ?C0556
                                           ; SOURCE LINE # 2353
012E E4                CLR     A
012F F500        R     MOV     ucTemp1,A
0131         ?C0556:
                                           ; SOURCE LINE # 2356
0131 7800        E     MOV     R0,#LOW usOSD_Timer
0133 7604              MOV     @R0,#04H
0135 08                INC     R0
0136 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 2359
0138 120000      E     LCALL   Init_GUD
                                           ; SOURCE LINE # 2361
013B E500        E     MOV     A,stGUD1+06H
013D F8                MOV     R0,A
013E E4                CLR     A
013F 7900        E     MOV     R1,#LOW usOSD_Timer+01H
0141 F7                MOV     @R1,A
0142 E8                MOV     A,R0
0143 25E0              ADD     A,ACC
0145 19                DEC     R1
0146 F7                MOV     @R1,A
                                           ; SOURCE LINE # 2364
0147 E500        E     MOV     A,stGUD1
0149 54F8              ANL     A,#0F8H
014B 4500        R     ORL     A,ucTemp1
014D F500        E     MOV     stGUD1,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 180 

                                           ; SOURCE LINE # 2365
014F E500        E     MOV     A,stGUD1+01H
0151 54F8              ANL     A,#0F8H
0153 4500        R     ORL     A,ucTemp2
0155 F500        E     MOV     stGUD1+01H,A
                                           ; SOURCE LINE # 2366
0157 120000      E     LCALL   Save_GUD1
                                           ; SOURCE LINE # 2369
015A 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 2372
015D 120000      E     LCALL   SetVolume
                                           ; SOURCE LINE # 2375
0160 7F01              MOV     R7,#01H
0162 120000      R     LCALL   _OSD_Position
                                           ; SOURCE LINE # 2376
                                           ; SOURCE LINE # 2379
0165 120000      E     LCALL   Init_MUD
                                           ; SOURCE LINE # 2382
0168 7800        E     MOV     R0,#LOW ucMode_Curr
016A E6                MOV     A,@R0
016B FF                MOV     R7,A
016C 120000      E     LCALL   _Load_MUD
                                           ; SOURCE LINE # 2385
016F 7800        E     MOV     R0,#LOW ucMode_Curr
0171 76FE              MOV     @R0,#0FEH
                                           ; SOURCE LINE # 2386
0173         ?C0555:
                                           ; SOURCE LINE # 2388
0173 120000      R     LCALL   L?1060
0176 7B04              MOV     R3,#04H
0178 7F09              MOV     R7,#09H
017A 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 2389
017D E4                CLR     A
017E 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0180 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2390
0181 22                RET     
0182         ?C0554:
                                           ; SOURCE LINE # 2392
                                           ; SOURCE LINE # 2393
                                           ; SOURCE LINE # 2394
0182 120000      R     LCALL   L?1048
0185 7B04              MOV     R3,#04H
0187 7F09              MOV     R7,#09H
0189         ?C0970:
0189 020000      R     LJMP    _OSD_Line
                                           ; SOURCE LINE # 2395
                                           ; SOURCE LINE # 2396
                                           ; SOURCE LINE # 2398
018C         ?C0558:
                                           ; SOURCE LINE # 2399
018C 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
018E E6                MOV     A,@R0
018F 600A              JZ      ?C0559
                                           ; SOURCE LINE # 2400
                                           ; SOURCE LINE # 2401
0191 E4                CLR     A
0192 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2402
0193 120000      R     LCALL   L?1119
0196 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 181 

                                           ; SOURCE LINE # 2403
0199 800D              SJMP    ?C0969
019B         ?C0559:
                                           ; SOURCE LINE # 2405
                                           ; SOURCE LINE # 2406
019B 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
019D 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 2408
019F 53001F      E     ANL     stGUD3,#01FH
                                           ; SOURCE LINE # 2409
01A2 120000      R     LCALL   L?1119
01A5 750002      R     MOV     ?_OSD_Slider?BYTE+05H,#02H
01A8         ?C0969:
01A8 120000      R     LCALL   L?1038
01AB 7F0B              MOV     R7,#0BH
01AD 020000      R     LJMP    _OSD_Slider
                                           ; SOURCE LINE # 2410
                                           ; SOURCE LINE # 2411
                                           ; SOURCE LINE # 2413
01B0         ?C0561:
                                           ; SOURCE LINE # 2415
01B0 120000      R     LCALL   L?1029
01B3 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 2418
                                           ; SOURCE LINE # 2419
01B6 120000      R     LCALL   L?1145
                                           ; SOURCE LINE # 2421
                                           ; SOURCE LINE # 2423
                                           ; SOURCE LINE # 2424
                                           ; SOURCE LINE # 2425
01B9         ?C0562:
01B9 22                RET     
             ; FUNCTION Page5_Enter_Key (END)

             ; FUNCTION _Page5_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 2427
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 2428
                                           ; SOURCE LINE # 2429
0002 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0004 E6                MOV     A,@R0
0005 7003              JNZ     $ + 5H
0007 020000      R     LJMP    ?C0563
                                           ; SOURCE LINE # 2430
                                           ; SOURCE LINE # 2431
000A 18                DEC     R0
000B E6                MOV     A,@R0
000C 24FD              ADD     A,#0FDH
000E 6034              JZ      ?C0568
0010 14                DEC     A
0011 6056              JZ      ?C0571
0013 2402              ADD     A,#02H
0015 6003              JZ      $ + 5H
0017 020000      R     LJMP    ?C0578
                                           ; SOURCE LINE # 2432
                                           ; SOURCE LINE # 2433
001A         ?C0565:
                                           ; SOURCE LINE # 2434
001A E500        R     MOV     A,Key
001C B40404            CJNE    A,#04H,?C0566
001F 7F02              MOV     R7,#02H
0021 8002              SJMP    ?C0567
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 182 

0023         ?C0566:
0023 7F01              MOV     R7,#01H
0025         ?C0567:
0025 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0027 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 2435
0029 120000      R     LCALL   L?1063
002C 7B10              MOV     R3,#010H
002E 7D24              MOV     R5,#024H
0030 7F07              MOV     R7,#07H
0032 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 2436
0035 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0037 E6                MOV     A,@R0
0038 120000      R     LCALL   L?1194
003B 120000      R     LCALL   L?1050
003E 7B07              MOV     R3,#07H
0040 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2438
0042 8022              SJMP    ?C0971
                                           ; SOURCE LINE # 2440
0044         ?C0568:
                                           ; SOURCE LINE # 2442
0044 E500        R     MOV     A,Key
0046 B40304            CJNE    A,#03H,?C0569
0049 7F01              MOV     R7,#01H
004B 8002              SJMP    ?C0570
004D         ?C0569:
004D 7F02              MOV     R7,#02H
004F         ?C0570:
004F 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0051 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 2443
0053 120000      R     LCALL   L?1063
0056 120000      R     LCALL   L?1189
0059 120000      R     LCALL   _OSD_Line
                                           ; SOURCE LINE # 2444
005C 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
005E E6                MOV     A,@R0
005F 120000      R     LCALL   L?1049
0062 7B04              MOV     R3,#04H
0064 7F09              MOV     R7,#09H
0066         ?C0971:
0066 020000      R     LJMP    _OSD_Line
                                           ; SOURCE LINE # 2446
                                           ; SOURCE LINE # 2448
0069         ?C0571:
                                           ; SOURCE LINE # 2450
0069 E500        R     MOV     A,Key
006B B40408            CJNE    A,#04H,?C0572
                                           ; SOURCE LINE # 2451
                                           ; SOURCE LINE # 2452
006E E500        E     MOV     A,stGUD3
0070 6025              JZ      ?C0578
                                           ; SOURCE LINE # 2453
0072         ?C0573:
                                           ; SOURCE LINE # 2455
0072 1500        E     DEC     stGUD3
                                           ; SOURCE LINE # 2456
0074 8009              SJMP    ?C0574
0076         ?C0572:
                                           ; SOURCE LINE # 2458
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 183 

                                           ; SOURCE LINE # 2459
0076 741F              MOV     A,#01FH
0078 D3                SETB    C
0079 9500        E     SUBB    A,stGUD3
007B 401A              JC      ?C0578
                                           ; SOURCE LINE # 2460
007D         ?C0575:
                                           ; SOURCE LINE # 2462
007D 0500        E     INC     stGUD3
                                           ; SOURCE LINE # 2463
007F         ?C0574:
                                           ; SOURCE LINE # 2465
007F 120000      R     LCALL   L?1120
0082 120000      R     LCALL   L?1037
0085 7F0B              MOV     R7,#0BH
0087 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 2466
008A 120000      E     LCALL   SetVolume
                                           ; SOURCE LINE # 2467
008D 020000      E     LJMP    Save_GUD3
                                           ; SOURCE LINE # 2468
                                           ; SOURCE LINE # 2470
                                           ; SOURCE LINE # 2471
                                           ; SOURCE LINE # 2473
                                           ; SOURCE LINE # 2474
0090         ?C0563:
                                           ; SOURCE LINE # 2476
                                           ; SOURCE LINE # 2477
0090 7D05              MOV     R5,#05H
0092 AF00        R     MOV     R7,Key
0094 120000      R     LCALL   _Osd_Change_Item
                                           ; SOURCE LINE # 2478
                                           ; SOURCE LINE # 2479
0097         ?C0578:
0097 22                RET     
             ; FUNCTION _Page5_Left_Right_Key (END)

             ; FUNCTION Page5_Show (BEGIN)
                                           ; SOURCE LINE # 2481
                                           ; SOURCE LINE # 2482
                                           ; SOURCE LINE # 2483
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH Page5_Atb
0004 7900        E     MOV     R1,#LOW Page5_Atb
0006 750004      R     MOV     ?_Show_Osd_Page?BYTE+04H,#04H
0009 7F03              MOV     R7,#03H
000B 120000      R     LCALL   _Show_Osd_Page
                                           ; SOURCE LINE # 2487
000E 750000      R     MOV     ?_OSD_Window?BYTE+05H,#00H
0011 750099      R     MOV     ?_OSD_Window?BYTE+06H,#099H
0014 750000      R     MOV     ?_OSD_Window?BYTE+07H,#00H
0017 7500B7      R     MOV     ?_OSD_Window?BYTE+08H,#0B7H
001A 120000      R     LCALL   L?1026
001D 120000      R     LCALL   L?1130
0020 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 2491
0023 120000      R     LCALL   L?1120
0026 750004      R     MOV     ?_OSD_Slider?BYTE+05H,#04H
0029 120000      R     LCALL   L?1038
002C 7F0B              MOV     R7,#0BH
002E 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 2494
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 184 

0031 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0033 E6                MOV     A,@R0
0034 7012              JNZ     ?C0579
                                           ; SOURCE LINE # 2495
                                           ; SOURCE LINE # 2496
0036 18                DEC     R0
0037 E6                MOV     A,@R0
0038 6401              XRL     A,#01H
003A 700C              JNZ     ?C0587
                                           ; SOURCE LINE # 2497
003C 120000      R     LCALL   L?1057
003F 120000      R     LCALL   L?1027
0042 120000      R     LCALL   L?1033
0045 020000      R     LJMP    _OSD_Window
                                           ; SOURCE LINE # 2498
0048         ?C0579:
                                           ; SOURCE LINE # 2500
                                           ; SOURCE LINE # 2501
                                           ; SOURCE LINE # 2502
                                           ; SOURCE LINE # 2503
                                           ; SOURCE LINE # 2506
                                           ; SOURCE LINE # 2508
                                           ; SOURCE LINE # 2511
                                           ; SOURCE LINE # 2513
                                           ; SOURCE LINE # 2516
                                           ; SOURCE LINE # 2518
                                           ; SOURCE LINE # 2519
                                           ; SOURCE LINE # 2521
                                           ; SOURCE LINE # 2522
                                           ; SOURCE LINE # 2523
0048         ?C0587:
0048 22                RET     
             ; FUNCTION Page5_Show (END)

             ; FUNCTION Page5B_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 2525
                                           ; SOURCE LINE # 2526
                                           ; SOURCE LINE # 2527
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0002 E6                MOV     A,@R0
0003 FF                MOV     R7,A
0004 B40206            CJNE    A,#02H,?C0588
0007 7E01              MOV     R6,#01H
0009 7F01              MOV     R7,#01H
000B 8029              SJMP    ?C0589
000D         ?C0588:
000D EF                MOV     A,R7
000E B40304            CJNE    A,#03H,?C0590
0011 7F02              MOV     R7,#02H
0013 8021              SJMP    ?C0591
0015         ?C0590:
0015 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0017 E6                MOV     A,@R0
0018 FF                MOV     R7,A
0019 B40406            CJNE    A,#04H,?C0592
001C 7E03              MOV     R6,#03H
001E 7F03              MOV     R7,#03H
0020 8014              SJMP    ?C0593
0022         ?C0592:
0022 EF                MOV     A,R7
0023 B40504            CJNE    A,#05H,?C0594
0026 7F04              MOV     R7,#04H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 185 

0028 800C              SJMP    ?C0595
002A         ?C0594:
002A 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
002C E6                MOV     A,@R0
002D B40604            CJNE    A,#06H,?C0596
0030 7F05              MOV     R7,#05H
0032 8002              SJMP    ?C0597
0034         ?C0596:
0034 7F00              MOV     R7,#00H
0036         ?C0597:
0036         ?C0595:
0036         ?C0593:
0036         ?C0591:
0036         ?C0589:
0036 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 2533
0038 E500        E     MOV     A,Data
003A 7800        E     MOV     R0,#LOW ucInputSrc
003C 66                XRL     A,@R0
003D 6008              JZ      ?C0598
                                           ; SOURCE LINE # 2534
                                           ; SOURCE LINE # 2535
003F 120000      E     LCALL   _Change_Source
                                           ; SOURCE LINE # 2536
0042 E4                CLR     A
0043 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0045 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2537
0046 22                RET     
0047         ?C0598:
                                           ; SOURCE LINE # 2539
                                           ; SOURCE LINE # 2540
0047 E4                CLR     A
0048 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
004A F6                MOV     @R0,A
                                           ; SOURCE LINE # 2541
                                           ; SOURCE LINE # 2543
004B         ?C0600:
004B 22                RET     
             ; FUNCTION Page5B_Enter_Key (END)

             ; FUNCTION _Page5B_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 2545
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 2546
                                           ; SOURCE LINE # 2548
0002 120000      R     LCALL   L?1070
0005 120000      R     LCALL   L?1041
0008 F500        R     MOV     ?_OSD_Window?BYTE+0FH,A
000A 7F06              MOV     R7,#06H
000C 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 2550
000F E500        R     MOV     A,Key
0011 B40310            CJNE    A,#03H,?C0601
                                           ; SOURCE LINE # 2551
0014 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0016 E6                MOV     A,@R0
0017 FF                MOV     R7,A
0018 B40204            CJNE    A,#02H,?C0602
001B 7F01              MOV     R7,#01H
001D 8013              SJMP    ?C0972
001F         ?C0602:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 186 

001F EF                MOV     A,R7
0020 04                INC     A
0021 FF                MOV     R7,A
0022         ?C0603:
0022 800E              SJMP    ?C0972
0024         ?C0601:
                                           ; SOURCE LINE # 2553
0024 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0026 E6                MOV     A,@R0
0027 FF                MOV     R7,A
0028 B40104            CJNE    A,#01H,?C0605
002B 7F02              MOV     R7,#02H
002D 8003              SJMP    ?C0606
002F         ?C0605:
002F EF                MOV     A,R7
0030 14                DEC     A
0031 FF                MOV     R7,A
0032         ?C0606:
0032         ?C0972:
0032 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0034 A607              MOV     @R0,AR7
0036         ?C0604:
                                           ; SOURCE LINE # 2555
0036 120000      R     LCALL   L?1025
0039 7F06              MOV     R7,#06H
003B 020000      R     LJMP    _OSD_Window
             ; FUNCTION _Page5B_Left_Right_Key (END)

             ; FUNCTION Page5B_Show (BEGIN)
                                           ; SOURCE LINE # 2559
                                           ; SOURCE LINE # 2560
                                           ; SOURCE LINE # 2561
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH Page9_Atb
0004 7900        E     MOV     R1,#LOW Page9_Atb
0006 750008      R     MOV     ?_Show_Osd_Page?BYTE+04H,#08H
0009 7F04              MOV     R7,#04H
000B 120000      R     LCALL   _Show_Osd_Page
                                           ; SOURCE LINE # 2562
000E 7E00        E     MOV     R6,#HIGH Page9_Content
0010 7F00        E     MOV     R7,#LOW Page9_Content
0012 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 2564
0015 120000      R     LCALL   L?1025
0018 7F06              MOV     R7,#06H
001A 020000      R     LJMP    _OSD_Window
             ; FUNCTION Page5B_Show (END)

             ; FUNCTION _Page6_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 2573
;---- Variable 'Key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2574
                                           ; SOURCE LINE # 2575
0000 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0002 E6                MOV     A,@R0
0003 BF0307            CJNE    R7,#03H,?C0609
                                           ; SOURCE LINE # 2576
0006 FF                MOV     R7,A
0007 120000      R     LCALL   _GetNextPageIdx
000A A607              MOV     @R0,AR7
000C 22                RET     
000D         ?C0609:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 187 

                                           ; SOURCE LINE # 2578
000D FF                MOV     R7,A
000E 120000      R     LCALL   _GetPrevPageIdx
0011 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 2579
0013         ?C0611:
0013 22                RET     
             ; FUNCTION _Page6_Left_Right_Key (END)

             ; FUNCTION Page6_Show (BEGIN)
                                           ; SOURCE LINE # 2581
                                           ; SOURCE LINE # 2582
                                           ; SOURCE LINE # 2586
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH Page6_Atb
0004 7900        E     MOV     R1,#LOW Page6_Atb
0006 750005      R     MOV     ?_Show_Osd_Page?BYTE+04H,#05H
0009 7F04              MOV     R7,#04H
000B 120000      R     LCALL   _Show_Osd_Page
                                           ; SOURCE LINE # 2590
000E 750000      R     MOV     ?_OSD_Window?BYTE+05H,#00H
0011 7500BA      R     MOV     ?_OSD_Window?BYTE+06H,#0BAH
0014 750000      R     MOV     ?_OSD_Window?BYTE+07H,#00H
0017 7500D8      R     MOV     ?_OSD_Window?BYTE+08H,#0D8H
001A 120000      R     LCALL   L?1026
001D 120000      R     LCALL   L?1130
0020 020000      R     LJMP    _OSD_Window
             ; FUNCTION Page6_Show (END)

             ; FUNCTION PageFactory_Show (BEGIN)
                                           ; SOURCE LINE # 2596
                                           ; SOURCE LINE # 2597
                                           ; SOURCE LINE # 2598
0000 75001E      R     MOV     ?_OSD_Fact_Clear?BYTE+03H,#01EH
0003 E4                CLR     A
0004 FB                MOV     R3,A
0005 7D14              MOV     R5,#014H
0007 FF                MOV     R7,A
0008 120000      R     LCALL   _OSD_Fact_Clear
                                           ; SOURCE LINE # 2599
000B 7F01              MOV     R7,#01H
000D 120000      R     LCALL   _OSD_Position
                                           ; SOURCE LINE # 2600
0010 7F01              MOV     R7,#01H
0012 120000      R     LCALL   _OSD_Position
                                           ; SOURCE LINE # 2602
0015 120000      R     LCALL   L?1118
0018 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 2603
001B 7E00        E     MOV     R6,#HIGH OSD_Reset
001D 7F00        E     MOV     R7,#LOW OSD_Reset
001F 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 2604
0022 7E00        E     MOV     R6,#HIGH OSD_Clean_All
0024 7F00        E     MOV     R7,#LOW OSD_Clean_All
0026 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 2605
0029 7E00        E     MOV     R6,#HIGH FactoryPageAtbFont
002B 7F00        E     MOV     R7,#LOW FactoryPageAtbFont
002D 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 2606
0030 750020      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#020H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 188 

0033 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
0036 7B0F              MOV     R3,#0FH
0038 E4                CLR     A
0039 FD                MOV     R5,A
003A 7F03              MOV     R7,#03H
003C 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2607
003F 7E00        E     MOV     R6,#HIGH Version_Panel
0041 7F00        E     MOV     R7,#LOW Version_Panel
0043 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 2608
0046 120000      R     LCALL   L?1133
0049 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2609
004C 120000      R     LCALL   L?1136
004F 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2610
0052 120000      R     LCALL   L?1159
0055 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2611
0058 750013      R     MOV     ?_ShowValue?BYTE+03H,#013H
005B AB00        E     MOV     R3,stGUD4+03H
005D 7D09              MOV     R5,#09H
                                           ; SOURCE LINE # 2612
005F 120000      R     LCALL   L?1179
0062 AB00        E     MOV     R3,stGUD4+04H
0064 7D0F              MOV     R5,#0FH
                                           ; SOURCE LINE # 2613
0066 120000      R     LCALL   L?1179
0069 AB00        E     MOV     R3,stGUD4+05H
006B 7D15              MOV     R5,#015H
006D 7F08              MOV     R7,#08H
006F 020000      R     LJMP    _ShowValue
                                           ; SOURCE LINE # 2614
0072         L?1179:
0072 7F08              MOV     R7,#08H
0074 120000      R     LCALL   _ShowValue
0077 750013      R     MOV     ?_ShowValue?BYTE+03H,#013H
007A 22                RET     
             ; FUNCTION PageFactory_Show (END)

             ; FUNCTION PageFactory_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 2616
                                           ; SOURCE LINE # 2617
                                           ; SOURCE LINE # 2618
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0002 E6                MOV     A,@R0
0003 FF                MOV     R7,A
0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0614
                                           ; SOURCE LINE # 2619
                                           ; SOURCE LINE # 2620
0009 08                INC     R0
000A E6                MOV     A,@R0
000B 6032              JZ      ?C0615
                                           ; SOURCE LINE # 2621
                                           ; SOURCE LINE # 2622
000D EF                MOV     A,R7
000E 24FE              ADD     A,#0FEH
0010 6013              JZ      ?C0618
0012 14                DEC     A
0013 6019              JZ      ?C0619
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 189 

0015 2402              ADD     A,#02H
0017 6003              JZ      $ + 5H
0019 020000      R     LJMP    ?C0640
                                           ; SOURCE LINE # 2623
                                           ; SOURCE LINE # 2624
001C         ?C0617:
                                           ; SOURCE LINE # 2625
001C 120000      R     LCALL   L?1121
001F 7B03              MOV     R3,#03H
0021 7D09              MOV     R5,#09H
                                           ; SOURCE LINE # 2626
                                           ; SOURCE LINE # 2627
0023 8010              SJMP    ?C0974
                                           ; SOURCE LINE # 2628
0025         ?C0618:
                                           ; SOURCE LINE # 2629
0025 120000      R     LCALL   L?1121
0028 7B03              MOV     R3,#03H
002A 7D0F              MOV     R5,#0FH
002C         ?C0973:
                                           ; SOURCE LINE # 2630
                                           ; SOURCE LINE # 2631
002C 8007              SJMP    ?C0974
                                           ; SOURCE LINE # 2632
002E         ?C0619:
                                           ; SOURCE LINE # 2633
002E 120000      R     LCALL   L?1122
0031 7B03              MOV     R3,#03H
0033 7D15              MOV     R5,#015H
0035         ?C0974:
0035 7F08              MOV     R7,#08H
0037 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2634
003A E4                CLR     A
003B 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
003D F6                MOV     @R0,A
                                           ; SOURCE LINE # 2635
003E 22                RET     
                                           ; SOURCE LINE # 2636
                                           ; SOURCE LINE # 2637
003F         ?C0615:
                                           ; SOURCE LINE # 2639
                                           ; SOURCE LINE # 2640
003F 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0041 E6                MOV     A,@R0
0042 24FC              ADD     A,#0FCH
0044 6012              JZ      ?C0623
0046 14                DEC     A
0047 6014              JZ      ?C0624
0049 14                DEC     A
004A 6019              JZ      ?C0625
004C 2403              ADD     A,#03H
004E 6003              JZ      $ + 5H
0050 020000      R     LJMP    ?C0640
                                           ; SOURCE LINE # 2641
                                           ; SOURCE LINE # 2642
0053         ?C0622:
                                           ; SOURCE LINE # 2643
0053 120000      R     LCALL   L?1133
                                           ; SOURCE LINE # 2644
                                           ; SOURCE LINE # 2645
0056 8008              SJMP    ?C0976
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 190 

                                           ; SOURCE LINE # 2647
0058         ?C0623:
                                           ; SOURCE LINE # 2648
0058 120000      R     LCALL   L?1136
005B         ?C0975:
                                           ; SOURCE LINE # 2649
                                           ; SOURCE LINE # 2650
005B 8003              SJMP    ?C0976
                                           ; SOURCE LINE # 2652
005D         ?C0624:
                                           ; SOURCE LINE # 2653
005D 120000      R     LCALL   L?1159
0060         ?C0976:
0060 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2654
                                           ; SOURCE LINE # 2655
0063 8043              SJMP    ?C0977
                                           ; SOURCE LINE # 2657
0065         ?C0625:
                                           ; SOURCE LINE # 2659
0065 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0067 E6                MOV     A,@R0
0068 24FE              ADD     A,#0FEH
006A 6016              JZ      ?C0628
006C 14                DEC     A
006D 601C              JZ      ?C0629
006F 14                DEC     A
0070 602A              JZ      ?C0630
0072 2403              ADD     A,#03H
0074 6003              JZ      $ + 5H
0076 020000      R     LJMP    ?C0640
                                           ; SOURCE LINE # 2660
                                           ; SOURCE LINE # 2661
0079         ?C0627:
                                           ; SOURCE LINE # 2662
0079 120000      R     LCALL   L?1139
007C 7B03              MOV     R3,#03H
007E 7D09              MOV     R5,#09H
                                           ; SOURCE LINE # 2663
                                           ; SOURCE LINE # 2664
0080 8010              SJMP    ?C0979
                                           ; SOURCE LINE # 2665
0082         ?C0628:
                                           ; SOURCE LINE # 2666
0082 120000      R     LCALL   L?1139
0085 7B03              MOV     R3,#03H
0087 7D0F              MOV     R5,#0FH
0089         ?C0978:
                                           ; SOURCE LINE # 2667
                                           ; SOURCE LINE # 2668
0089 8007              SJMP    ?C0979
                                           ; SOURCE LINE # 2669
008B         ?C0629:
                                           ; SOURCE LINE # 2670
008B 120000      R     LCALL   L?1140
008E 7B03              MOV     R3,#03H
0090 7D15              MOV     R5,#015H
0092         ?C0979:
0092 7F08              MOV     R7,#08H
0094 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2671
0097 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 191 

0099 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 2672
009B 22                RET     
                                           ; SOURCE LINE # 2673
009C         ?C0630:
                                           ; SOURCE LINE # 2674
009C 120000      R     LCALL   L?1122
009F 7B04              MOV     R3,#04H
00A1 7D19              MOV     R5,#019H
00A3 7F08              MOV     R7,#08H
00A5 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2675
00A8         ?C0977:
00A8 E4                CLR     A
00A9 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00AB F6                MOV     @R0,A
                                           ; SOURCE LINE # 2676
00AC 22                RET     
                                           ; SOURCE LINE # 2677
                                           ; SOURCE LINE # 2678
                                           ; SOURCE LINE # 2679
                                           ; SOURCE LINE # 2680
                                           ; SOURCE LINE # 2681
00AD         ?C0614:
                                           ; SOURCE LINE # 2683
                                           ; SOURCE LINE # 2684
00AD 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
00AF E6                MOV     A,@R0
00B0 14                DEC     A
00B1 B40700            CJNE    A,#07H,?C0895
00B4         ?C0895:
00B4 4003              JC      $ + 5H
00B6 020000      R     LJMP    ?C0640
00B9 900000      R     MOV     DPTR,#?C0896
00BC 120000      R     LCALL   L?1147
00BF 73                JMP     @A+DPTR
00C0         ?C0896:
00C0 020000      R     LJMP    ?C0633
00C3 020000      R     LJMP    ?C0634
00C6 020000      R     LJMP    ?C0635
00C9 020000      R     LJMP    ?C0636
00CC 020000      R     LJMP    ?C0637
00CF 020000      R     LJMP    ?C0638
00D2 020000      R     LJMP    ?C0639
                                           ; SOURCE LINE # 2685
                                           ; SOURCE LINE # 2686
00D5         ?C0633:
                                           ; SOURCE LINE # 2687
00D5 120000      E     LCALL   Init_FACTORY
                                           ; SOURCE LINE # 2688
00D8 120000      R     LCALL   L?1134
00DB 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2689
00DE 120000      R     LCALL   L?1137
00E1 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2690
00E4 750013      R     MOV     ?_ShowValue?BYTE+03H,#013H
00E7 AB00        E     MOV     R3,stGUD4+03H
00E9 7D09              MOV     R5,#09H
                                           ; SOURCE LINE # 2691
00EB 120000      R     LCALL   L?1180
00EE AB00        E     MOV     R3,stGUD4+04H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 192 

00F0 7D0F              MOV     R5,#0FH
                                           ; SOURCE LINE # 2692
00F2 120000      R     LCALL   L?1180
00F5 AB00        E     MOV     R3,stGUD4+05H
00F7 7D15              MOV     R5,#015H
00F9 7F08              MOV     R7,#08H
00FB 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2694
00FE E500        E     MOV     A,stGUD1+01H
0100 54E7              ANL     A,#0E7H
0102 4408              ORL     A,#08H
0104 F500        E     MOV     stGUD1+01H,A
                                           ; SOURCE LINE # 2695
0106 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 2696
0109 7E00        E     MOV     R6,#HIGH RecallOK
010B 7F00        E     MOV     R7,#LOW RecallOK
                                           ; SOURCE LINE # 2697
010D 804C              SJMP    ?C0981
                                           ; SOURCE LINE # 2699
010F         ?C0634:
                                           ; SOURCE LINE # 2700
010F 120000      E     LCALL   Auto_Balance
                                           ; SOURCE LINE # 2701
0112 7E00        E     MOV     R6,#HIGH AutoOK
0114 7F00        E     MOV     R7,#LOW AutoOK
0116         ?C0980:
                                           ; SOURCE LINE # 2702
0116 8043              SJMP    ?C0981
                                           ; SOURCE LINE # 2704
0118         ?C0635:
                                           ; SOURCE LINE # 2705
0118 750023      R     MOV     ?_ShowValue?BYTE+03H,#023H
011B 120000      R     LCALL   L?1135
                                           ; SOURCE LINE # 2706
                                           ; SOURCE LINE # 2707
011E 800E              SJMP    ?C0983
                                           ; SOURCE LINE # 2709
0120         ?C0636:
                                           ; SOURCE LINE # 2710
0120 750023      R     MOV     ?_ShowValue?BYTE+03H,#023H
0123 120000      R     LCALL   L?1138
0126         ?C0982:
                                           ; SOURCE LINE # 2711
                                           ; SOURCE LINE # 2712
0126 8006              SJMP    ?C0983
                                           ; SOURCE LINE # 2714
0128         ?C0637:
                                           ; SOURCE LINE # 2715
0128 750023      R     MOV     ?_ShowValue?BYTE+03H,#023H
012B 120000      R     LCALL   L?1160
012E         ?C0983:
012E 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2716
                                           ; SOURCE LINE # 2717
0131 800C              SJMP    ?C0984
                                           ; SOURCE LINE # 2719
0133         ?C0638:
                                           ; SOURCE LINE # 2720
0133 120000      R     LCALL   L?1140
0136 7B01              MOV     R3,#01H
0138 7D07              MOV     R5,#07H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 193 

013A 7F08              MOV     R7,#08H
013C 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2721
013F         ?C0984:
013F 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0141 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 2722
0143 22                RET     
                                           ; SOURCE LINE # 2724
0144         ?C0639:
                                           ; SOURCE LINE # 2725
0144 E4                CLR     A
0145 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0147 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2726
0148 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
014A F6                MOV     @R0,A
                                           ; SOURCE LINE # 2727
014B 08                INC     R0
014C F6                MOV     @R0,A
                                           ; SOURCE LINE # 2728
014D 08                INC     R0
014E F6                MOV     @R0,A
                                           ; SOURCE LINE # 2730
014F FB                MOV     R3,A
0150 7DFE              MOV     R5,#0FEH
0152 7F6D              MOV     R7,#06DH
0154 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 2731
0157 7E00        E     MOV     R6,#HIGH OSD_Reset
0159 7F00        E     MOV     R7,#LOW OSD_Reset
015B         ?C0981:
015B 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 2732
                                           ; SOURCE LINE # 2733
                                           ; SOURCE LINE # 2734
                                           ; SOURCE LINE # 2735
015E         ?C0640:
015E 22                RET     
015F         L?1180:
015F 7F08              MOV     R7,#08H
0161 120000      R     LCALL   _ShowValue
0164 750013      R     MOV     ?_ShowValue?BYTE+03H,#013H
0167 22                RET     
             ; FUNCTION PageFactory_Enter_Key (END)

             ; FUNCTION _PageFactory_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 2737
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 2738
                                           ; SOURCE LINE # 2739
0002 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0004 E6                MOV     A,@R0
0005 FF                MOV     R7,A
0006 7003              JNZ     $ + 5H
0008 020000      R     LJMP    ?C0641
                                           ; SOURCE LINE # 2740
                                           ; SOURCE LINE # 2741
000B 08                INC     R0
000C E6                MOV     A,@R0
000D 6053              JZ      ?C0642
                                           ; SOURCE LINE # 2742
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 194 

                                           ; SOURCE LINE # 2743
000F 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0011 E6                MOV     A,@R0
0012 24FA              ADD     A,#0FAH
0014 6003              JZ      $ + 5H
0016 020000      R     LJMP    ?C0689
                                           ; SOURCE LINE # 2744
                                           ; SOURCE LINE # 2746
0019         ?C0644:
                                           ; SOURCE LINE # 2748
0019 EF                MOV     A,R7
001A 24FE              ADD     A,#0FEH
001C 6014              JZ      ?C0647
001E 14                DEC     A
001F 601E              JZ      ?C0648
0021 2402              ADD     A,#02H
0023 7037              JNZ     ?C0645
                                           ; SOURCE LINE # 2749
                                           ; SOURCE LINE # 2750
0025         ?C0646:
                                           ; SOURCE LINE # 2751
0025 7A00        E     MOV     R2,#HIGH stGUD4+03H
0027 7900        E     MOV     R1,#LOW stGUD4+03H
                                           ; SOURCE LINE # 2752
0029 120000      R     LCALL   L?1106
002C AB00        E     MOV     R3,stGUD4+03H
002E 7D09              MOV     R5,#09H
                                           ; SOURCE LINE # 2753
0030 8025              SJMP    ?C0986
                                           ; SOURCE LINE # 2754
0032         ?C0647:
                                           ; SOURCE LINE # 2755
0032 7A00        E     MOV     R2,#HIGH stGUD4+04H
0034 7900        E     MOV     R1,#LOW stGUD4+04H
                                           ; SOURCE LINE # 2756
0036 120000      R     LCALL   L?1106
0039 AB00        E     MOV     R3,stGUD4+04H
003B 7D0F              MOV     R5,#0FH
003D         ?C0985:
                                           ; SOURCE LINE # 2757
003D 8018              SJMP    ?C0986
                                           ; SOURCE LINE # 2758
003F         ?C0648:
                                           ; SOURCE LINE # 2759
003F 7B00              MOV     R3,#00H
0041 7A00        E     MOV     R2,#HIGH stGUD4+05H
0043 7900        E     MOV     R1,#LOW stGUD4+05H
0045 7500FF      R     MOV     ?_Value_Adjust?BYTE+04H,#0FFH
0048 E4                CLR     A
0049 F500        R     MOV     ?_Value_Adjust?BYTE+05H,A
004B AD00        R     MOV     R5,Key
004D 120000      R     LCALL   _Value_Adjust
                                           ; SOURCE LINE # 2760
0050 750023      R     MOV     ?_ShowValue?BYTE+03H,#023H
0053 AB00        E     MOV     R3,stGUD4+05H
0055 7D15              MOV     R5,#015H
0057         ?C0986:
0057 7F08              MOV     R7,#08H
0059 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2761
                                           ; SOURCE LINE # 2762
005C         ?C0645:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 195 

                                           ; SOURCE LINE # 2763
005C 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 2764
005F 020000      E     LJMP    Save_GUD4
                                           ; SOURCE LINE # 2765
                                           ; SOURCE LINE # 2767
                                           ; SOURCE LINE # 2768
0062         ?C0642:
                                           ; SOURCE LINE # 2770
                                           ; SOURCE LINE # 2771
0062 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0064 E6                MOV     A,@R0
0065 24FD              ADD     A,#0FDH
0067 600C              JZ      ?C0657
0069 14                DEC     A
006A 6027              JZ      ?C0660
006C 14                DEC     A
006D 6038              JZ      ?C0661
006F 14                DEC     A
0070 604F              JZ      ?C0662
0072 020000      R     LJMP    ?C0689
                                           ; SOURCE LINE # 2772
                                           ; SOURCE LINE # 2773
                                           ; SOURCE LINE # 2774
0075         ?C0656:
0075         ?C0657:
                                           ; SOURCE LINE # 2780
0075 AD00        R     MOV     R5,Key
0077 120000      R     LCALL   L?1166
                                           ; SOURCE LINE # 2781
007A 750023      R     MOV     ?_ShowValue?BYTE+03H,#023H
007D 120000      R     LCALL   L?1135
0080 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2784
0083 E500        E     MOV     A,stGUD1+01H
0085 5407              ANL     A,#07H
0087 7005              JNZ     ?C0658
                                           ; SOURCE LINE # 2785
0089 120000      E     LCALL   SetADC_Gain
008C 8016              SJMP    ?C0988
008E         ?C0658:
                                           ; SOURCE LINE # 2787
008E 120000      E     LCALL   Set_Bright_Contrast
0091         ?C0659:
                                           ; SOURCE LINE # 2792
                                           ; SOURCE LINE # 2793
0091 8011              SJMP    ?C0988
                                           ; SOURCE LINE # 2796
0093         ?C0660:
                                           ; SOURCE LINE # 2797
0093 AD00        R     MOV     R5,Key
0095 120000      R     LCALL   L?1187
                                           ; SOURCE LINE # 2798
0098 750023      R     MOV     ?_ShowValue?BYTE+03H,#023H
009B 120000      R     LCALL   L?1138
009E 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2799
00A1 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 2800
00A4         ?C0988:
00A4 020000      E     LJMP    Save_GUD0
                                           ; SOURCE LINE # 2801
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 196 

                                           ; SOURCE LINE # 2803
00A7         ?C0661:
                                           ; SOURCE LINE # 2804
00A7 7B00              MOV     R3,#00H
00A9 7A00        E     MOV     R2,#HIGH stGUD3+04H
00AB 7900        E     MOV     R1,#LOW stGUD3+04H
00AD AD00        R     MOV     R5,Key
00AF 120000      R     LCALL   _SPREAD_Adjust
                                           ; SOURCE LINE # 2805
00B2 750023      R     MOV     ?_ShowValue?BYTE+03H,#023H
00B5 120000      R     LCALL   L?1160
00B8 120000      R     LCALL   _ShowValue
                                           ; SOURCE LINE # 2806
00BB 120000      E     LCALL   Set_Spread
                                           ; SOURCE LINE # 2807
00BE 020000      E     LJMP    Save_GUD3
                                           ; SOURCE LINE # 2808
                                           ; SOURCE LINE # 2811
00C1         ?C0662:
                                           ; SOURCE LINE # 2813
00C1 E500        R     MOV     A,Key
00C3 B40312            CJNE    A,#03H,?C0663
                                           ; SOURCE LINE # 2814
00C6 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00C8 E6                MOV     A,@R0
00C9 FF                MOV     R7,A
00CA B40406            CJNE    A,#04H,?C0664
00CD 7E01              MOV     R6,#01H
00CF 7F01              MOV     R7,#01H
00D1 8015              SJMP    ?C0989
00D3         ?C0664:
00D3 EF                MOV     A,R7
00D4 04                INC     A
00D5 FF                MOV     R7,A
00D6         ?C0665:
00D6 8010              SJMP    ?C0989
00D8         ?C0663:
                                           ; SOURCE LINE # 2816
00D8 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00DA E6                MOV     A,@R0
00DB FF                MOV     R7,A
00DC B40106            CJNE    A,#01H,?C0667
00DF 7E04              MOV     R6,#04H
00E1 7F04              MOV     R7,#04H
00E3 8003              SJMP    ?C0668
00E5         ?C0667:
00E5 EF                MOV     A,R7
00E6 14                DEC     A
00E7 FF                MOV     R7,A
00E8         ?C0668:
00E8         ?C0989:
00E8 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00EA A607              MOV     @R0,AR7
00EC         ?C0666:
                                           ; SOURCE LINE # 2818
00EC 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
00EE E6                MOV     A,@R0
00EF 24FE              ADD     A,#0FEH
00F1 6017              JZ      ?C0671
00F3 14                DEC     A
00F4 6030              JZ      ?C0672
00F6 14                DEC     A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 197 

00F7 6049              JZ      ?C0673
00F9 2403              ADD     A,#03H
00FB 6003              JZ      $ + 5H
00FD 020000      R     LJMP    ?C0689
                                           ; SOURCE LINE # 2819
                                           ; SOURCE LINE # 2820
0100         ?C0670:
                                           ; SOURCE LINE # 2821
0100 750023      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#023H
                                           ; SOURCE LINE # 2822
0103 120000      R     LCALL   L?1076
0106 7D0D              MOV     R5,#0DH
                                           ; SOURCE LINE # 2823
                                           ; SOURCE LINE # 2824
0108 8029              SJMP    ?C0990
                                           ; SOURCE LINE # 2825
010A         ?C0671:
                                           ; SOURCE LINE # 2826
010A 120000      R     LCALL   L?1122
010D 7B01              MOV     R3,#01H
010F 7D07              MOV     R5,#07H
0111 7F08              MOV     R7,#08H
0113 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2827
0116 120000      R     LCALL   L?1140
0119 120000      R     LCALL   L?1169
                                           ; SOURCE LINE # 2828
011C 120000      R     LCALL   L?1122
011F 7B01              MOV     R3,#01H
0121 7D13              MOV     R5,#013H
                                           ; SOURCE LINE # 2829
0123 020000      R     LJMP    ?C0993
                                           ; SOURCE LINE # 2830
0126         ?C0672:
                                           ; SOURCE LINE # 2831
0126 120000      R     LCALL   L?1122
0129 120000      R     LCALL   L?1169
                                           ; SOURCE LINE # 2832
012C 120000      R     LCALL   L?1140
012F 7B01              MOV     R3,#01H
0131 7D13              MOV     R5,#013H
0133         ?C0990:
0133 7F08              MOV     R7,#08H
0135 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2833
0138 120000      R     LCALL   L?1122
013B 7B04              MOV     R3,#04H
013D 7D19              MOV     R5,#019H
013F         ?C0991:
                                           ; SOURCE LINE # 2834
013F 020000      R     LJMP    ?C0993
                                           ; SOURCE LINE # 2835
0142         ?C0673:
                                           ; SOURCE LINE # 2836
0142 750013      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#013H
                                           ; SOURCE LINE # 2837
0145 120000      R     LCALL   L?1076
0148 7D13              MOV     R5,#013H
014A 7F08              MOV     R7,#08H
014C 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2838
014F 120000      R     LCALL   L?1140
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 198 

0152 7B04              MOV     R3,#04H
0154 7D19              MOV     R5,#019H
0156         ?C0992:
                                           ; SOURCE LINE # 2839
0156 020000      R     LJMP    ?C0993
                                           ; SOURCE LINE # 2840
                                           ; SOURCE LINE # 2841
                                           ; SOURCE LINE # 2842
                                           ; SOURCE LINE # 2843
                                           ; SOURCE LINE # 2844
0159         ?C0641:
                                           ; SOURCE LINE # 2846
                                           ; SOURCE LINE # 2848
0159 E500        R     MOV     A,Key
015B B40312            CJNE    A,#03H,?C0675
                                           ; SOURCE LINE # 2849
015E 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0160 E6                MOV     A,@R0
0161 FF                MOV     R7,A
0162 B40706            CJNE    A,#07H,?C0676
0165 7E01              MOV     R6,#01H
0167 7F01              MOV     R7,#01H
0169 8015              SJMP    ?C0994
016B         ?C0676:
016B EF                MOV     A,R7
016C 04                INC     A
016D FF                MOV     R7,A
016E         ?C0677:
016E 8010              SJMP    ?C0994
0170         ?C0675:
                                           ; SOURCE LINE # 2851
0170 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0172 E6                MOV     A,@R0
0173 FF                MOV     R7,A
0174 B40106            CJNE    A,#01H,?C0679
0177 7E07              MOV     R6,#07H
0179 7F07              MOV     R7,#07H
017B 8003              SJMP    ?C0680
017D         ?C0679:
017D EF                MOV     A,R7
017E 14                DEC     A
017F FF                MOV     R7,A
0180         ?C0680:
0180         ?C0994:
0180 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0182 A607              MOV     @R0,AR7
0184         ?C0678:
                                           ; SOURCE LINE # 2853
0184 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0186 E6                MOV     A,@R0
0187 14                DEC     A
0188 B40700            CJNE    A,#07H,?C0897
018B         ?C0897:
018B 4003              JC      $ + 5H
018D 020000      R     LJMP    ?C0689
0190 900000      R     MOV     DPTR,#?C0898
0193 120000      R     LCALL   L?1147
0196 73                JMP     @A+DPTR
0197         ?C0898:
0197 020000      R     LJMP    ?C0682
019A 020000      R     LJMP    ?C0683
019D 020000      R     LJMP    ?C0684
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 199 

01A0 020000      R     LJMP    ?C0685
01A3 020000      R     LJMP    ?C0686
01A6 020000      R     LJMP    ?C0687
01A9 020000      R     LJMP    ?C0688
                                           ; SOURCE LINE # 2854
                                           ; SOURCE LINE # 2855
01AC         ?C0682:
                                           ; SOURCE LINE # 2856
01AC 120000      R     LCALL   L?1123
01AF 7B07              MOV     R3,#07H
01B1 7F09              MOV     R7,#09H
                                           ; SOURCE LINE # 2857
01B3 120000      R     LCALL   L?1141
01B6 7B0E              MOV     R3,#0EH
01B8 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2858
01BA 120000      R     LCALL   L?1080
01BD 7B0A              MOV     R3,#0AH
01BF 7D01              MOV     R5,#01H
01C1 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 2859
01C3 020000      R     LJMP    ?C0999
                                           ; SOURCE LINE # 2861
01C6         ?C0683:
                                           ; SOURCE LINE # 2862
01C6 120000      R     LCALL   L?1123
01C9 7B0E              MOV     R3,#0EH
01CB 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2863
01CD 120000      R     LCALL   L?1141
01D0 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 2864
01D2 120000      R     LCALL   L?1054
01D5 7F05              MOV     R7,#05H
01D7         ?C0995:
                                           ; SOURCE LINE # 2865
01D7 020000      R     LJMP    ?C0999
                                           ; SOURCE LINE # 2867
01DA         ?C0684:
                                           ; SOURCE LINE # 2868
01DA 120000      R     LCALL   L?1124
01DD 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 2869
01DF 120000      R     LCALL   L?1072
01E2 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2870
01E4 120000      R     LCALL   L?1054
01E7 7F06              MOV     R7,#06H
01E9         ?C0996:
                                           ; SOURCE LINE # 2871
01E9 020000      R     LJMP    ?C0999
                                           ; SOURCE LINE # 2873
01EC         ?C0685:
                                           ; SOURCE LINE # 2874
01EC 120000      R     LCALL   L?1124
01EF 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2875
01F1 120000      R     LCALL   L?1072
01F4 7F06              MOV     R7,#06H
                                           ; SOURCE LINE # 2876
01F6 120000      R     LCALL   L?1071
01F9 7B0A              MOV     R3,#0AH
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 200 

01FB 7D01              MOV     R5,#01H
01FD 7F07              MOV     R7,#07H
01FF         ?C0997:
                                           ; SOURCE LINE # 2877
01FF 020000      R     LJMP    ?C0999
                                           ; SOURCE LINE # 2879
0202         ?C0686:
                                           ; SOURCE LINE # 2880
0202 120000      R     LCALL   L?1124
0205 7F06              MOV     R7,#06H
                                           ; SOURCE LINE # 2881
0207 120000      R     LCALL   L?1085
020A 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2882
020C 120000      R     LCALL   L?1071
020F 7B05              MOV     R3,#05H
0211 7D01              MOV     R5,#01H
0213         ?C0993:
0213 7F08              MOV     R7,#08H
0215         ?C0998:
                                           ; SOURCE LINE # 2883
0215 8033              SJMP    ?C0999
                                           ; SOURCE LINE # 2885
0217         ?C0687:
                                           ; SOURCE LINE # 2886
0217 120000      R     LCALL   L?1124
021A 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2887
021C 120000      R     LCALL   L?1085
021F 7B05              MOV     R3,#05H
0221 7F08              MOV     R7,#08H
                                           ; SOURCE LINE # 2888
0223 120000      R     LCALL   L?1080
0226 120000      R     LCALL   L?1196
                                           ; SOURCE LINE # 2889
0229 020000      E     LJMP    Set_Bright_Contrast
                                           ; SOURCE LINE # 2890
                                           ; SOURCE LINE # 2892
022C         ?C0688:
                                           ; SOURCE LINE # 2893
022C 120000      R     LCALL   L?1124
022F 7B05              MOV     R3,#05H
0231 7D01              MOV     R5,#01H
0233 7F08              MOV     R7,#08H
0235 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2894
0238 750020      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#020H
023B 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
023E 120000      R     LCALL   L?1196
                                           ; SOURCE LINE # 2895
0241 120000      R     LCALL   L?1124
0244 7B0E              MOV     R3,#0EH
0246 7D01              MOV     R5,#01H
0248 7F03              MOV     R7,#03H
024A         ?C0999:
024A 120000      R     LCALL   _OSD_Fact_Line
                                           ; SOURCE LINE # 2896
                                           ; SOURCE LINE # 2897
                                           ; SOURCE LINE # 2898
                                           ; SOURCE LINE # 2899
024D         ?C0689:
024D 22                RET     
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 201 

024E         L?1054:
024E 7B0A              MOV     R3,#0AH
0250 7D01              MOV     R5,#01H
0252 120000      R     LCALL   _OSD_Fact_Line
0255 750010      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#010H
0258 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
025B 7B0A              MOV     R3,#0AH
025D 7D01              MOV     R5,#01H
025F 22                RET     
0260         L?1071:
0260 7B0A              MOV     R3,#0AH
0262 7D01              MOV     R5,#01H
0264 120000      R     LCALL   _OSD_Fact_Line
0267 750010      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#010H
026A 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
026D 22                RET     
026E         L?1072:
026E 7B0A              MOV     R3,#0AH
0270 7D01              MOV     R5,#01H
0272 120000      R     LCALL   _OSD_Fact_Line
0275 750020      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#020H
0278 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
027B 22                RET     
027C         L?1076:
027C 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
027F 7B01              MOV     R3,#01H
0281 7D07              MOV     R5,#07H
0283 7F08              MOV     R7,#08H
0285 120000      R     LCALL   _OSD_Fact_Line
0288 750013      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#013H
028B 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
028E 7B01              MOV     R3,#01H
0290 22                RET     
0291         L?1080:
0291 7D01              MOV     R5,#01H
0293 120000      R     LCALL   _OSD_Fact_Line
0296 750010      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#010H
0299 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
029C 22                RET     
029D         L?1085:
029D 7B0A              MOV     R3,#0AH
029F 7D01              MOV     R5,#01H
02A1 120000      R     LCALL   _OSD_Fact_Line
02A4 750020      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#020H
02A7 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
02AA 22                RET     
02AB         L?1106:
02AB 7B00              MOV     R3,#00H
02AD 7500FF      R     MOV     ?_Value_Adjust?BYTE+04H,#0FFH
02B0 E4                CLR     A
02B1 F500        R     MOV     ?_Value_Adjust?BYTE+05H,A
02B3 AD00        R     MOV     R5,Key
02B5 120000      R     LCALL   _Value_Adjust
02B8 750023      R     MOV     ?_ShowValue?BYTE+03H,#023H
02BB 22                RET     
02BC         L?1141:
02BC 7D01              MOV     R5,#01H
02BE 120000      R     LCALL   _OSD_Fact_Line
02C1 750020      R     MOV     ?_OSD_Fact_Line?BYTE+03H,#020H
02C4 750002      R     MOV     ?_OSD_Fact_Line?BYTE+04H,#02H
02C7 22                RET     
02C8         L?1169:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 202 

02C8 7B01              MOV     R3,#01H
02CA 7D0D              MOV     R5,#0DH
02CC 7F08              MOV     R7,#08H
02CE 120000      R     LCALL   _OSD_Fact_Line
02D1 22                RET     
02D2         L?1196:
02D2 7B07              MOV     R3,#07H
02D4 7D01              MOV     R5,#01H
02D6 7F09              MOV     R7,#09H
02D8 120000      R     LCALL   _OSD_Fact_Line
02DB 22                RET     
             ; FUNCTION _PageFactory_Left_Right_Key (END)

             ; FUNCTION _PageADC_Left_Right_Key (BEGIN)
                                           ; SOURCE LINE # 2905
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 2906
                                           ; SOURCE LINE # 2907
0002 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0004 E6                MOV     A,@R0
0005 7003              JNZ     $ + 5H
0007 020000      R     LJMP    ?C0690
                                           ; SOURCE LINE # 2908
                                           ; SOURCE LINE # 2909
000A 18                DEC     R0
000B E6                MOV     A,@R0
000C 24FE              ADD     A,#0FEH
000E 6040              JZ      ?C0698
0010 14                DEC     A
0011 6061              JZ      ?C0703
0013 14                DEC     A
0014 7003              JNZ     $ + 5H
0016 020000      R     LJMP    ?C0708
0019 14                DEC     A
001A 7003              JNZ     $ + 5H
001C 020000      R     LJMP    ?C0713
001F 14                DEC     A
0020 7003              JNZ     $ + 5H
0022 020000      R     LJMP    ?C0718
0025 2405              ADD     A,#05H
0027 6003              JZ      $ + 5H
0029 020000      R     LJMP    ?C0691
                                           ; SOURCE LINE # 2910
                                           ; SOURCE LINE # 2911
002C         ?C0692:
                                           ; SOURCE LINE # 2912
002C E500        R     MOV     A,Key
002E B4030C            CJNE    A,#03H,?C0693
                                           ; SOURCE LINE # 2913
                                           ; SOURCE LINE # 2914
0031 E500        E     MOV     A,stGUD2
0033 F4                CPL     A
0034 7003              JNZ     $ + 5H
0036 020000      R     LJMP    ?C0695
0039         ?C0694:
                                           ; SOURCE LINE # 2917
0039 0500        E     INC     stGUD2
                                           ; SOURCE LINE # 2918
003B 8009              SJMP    ?C0696
003D         ?C0693:
                                           ; SOURCE LINE # 2920
                                           ; SOURCE LINE # 2921
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 203 

003D E500        E     MOV     A,stGUD2
003F 7003              JNZ     $ + 5H
0041 020000      R     LJMP    ?C0695
0044         ?C0697:
                                           ; SOURCE LINE # 2924
0044 1500        E     DEC     stGUD2
                                           ; SOURCE LINE # 2925
0046         ?C0696:
                                           ; SOURCE LINE # 2927
0046 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD2
0049 120000      R     LCALL   L?1045
004C 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2928
                                           ; SOURCE LINE # 2929
004E 8046              SJMP    ?C1001
                                           ; SOURCE LINE # 2931
0050         ?C0698:
                                           ; SOURCE LINE # 2932
0050 E500        R     MOV     A,Key
0052 B4030C            CJNE    A,#03H,?C0699
                                           ; SOURCE LINE # 2933
                                           ; SOURCE LINE # 2934
0055 E500        E     MOV     A,stGUD2+01H
0057 F4                CPL     A
0058 7003              JNZ     $ + 5H
005A 020000      R     LJMP    ?C0695
005D         ?C0700:
                                           ; SOURCE LINE # 2937
005D 0500        E     INC     stGUD2+01H
                                           ; SOURCE LINE # 2938
005F 8009              SJMP    ?C0701
0061         ?C0699:
                                           ; SOURCE LINE # 2940
                                           ; SOURCE LINE # 2941
0061 E500        E     MOV     A,stGUD2+01H
0063 7003              JNZ     $ + 5H
0065 020000      R     LJMP    ?C0695
0068         ?C0702:
                                           ; SOURCE LINE # 2944
0068 1500        E     DEC     stGUD2+01H
                                           ; SOURCE LINE # 2945
006A         ?C0701:
                                           ; SOURCE LINE # 2947
006A 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD2
006D 120000      R     LCALL   L?1045
0070 7F07              MOV     R7,#07H
0072         ?C1000:
                                           ; SOURCE LINE # 2948
                                           ; SOURCE LINE # 2949
0072 8022              SJMP    ?C1001
                                           ; SOURCE LINE # 2951
0074         ?C0703:
                                           ; SOURCE LINE # 2952
0074 E500        R     MOV     A,Key
0076 B4030C            CJNE    A,#03H,?C0704
                                           ; SOURCE LINE # 2953
                                           ; SOURCE LINE # 2954
0079 E500        E     MOV     A,stGUD2+02H
007B F4                CPL     A
007C 7003              JNZ     $ + 5H
007E 020000      R     LJMP    ?C0695
0081         ?C0705:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 204 

                                           ; SOURCE LINE # 2957
0081 0500        E     INC     stGUD2+02H
                                           ; SOURCE LINE # 2958
0083 8009              SJMP    ?C0706
0085         ?C0704:
                                           ; SOURCE LINE # 2960
                                           ; SOURCE LINE # 2961
0085 E500        E     MOV     A,stGUD2+02H
0087 7003              JNZ     $ + 5H
0089 020000      R     LJMP    ?C0695
008C         ?C0707:
                                           ; SOURCE LINE # 2964
008C 1500        E     DEC     stGUD2+02H
                                           ; SOURCE LINE # 2965
008E         ?C0706:
                                           ; SOURCE LINE # 2967
008E 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD2
0091 120000      R     LCALL   L?1045
0094 7F09              MOV     R7,#09H
0096         ?C1001:
0096 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 2968
0099 120000      E     LCALL   SetADC_Gain
                                           ; SOURCE LINE # 2969
009C 020000      R     LJMP    ?C0691
                                           ; SOURCE LINE # 2971
009F         ?C0708:
                                           ; SOURCE LINE # 2972
009F E500        R     MOV     A,Key
00A1 B4030C            CJNE    A,#03H,?C0709
                                           ; SOURCE LINE # 2973
                                           ; SOURCE LINE # 2974
00A4 E500        E     MOV     A,stGUD2+03H
00A6 F4                CPL     A
00A7 7003              JNZ     $ + 5H
00A9 020000      R     LJMP    ?C0695
00AC         ?C0710:
                                           ; SOURCE LINE # 2977
00AC 0500        E     INC     stGUD2+03H
                                           ; SOURCE LINE # 2978
00AE 8009              SJMP    ?C0711
00B0         ?C0709:
                                           ; SOURCE LINE # 2980
                                           ; SOURCE LINE # 2981
00B0 E500        E     MOV     A,stGUD2+03H
00B2 7003              JNZ     $ + 5H
00B4 020000      R     LJMP    ?C0695
00B7         ?C0712:
                                           ; SOURCE LINE # 2984
00B7 1500        E     DEC     stGUD2+03H
                                           ; SOURCE LINE # 2985
00B9         ?C0711:
                                           ; SOURCE LINE # 2987
00B9 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD2
00BC 120000      R     LCALL   L?1045
00BF 7F0B              MOV     R7,#0BH
                                           ; SOURCE LINE # 2988
                                           ; SOURCE LINE # 2989
00C1 803D              SJMP    ?C1003
                                           ; SOURCE LINE # 2991
00C3         ?C0713:
                                           ; SOURCE LINE # 2992
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 205 

00C3 E500        R     MOV     A,Key
00C5 B4030C            CJNE    A,#03H,?C0714
                                           ; SOURCE LINE # 2993
                                           ; SOURCE LINE # 2994
00C8 E500        E     MOV     A,stGUD2+04H
00CA F4                CPL     A
00CB 7003              JNZ     $ + 5H
00CD 020000      R     LJMP    ?C0695
00D0         ?C0715:
                                           ; SOURCE LINE # 2997
00D0 0500        E     INC     stGUD2+04H
                                           ; SOURCE LINE # 2998
00D2 8009              SJMP    ?C0716
00D4         ?C0714:
                                           ; SOURCE LINE # 3000
                                           ; SOURCE LINE # 3001
00D4 E500        E     MOV     A,stGUD2+04H
00D6 7003              JNZ     $ + 5H
00D8 020000      R     LJMP    ?C0695
00DB         ?C0717:
                                           ; SOURCE LINE # 3004
00DB 1500        E     DEC     stGUD2+04H
                                           ; SOURCE LINE # 3005
00DD         ?C0716:
                                           ; SOURCE LINE # 3007
00DD 850000      R     MOV     ?_OSD_Slider?BYTE+03H,stGUD2
00E0 120000      R     LCALL   L?1045
00E3 7F0D              MOV     R7,#0DH
00E5         ?C1002:
                                           ; SOURCE LINE # 3008
                                           ; SOURCE LINE # 3009
00E5 8019              SJMP    ?C1003
                                           ; SOURCE LINE # 3011
00E7         ?C0718:
                                           ; SOURCE LINE # 3012
00E7 E500        R     MOV     A,Key
00E9 B40309            CJNE    A,#03H,?C0719
                                           ; SOURCE LINE # 3013
                                           ; SOURCE LINE # 3014
00EC E500        E     MOV     A,stGUD2+05H
00EE F4                CPL     A
00EF 606F              JZ      ?C0695
00F1         ?C0720:
                                           ; SOURCE LINE # 3017
00F1 0500        E     INC     stGUD2+05H
                                           ; SOURCE LINE # 3018
00F3 8006              SJMP    ?C0721
00F5         ?C0719:
                                           ; SOURCE LINE # 3020
                                           ; SOURCE LINE # 3021
00F5 E500        E     MOV     A,stGUD2+05H
00F7 6067              JZ      ?C0695
00F9         ?C0722:
                                           ; SOURCE LINE # 3024
00F9 1500        E     DEC     stGUD2+05H
                                           ; SOURCE LINE # 3025
00FB         ?C0721:
                                           ; SOURCE LINE # 3027
00FB 120000      R     LCALL   L?1043
00FE 7F0F              MOV     R7,#0FH
0100         ?C1003:
0100 120000      R     LCALL   _OSD_Slider
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 206 

                                           ; SOURCE LINE # 3028
0103 120000      E     LCALL   SetADC_Offset
                                           ; SOURCE LINE # 3029
                                           ; SOURCE LINE # 3031
0106         ?C0691:
                                           ; SOURCE LINE # 3033
0106 020000      E     LJMP    Save_GUD2
                                           ; SOURCE LINE # 3034
0109         ?C0690:
                                           ; SOURCE LINE # 3036
                                           ; SOURCE LINE # 3037
0109 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
010B E6                MOV     A,@R0
010C FF                MOV     R7,A
010D 6051              JZ      ?C0695
                                           ; SOURCE LINE # 3038
                                           ; SOURCE LINE # 3040
010F E500        R     MOV     A,Key
0111 B4030F            CJNE    A,#03H,?C0725
                                           ; SOURCE LINE # 3041
0114 EF                MOV     A,R7
0115 B40704            CJNE    A,#07H,?C0726
0118 7F01              MOV     R7,#01H
011A 8017              SJMP    ?C1004
011C         ?C0726:
011C 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
011E E6                MOV     A,@R0
011F 04                INC     A
0120 FF                MOV     R7,A
0121         ?C0727:
0121 8010              SJMP    ?C1004
0123         ?C0725:
                                           ; SOURCE LINE # 3043
0123 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0125 E6                MOV     A,@R0
0126 FF                MOV     R7,A
0127 B40106            CJNE    A,#01H,?C0729
012A 7E07              MOV     R6,#07H
012C 7F07              MOV     R7,#07H
012E 8003              SJMP    ?C0730
0130         ?C0729:
0130 EF                MOV     A,R7
0131 14                DEC     A
0132 FF                MOV     R7,A
0133         ?C0730:
0133         ?C1004:
0133 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0135 A607              MOV     @R0,AR7
0137         ?C0728:
                                           ; SOURCE LINE # 3045
0137 E4                CLR     A
0138 F500        R     MOV     ?_OSD_Window?BYTE+05H,A
013A F500        R     MOV     ?_OSD_Window?BYTE+06H,A
013C F500        R     MOV     ?_OSD_Window?BYTE+07H,A
013E 7500FC      R     MOV     ?_OSD_Window?BYTE+08H,#0FCH
0141 750004      R     MOV     ?_OSD_Window?BYTE+09H,#04H
0144 750004      R     MOV     ?_OSD_Window?BYTE+0AH,#04H
0147 F500        R     MOV     ?_OSD_Window?BYTE+0BH,A
0149 750001      R     MOV     ?_OSD_Window?BYTE+0CH,#01H
014C 7500E7      R     MOV     ?_OSD_Window?BYTE+0DH,#0E7H
014F 750001      R     MOV     ?_OSD_Window?BYTE+0EH,#01H
0152 750071      R     MOV     ?_OSD_Window?BYTE+0FH,#071H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 207 

0155 7BDC              MOV     R3,#0DCH
0157 7A01              MOV     R2,#01H
0159 FD                MOV     R5,A
015A FC                MOV     R4,A
015B 7F06              MOV     R7,#06H
015D 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 3046
                                           ; SOURCE LINE # 3047
                                           ; SOURCE LINE # 3048
0160         ?C0695:
0160 22                RET     
             ; FUNCTION _PageADC_Left_Right_Key (END)

             ; FUNCTION PageADC_Enter_Key (BEGIN)
                                           ; SOURCE LINE # 3050
                                           ; SOURCE LINE # 3051
                                           ; SOURCE LINE # 3052
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0002 E6                MOV     A,@R0
0003 7022              JNZ     ?C0731
                                           ; SOURCE LINE # 3053
                                           ; SOURCE LINE # 3055
0005 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 3056
0007 08                INC     R0
0008 F6                MOV     @R0,A
                                           ; SOURCE LINE # 3057
0009 F500        R     MOV     ?_OSD_Window?BYTE+05H,A
000B 750038      R     MOV     ?_OSD_Window?BYTE+06H,#038H
000E F500        R     MOV     ?_OSD_Window?BYTE+07H,A
0010 750056      R     MOV     ?_OSD_Window?BYTE+08H,#056H
0013 750002      R     MOV     ?_OSD_Window?BYTE+09H,#02H
0016 750002      R     MOV     ?_OSD_Window?BYTE+0AH,#02H
0019 120000      R     LCALL   L?1059
001C 120000      R     LCALL   L?1027
001F 7D98              MOV     R5,#098H
0021 120000      R     LCALL   L?1034
0024 020000      R     LJMP    _OSD_Window
                                           ; SOURCE LINE # 3058
0027         ?C0731:
                                           ; SOURCE LINE # 3060
                                           ; SOURCE LINE # 3061
0027 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0029 E6                MOV     A,@R0
002A B40705            CJNE    A,#07H,?C0733
                                           ; SOURCE LINE # 3062
                                           ; SOURCE LINE # 3063
002D E4                CLR     A
002E 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0030 F6                MOV     @R0,A
                                           ; SOURCE LINE # 3064
0031 22                RET     
0032         ?C0733:
                                           ; SOURCE LINE # 3066
                                           ; SOURCE LINE # 3067
0032 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0034 E6                MOV     A,@R0
0035 6009              JZ      ?C0735
                                           ; SOURCE LINE # 3068
                                           ; SOURCE LINE # 3069
0037 E4                CLR     A
0038 F6                MOV     @R0,A
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 208 

                                           ; SOURCE LINE # 3070
0039 7E00        E     MOV     R6,#HIGH OSD_Version
003B 7F00        E     MOV     R7,#LOW OSD_Version
003D 020000      E     LJMP    _RTDOSDW
                                           ; SOURCE LINE # 3071
0040         ?C0735:
                                           ; SOURCE LINE # 3073
                                           ; SOURCE LINE # 3074
0040 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0042 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 3076
0044 18                DEC     R0
0045 E6                MOV     A,@R0
0046 24FE              ADD     A,#0FEH
0048 6017              JZ      ?C0739
004A 14                DEC     A
004B 601B              JZ      ?C0740
004D 14                DEC     A
004E 601F              JZ      ?C0741
0050 14                DEC     A
0051 6023              JZ      ?C0742
0053 14                DEC     A
0054 6027              JZ      ?C0743
0056 2405              ADD     A,#05H
0058 702B              JNZ     ?C0744
                                           ; SOURCE LINE # 3077
                                           ; SOURCE LINE # 3078
005A         ?C0738:
                                           ; SOURCE LINE # 3079
005A 120000      R     LCALL   L?1043
005D 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 3080
005F 8021              SJMP    ?C1009
                                           ; SOURCE LINE # 3082
0061         ?C0739:
                                           ; SOURCE LINE # 3083
0061 120000      R     LCALL   L?1044
0064 7F07              MOV     R7,#07H
0066         ?C1005:
                                           ; SOURCE LINE # 3084
0066 801A              SJMP    ?C1009
                                           ; SOURCE LINE # 3086
0068         ?C0740:
                                           ; SOURCE LINE # 3087
0068 120000      R     LCALL   L?1044
006B 7F09              MOV     R7,#09H
006D         ?C1006:
                                           ; SOURCE LINE # 3088
006D 8013              SJMP    ?C1009
                                           ; SOURCE LINE # 3090
006F         ?C0741:
                                           ; SOURCE LINE # 3091
006F 120000      R     LCALL   L?1044
0072 7F0B              MOV     R7,#0BH
0074         ?C1007:
                                           ; SOURCE LINE # 3092
0074 800C              SJMP    ?C1009
                                           ; SOURCE LINE # 3094
0076         ?C0742:
                                           ; SOURCE LINE # 3095
0076 120000      R     LCALL   L?1044
0079 7F0D              MOV     R7,#0DH
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 209 

007B         ?C1008:
                                           ; SOURCE LINE # 3096
007B 8005              SJMP    ?C1009
                                           ; SOURCE LINE # 3098
007D         ?C0743:
                                           ; SOURCE LINE # 3099
007D 120000      R     LCALL   L?1044
0080 7F0F              MOV     R7,#0FH
0082         ?C1009:
0082 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 3100
                                           ; SOURCE LINE # 3102
                                           ; SOURCE LINE # 3103
                                           ; SOURCE LINE # 3104
                                           ; SOURCE LINE # 3105
                                           ; SOURCE LINE # 3106
0085         ?C0744:
0085 22                RET     
             ; FUNCTION PageADC_Enter_Key (END)

             ; FUNCTION PageADC_Show (BEGIN)
                                           ; SOURCE LINE # 3108
                                           ; SOURCE LINE # 3109
                                           ; SOURCE LINE # 3110
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      R     LCALL   _Init_Page
                                           ; SOURCE LINE # 3112
0005 7E00        E     MOV     R6,#HIGH PageADC_Atb
0007 7F00        E     MOV     R7,#LOW PageADC_Atb
0009 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 3113
000C 7E00        E     MOV     R6,#HIGH PageADC_ENG
000E 7F00        E     MOV     R7,#LOW PageADC_ENG
0010 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 3118
0013 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0015 E6                MOV     A,@R0
0016 7007              JNZ     ?C0745
                                           ; SOURCE LINE # 3119
                                           ; SOURCE LINE # 3120
0018 7E00        E     MOV     R6,#HIGH OSD_Version
001A 7F00        E     MOV     R7,#LOW OSD_Version
001C 020000      E     LJMP    _RTDOSDW
                                           ; SOURCE LINE # 3121
001F         ?C0745:
                                           ; SOURCE LINE # 3123
                                           ; SOURCE LINE # 3124
001F 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0021 E6                MOV     A,@R0
0022 24FE              ADD     A,#0FEH
0024 601A              JZ      ?C0749
0026 14                DEC     A
0027 6021              JZ      ?C0750
0029 14                DEC     A
002A 6028              JZ      ?C0751
002C 14                DEC     A
002D 602F              JZ      ?C0752
002F 14                DEC     A
0030 6036              JZ      ?C0753
0032 2405              ADD     A,#05H
0034 703D              JNZ     ?C0754
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 210 

                                           ; SOURCE LINE # 3125
                                           ; SOURCE LINE # 3126
0036         ?C0748:
                                           ; SOURCE LINE # 3127
0036 120000      R     LCALL   L?1095
0039 120000      R     LCALL   L?1046
003C 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 3128
003E 8030              SJMP    ?C1014
                                           ; SOURCE LINE # 3130
0040         ?C0749:
                                           ; SOURCE LINE # 3131
0040 120000      R     LCALL   L?1095
0043 120000      R     LCALL   L?1046
0046 7F07              MOV     R7,#07H
0048         ?C1010:
                                           ; SOURCE LINE # 3132
0048 8026              SJMP    ?C1014
                                           ; SOURCE LINE # 3134
004A         ?C0750:
                                           ; SOURCE LINE # 3135
004A 120000      R     LCALL   L?1096
004D 120000      R     LCALL   L?1046
0050 7F09              MOV     R7,#09H
0052         ?C1011:
                                           ; SOURCE LINE # 3136
0052 801C              SJMP    ?C1014
                                           ; SOURCE LINE # 3138
0054         ?C0751:
                                           ; SOURCE LINE # 3139
0054 120000      R     LCALL   L?1096
0057 120000      R     LCALL   L?1046
005A 7F0B              MOV     R7,#0BH
005C         ?C1012:
                                           ; SOURCE LINE # 3140
005C 8012              SJMP    ?C1014
                                           ; SOURCE LINE # 3142
005E         ?C0752:
                                           ; SOURCE LINE # 3143
005E 120000      R     LCALL   L?1096
0061 120000      R     LCALL   L?1046
0064 7F0D              MOV     R7,#0DH
0066         ?C1013:
                                           ; SOURCE LINE # 3144
0066 8008              SJMP    ?C1014
                                           ; SOURCE LINE # 3146
0068         ?C0753:
                                           ; SOURCE LINE # 3147
0068 120000      R     LCALL   L?1096
006B 120000      R     LCALL   L?1046
006E 7F0F              MOV     R7,#0FH
0070         ?C1014:
0070 120000      R     LCALL   _OSD_Slider
                                           ; SOURCE LINE # 3148
                                           ; SOURCE LINE # 3150
                                           ; SOURCE LINE # 3151
                                           ; SOURCE LINE # 3152
0073         ?C0754:
0073 22                RET     
             ; FUNCTION PageADC_Show (END)

             ; FUNCTION _Page1_Goto_Subpage (BEGIN)
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 211 

                                           ; SOURCE LINE # 3158
;---- Variable 'Key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 3159
                                           ; SOURCE LINE # 3160
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0002 E6                MOV     A,@R0
0003 6404              XRL     A,#04H
0005 7027              JNZ     ?C0755
0007 08                INC     R0
0008 E6                MOV     A,@R0
0009 6023              JZ      ?C0755
                                           ; SOURCE LINE # 3161
                                           ; SOURCE LINE # 3162
000B 7800        E     MOV     R0,#LOW ucMode_Curr
000D E6                MOV     A,@R0
000E FE                MOV     R6,A
000F 6003              JZ      ?C0757
0011 B4FF08            CJNE    A,#0FFH,?C0756
0014         ?C0757:
                                           ; SOURCE LINE # 3163
                                           ; SOURCE LINE # 3164
0014 E4                CLR     A
0015 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0017 F6                MOV     @R0,A
                                           ; SOURCE LINE # 3165
0018 08                INC     R0
0019 F6                MOV     @R0,A
                                           ; SOURCE LINE # 3166
001A 8003              SJMP    ?C0758
001C         ?C0756:
                                           ; SOURCE LINE # 3168
                                           ; SOURCE LINE # 3170
001C 120000      R     LCALL   _OSD_Proc_B
                                           ; SOURCE LINE # 3171
001F         ?C0758:
                                           ; SOURCE LINE # 3173
001F 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0021 E6                MOV     A,@R0
0022 6003              JZ      ?C0759
                                           ; SOURCE LINE # 3174
0024 7F00              MOV     R7,#00H
0026 22                RET     
0027         ?C0759:
                                           ; SOURCE LINE # 3176
0027 E4                CLR     A
0028 7800        R     MOV     R0,#LOW ucOSD_Item_Index2
002A F6                MOV     @R0,A
                                           ; SOURCE LINE # 3179
002B 7F01              MOV     R7,#01H
002D 22                RET     
                                           ; SOURCE LINE # 3181
002E         ?C0755:
                                           ; SOURCE LINE # 3183
002E 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 3185
0030         ?C0760:
0030 22                RET     
             ; FUNCTION _Page1_Goto_Subpage (END)

             ; FUNCTION _Page4_Goto_Subpage (BEGIN)
                                           ; SOURCE LINE # 3188
;---- Variable 'Key' assigned to Register 'R7' ----
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 212 

                                           ; SOURCE LINE # 3189
                                           ; SOURCE LINE # 3190
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0002 E6                MOV     A,@R0
0003 6401              XRL     A,#01H
0005 701B              JNZ     ?C0761
0007 08                INC     R0
0008 E6                MOV     A,@R0
0009 6017              JZ      ?C0761
                                           ; SOURCE LINE # 3191
                                           ; SOURCE LINE # 3192
000B EF                MOV     A,R7
000C 6483              XRL     A,#083H
000E 600E              JZ      ?C0762
                                           ; SOURCE LINE # 3193
                                           ; SOURCE LINE # 3195
0010 120000      R     LCALL   _OSD_Proc_B
                                           ; SOURCE LINE # 3197
0013 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0015 E6                MOV     A,@R0
0016 6003              JZ      ?C0763
                                           ; SOURCE LINE # 3198
0018 7F00              MOV     R7,#00H
001A 22                RET     
001B         ?C0763:
                                           ; SOURCE LINE # 3201
001B 7F01              MOV     R7,#01H
001D 22                RET     
                                           ; SOURCE LINE # 3202
001E         ?C0762:
                                           ; SOURCE LINE # 3204
                                           ; SOURCE LINE # 3206
001E E4                CLR     A
001F 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 3207
                                           ; SOURCE LINE # 3208
0022         ?C0761:
                                           ; SOURCE LINE # 3210
0022 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 3212
0024         ?C0764:
0024 22                RET     
             ; FUNCTION _Page4_Goto_Subpage (END)

             ; FUNCTION _Page5_Goto_Subpage (BEGIN)
                                           ; SOURCE LINE # 3214
;---- Variable 'Key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 3215
                                           ; SOURCE LINE # 3216
0000 7800        R     MOV     R0,#LOW ucOSD_Item_Index0
0002 E6                MOV     A,@R0
0003 6401              XRL     A,#01H
0005 701B              JNZ     ?C0766
0007 08                INC     R0
0008 E6                MOV     A,@R0
0009 6017              JZ      ?C0766
                                           ; SOURCE LINE # 3217
                                           ; SOURCE LINE # 3218
000B EF                MOV     A,R7
000C 6483              XRL     A,#083H
000E 600E              JZ      ?C0767
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 213 

                                           ; SOURCE LINE # 3219
                                           ; SOURCE LINE # 3221
0010 120000      R     LCALL   _OSD_Proc_B
                                           ; SOURCE LINE # 3223
0013 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0015 E6                MOV     A,@R0
0016 6003              JZ      ?C0768
0018 7F00              MOV     R7,#00H
001A 22                RET     
001B         ?C0768:
                                           ; SOURCE LINE # 3226
001B 7F01              MOV     R7,#01H
001D 22                RET     
                                           ; SOURCE LINE # 3227
001E         ?C0767:
                                           ; SOURCE LINE # 3229
                                           ; SOURCE LINE # 3231
001E E4                CLR     A
001F 7800        R     MOV     R0,#LOW ucOSD_Item_Index1
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 3232
                                           ; SOURCE LINE # 3233
0022         ?C0766:
                                           ; SOURCE LINE # 3235
0022 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 3237
0024         ?C0769:
0024 22                RET     
             ; FUNCTION _Page5_Goto_Subpage (END)

             ; FUNCTION _Sub_Page_Process (BEGIN)
                                           ; SOURCE LINE # 3425
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 3426
                                           ; SOURCE LINE # 3427
;---- Variable 'ucTemp' assigned to Register 'R7' ----
0002 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 3429
0004 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0006 E6                MOV     A,@R0
0007 24FD              ADD     A,#0FDH
0009 600E              JZ      ?C0773
000B 14                DEC     A
000C 6012              JZ      ?C0774
000E 2403              ADD     A,#03H
0010 7013              JNZ     ?C0771
                                           ; SOURCE LINE # 3430
                                           ; SOURCE LINE # 3431
0012         ?C0772:
                                           ; SOURCE LINE # 3432
0012 AF00        R     MOV     R7,Key
0014 120000      R     LCALL   _Page1_Goto_Subpage
                                           ; SOURCE LINE # 3433
0017 800C              SJMP    ?C0771
                                           ; SOURCE LINE # 3436
0019         ?C0773:
                                           ; SOURCE LINE # 3437
0019 AF00        R     MOV     R7,Key
001B 120000      R     LCALL   _Page4_Goto_Subpage
                                           ; SOURCE LINE # 3438
001E 8005              SJMP    ?C0771
                                           ; SOURCE LINE # 3441
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 214 

0020         ?C0774:
                                           ; SOURCE LINE # 3442
0020 AF00        R     MOV     R7,Key
0022 120000      R     LCALL   _Page5_Goto_Subpage
                                           ; SOURCE LINE # 3443
                                           ; SOURCE LINE # 3445
                                           ; SOURCE LINE # 3446
                                           ; SOURCE LINE # 3447
0025         ?C0771:
                                           ; SOURCE LINE # 3449
                                           ; SOURCE LINE # 3451
0025         ?C0776:
0025 22                RET     
             ; FUNCTION _Sub_Page_Process (END)

             ; FUNCTION FACTORY_Key_Process (BEGIN)
                                           ; SOURCE LINE # 3456
                                           ; SOURCE LINE # 3457
                                           ; SOURCE LINE # 3458
0000 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0002 E6                MOV     A,@R0
0003 7003              JNZ     ?C0779
                                           ; SOURCE LINE # 3459
                                           ; SOURCE LINE # 3460
0005         ?C0778:
                                           ; SOURCE LINE # 3461
0005 120000      R     LCALL   FACTORY_Key_Key
                                           ; SOURCE LINE # 3462
                                           ; SOURCE LINE # 3463
                                           ; SOURCE LINE # 3464
0008         ?C0779:
0008 22                RET     
             ; FUNCTION FACTORY_Key_Process (END)

             ; FUNCTION Enter_Key_Process (BEGIN)
                                           ; SOURCE LINE # 3468
                                           ; SOURCE LINE # 3469
                                           ; SOURCE LINE # 3470
0000 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0002 E6                MOV     A,@R0
0003 14                DEC     A
0004 601B              JZ      ?C0782
0006 14                DEC     A
0007 601B              JZ      ?C0783
0009 14                DEC     A
000A 601B              JZ      ?C0784
000C 14                DEC     A
000D 601B              JZ      ?C0785
000F 14                DEC     A
0010 601B              JZ      ?C0786
0012 24FD              ADD     A,#0FDH
0014 601C              JZ      ?C0787
0016 24F9              ADD     A,#0F9H
0018 6021              JZ      ?C0789
001A 240F              ADD     A,#0FH
001C 7020              JNZ     ?C0790
                                           ; SOURCE LINE # 3471
                                           ; SOURCE LINE # 3472
001E         ?C0781:
                                           ; SOURCE LINE # 3473
001E 020000      R     LJMP    Page0_Enter_Key
                                           ; SOURCE LINE # 3474
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 215 

                                           ; SOURCE LINE # 3476
0021         ?C0782:
                                           ; SOURCE LINE # 3477
0021 020000      R     LJMP    Page1_Enter_Key
                                           ; SOURCE LINE # 3478
                                           ; SOURCE LINE # 3480
0024         ?C0783:
                                           ; SOURCE LINE # 3481
0024 020000      R     LJMP    Page2_Enter_Key
                                           ; SOURCE LINE # 3482
                                           ; SOURCE LINE # 3491
0027         ?C0784:
                                           ; SOURCE LINE # 3492
0027 020000      R     LJMP    Page4_Enter_Key
                                           ; SOURCE LINE # 3493
                                           ; SOURCE LINE # 3495
002A         ?C0785:
                                           ; SOURCE LINE # 3496
002A 020000      R     LJMP    Page5_Enter_Key
                                           ; SOURCE LINE # 3497
                                           ; SOURCE LINE # 3499
002D         ?C0786:
                                           ; SOURCE LINE # 3501
002D E4                CLR     A
002E 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0030 F6                MOV     @R0,A
                                           ; SOURCE LINE # 3502
0031 22                RET     
                                           ; SOURCE LINE # 3504
0032         ?C0787:
                                           ; SOURCE LINE # 3505
0032 E500        E     MOV     A,stGUD1+01H
0034 5407              ANL     A,#07H
0036 7006              JNZ     ?C0790
                                           ; SOURCE LINE # 3506
0038 020000      R     LJMP    PageADC_Enter_Key
                                           ; SOURCE LINE # 3512
                                           ; SOURCE LINE # 3514
003B         ?C0789:
                                           ; SOURCE LINE # 3515
003B 120000      R     LCALL   PageFactory_Enter_Key
                                           ; SOURCE LINE # 3516
                                           ; SOURCE LINE # 3518
                                           ; SOURCE LINE # 3519
003E         ?C0790:
003E 22                RET     
             ; FUNCTION Enter_Key_Process (END)

             ; FUNCTION Enter_Key_B_Process (BEGIN)
                                           ; SOURCE LINE # 3521
                                           ; SOURCE LINE # 3522
                                           ; SOURCE LINE # 3523
0000 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0002 E6                MOV     A,@R0
0003 24FD              ADD     A,#0FDH
0005 600A              JZ      ?C0793
0007 14                DEC     A
0008 600A              JZ      ?C0794
000A 2403              ADD     A,#03H
000C 7009              JNZ     ?C0795
                                           ; SOURCE LINE # 3524
                                           ; SOURCE LINE # 3525
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 216 

000E         ?C0792:
                                           ; SOURCE LINE # 3526
000E 020000      R     LJMP    Page1B_Enter_Key
                                           ; SOURCE LINE # 3527
                                           ; SOURCE LINE # 3530
0011         ?C0793:
                                           ; SOURCE LINE # 3531
0011 020000      R     LJMP    Page4B_Enter_Key
                                           ; SOURCE LINE # 3532
                                           ; SOURCE LINE # 3536
0014         ?C0794:
                                           ; SOURCE LINE # 3537
0014 120000      R     LCALL   Page5B_Enter_Key
                                           ; SOURCE LINE # 3538
                                           ; SOURCE LINE # 3540
                                           ; SOURCE LINE # 3541
0017         ?C0795:
0017 22                RET     
             ; FUNCTION Enter_Key_B_Process (END)

             ; FUNCTION _Left_Right_Key_Process (BEGIN)
                                           ; SOURCE LINE # 3542
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 3543
                                           ; SOURCE LINE # 3544
0002 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0004 E6                MOV     A,@R0
0005 14                DEC     A
0006 601D              JZ      ?C0798
0008 14                DEC     A
0009 601F              JZ      ?C0799
000B 14                DEC     A
000C 6021              JZ      ?C0800
000E 14                DEC     A
000F 6023              JZ      ?C0801
0011 14                DEC     A
0012 6025              JZ      ?C0802
0014 24FD              ADD     A,#0FDH
0016 6026              JZ      ?C0803
0018 24F9              ADD     A,#0F9H
001A 602D              JZ      ?C0805
001C 240F              ADD     A,#0FH
001E 702E              JNZ     ?C0806
                                           ; SOURCE LINE # 3545
                                           ; SOURCE LINE # 3546
0020         ?C0797:
                                           ; SOURCE LINE # 3547
0020 AF00        R     MOV     R7,Key
0022 020000      R     LJMP    _Page0_Left_Right_Key
                                           ; SOURCE LINE # 3548
                                           ; SOURCE LINE # 3550
0025         ?C0798:
                                           ; SOURCE LINE # 3551
0025 AF00        R     MOV     R7,Key
0027 020000      R     LJMP    _Page1_Left_Right_Key
                                           ; SOURCE LINE # 3552
                                           ; SOURCE LINE # 3554
002A         ?C0799:
                                           ; SOURCE LINE # 3555
002A AF00        R     MOV     R7,Key
002C 020000      R     LJMP    _Page2_Left_Right_Key
                                           ; SOURCE LINE # 3556
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 217 

                                           ; SOURCE LINE # 3562
002F         ?C0800:
                                           ; SOURCE LINE # 3563
002F AF00        R     MOV     R7,Key
0031 020000      R     LJMP    _Page4_Left_Right_Key
                                           ; SOURCE LINE # 3564
                                           ; SOURCE LINE # 3566
0034         ?C0801:
                                           ; SOURCE LINE # 3567
0034 AF00        R     MOV     R7,Key
0036 020000      R     LJMP    _Page5_Left_Right_Key
                                           ; SOURCE LINE # 3568
                                           ; SOURCE LINE # 3570
0039         ?C0802:
                                           ; SOURCE LINE # 3571
0039 AF00        R     MOV     R7,Key
003B 020000      R     LJMP    _Page6_Left_Right_Key
                                           ; SOURCE LINE # 3572
                                           ; SOURCE LINE # 3574
003E         ?C0803:
                                           ; SOURCE LINE # 3575
003E E500        E     MOV     A,stGUD1+01H
0040 5407              ANL     A,#07H
0042 700A              JNZ     ?C0806
                                           ; SOURCE LINE # 3576
0044 AF00        R     MOV     R7,Key
0046 020000      R     LJMP    _PageADC_Left_Right_Key
                                           ; SOURCE LINE # 3582
                                           ; SOURCE LINE # 3584
0049         ?C0805:
                                           ; SOURCE LINE # 3585
0049 AF00        R     MOV     R7,Key
004B 120000      R     LCALL   _PageFactory_Left_Right_Key
                                           ; SOURCE LINE # 3586
                                           ; SOURCE LINE # 3588
                                           ; SOURCE LINE # 3589
004E         ?C0806:
004E 22                RET     
             ; FUNCTION _Left_Right_Key_Process (END)

             ; FUNCTION _Left_Right_Key_B_Process (BEGIN)
                                           ; SOURCE LINE # 3591
0000 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 3592
                                           ; SOURCE LINE # 3593
0002 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0004 E6                MOV     A,@R0
0005 24FD              ADD     A,#0FDH
0007 600C              JZ      ?C0809
0009 14                DEC     A
000A 600E              JZ      ?C0810
000C 2403              ADD     A,#03H
000E 700F              JNZ     ?C0811
                                           ; SOURCE LINE # 3594
                                           ; SOURCE LINE # 3595
0010         ?C0808:
                                           ; SOURCE LINE # 3596
0010 AF00        R     MOV     R7,Key
0012 020000      R     LJMP    _Page1B_Left_Right_Key
                                           ; SOURCE LINE # 3597
                                           ; SOURCE LINE # 3600
0015         ?C0809:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 218 

                                           ; SOURCE LINE # 3601
0015 AF00        R     MOV     R7,Key
0017 020000      R     LJMP    _Page4B_Left_Right_Key
                                           ; SOURCE LINE # 3602
                                           ; SOURCE LINE # 3606
001A         ?C0810:
                                           ; SOURCE LINE # 3607
001A AF00        R     MOV     R7,Key
001C 120000      R     LCALL   _Page5B_Left_Right_Key
                                           ; SOURCE LINE # 3608
                                           ; SOURCE LINE # 3610
                                           ; SOURCE LINE # 3611
001F         ?C0811:
001F 22                RET     
             ; FUNCTION _Left_Right_Key_B_Process (END)

             ; FUNCTION Show_Process (BEGIN)
                                           ; SOURCE LINE # 3613
                                           ; SOURCE LINE # 3614
                                           ; SOURCE LINE # 3615
0000 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0002 E6                MOV     A,@R0
0003 24FE              ADD     A,#0FEH
0005 6018              JZ      ?C0814
0007 14                DEC     A
0008 6018              JZ      ?C0815
000A 14                DEC     A
000B 6018              JZ      ?C0816
000D 14                DEC     A
000E 6018              JZ      ?C0817
0010 24FD              ADD     A,#0FDH
0012 6017              JZ      ?C0818
0014 24F9              ADD     A,#0F9H
0016 601C              JZ      ?C0820
0018 240E              ADD     A,#0EH
001A 701B              JNZ     ?C0821
                                           ; SOURCE LINE # 3616
                                           ; SOURCE LINE # 3617
001C         ?C0813:
                                           ; SOURCE LINE # 3618
001C 020000      R     LJMP    Page1_Show
                                           ; SOURCE LINE # 3619
                                           ; SOURCE LINE # 3621
001F         ?C0814:
                                           ; SOURCE LINE # 3622
001F 020000      R     LJMP    Page2_Show
                                           ; SOURCE LINE # 3623
                                           ; SOURCE LINE # 3629
0022         ?C0815:
                                           ; SOURCE LINE # 3630
0022 020000      R     LJMP    Page4_Show
                                           ; SOURCE LINE # 3631
                                           ; SOURCE LINE # 3633
0025         ?C0816:
                                           ; SOURCE LINE # 3634
0025 020000      R     LJMP    Page5_Show
                                           ; SOURCE LINE # 3635
                                           ; SOURCE LINE # 3637
0028         ?C0817:
                                           ; SOURCE LINE # 3638
0028 020000      R     LJMP    Page6_Show
                                           ; SOURCE LINE # 3639
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 219 

                                           ; SOURCE LINE # 3641
002B         ?C0818:
                                           ; SOURCE LINE # 3642
002B E500        E     MOV     A,stGUD1+01H
002D 5407              ANL     A,#07H
002F 7006              JNZ     ?C0821
                                           ; SOURCE LINE # 3643
0031 020000      R     LJMP    PageADC_Show
                                           ; SOURCE LINE # 3649
                                           ; SOURCE LINE # 3651
0034         ?C0820:
                                           ; SOURCE LINE # 3652
0034 120000      R     LCALL   PageFactory_Show
                                           ; SOURCE LINE # 3653
                                           ; SOURCE LINE # 3655
                                           ; SOURCE LINE # 3656
0037         ?C0821:
0037 22                RET     
             ; FUNCTION Show_Process (END)

             ; FUNCTION Show_B_Process (BEGIN)
                                           ; SOURCE LINE # 3658
                                           ; SOURCE LINE # 3659
                                           ; SOURCE LINE # 3660
0000 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0002 E6                MOV     A,@R0
0003 24FD              ADD     A,#0FDH
0005 600A              JZ      ?C0824
0007 14                DEC     A
0008 600A              JZ      ?C0825
000A 2403              ADD     A,#03H
000C 7009              JNZ     ?C0826
                                           ; SOURCE LINE # 3661
                                           ; SOURCE LINE # 3662
000E         ?C0823:
                                           ; SOURCE LINE # 3663
000E 020000      R     LJMP    Page1B_Show
                                           ; SOURCE LINE # 3664
                                           ; SOURCE LINE # 3667
0011         ?C0824:
                                           ; SOURCE LINE # 3668
0011 020000      R     LJMP    Page4B_Show
                                           ; SOURCE LINE # 3669
                                           ; SOURCE LINE # 3673
0014         ?C0825:
                                           ; SOURCE LINE # 3674
0014 120000      R     LCALL   Page5B_Show
                                           ; SOURCE LINE # 3675
                                           ; SOURCE LINE # 3677
                                           ; SOURCE LINE # 3678
0017         ?C0826:
0017 22                RET     
             ; FUNCTION Show_B_Process (END)

             ; FUNCTION _OSD_Proc (BEGIN)
                                           ; SOURCE LINE # 3691
0000 8F00        R     MOV     action,R7
                                           ; SOURCE LINE # 3692
                                           ; SOURCE LINE # 3713
0002 120000      R     LCALL   _Sub_Page_Process
0005 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 3715
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 220 

0007 E500        E     MOV     A,Data
0009 B40105            CJNE    A,#01H,?C0827
                                           ; SOURCE LINE # 3716
000C 750083      R     MOV     action,#083H
000F 8007              SJMP    ?C0828
0011         ?C0827:
                                           ; SOURCE LINE # 3717
0011 E500        E     MOV     A,Data
0013 7003              JNZ     $ + 5H
0015 020000      R     LJMP    ?C0830
0018         ?C0828:
                                           ; SOURCE LINE # 3720
0018 7800        E     MOV     R0,#LOW ucMode_Curr
001A E6                MOV     A,@R0
001B FF                MOV     R7,A
001C 7003              JNZ     $ + 5H
001E 020000      R     LJMP    ?C0830
0021 F4                CPL     A
0022 7003              JNZ     $ + 5H
0024 020000      R     LJMP    ?C0830
                                           ; SOURCE LINE # 3721
                                           ; SOURCE LINE # 3722
0027 E500        R     MOV     A,action
0029 247D              ADD     A,#07DH
002B 7003              JNZ     $ + 5H
002D 020000      R     LJMP    ?C0844
0030 2481              ADD     A,#081H
0032 B40800            CJNE    A,#08H,?C0899
0035         ?C0899:
0035 4003              JC      $ + 5H
0037 020000      R     LJMP    ?C0830
003A 900000      R     MOV     DPTR,#?C0900
003D 120000      R     LCALL   L?1148
0040 73                JMP     @A+DPTR
0041         ?C0900:
0041 020000      R     LJMP    ?C0840
0044 020000      R     LJMP    ?C0842
0047 020000      R     LJMP    ?C0842
004A 020000      R     LJMP    ?C0833
004D 020000      R     LJMP    ?C0843
0050 020000      R     LJMP    ?C0830
0053 020000      R     LJMP    ?C0845
0056 020000      R     LJMP    ?C0847
                                           ; SOURCE LINE # 3723
                                           ; SOURCE LINE # 3724
0059         ?C0833:
                                           ; SOURCE LINE # 3739
0059 E500        E     MOV     A,stGUD1+01H
005B 5407              ANL     A,#07H
005D 6003              JZ      $ + 5H
005F 020000      R     LJMP    ?C0830
0062 7800        E     MOV     R0,#LOW ucMode_Curr
0064 E6                MOV     A,@R0
0065 7003              JNZ     $ + 5H
0067 020000      R     LJMP    ?C0830
006A F4                CPL     A
006B 7003              JNZ     $ + 5H
006D 020000      R     LJMP    ?C0830
                                           ; SOURCE LINE # 3740
                                           ; SOURCE LINE # 3741
0070 7E00        E     MOV     R6,#HIGH OSD_Reset
0072 7F00        E     MOV     R7,#LOW OSD_Reset
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 221 

0074 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 3742
0077 7F01              MOV     R7,#01H
0079 120000      R     LCALL   _OSD_Position
                                           ; SOURCE LINE # 3743
007C 7E00        E     MOV     R6,#HIGH OSD_AUTO
007E 7F00        E     MOV     R7,#LOW OSD_AUTO
0080 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 3744
0083 120000      R     LCALL   L?1110
0086 2400        E     ADD     A,#LOW strTabAuto_Atb
0088 F582              MOV     DPL,A
008A E5F0              MOV     A,B
008C 3400        E     ADDC    A,#HIGH strTabAuto_Atb
008E 120000      R     LCALL   L?1099
0091 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 3745
0094 120000      R     LCALL   L?1143
0097 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 3746
009A 7800        E     MOV     R0,#LOW ucMode_Curr
009C E6                MOV     A,@R0
009D FF                MOV     R7,A
009E 7406              MOV     A,#06H
00A0 D3                SETB    C
00A1 9F                SUBB    A,R7
00A2 5028              JNC     ?C0835
00A4 7409              MOV     A,#09H
00A6 C3                CLR     C
00A7 9F                SUBB    A,R7
00A8 4022              JC      ?C0835
                                           ; SOURCE LINE # 3747
                                           ; SOURCE LINE # 3748
00AA 750080      E     MOV     stMUD+02H,#080H
                                           ; SOURCE LINE # 3749
00AD 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 3750
00B0 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 3751
00B3 7800        E     MOV     R0,#LOW ucMode_Curr
00B5 E6                MOV     A,@R0
00B6 FF                MOV     R7,A
00B7 120000      E     LCALL   _Save_MUD
                                           ; SOURCE LINE # 3752
00BA 120000      E     LCALL   Auto_Phase
00BD BFFC04            CJNE    R7,#0FCH,?C0836
                                           ; SOURCE LINE # 3753
00C0 7800        E     MOV     R0,#LOW ucMode_Curr
00C2 76FE              MOV     @R0,#0FEH
00C4         ?C0836:
                                           ; SOURCE LINE # 3754
00C4 120000      E     LCALL   Auto_Position
00C7 BFFC0C            CJNE    R7,#0FCH,?C0838
                                           ; SOURCE LINE # 3755
                                           ; SOURCE LINE # 3756
00CA 8006              SJMP    ?C1015
00CC         ?C0835:
                                           ; SOURCE LINE # 3758
                                           ; SOURCE LINE # 3759
00CC 120000      E     LCALL   Auto_Config
00CF BFFC04            CJNE    R7,#0FCH,?C0838
00D2         ?C1015:
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 222 

00D2 7800        E     MOV     R0,#LOW ucMode_Curr
00D4 76FE              MOV     @R0,#0FEH
                                           ; SOURCE LINE # 3761
00D6         ?C0838:
                                           ; SOURCE LINE # 3762
00D6 C200        R     CLR     b_rgb_VOLUME_STATUS
                                           ; SOURCE LINE # 3763
00D8 E4                CLR     A
00D9 7800        R     MOV     R0,#LOW ucOSD_Page_Index
00DB F6                MOV     @R0,A
                                           ; SOURCE LINE # 3764
00DC 7D40              MOV     R5,#040H
00DE 7F02              MOV     R7,#02H
00E0 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 3766
00E3 120000      R     LCALL   L?1118
00E6 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 3767
00E9 7E00        E     MOV     R6,#HIGH OSD_Reset
00EB 7F00        E     MOV     R7,#LOW OSD_Reset
00ED 020000      E     LJMP    _RTDOSDW
                                           ; SOURCE LINE # 3770
                                           ; SOURCE LINE # 3771
                                           ; SOURCE LINE # 3773
00F0         ?C0840:
                                           ; SOURCE LINE # 3774
00F0 C200        R     CLR     b_rgb_VOLUME_STATUS
                                           ; SOURCE LINE # 3775
00F2 020000      R     LJMP    Enter_Key_Process
                                           ; SOURCE LINE # 3776
                                           ; SOURCE LINE # 3778
                                           ; SOURCE LINE # 3779
00F5         ?C0842:
                                           ; SOURCE LINE # 3780
00F5 AF00        R     MOV     R7,action
00F7 020000      R     LJMP    _Left_Right_Key_Process
                                           ; SOURCE LINE # 3781
                                           ; SOURCE LINE # 3783
00FA         ?C0843:
                                           ; SOURCE LINE # 3784
00FA 020000      E     LJMP    rgb_EXIT_KEY
                                           ; SOURCE LINE # 3785
                                           ; SOURCE LINE # 3787
00FD         ?C0844:
                                           ; SOURCE LINE # 3788
00FD 020000      R     LJMP    Show_Process
                                           ; SOURCE LINE # 3789
                                           ; SOURCE LINE # 3791
0100         ?C0845:
                                           ; SOURCE LINE # 3792
0100 7800        R     MOV     R0,#LOW ucOSD_Page_Index
0102 E6                MOV     A,@R0
0103 700B              JNZ     ?C0830
                                           ; SOURCE LINE # 3793
0105 020000      R     LJMP    Page0_LR_Key
                                           ; SOURCE LINE # 3794
                                           ; SOURCE LINE # 3796
0108         ?C0847:
                                           ; SOURCE LINE # 3797
0108 E500        E     MOV     A,stGUD3+03H
010A 30E303            JNB     ACC.3,?C0830
                                           ; SOURCE LINE # 3798
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 223 

                                           ; SOURCE LINE # 3799
010D 120000      R     LCALL   FACTORY_Key_Process
                                           ; SOURCE LINE # 3800
                                           ; SOURCE LINE # 3801
                                           ; SOURCE LINE # 3803
                                           ; SOURCE LINE # 3804
                                           ; SOURCE LINE # 3806
                                           ; SOURCE LINE # 3807
                                           ; SOURCE LINE # 3808
0110         ?C0830:
0110 22                RET     
             ; FUNCTION _OSD_Proc (END)

             ; FUNCTION _OSD_Proc_B (BEGIN)
                                           ; SOURCE LINE # 3810
0000 8F00        R     MOV     action,R7
                                           ; SOURCE LINE # 3811
                                           ; SOURCE LINE # 3812
0002 E500        R     MOV     A,action
0004 24FD              ADD     A,#0FDH
0006 6012              JZ      ?C0853
0008 14                DEC     A
0009 600F              JZ      ?C0853
000B 24FE              ADD     A,#0FEH
000D 6010              JZ      ?C0854
000F 2483              ADD     A,#083H
0011 600F              JZ      ?C0855
0013 2481              ADD     A,#081H
0015 700E              JNZ     ?C0857
                                           ; SOURCE LINE # 3813
                                           ; SOURCE LINE # 3814
0017         ?C0851:
                                           ; SOURCE LINE # 3815
0017 020000      R     LJMP    Enter_Key_B_Process
                                           ; SOURCE LINE # 3816
                                           ; SOURCE LINE # 3818
                                           ; SOURCE LINE # 3819
001A         ?C0853:
                                           ; SOURCE LINE # 3820
001A AF00        R     MOV     R7,action
001C 020000      R     LJMP    _Left_Right_Key_B_Process
                                           ; SOURCE LINE # 3821
                                           ; SOURCE LINE # 3823
001F         ?C0854:
                                           ; SOURCE LINE # 3824
001F 120000      E     LCALL   rgb_EXIT_KEY
                                           ; SOURCE LINE # 3825
0022         ?C0855:
                                           ; SOURCE LINE # 3826
0022 120000      R     LCALL   Show_B_Process
                                           ; SOURCE LINE # 3827
                                           ; SOURCE LINE # 3829
                                           ; SOURCE LINE # 3830
                                           ; SOURCE LINE # 3832
                                           ; SOURCE LINE # 3833
0025         ?C0857:
0025 22                RET     
             ; FUNCTION _OSD_Proc_B (END)

             ; FUNCTION OSD_Opening (BEGIN)
                                           ; SOURCE LINE # 4456
                                           ; SOURCE LINE # 4457
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 224 

                                           ; SOURCE LINE # 4462
0000 E4                CLR     A
0001 F500        R     MOV     ?_OSD_Window?BYTE+05H,A
0003 F500        R     MOV     ?_OSD_Window?BYTE+06H,A
0005 750001      R     MOV     ?_OSD_Window?BYTE+07H,#01H
0008 750008      R     MOV     ?_OSD_Window?BYTE+08H,#08H
000B 120000      R     LCALL   L?1042
000E 750001      R     MOV     ?_OSD_Window?BYTE+0FH,#01H
0011 7BE8              MOV     R3,#0E8H
0013 7A01              MOV     R2,#01H
0015 FD                MOV     R5,A
0016 FC                MOV     R4,A
0017 7F07              MOV     R7,#07H
0019 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 4465
001C 7F80              MOV     R7,#080H
001E 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 4467
0021 7E00        E     MOV     R6,#HIGH OSD_Enable
0023 7F00        E     MOV     R7,#LOW OSD_Enable
0025 120000      E     LCALL   _RTDCodeW
                                           ; SOURCE LINE # 4468
0028 120000      R     LCALL   L?1143
002B 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 4470
002E E4                CLR     A
002F 7800        R     MOV     R0,#LOW num
0031 F6                MOV     @R0,A
0032 08                INC     R0
0033 F6                MOV     @R0,A
0034         ?C0858:
0034 7800        R     MOV     R0,#LOW num
0036 E6                MOV     A,@R0
0037 FE                MOV     R6,A
0038 08                INC     R0
0039 E6                MOV     A,@R0
003A FF                MOV     R7,A
003B C3                CLR     C
003C 9470              SUBB    A,#070H
003E EE                MOV     A,R6
003F 6480              XRL     A,#080H
0041 9480              SUBB    A,#080H
0043 5014              JNC     ?C0859
                                           ; SOURCE LINE # 4471
                                           ; SOURCE LINE # 4472
0045 120000      R     LCALL   L?1039
0048 750001      R     MOV     ?_OSD_Window?BYTE+0FH,#01H
004B 7F07              MOV     R7,#07H
004D 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 4474
0050 7800        R     MOV     R0,#LOW num+01H
0052 7406              MOV     A,#06H
0054 120000      R     LCALL   L?1108
0057 80DB              SJMP    ?C0858
0059         ?C0859:
                                           ; SOURCE LINE # 4476
0059 7800        R     MOV     R0,#LOW num+01H
005B 120000      R     LCALL   L?1149
005E 120000      R     LCALL   L?1040
0061 F500        R     MOV     ?_OSD_Window?BYTE+0FH,A
0063 7F07              MOV     R7,#07H
0065 020000      R     LJMP    _OSD_Window
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 225 

             ; FUNCTION OSD_Opening (END)

             ; FUNCTION OSD_Ending (BEGIN)
                                           ; SOURCE LINE # 4526
                                           ; SOURCE LINE # 4527
                                           ; SOURCE LINE # 4530
0000 7800        R     MOV     R0,#LOW num
0002 7600              MOV     @R0,#00H
0004 08                INC     R0
0005 7670              MOV     @R0,#070H
0007         ?C0862:
0007 7800        R     MOV     R0,#LOW num
0009 E6                MOV     A,@R0
000A FE                MOV     R6,A
000B 08                INC     R0
000C E6                MOV     A,@R0
000D FF                MOV     R7,A
000E D3                SETB    C
000F 9400              SUBB    A,#00H
0011 EE                MOV     A,R6
0012 6480              XRL     A,#080H
0014 9480              SUBB    A,#080H
0016 4018              JC      ?C0863
                                           ; SOURCE LINE # 4531
                                           ; SOURCE LINE # 4532
0018 120000      R     LCALL   L?1039
001B 750001      R     MOV     ?_OSD_Window?BYTE+0FH,#01H
001E 7F07              MOV     R7,#07H
0020 120000      R     LCALL   _OSD_Window
                                           ; SOURCE LINE # 4534
0023 7800        R     MOV     R0,#LOW num+01H
0025 74FA              MOV     A,#0FAH
0027 26                ADD     A,@R0
0028 F6                MOV     @R0,A
0029 18                DEC     R0
002A 74FF              MOV     A,#0FFH
002C 36                ADDC    A,@R0
002D F6                MOV     @R0,A
002E 80D7              SJMP    ?C0862
0030         ?C0863:
                                           ; SOURCE LINE # 4536
0030 120000      R     LCALL   L?1118
0033 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 4537
0036 7E00        E     MOV     R6,#HIGH OSD_Reset
0038 7F00        E     MOV     R7,#LOW OSD_Reset
003A 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 4539
003D 7800        R     MOV     R0,#LOW num+01H
003F 120000      R     LCALL   L?1149
0042 120000      R     LCALL   L?1040
0045 F500        R     MOV     ?_OSD_Window?BYTE+0FH,A
0047 7F07              MOV     R7,#07H
0049 020000      R     LJMP    _OSD_Window
             ; FUNCTION OSD_Ending (END)

             ; FUNCTION Show_Note (BEGIN)
                                           ; SOURCE LINE # 4589
                                           ; SOURCE LINE # 4590
                                           ; SOURCE LINE # 4591
0000 7D40              MOV     R5,#040H
0002 7F02              MOV     R7,#02H
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 226 

0004 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 4592
0007 120000      R     LCALL   L?1118
000A 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 4594
000D 7F01              MOV     R7,#01H
000F 120000      R     LCALL   _OSD_Position
                                           ; SOURCE LINE # 4598
0012 E500        E     MOV     A,stGUD1+01H
0014 5407              ANL     A,#07H
0016 14                DEC     A
0017 6016              JZ      ?C0868
0019 14                DEC     A
001A 6019              JZ      ?C0869
001C 14                DEC     A
001D 601C              JZ      ?C0870
001F 14                DEC     A
0020 601F              JZ      ?C0871
0022 14                DEC     A
0023 6022              JZ      ?C0872
0025 2405              ADD     A,#05H
0027 7025              JNZ     ?C0866
                                           ; SOURCE LINE # 4599
                                           ; SOURCE LINE # 4600
0029         ?C0867:
                                           ; SOURCE LINE # 4602
0029 7E00        E     MOV     R6,#HIGH OSD_RGB
002B 7F00        E     MOV     R7,#LOW OSD_RGB
                                           ; SOURCE LINE # 4604
002D 801C              SJMP    ?C1020
                                           ; SOURCE LINE # 4606
002F         ?C0868:
                                           ; SOURCE LINE # 4607
002F 7E00        E     MOV     R6,#HIGH OSD_DVI
0031 7F00        E     MOV     R7,#LOW OSD_DVI
0033         ?C1016:
                                           ; SOURCE LINE # 4608
0033 8016              SJMP    ?C1020
                                           ; SOURCE LINE # 4610
0035         ?C0869:
                                           ; SOURCE LINE # 4611
0035 7E00        E     MOV     R6,#HIGH OSD_AV
0037 7F00        E     MOV     R7,#LOW OSD_AV
0039         ?C1017:
                                           ; SOURCE LINE # 4612
0039 8010              SJMP    ?C1020
                                           ; SOURCE LINE # 4614
003B         ?C0870:
                                           ; SOURCE LINE # 4615
003B 7E00        E     MOV     R6,#HIGH OSD_SV
003D 7F00        E     MOV     R7,#LOW OSD_SV
003F         ?C1018:
                                           ; SOURCE LINE # 4616
003F 800A              SJMP    ?C1020
                                           ; SOURCE LINE # 4618
0041         ?C0871:
                                           ; SOURCE LINE # 4619
0041 7E00        E     MOV     R6,#HIGH OSD_YUV
0043 7F00        E     MOV     R7,#LOW OSD_YUV
0045         ?C1019:
                                           ; SOURCE LINE # 4620
0045 8004              SJMP    ?C1020
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 227 

                                           ; SOURCE LINE # 4622
0047         ?C0872:
                                           ; SOURCE LINE # 4623
0047 7E00        E     MOV     R6,#HIGH OSD_TV
0049 7F00        E     MOV     R7,#LOW OSD_TV
004B         ?C1020:
004B 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 4624
                                           ; SOURCE LINE # 4626
004E         ?C0866:
                                           ; SOURCE LINE # 4629
004E 120000      R     LCALL   L?1143
0051 020000      E     LJMP    _RTDSetBit
             ; FUNCTION Show_Note (END)

             ; FUNCTION Show_Hint (BEGIN)
                                           ; SOURCE LINE # 4636
                                           ; SOURCE LINE # 4637
                                           ; SOURCE LINE # 4638
0000 7800        E     MOV     R0,#LOW ucMode_Curr
0002 E6                MOV     A,@R0
0003 7041              JNZ     ?C0874
                                           ; SOURCE LINE # 4639
                                           ; SOURCE LINE # 4640
0005 7D40              MOV     R5,#040H
0007 7F02              MOV     R7,#02H
0009 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 4641
000C 120000      R     LCALL   L?1118
000F 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 4645
0012 E500        E     MOV     A,stGUD1+01H
0014 5407              ANL     A,#07H
0016 7014              JNZ     ?C0875
0018 900000      E     MOV     DPTR,#M512_Port63
001B E0                MOVX    A,@DPTR
001C 30E00D            JNB     ACC.0,?C0875
                                           ; SOURCE LINE # 4649
                                           ; SOURCE LINE # 4650
001F 120000      R     LCALL   L?1110
0022 2400        E     ADD     A,#LOW OSD_HINT_TABLE
0024 F582              MOV     DPL,A
0026 E5F0              MOV     A,B
0028 3400        E     ADDC    A,#HIGH OSD_HINT_TABLE
                                           ; SOURCE LINE # 4651
002A 8012              SJMP    ?C1021
002C         ?C0875:
                                           ; SOURCE LINE # 4653
                                           ; SOURCE LINE # 4654
002C 7E00        E     MOV     R6,#HIGH OSD_Clean_All
002E 7F00        E     MOV     R7,#LOW OSD_Clean_All
0030 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 4655
0033 120000      R     LCALL   L?1110
0036 2400        E     ADD     A,#LOW OSD_HINT_TABLE+010H
0038 F582              MOV     DPL,A
003A E5F0              MOV     A,B
003C 3400        E     ADDC    A,#HIGH OSD_HINT_TABLE+010H
003E         ?C1021:
003E 120000      R     LCALL   L?1099
0041 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 4656
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 228 

0044         ?C0876:
                                           ; SOURCE LINE # 4659
                                           ; SOURCE LINE # 4660
0044 8027              SJMP    ?C1022
0046         ?C0874:
                                           ; SOURCE LINE # 4661
0046 7800        E     MOV     R0,#LOW ucMode_Curr
0048 E6                MOV     A,@R0
0049 F4                CPL     A
004A 6003              JZ      ?C0879
004C 300024      E     JNB     bOverSpec,?C0880
004F         ?C0879:
                                           ; SOURCE LINE # 4662
                                           ; SOURCE LINE # 4663
004F 7D40              MOV     R5,#040H
0051 7F02              MOV     R7,#02H
0053 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 4664
0056 120000      R     LCALL   L?1118
0059 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 4667
005C 120000      R     LCALL   L?1110
005F 2400        E     ADD     A,#LOW OSD_HINT_TABLE+020H
0061 F582              MOV     DPL,A
0063 E5F0              MOV     A,B
0065 3400        E     ADDC    A,#HIGH OSD_HINT_TABLE+020H
0067 120000      R     LCALL   L?1099
006A 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 4670
006D         ?C1022:
006D 120000      R     LCALL   L?1143
0070 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 4671
                                           ; SOURCE LINE # 4672
0073         ?C0880:
0073 22                RET     
             ; FUNCTION Show_Hint (END)

C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 229 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_Change_Source . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LP_GLOBAL_USER_DATA1 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
RGB_MODE_USER_DATA . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  H_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  V_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  PHASE. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
LP_GLOBAL_USER_DATA2 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
LP_GLOBAL_USER_DATA3 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
GLOBAL_USER_DATA0. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  CONTRAST . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  BRIGHT . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  RTD_R_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  RTD_G_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  RTD_B_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  RTD_R_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  RTD_G_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  RTD_B_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
b_rgb_VOLUME_STATUS. . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
OSD_AUTO . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_OSD_Position. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  para . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
LP_GLOABL_USER_DATA4 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
GLOBAL_USER_DATA1. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  FUNCTION . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  INPUT_SOURCE . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  FILTER . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  OSD_POSH . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  OSD_POSV . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  OSD_TIMEOUT. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  OSD_INPUT. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
_PageADC_Left_Right_Key. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
Save_GUD0. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GLOBAL_USER_DATA2. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  AD_R_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  AD_G_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  AD_B_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  AD_R_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  AD_G_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  AD_B_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
_ShowValue . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  row. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  col. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  value. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  color. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  usStart_Addr . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
  ucTemp . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0002H  1
PageADC_ENG. . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Save_GUD1. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GLOBAL_USER_DATA3. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  5
  VOLUME . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  CURR_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  PREV_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  TV_SETTING . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 230 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  SPREAD . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
ucOSD_Pre_Page_Index . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0000H  1
Save_GUD2. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GLOBAL_USER_DATA4. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  C1_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  C1_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  C1_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  C2_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  C2_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  C2_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  C3_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  C3_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  C3_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
Save_GUD3. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OSD_Window_Setting . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Save_GUD4. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
strTabAuto_Atb . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Show_B_Process . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_RTDOSDW . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Show_Mode. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  usHwid . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  ucTemp . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  usStart_Addr . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
  ucTemp . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0002H  1
_OSD_Slider. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  row. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  col. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  length . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  value. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  range. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  color. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  color_slider . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0006H  1
  usStart_Addr . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
  ucTemp . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0002H  1
  bound. . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0007H  2
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
bOverSpec. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
FactoryPageAtbFont . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_RTDSetByte. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_OSD_Clear . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  row_start. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  col_start. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  width. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
Set_H_Position . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OSD_Enable . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_OSD_Fact_Line . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  row. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  col. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  length . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  value. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  indicate . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  usStart_Addr . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
  ucTemp . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0002H  1
Init_FACTORY . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PageFactory_Left_Right_Key. . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 231 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ucInputSrc . . . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
Show_Hint. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
LP_VIDEO_MODE_USER_DATA. . . . . . . .  TYPEDEF  -----  PTR      -----  3
_RTDSetBit . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Page0_Enter_Key. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Show_Note. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
OSD_Opening. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  num. . . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0000H  2
Page1_Enter_Key. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
bKeyTurbo. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
VIDEO_MODE_USER_DATA . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  VBRIGHT. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  VCONTRAST. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  VSATURATION. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  VHUE . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
_Left_Right_Key_Process. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
Page2_Enter_Key. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Set_V_Position . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Page4_Enter_Key. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
OSD_Ending . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  num. . . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0000H  2
_RTDCodeW. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Page5_Enter_Key. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucTemp1. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  ucTemp2. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
_Load_VLC_Font . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Osd_Change_Item . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Pess_Key . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Item_Num . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
rgb_EXIT_KEY . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OSD_RGB. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_OSD_Window. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  win_no . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  row_start. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0001H  2
  row_end. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0003H  2
  col_start. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0005H  2
  col_end. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0007H  2
  width. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0009H  1
  height . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000AH  1
  color. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000BH  1
  color_sb . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000CH  1
  gradient . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000DH  1
  gray_level . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000EH  1
  attr . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000FH  1
Auto_Balance . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Set_Bright_Contrast. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OSD_Clean_All. . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Row_Info . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Page1_Atb. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
FactRow_Info . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_Load_MUD. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Page2_Atb. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
SetVolume. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_rgb_OSD_Slider. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OSD_PAGE_All_TABLE . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 232 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


OSD_DVI. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Get_OSD_Margin . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucH_Min. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  ucH_Max. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  ucV_Max. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Page4_Atb. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Font_East_C. . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_Page1B_Left_Right_Key . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
Page5_Atb. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
ucRefresh. . . . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
Page6_Atb. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_Sub_Page_Process. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  ucTemp . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Page7_Atb. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_Value_Adjust. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Var. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0001H  3
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  VMax . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  VMin . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
_Page4B_Left_Right_Key . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
OSD_PAGE_TABLE . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Page8_Atb. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_Page5B_Left_Right_Key . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
FACTORY_Key_Key. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Page9_Atb. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_OSD_Line. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  row. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  col. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  length . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  value. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  indicate . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  usStart_Addr . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
  ucTemp . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0002H  1
OSD_Version. . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Font_East_J. . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Page1_Show . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
PageADC_Enter_Key. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Page2_Show . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
usOSD_Timer. . . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
AutoOK . . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Page4_Show . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Page1_Goto_Subpage. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Page5_Show . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Save_MUD. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Page6_Show . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Page0_LR_Key . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Page4_Goto_Subpage. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_Page5_Goto_Subpage. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 233 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_OSD_Proc. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  action . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
Sharpness. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Version_Panel. . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
ucOSD_Item_Index0. . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0001H  1
rgb_OSD_VOLUME . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
ucOSD_Item_Index1. . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0002H  1
_Left_Right_Key_B_Process. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
ucOSD_Item_Index2. . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0003H  1
PageADC_Atb. . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
SetADC_Offset. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OSD_HINT_TABLE . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_Bright_Contrast_Adjust. . . . . . . .  PUBLIC   CODE   PROC     0006H  -----
  variable . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  Key. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
strTabVOLUME_Atb . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_GetPrevPageIdx. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucPageCurr . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
PageFactory_Enter_Key. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_RTDRead . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GetNextPageIdx. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucPageCurr . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
usIPH_ACT_WID. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
PageADC_Show . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
OSD_YUV. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
OSD_Reset. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
stMUD. . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  4
Enter_Key_Process. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
usIPV_ACT_LEN. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
_Init_Page . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
ucKey_Issued . . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
Auto_Config. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Auto_Position. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Init_GUD . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
M512_Port63. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
SetADC_Gain. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RTDWrite. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Init_MUD . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OSD_AV . . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Page1B_Enter_Key . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_OSD_Proc_B. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  action . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
ucMode_Curr. . . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
_RGB_MODE_USER_DATA. . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  H_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  V_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  PHASE. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
PageFactory_Show . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_GLOBAL_USER_DATA0 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  CONTRAST . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  BRIGHT . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  RTD_R_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  RTD_G_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  RTD_B_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 234 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  RTD_R_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  RTD_G_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  RTD_B_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
_Set_Phase . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GLOBAL_USER_DATA1 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  FUNCTION . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  INPUT_SOURCE . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  FILTER . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  OSD_POSH . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  OSD_POSV . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  OSD_TIMEOUT. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  OSD_INPUT. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
Page4B_Enter_Key . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_GLOBAL_USER_DATA2 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  AD_R_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  AD_G_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  AD_B_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  AD_R_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  AD_G_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  AD_B_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
Page5B_Enter_Key . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_GLOBAL_USER_DATA3 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  VOLUME . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  CURR_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  PREV_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  TV_SETTING . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  SPREAD . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
_GLOBAL_USER_DATA4 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  C1_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  C1_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  C1_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  C2_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  C2_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  C2_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  C3_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  C3_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  C3_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_Wait_For_Event. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Show_Process . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
_Page0_Left_Right_Key. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
ucH_Min_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
FACTORY_Key_Process. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Page1_Left_Right_Key. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_Show_Osd_Page . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Page_Num . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  Page_Attr. . . . . . . . . . . . . .  AUTO     DATA   PTR      0001H  3
  OSD_Table_Num. . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
_Page2_Left_Right_Key. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_Delay_Xms . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ucH_Max_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
_Page4_Left_Right_Key. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_Page5_Left_Right_Key. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V7.06   LCD_OSD                                                               11/21/2005 13:47:29 PAGE 235 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Key. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_Page6_Left_Right_Key. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Key. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Auto_Phase . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SPREAD_Adjust . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  variable . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  Key. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
OSD_SV . . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Set_Spread . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RecallOK . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
OSD_TV . . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_OSD_Fact_Clear. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  row_start. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  col_start. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  width. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
Enter_Key_B_Process. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Page_All_Atb . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Set_Gamma. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Page1B_Show. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Page8_Content. . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
ucV_Min_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
Page9_Content. . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Page4B_Show. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
stGUD0 . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  8
Page5B_Show. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
stGUD1 . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  8
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
ucOSD_Page_Index . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0004H  1
stGUD2 . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  6
Data . . . . . . . . . . . . . . . . .  EXTERN   DATA   ARRAY    -----  16
Set_Clock. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
stGUD3 . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  5
_VIDEO_MODE_USER_DATA. . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  VBRIGHT. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  VCONTRAST. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  VSATURATION. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  VHUE . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
LP_RGB_MODE_USER_DATA. . . . . . . . .  TYPEDEF  -----  PTR      -----  3
stGUD4 . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  9
LP_GLOBAL_USER_DATA0 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  11298    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      82
   IDATA SIZE       =      5      19
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
