C51 COMPILER V7.06   RTDACCESS                                                             04/29/2010 18:06:17 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE RTDACCESS
OBJECT MODULE PLACED IN .\Output\RTDAccess.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Core\code\mcu\RTDAccess.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\Output\RTDAccess.lst) OBJECT(.\Output\RTDAccess.obj)

stmt level    source

   1          /*=============================================
   2            * Copyright (c)      Realtek Semiconductor Corporation, 2005
   3            * All rights reserved.
   4            * ============================================ */
   5          
   6          #define __RTDACCESS__
   7          
   8          #include "Core\Header\Include.h"
   9          
  10          //----------------------------------------------------------------------------------------------------
  11          // Scaler communication basic function
  12          //----------------------------------------------------------------------------------------------------
  13          void CScalerSendAddr(BYTE ucAddr, bit bAutoInc)
  14          {
  15   1          if(bAutoInc)
  16   1              *(&MCU_SCA_INF_CTRL_FFF3) = 0x20;
  17   1          else
  18   1              *(&MCU_SCA_INF_CTRL_FFF3) = 0x00;
  19   1      
  20   1          *(&MCU_SCA_INF_ADDR_FFF4) = ucAddr;
  21   1      }
  22          //--------------------------------------------------
  23          // Description  : Write a data array into registers of scaler
  24          // Input Value  : ucAddr    --> Start address of register
  25          //                ucLength  --> Numbers of data we want to write
  26          //                pArray    --> Pointer of the writing data array
  27          //                bAutoInc  --> Address auto increasing select
  28          // Output Value : None
  29          //--------------------------------------------------
  30          void CScalerWrite(BYTE ucAddr, WORD usLength, BYTE *pArray, bit bAutoInc)
  31          {
  32   1          CScalerSendAddr(ucAddr, bAutoInc);
  33   1      
  34   1          if(usLength > 0)
  35   1          {
  36   2      
  37   2              do
  38   2              {
  39   3                  *(&MCU_SCA_INF_DATA_FFF5) = *pArray++;
  40   3      
  41   3              }while(--usLength);
  42   2          }
  43   1      
  44   1      
  45   1      }
  46          
  47          //--------------------------------------------------
  48          // Description  : Read data from registers of scaler and put it into an reading data array
  49          // Input Value  : ucAddr    --> Start address of register
  50          //                ucLength  --> Numbers of data we want to read
  51          //                pArray    --> Pointer of the reading data array
  52          //                bAutoInc  --> Address auto increasing select
  53          // Output Value : None
  54          //--------------------------------------------------
C51 COMPILER V7.06   RTDACCESS                                                             04/29/2010 18:06:17 PAGE 2   

  55          void CScalerRead(BYTE ucAddr, BYTE ucLength, BYTE *pArray, bit bAutoInc)
  56          {
  57   1          CScalerSendAddr(ucAddr, bAutoInc);
  58   1      
  59   1          if(ucLength > 0)
  60   1          {
  61   2              do
  62   2              {
  63   3                  *pArray++ = *(&MCU_SCA_INF_DATA_FFF5);
  64   3      
  65   3              }while(--ucLength);
  66   2      
  67   2          }
  68   1      
  69   1      
  70   1      }
  71          
  72          /**
  73          * CScalerWriteAmount
  74          * Write a data array into register of scaler
  75          * @param <ucAddress> {Start address of register}
  76          * @param <ucCol> {The colume of blank}
  77          * @param <ucLength> {Number of data}
  78          * @param <ucValue> {The data wroten}
  79          * @param <bAutoInc> {Address auto increase or not}
  80          * @return {none}
  81          *
  82          */
  83          void CScalerWriteAmount(BYTE ucAddr, WORD usLength, BYTE ucValue, bit bAutoInc)
  84          {
  85   1          CScalerSendAddr(ucAddr, bAutoInc);
  86   1      
  87   1          if(usLength > 0)
  88   1          {
  89   2              do
  90   2              {
  91   3                  *(&MCU_SCA_INF_DATA_FFF5) = ucValue;
  92   3      
  93   3              }while(--usLength);
  94   2          }
  95   1      
  96   1      
  97   1      }
  98          
  99          
 100          //--------------------------------------------------
 101          // Description  : Set the value into selected register
 102          // Input Value  : ucAddr    --> Address of register
 103          //                ucValue   --> Value we want to set
 104          // Output Value : None
 105          //--------------------------------------------------
 106          void CScalerSetByte(BYTE ucAddr, BYTE ucValue)
 107          {
 108   1          CScalerWrite(ucAddr, 1, &ucValue, _AUTOINC);
 109   1      }
 110          
 111          //--------------------------------------------------
 112          // Description  : Set the value into selected register in data port
 113          // Input Value  : ucAddr    --> Access Port Address of register
 114          //                ucValue1  --> Data Port Value we want to set
 115          //                ucValue2  --> Data Value we want to set
 116          // Output Value : None
C51 COMPILER V7.06   RTDACCESS                                                             04/29/2010 18:06:17 PAGE 3   

 117          //--------------------------------------------------
 118          void CScalerSetDataPortByte(BYTE ucAddr, BYTE ucValue1, BYTE ucValue2)
 119          {
 120   1          if((ucAddr == _SU_ACCESS_PORT_33) || (ucAddr == _HW_ACCESS_PORT_60) 
 121   1          || (ucAddr == _CB_ACCESS_PORT_64) || (ucAddr == _PC_ACCESS_PORT_9A))
 122   1          {
 123   2              CScalerSetByte(ucAddr, 0x80);
 124   2              ucValue1 = ucValue1 | 0x80;
 125   2          }
 126   1          CScalerWrite(ucAddr, 1, &ucValue1, _AUTOINC);
 127   1          CScalerWrite(ucAddr + 1, 1, &ucValue2, _AUTOINC);
 128   1          CScalerSetByte(ucAddr, 0x00);
 129   1      }
 130          
 131          /**
 132          * CScalerSetBit
 133          * Set bit of register
 134          * @param <ucAddr> {register address}
 135          * @param <ucAnd> {data &}
 136          * @param <ucOr> {data |}
 137          * @return {none}
 138          *
 139          */
 140          void CScalerSetBit(BYTE ucAddr, BYTE ucAnd, BYTE ucOr)
 141          {
 142   1          BYTE value;
 143   1      
 144   1          CScalerRead(ucAddr, 1, &value, _AUTOINC);
 145   1          value   = (value & ucAnd) | ucOr;
 146   1          CScalerWrite(ucAddr, 1, &value, _AUTOINC);
 147   1      }
 148          
 149          
 150          //--------------------------------------------------
 151          // Description  : Set some bits of selected register in data port
 152          // Input Value  : ucAddr    --> Access Port Address of register
 153          //                ucValue   --> Data Port Value we want to set
 154          //                ucAnd     --> & operation
 155          //                ucOr      --> | operation
 156          // Output Value : None
 157          //--------------------------------------------------
 158          #if(1)//_HDCP_SUPPORT == _ON)
 159          
 160          void CScalerSetDataPortBit(BYTE ucAddr, BYTE ucValue, BYTE ucAnd, BYTE ucOr)
 161          {
 162   1          BYTE value;
 163   1      
 164   1          if((ucAddr == _SU_ACCESS_PORT_33) || (ucAddr == _HW_ACCESS_PORT_60) 
 165   1          || (ucAddr == _CB_ACCESS_PORT_64) || (ucAddr == _PC_ACCESS_PORT_9A))
 166   1          {
 167   2              CScalerSetByte(ucAddr, 0x80);
 168   2              ucValue = ucValue | 0x80;
 169   2          }
 170   1      
 171   1          CScalerWrite(ucAddr, 1, &ucValue, _AUTOINC);
 172   1          CScalerRead(ucAddr + 1, 1, &value, _AUTOINC);
 173   1      
 174   1          value   = (value & ucAnd) | ucOr;
 175   1          if((ucAddr == _SU_ACCESS_PORT_33) || (ucAddr == _HW_ACCESS_PORT_60) 
 176   1          || (ucAddr == _CB_ACCESS_PORT_64) || (ucAddr == _PC_ACCESS_PORT_9A))
 177   1          {
 178   2              CScalerSetByte(ucAddr, 0x80);
C51 COMPILER V7.06   RTDACCESS                                                             04/29/2010 18:06:17 PAGE 4   

 179   2              ucValue = ucValue | 0x80;
 180   2          }
 181   1      
 182   1          CScalerWrite(ucAddr, 1, &ucValue, _AUTOINC);
 183   1          CScalerWrite(ucAddr + 1, 1, &value, _AUTOINC);
 184   1          CScalerSetByte(ucAddr, 0x00);
 185   1      }
 186          #endif
 187          
 188          //--------------------------------------------------
 189          // Description  : Get bits from selected register
 190          // Input Value  : ucAddr    --> Address of register
 191          //                ucAnd     --> & operation
 192          // Output Value : Value after & operation
 193          //--------------------------------------------------
 194          BYTE CScalerGetBit(BYTE ucAddr, BYTE ucAnd)
 195          {
 196   1          BYTE value;
 197   1      
 198   1          CScalerRead(ucAddr, 1, &value, _AUTOINC);
 199   1          return (value & ucAnd);
 200   1      }
 201          
 202          /**
 203          * CScalerCodeW
 204          * Write a table to scaler
 205          * @param <pArray> {Selected table which contains numbers, address auto increasing information, address of 
             -registers and values}
 206          * @return {none}
 207          *
 208          */
 209          void CScalerCodeW(BYTE *pArray)
 210          {
 211   1          BYTE length;
 212   1      
 213   1      #if(_MCU_TYPE == _REALTEK_RTD3580D_EMCU)
 214   1      
 215   1          do
 216   1          {
 217   2              if((*pArray & 0xfc) == 0)
 218   2                  return;
 219   2      
 220   2              length  = *pArray - 3;
 221   2      
 222   2              if((*(pArray + 1)) == _BURST)
 223   2              {
 224   3                  *(&MCU_SCA_INF_CTRL_FFF3) = 0x20;
 225   3                  *(&MCU_SCA_INF_ADDR_FFF4) = *(pArray + 2);
 226   3      
 227   3                  pArray += 3;
 228   3                  
 229   3                  do
 230   3                  {
 231   4                      *(&MCU_SCA_INF_DATA_FFF5) = *pArray;
 232   4      
 233   4                  }while(--length);
 234   3      
 235   3                  pArray++;
 236   3              }
 237   2              else if((*(pArray + 1) == _AUTOINC) || (*(pArray + 1) == _NON_AUTOINC))
 238   2              {
 239   3                  
C51 COMPILER V7.06   RTDACCESS                                                             04/29/2010 18:06:17 PAGE 5   

 240   3                  if(*(pArray + 1) == _NON_AUTOINC)
 241   3                      *(&MCU_SCA_INF_CTRL_FFF3) = 0x20;
 242   3                  else
 243   3                      *(&MCU_SCA_INF_CTRL_FFF3) = 0x00;
 244   3      
 245   3                  *(&MCU_SCA_INF_ADDR_FFF4) = *(pArray + 2);
 246   3      
 247   3                  pArray += 3;
 248   3      
 249   3                  do
 250   3                  {
 251   4                      *(&MCU_SCA_INF_DATA_FFF5) = *pArray++;
 252   4      
 253   4                  }while(--length);
 254   3      
 255   3              }
 256   2      
 257   2          }while(_TRUE);
 258   1      
 259   1      #else
                              
                  do
                  {
                      if((*pArray & 0xfc) == 0)
                          return;
              
                      length  = *pArray - 3;
              
                      if((*(pArray + 1)) == _BURST)
                      {
                          CScalerSendAddr(*(pArray + 2), _WRITE, _NON_AUTOINC);
              
                          pArray += 3;
              
                          do
                          {
                              CScalerSendByte(*pArray);
              
                          }while(--length);
              
                          pArray++;
                      }
                      else if((*(pArray + 1) == _AUTOINC) || (*(pArray + 1) == _NON_AUTOINC))
                      {
                          CScalerSendAddr(*(pArray + 2), _WRITE, *(pArray + 1));
              
                          pArray += 3;
              
                          do
                          {
                              CScalerSendByte(*pArray++);
              
                          }while(--length);
              
                      }
              
                      CScalerSendWriteStop();
              
                  }while(_TRUE);
              
              #endif          
 301   1      }
C51 COMPILER V7.06   RTDACCESS                                                             04/29/2010 18:06:17 PAGE 6   

 302          
 303          #if(_HARDWARE_LOAD_FONT == _ON)
 304          //--------------------------------------------------
 305          // Description  : Load OSD font into OSD SRAM
 306          // Input Value  : pArray    --> Font table
 307          //                usOffset  --> Offset of font base start address
 308          // Output Value : None
 309          //--------------------------------------------------
 310          void CScalerLoadHardwareVLCFont(BYTE *pArray, WORD usOffset)
 311          {
 312   1          WORD num;
 313   1      
 314   1          pData[0] = 0xc0;
 315   1          pData[1] = 0x05;
 316   1          CScalerWrite(_OSD_ADDR_MSB_90, 2, pData, _AUTOINC);
 317   1          CScalerWrite(_OSD_DATA_PORT_92, 8, pArray, _NON_AUTOINC);
 318   1          
 319   1      
 320   1          num = ((WORD)*(pArray + 8) << 8) | *(pArray + 9);
 321   1      
 322   1          usOffset = usOffset * 9;
 323   1          usOffset += GET_OSD_MAP_FONTBASEADDRESS();//_OSD_FONT_START_POSITION;
 324   1      
 325   1          pData[0] = 0x80;
 326   1          pData[1] = 0x07;
 327   1          pData[2] = 0x01;
 328   1          CScalerWrite(_OSD_ADDR_MSB_90, 3, pData, _AUTOINC);    
 329   1      
 330   1          pData[0] = (HIBYTE(usOffset) & 0x000f) | 0xd0;
 331   1          pData[1] = LOBYTE(usOffset);
 332   1          CScalerWrite(_OSD_ADDR_MSB_90, 2, pData, _AUTOINC);    
 333   1      
 334   1          
 335   1          pArray += 10;
 336   1      
 337   1              CScalerSendAddr(_OSD_DATA_PORT_92, _NON_AUTOINC);
 338   1      
 339   1          for(usOffset=0;usOffset<num;usOffset++)
 340   1          {
 341   2              *(&MCU_SCA_INF_DATA_FFF5) = *pArray++;
 342   2          }
 343   1      
 344   1          pData[0] = 0x80;
 345   1          pData[1] = 0x07;
 346   1          pData[2] = 0x00;
 347   1          CScalerWrite(_OSD_ADDR_MSB_90, 3, pData, _AUTOINC);      
 348   1      }
 349          #endif
 350          
 351          BYTE CScalerGetVLD(void)
 352          {
 353   1              BYTE zerocnt = 0;
 354   1      
 355   1          while(!CScalerGetBitVLD())   zerocnt  += 1;
 356   1      
 357   1          if(zerocnt == 0)    return *(pData);
 358   1      
 359   1          switch(zerocnt)
 360   1          {
 361   2              case 1:
 362   2                  return (CScalerGetBitVLD() ? *(pData + 1) : *(pData + 2));
 363   2      
C51 COMPILER V7.06   RTDACCESS                                                             04/29/2010 18:06:17 PAGE 7   

 364   2              case 2:
 365   2                  return (CScalerGetBitVLD() ? *(pData + 3) : *(pData + 4));
 366   2      
 367   2              case 3:
 368   2                  return (CScalerGetBitVLD() ? *(pData + 5) : *(pData + 6));
 369   2      
 370   2              case 4:
 371   2                  if (CScalerGetBitVLD())
 372   2                  {
 373   3                      return (CScalerGetBitVLD() ? *(pData + 7) : *(pData + 8));
 374   3                  }
 375   2                  else
 376   2                  {
 377   3                      if (CScalerGetBitVLD())
 378   3                      {
 379   4                          return (CScalerGetBitVLD() ? *(pData + 9) : *(pData + 10));
 380   4                      }
 381   3                      else
 382   3                      {
 383   4                          return (CScalerGetBitVLD() ? *(pData + 11) : *(pData + 12));
 384   4                      }
 385   3                  }
 386   2      
 387   2              default:
 388   2                  if (CScalerGetBitVLD())
 389   2                  {
 390   3                      return (CScalerGetBitVLD() ? *(pData + 13) : *(pData + 14));
 391   3                  }
 392   2                  else
 393   2                  {
 394   3                      CScalerGetBitVLD();
 395   3      
 396   3                      return *(pData + 15);
 397   3                  }
 398   2          }
 399   1      }
 400          
 401          bit CScalerGetBitVLD(void)
 402          {
 403   1          ucVLDTemp = ((ucVLDCnt & 0x07) == 0) ? *(pvldarray++) : (ucVLDTemp << 1);
 404   1      
 405   1          ucVLDCnt += 1;
 406   1      
 407   1          return (bit)(ucVLDTemp & 0x80);
 408   1      }
 409          
 410          //--------------------------------------------------
 411          // Description  : Page select for scalar(Only for CR[A1]~CR[DF])
 412          // Input Value  : None
 413          // Output Value : None
 414          //--------------------------------------------------
 415          void CScalerPageSelect(BYTE page)
 416          {
 417   1              CScalerSetByte(_PAGE_SELECT_9F, (page & 0x0F)); 
 418   1      }
 419          
 420          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1090    ----
   CONSTANT SIZE    =    213    ----
C51 COMPILER V7.06   RTDACCESS                                                             04/29/2010 18:06:17 PAGE 8   

   XDATA SIZE       =   ----      28
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
