C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE MODE_DETECT
OBJECT MODULE PLACED IN .\Output\Mode_Detect.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\Mode_Detect.c OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND CODE SYMBOLS
                    - PRINT(.\Output\Mode_Detect.lst) PREPRINT(.\Output\Mode_Detect.i) OBJECT(.\Output\Mode_Detect.obj)

stmt level    source

   1          
   2          #define __MODEDETECT__
   3          
   4          #include "Header\Lcd_func.h"
   5          #include "Header\Lcd_Main.h"
   6          #include "Header\Access.h"
   7          #include "Header\config.h"
   8          #include "Header\OSD.h"
   9          #include "Header\Lcd_Auto.h"
  10          #include "Header\Frame_Sync.h"
  11          #include "Header\Src_Ctrl.h"
  12          #include "Header\LCD_OSD.h"
  13          
  14          
  15          /////////////////////////////////////////////////////////
  16          //-------------------  Mode Detector  -----------------//
  17          /////////////////////////////////////////////////////////
  18          void Mode_Detector(void)
  19          {
  20   1      
  21   1          switch (stGUD1.INPUT_SOURCE & 0x07)
  22   1          {
  23   2          case SOURCE_VGA :
  24   2              case SOURCE_DVI :
  25   2              // Save previous values of ucMode_Curr, bHpole_Curr and bVpole_Curr
  26   2              bHpole_Prev = bHpole_Curr;
  27   2              bVpole_Prev = bVpole_Curr;
  28   2              
  29   2              if ((MODE_NOSIGNAL == ucMode_Curr) || (MODE_NOSUPPORT == ucMode_Curr))
  30   2                  Detect_Input_Mode();
  31   2              else
  32   2                  Check_Input_Mode();
  33   2              break;
  34   2      
  35   2         default :
  36   2              if ((MODE_NOSIGNAL == ucMode_Curr) || (MODE_NOSUPPORT == ucMode_Curr))
  37   2                  Detect_Video_Mode();        // Set default polarity 
  38   2              else
  39   2                  Check_Video_Mode();         // Set polarity after measure
  40   2              break;
  41   2          }
  42   1      
  43   1          Measure_Mode();     // Measure mode-timing
  44   1      }
  45          
  46          void Measure_Mode(void)
  47          {
  48   1      
  49   1          
  50   1          switch (stGUD1.INPUT_SOURCE & 0x07)
  51   1          {
  52   2                  RTDSetByte(SYNC_CTRL_4A,0x00);
  53   2              case SOURCE_VGA :
  54   2                      RTDSetByte(SYNC_POR_4C, (SYNC_SS == ucSync_Type) ? 0x02 : 0x32);
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 2   

  55   2              break;
  56   2              
  57   2              case SOURCE_DVI :
  58   2      /*//eric 0729 test issue:DVI source change              
  59   2      #if (TMDS_ENABLE)
  60   2              if (0 == ucTMDS_SEARCH_COUNTER && MODE_NOSIGNAL == ucMode_Curr) // V101C modified
  61   2              {
  62   2                  RTDCodeW(TMDS_MANUAL_ON);
  63   2      
  64   2                  ucTMDS_SEARCH_COUNTER  = 0x08;
  65   2              }        
  66   2              ucTMDS_SEARCH_COUNTER -= 0x01;
  67   2      #endif
  68   2      */
  69   2                      RTDSetByte(SYNC_POR_4C, 0x02);
  70   2              break;
  71   2              
  72   2              default :
  73   2                      RTDSetByte(SYNC_POR_4C, 0x02);
  74   2              break;
  75   2          }
  76   1              
  77   1      }
  78          
  79          #if(SOURCE_AUTO_SCAN)
  80          /////////////////////////////////////////////////////////
  81          //---Detect which source with valid signal-------------//
  82          /////////////////////////////////////////////////////////
  83          void Measure_Source(unsigned char SOURCE)
  84          {
  85   1         switch(SOURCE)
  86   1         {
  87   2         case SOURCE_VGA:
  88   2                      RTDSetByte(SYNC_CTRL_4A,0x01);
  89   2                      break;
  90   2         case SOURCE_DVI:
  91   2                      RTDSetByte(SYNC_CTRL_4A,0x03);
  92   2                      break;
  93   2         case SOURCE_AV:
  94   2              I2CWrite(V_ENABLE);
  95   2              I2CWrite(AV_DETECT);
  96   2              break;
  97   2         case SOURCE_SV:
  98   2              I2CWrite(V_ENABLE);
  99   2              I2CWrite(SV_DETECT);
 100   2                      break;
 101   2         }
 102   1         //RTDSetByte(SYNC_POR_4C, 0x32);
 103   1         //RTDSetByte(SYNC_POR_4C, 0x02);
 104   1         //RTDSetByte(SYNC_POR_4C, (stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA ? 0x32 : 0x02);
 105   1         
 106   1         if(((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA) && (SYNC_SS != ucSync_Type))
 107   1             RTDSetByte(SYNC_POR_4C,0x32);
 108   1         else
 109   1             RTDSetByte(SYNC_POR_4C,0x02);
 110   1         
 111   1         Delay_Xms(35);
 112   1         //Delay_Xms(24);
 113   1         
 114   1      
 115   1      }
 116          #endif
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 3   

 117          
 118          unsigned char VGA_Mode_Search(unsigned int HS_Pulse)
 119          {
 120   1        unsigned char ucMode_Temp,m;
 121   1        Data[0] = HS_Pulse * 12 / usHsync;    // 0 : 720x350; 1 : 640x350;
 122   1      
 123   1        ucMode_Temp = MODE_NOSUPPORT;
 124   1      
 125   1        // Search for Standard Mode
 126   1        m   = MODE_1280x1024x75HZ;            //anson
 127   1      //  m   = MODE_1600x1200x60HZ;
 128   1        do
 129   1        {
 130   2                if ((usHsync > VGA_Mode[m][0]) && (usHsync < VGA_Mode[m][1]))
 131   2                {   
 132   3                        if ((usVsync >= VGA_Mode[m][2]) && (usVsync <= VGA_Mode[m][3]))
 133   3                        {
 134   4                                if (MODE_1280x1024x75HZ == m)
 135   4                                {
 136   5                                        if (0 == (bVpole_Curr | bHpole_Curr))   m   = MODE_1280x1024x76HZ;  // SUN 1024-76
 137   5                                }                            
 138   4                                else if (MODE_1024x0768x75HZ == m)
 139   4                                {
 140   5                                        if (0 == (bVpole_Curr | bHpole_Curr))   m   = MODE_1024x0768x74HZ;  // MAC768-75
 141   5                                }         
 142   4                                else if (MODE_0640x0480x60HZ == m && bVpole_Curr != bHpole_Curr)
 143   4                                {
 144   5                                        // MODE_VGA350x60Hz         : 640x350 60Hz
 145   5                                        // MODE_VGA350x60Hz | 0x40  : 720x350 60Hz
 146   5                                        // MODE_VGA400x60Hz         : 640x400 60Hz
 147   5                                        // MODE_VGA400x60Hz | 0x40  : 720x400 60Hz
 148   5                                        if (bHpole_Curr)
 149   5                                                m   = Data[0] ? MODE_VGA350x60Hz : MODE_VGA350x60Hz | 0x40;
 150   5                                        else
 151   5                                                m   = (stGUD1.FUNCTION & 0x10) ? MODE_VGA400x60Hz : MODE_VGA400x60Hz | 0x40;
 152   5                                        //m   = (stGUD1.INPUT_SOURCE & 0x80) ? MODE_VGA400x60Hz : MODE_VGA400x60Hz | 0x40;
 153   5                                }
 154   4                                else if (MODE_0640x0480x50HZ == m && bVpole_Curr != bHpole_Curr)
 155   4                                {
 156   5                                        // MODE_VGA350x50Hz         : 640x350 50Hz
 157   5                                        // MODE_VGA350x50Hz | 0x40  : 720x350 50Hz
 158   5                                        // MODE_VGA400x50Hz         : 640x400 50Hz
 159   5                                        // MODE_VGA400x50Hz | 0x40  : 720x400 50Hz
 160   5                                        if (bHpole_Curr)
 161   5                                                m   = Data[0] ? MODE_VGA350x50Hz : MODE_VGA350x50Hz | 0x40;
 162   5                                        else
 163   5                                                m   = (stGUD1.FUNCTION & 0x10) ? MODE_VGA400x50Hz : MODE_VGA400x50Hz | 0x40;
 164   5                                        //m   = (stGUD1.INPUT_SOURCE & 0x80) ? MODE_VGA400x50Hz : MODE_VGA400x50Hz | 0x40;
 165   5                                }
 166   4                                else if (MODE_0720x0400x85HZ == m)
 167   4                                {
 168   5                                        if (1 == bHpole_Curr && 0 == bVpole_Curr)
 169   5                                                m   = MODE_0640x0350x85HZ;
 170   5                                        else if (stGUD1.FUNCTION & 0x10)     //else if (stGUD1.INPUT_SOURCE & 0x80)     
 171   5                                                m   = MODE_0640x0400x85HZ;
 172   5                                }
 173   4                                else if (MODE_0720x0400x70HZ == m)
 174   4                                {
 175   5                                        if (1 == bHpole_Curr && 0 == bVpole_Curr)
 176   5                                                m   = Data[0] ? MODE_0640x0350x70HZ : MODE_0720x0350x70HZ;
 177   5                                        else if ((stGUD1.FUNCTION & 0x10)==0)     //else if (stGUD1.INPUT_SOURCE & 0x80)              //anson
 178   5      //                                else if (stGUD1.FUNCTION & 0x10)     //else if (stGUD1.INPUT_SOURCE & 0x80)
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 4   

 179   5                                                m   = MODE_0640x0400x70HZ;
 180   5                                }
 181   4                                else if (MODE_1024x0768x59HZ == m)
 182   4                                {
 183   5                                        if(HS_Pulse > 45)
 184   5                                                m = MODE_1024x0768x60HZ;
 185   5                                }
 186   4                                else if (MODE_1024x0768x60HZ == m)
 187   4                                {
 188   5                                        if(HS_Pulse <= 45)
 189   5                                                m = MODE_1024x0768x59HZ;                                         
 190   5                                }
 191   4                                else if(MODE_1024x0768x72HZ == m)                     //anson 05_0321
 192   4                                {
 193   5                                        if(ucRefresh <= 71)
 194   5                                         m = MODE_1024x0768x70HZ;
 195   5                                }
 196   4      
 197   4                                ucMode_Temp     = m;
 198   4                        }
 199   3                }
 200   2        }
 201   1        while ((0 != --m) && (MODE_NOSUPPORT == ucMode_Temp));
 202   1        
 203   1        // Search for User Mode
 204   1        if (MODE_NOSUPPORT == ucMode_Temp)
 205   1        {
 206   2                usIPV_ACT_LEN   = 0;
 207   2      
 208   2                m   = MODE_USER1280x1024;             //anson
 209   2      //        m   = MODE_USER1600x1200;
 210   2                do
 211   2                {
 212   3                        if ((usVsync >= VGA_Mode[m][2]) && (usVsync <= VGA_Mode[m][3]))
 213   3                        {
 214   4                                usIPV_ACT_LEN   = CAP_WIN[m][4];
 215   4                                
 216   4                                if ((usHsync >= VGA_Mode[m][0]) && (usHsync <= VGA_Mode[m][1]))
 217   4                                {
 218   5                                        ucMode_Temp     = m;    // Support User Mode
 219   5                                }
 220   4                        }
 221   3                }
 222   2                while ((MODE_USER720x400 <= --m) && (MODE_NOSUPPORT == ucMode_Temp));
 223   2        }
 224   1      
 225   1        return ucMode_Temp;
 226   1      
 227   1      }
 228          
 229          unsigned char Partial_Display(void)
 230          {
 231   1              unsigned char ucMode_Temp;
 232   1      
 233   1              if (DISP_LEN < usIPV_ACT_LEN)   // V Scale-down
 234   1              {
 235   2                      // Estimate display clock rate for full screen
 236   2                      // DCLK = (24.576MHz / usHsync) * DCLK per display line * (display image lines / input image lines)
 237   2                      ((unsigned int *)Data)[0]   = (unsigned long)2458 * Mode_Preset[MODE_UNDEFINED1][0] * DISP_LEN 
 238   2                              / ((unsigned long)100 * usIPV_ACT_LEN * usHsync);
 239   2      
 240   2                      if (MAX_DCLK < ((unsigned int *)Data)[0])
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 5   

 241   2                      {
 242   3                              // If clock rate for full-screen display is too high, we can try partial-V display.
 243   3                              // Estimate clock for partial-V display
 244   3                              // DCLK = (24.576MHz / usHsync) * DCLK per display line * (min. display total lines / input total lines
             -)
 245   3                              ((unsigned int *)Data)[1]   = (unsigned long)2458 * Mode_Preset[MODE_UNDEFINED1][0] * MIN_DV_TOTAL
 246   3                                      / ((unsigned long)100 * (usVsync - 1) * usHsync);
 247   3      
 248   3                              if (MAX_DCLK < ((unsigned int *)Data)[1])
 249   3                              {
 250   4                                      // Decrease usIPV_ACT_LEN to DISP_LEN and go further to check if it can be displayed.
 251   4                                      usIPV_ACT_LEN   = DISP_LEN;
 252   4                              }
 253   3                              else
 254   3                              {
 255   4                                      ucMode_Temp     = MODE_UNDEFINED1 | 0x80;   // Scale-down and partial-V display
 256   4                              }
 257   3                      }
 258   2                      else
 259   2                              ucMode_Temp     = MODE_UNDEFINED1;              // Scale-down and full-V display
 260   2              }
 261   1              
 262   1              if (DISP_LEN >= usIPV_ACT_LEN)  // V Scale-up
 263   1              {
 264   2                      ((unsigned int *)Data)[0]   = (unsigned long)2458 * Mode_Preset[MODE_UNDEFINED0][0] * DISP_LEN 
 265   2                              / ((unsigned long)100 * usIPV_ACT_LEN * usHsync);
 266   2      
 267   2                      if (MAX_DCLK < ((unsigned int *)Data)[0])
 268   2                      {
 269   3                              if (MIN_DV_TOTAL >= (usVsync - 1))
 270   3                              {
 271   4                                      ((unsigned int *)Data)[1]   = (unsigned long)2458 * Mode_Preset[MODE_UNDEFINED0][0] * MIN_DV_TOTAL
 272   4                                              / ((unsigned long)100 * (usVsync - 1) * usHsync);
 273   4                              }
 274   3                              else
 275   3                              {
 276   4                                      ((unsigned int *)Data)[1]   = (unsigned long)2458 * Mode_Preset[MODE_UNDEFINED0][0]
 277   4                                              / ((unsigned long)100 * usHsync);
 278   4                              }
 279   3                              
 280   3                              if (MAX_DCLK < ((unsigned int *)Data)[1])   
 281   3                                      ucMode_Temp = MODE_NOSUPPORT;           // Cannot display
 282   3                              else
 283   3                                      ucMode_Temp = MODE_UNDEFINED0 | 0x80;   // Scale-up and partial-V display
 284   3                      }
 285   2                      else
 286   2                              ucMode_Temp = MODE_UNDEFINED0;              // Scale-up and full-V display
 287   2              }
 288   1      
 289   1              return ucMode_Temp;
 290   1      
 291   1      }
 292          
 293          void Sync_Type_Switch(void)
 294          {
 295   1              if (MODE_NOSIGNAL == ucMode_Curr)
 296   1              {
 297   2                      if (SYNC_CS == ucSync_Type)         // CS->SS
 298   2                      {
 299   3                              RTDCodeW(VGA_SET_SS);
 300   3      
 301   3                              bVpole_Curr = 1;
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 6   

 302   3                              bHpole_Curr = 1;
 303   3                              ucSync_Type = SYNC_SS;
 304   3                              
 305   3                      }
 306   2                      else if (SYNC_SS == ucSync_Type)    // SS->SOG
 307   2                      {
 308   3                              RTDCodeW(VGA_SET_SOG);
 309   3      
 310   3                              bVpole_Curr = 1;
 311   3                              bHpole_Curr = 1;
 312   3                              ucSync_Type = SYNC_SOG;
 313   3                              
 314   3                              
 315   3      
 316   3                      }
 317   2                      else                                // SOG->CS
 318   2                      {
 319   3                              RTDCodeW(VGA_SET_CS);
 320   3      
 321   3                              bVpole_Curr = 1;
 322   3                              bHpole_Curr = 1;
 323   3                              ucSync_Type = SYNC_CS;
 324   3                              
 325   3                              
 326   3      
 327   3                      }
 328   2              }
 329   1      }
 330          
 331          void Sync_Type_Confirm(void)
 332          {
 333   1        
 334   1      #if(SOURCE_AUTO_SCAN == _FALSE)
              unsigned char m;
                          
              // To prevent from mistaking CS (with VS) for SS, we check SYNC type once when finding a mode in SS.
                          
                    if (SYNC_SS == ucSync_Type)
                        {           
                                RTDSetByte(SYNC_CTRL_4B, 0x55);
              
                                RTDSetByte(SYNC_POR_4C, 0x22);
              
                                m   = (MODE_DETECT_FREQ + 1) * 20;       
                                do
                                {   
                                        Delay_Xms(1);
                                        RTDRead(SYNC_POR_4C, 0x05, Y_INC);
                                }
                                while ((Data[0] & 0x02) && (--m));
                                
                                Data[5] = Data[3];
                                Data[4] = Data[4] & 0x87;
                                Data[3] = Data[1];
                                Data[2] = Data[2] & 0x8f;
              
                                if ((0 == ((unsigned int *)Data)[1]) || (0x07ff <= ((unsigned int *)Data)[1]) ||
                                        (0 == ((unsigned int *)Data)[2]) || (0x07ff <= ((unsigned int *)Data)[2]) ||
                                        (0 == m))
                                {
                                        ucSync_Type = SYNC_SS;
              
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 7   

                                        RTDSetByte(SYNC_CTRL_4B, 0x14);
                                }
                                else
                                {
                                        ucSync_Type = SYNC_CS;
              
                                        RTDCodeW(VGA_SET_CS);
              
                                        bVpole_Curr = 1;
                                        bHpole_Curr = 1;
                                }
                        }
                        else if (SYNC_SOG == ucSync_Type)
                        {
                                RTDSetByte(SYNC_CTRL_4B, 0x14);
                                Delay_Xms(8);
              
                                RTDSetByte(SYNC_POR_4C, 0x00);
                                RTDSetByte(SYNC_POR_4C, 0x02);
                                
              
                                m   = (MODE_DETECT_FREQ + 1) * 20;       
                                do
                                {   
                                        Delay_Xms(1);
                                        RTDRead(SYNC_POR_4C, 0x05, Y_INC);
                                }
                                while ((Data[0] & 0x02) && (--m));
                                
                                Data[5] = Data[3];
                                Data[4] = Data[4] & 0x87;
                                Data[3] = Data[1];
                                Data[2] = Data[2] & 0x8f;
              
                                if ((0 == ((unsigned int *)Data)[1]) || (0x07ff <= ((unsigned int *)Data)[1]) ||
                                        (0 == ((unsigned int *)Data)[2]) || (0x07ff <= ((unsigned int *)Data)[2]) ||
                                        (0 == m))
                                {
                                        ucSync_Type = SYNC_SOG;
              
                                        
                                        RTDSetByte(SYNC_CTRL_4B, 0x57);
                                        //RTDSetByte(VGIP_SIGINV_05, 0x40);
                                        Delay_Xms(8);
                                        
                                        RTDSetByte(SYNC_POR_4C,0x32);
                                        Delay_Xms(20);
                                        RTDSetByte(SYNC_POR_4C, 0x00);
                                        
                                }
                                else
                                {
                                        ucSync_Type = SYNC_SS;
              
                                        RTDCodeW(VGA_SET_SS);
              
                                        bVpole_Curr = 1;
                                        bHpole_Curr = 1;
                                }
                        }
              #endif
 425   1      
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 8   

 426   1      }
 427          /////////////////////////////////////////////////////////
 428          //------------  Detect VGA & DVI Mode  ----------------//
 429          /////////////////////////////////////////////////////////
 430          void Detect_Input_Mode(void)
 431          {
 432   1          unsigned char   ucMode_Temp;
 433   1          unsigned int    usHS_Pulse;
 434   1      
 435   1          RTDRead(SYNC_POR_4C, 0x09, Y_INC);
 436   1      
 437   1          if (Data[0] & 0x02)
 438   1          {
 439   2              // Reset Sync Processor when sync signal timeout
 440   2              RTDSetByte(SYNC_POR_4C, ((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA) ? 0x20 : 0x00);
 441   2      
 442   2              // Treat sync signal timeout as no signal
 443   2              ucMode_Temp     = MODE_NOSIGNAL;
 444   2          }
 445   1          else                        
 446   1          {
 447   2                
 448   2      //        ucMode_Temp = (Data[8] & 0xe0 ) >> 5;
 449   2      
 450   2      //        if(ucMode_Temp == 0 || ucMode_Temp >=4) //Test which edge of Hsync to latch Vsync will be safe
 451   2      //              {
 452   2      //           RTDSetBit(MEAS_VS_HI_54,0xf7,0x08);  //Use positive edge of Hsync to latch Vsync
 453   2      //                 ucDebug_Value0 = 0x08;
 454   2      //              }
 455   2      //              else
 456   2      //              {
 457   2      //                 RTDSetBit(MEAS_VS_HI_54,0xf7,0x00);  //Use negtive edge of Hsync to latch Vsync
 458   2      //                 ucDebug_Value0 = 0x18;
 459   2      //              }
 460   2      
 461   2              
 462   2              usStdHS   = usHsync;  // Save previous usHsync in usStdHS
 463   2              usStdVS   = usVsync;  // Save previous usVsync in usStdVS
 464   2      
 465   2              bVpole_Curr = (bit)(Data[0] & 0x08);    // Save current usVsync polarity
 466   2              bHpole_Curr = (bit)(Data[0] & 0x04);    // Save current usHsync polarity
 467   2      
 468   2              Data[7] = Data[5];
 469   2              Data[6] = Data[6] & 0x0f;
 470   2              Data[5] = Data[3];
 471   2              Data[4] = Data[4] & 0x87;
 472   2              Data[3] = Data[1];
 473   2              Data[2] = Data[2] & 0x8f;
 474   2      
 475   2              usHsync     = ((unsigned int *)Data)[1];    // Current HSYNC timing
 476   2              usVsync     = ((unsigned int *)Data)[2];    // Current VSYNC timing
 477   2      
 478   2              if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
 479   2                  usHS_Pulse  = ((unsigned int *)Data)[3];    // Current HSYNC pulse width
 480   2      
 481   2              // Calculate Vertical Refresh Rate
 482   2              // Original Formula :
 483   2              // ucRefresh = 24.576M / (usHsync * usVsync)
 484   2              // Use Data[0~3] as a temporary long variable
 485   2              ((unsigned long *)Data)[0]  = (unsigned long)usHsync * usVsync;
 486   2              ucRefresh   = (unsigned long)49152000 / ((unsigned long *)Data)[0];
 487   2              ucRefresh   = (ucRefresh & 0x01) ? ((ucRefresh + 1) >> 1) : (ucRefresh >> 1);
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 9   

 488   2      
 489   2              // Treat small change of usHsync/usVsync as no change
 490   2              if (usStdHS <= usHsync && (usStdHS + 2) >= usHsync)     usHsync = usStdHS;
 491   2              if (usStdVS <= usVsync && (usStdVS + 2) >= usVsync)     usVsync = usStdVS;
 492   2      
 493   2              // Polarity must be correct
 494   2              if ((bVpole_Curr != bVpole_Prev) || (bHpole_Curr != bHpole_Prev))
 495   2              {  
 496   3                  RTDRead(VGIP_SIGINV_05, 0x01, N_INC);
 497   3                
 498   3                  if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
 499   3                  {
 500   4                     Data[0] &= 0xd7;  // HS_RAW & VS positive
 501   4      
 502   4                     if (!bHpole_Curr)    Data[0] |= 0x20;
 503   4                  
 504   4                     if (!bVpole_Curr && SYNC_SS == ucSync_Type)     Data[0] |= 0x08;    // Seperate sync
 505   4      
 506   4                                 ucMode_Temp     = MODE_NOSUPPORT;
 507   4                  }
 508   3                  else if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_DVI)
 509   3                  {
 510   4                     Data[0] &= 0xf3;  // VS & HS positive
 511   4      
 512   4                     if (!bVpole_Curr)    Data[0] |= 0x08;
 513   4                     if (!bHpole_Curr)    Data[0] |= 0x04;
 514   4                  }            
 515   3                  RTDSetByte(VGIP_SIGINV_05, Data[0]);
 516   3      
 517   3                  
 518   3              }
 519   2              else
 520   2              {
 521   3                  if (0x07ff <= usHsync || 0x07ff <= usVsync || 0 == usHsync || 0 == usVsync)
 522   3                  {
 523   4                      ucMode_Temp     = MODE_NOSIGNAL;        // Treat overflow as no signal
 524   4                  }
 525   3                  else
 526   3                  {
 527   4                      ucMode_Temp = ((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA) ? VGA_Mode_Search(usHS_Pulse) :
             - MODE_NOSUPPORT;
 528   4                                      
 529   4      
 530   4                      if (48 > ucRefresh || MAX_RATE < ucRefresh)
 531   4                      {
 532   5                          ucMode_Temp = MODE_NOSUPPORT;   // We don't support vertical refresh rate lower than 5
             -0Hz
 533   5                      }
 534   4                      else if (MODE_NOSUPPORT == ucMode_Temp && (0 != usIPV_ACT_LEN) && ((stGUD1.INPUT_SOURCE & 
             -0x07) == SOURCE_VGA))
 535   4                      {                           
 536   5                                              ucMode_Temp = Partial_Display();
 537   5                                      }
 538   4                                      else if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_DVI)
 539   4                                            ucMode_Temp = Seek_DVI_Mode(ucMode_Temp);
 540   4      
 541   4      //                              ucDebug_Value0 = ucMode_Temp;
 542   4                      }
 543   3              }
 544   2          }
 545   1      
 546   1              if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 10  

 547   1              {
 548   2              if (SYNC_SOG == ucSync_Type && 0 != (usHS_Pulse * 7 / usHsync))
 549   2              {
 550   3                // To prevent from SOG mode mistake
 551   3                // HSYNC pulse width will never longer than 1/7*HSYNC period
 552   3                ucMode_Temp = MODE_NOSIGNAL;
 553   3              }
 554   2              }
 555   1      
 556   1          //-------------Check result-----------------------------------------
 557   1          if (MODE_NOSUPPORT == ucMode_Temp || MODE_NOSIGNAL == ucMode_Temp)
 558   1          {
 559   2              // Treat illegal signal as no signal when SOG
 560   2                      if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
 561   2                      {
 562   3                 if (SYNC_SOG == ucSync_Type)    
 563   3                             ucMode_Temp = MODE_NOSIGNAL;
 564   3                       }
 565   2      
 566   2              if (MODE_NOSUPPORT != ucMode_Found && MODE_NOSIGNAL != ucMode_Found)    ucMode_Times    = 0;
 567   2      
 568   2              ucMode_Found    = ucMode_Temp;
 569   2      
 570   2              if (NO_MODE_TIMES > ucMode_Times)
 571   2              {
 572   3                  // Wait for signal stable
 573   3                  ucMode_Times ++;
 574   3      
 575   3                              if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_DVI)
 576   3                              {
 577   4                                 //Enable the TMDS Hsync & Vsync error correction to improve the long cable image quality
 578   4                     RTDSetByte(TMDS_CORRECTION_FF,0x03);
 579   4                              }
 580   3              }
 581   2              else
 582   2              {
 583   3                          if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_DVI)
 584   3                              {
 585   4                                 //Disable the TMDS Hsync & Vsync error correction
 586   4                     RTDSetByte(TMDS_CORRECTION_FF,0x00);
 587   4                              }
 588   3      
 589   3                  bStable         = (ucMode_Curr == ucMode_Found) ? 1 : 0;    // bStable must be cleared when mo
             -de changed
 590   3                  ucMode_Curr     = ucMode_Found;
 591   3                  ucMode_Times    = NO_MODE_TIMES - 2;
 592   3      
 593   3                              if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
 594   3                                  Sync_Type_Switch();
 595   3                  
 596   3              }
 597   2          }
 598   1          else
 599   1          {
 600   2              if (ucMode_Found != ucMode_Temp)
 601   2              {
 602   3                  ucMode_Times    = 1;
 603   3                  ucMode_Found    = ucMode_Temp;
 604   3      
 605   3                              if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
 606   3                                  Sync_Type_Confirm();
 607   3              }
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 11  

 608   2              else
 609   2              {   
 610   3                          Data[0] = ((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA) ? VGA_SEARCH_TIMES : DVI_SEARCH_TIMES;
 611   3                  //if (VGA_SEARCH_TIMES > ucMode_Times)
 612   3                              if (Data[0] > ucMode_Times)
 613   3                  {
 614   4                      ucMode_Times ++;
 615   4                  }
 616   3                  else
 617   3                  {
 618   4      
 619   4                      bLIGHT_PWR  = LIGHT_OFF;        // Turn off BackLight for reset display
 620   4                    
 621   4                      RTDSetByte(HOSTCTRL_02, 0x40);  // Wake RTD up
 622   4                      RTDOSDW(OSD_Reset);            // Clear OSD
 623   4      
 624   4                      ucMode_Curr     = ucMode_Found; // Supported mode found
 625   4                      ucMode_Times    = 0;            // Reset mode timer
 626   4                      bStable         = 0;            // bStable must be cleared when mode changed
 627   4      
 628   4                                      if((stGUD1.INPUT_SOURCE & 0x07)== SOURCE_VGA)
 629   4                          Display_VGA_Set();              // Set VGA Mode registers
 630   4                                      else
 631   4                                          Display_DVI_Set();
 632   4      
 633   4                                      
 634   4      #if (RTDDEBUG)
                              if (ucMode_PrevAct == ucMode_Curr)
                              {
                                  if (0xff > ucMode_QuitCnt)      ucMode_QuitCnt += 1;
                              }
                              else
                              {
                                  ucMode_PrevAct  = ucMode_Curr;
                                  ucMode_QuitCnt  = 0;
                                  ucDebug         = 0;
                              }
              #endif                
 646   4                  }
 647   3              }
 648   2          }
 649   1      }
 650          
 651          //-------------------  Check VGA & DVI Mode  -------------------//
 652          void Check_Input_Mode(void)
 653          {    
 654   1          RTDRead(SYNC_POR_4C, 0x05, Y_INC);
 655   1      
 656   1          if (Data[0] & 0x02)
 657   1          {
 658   2              RTDSetByte(SYNC_POR_4C, ((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA) ? 0x20 : 0x00);          // I
             -nput signal time-out. Reset sync-processor
 659   2      
 660   2              ucMode_Found    = MODE_NOSUPPORT;
 661   2          }
 662   1          else                        
 663   1          {
 664   2              bVpole_Curr = (bit)(Data[0] & 0x08);    // Current usVsync polarity
 665   2              bHpole_Curr = (bit)(Data[0] & 0x04);    // Current usHsync polarity
 666   2      
 667   2              Data[5] = Data[3];
 668   2              Data[4] = Data[4] & 0x87;
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 12  

 669   2              Data[3] = Data[1];
 670   2              Data[2] = Data[2] & 0x8f;
 671   2              usHsync = ((unsigned int *)Data)[1];    // Current usHsync timing
 672   2              usVsync = ((unsigned int *)Data)[2];    // Current usVsync timing
 673   2      
 674   2              // Polarity must be correct
 675   2              if ((bVpole_Curr != bVpole_Prev) || (bHpole_Curr != bHpole_Prev))
 676   2              {
 677   3                  RTDRead(VGIP_SIGINV_05, 0x01, N_INC);
 678   3                  /*
 679   3                  Data[0] &= 0xd7;    // HS_RAW & VS positive
 680   3      
 681   3                  if (!bHpole_Curr)   Data[0] |= 0x20;
 682   3      
 683   3                  if (!bVpole_Curr && SYNC_SS == ucSync_Type)     Data[0] |= 0x08;    // Seperate sync
 684   3                  */
 685   3                  
 686   3      
 687   3                  if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_VGA)
 688   3                  {
 689   4                       Data[0] &= 0xd7;    // HS_RAW & VS positive
 690   4      
 691   4                       if (!bHpole_Curr)   Data[0] |= 0x20;
 692   4      
 693   4                       if (!bVpole_Curr && SYNC_SS == ucSync_Type)     Data[0] |= 0x08;    // Seperate sync
 694   4                  }
 695   3                  else if((stGUD1.INPUT_SOURCE & 0x07) == SOURCE_DVI)
 696   3                  {
 697   4                       Data[0] &= 0xf3;  // VS & HS positive
 698   4      
 699   4                       if (!bVpole_Curr)    Data[0] |= 0x08;
 700   4                       if (!bHpole_Curr)    Data[0] |= 0x04;
 701   4                  }
 702   3      
 703   3                  RTDSetByte(VGIP_SIGINV_05, Data[0]);
 704   3      
 705   3                  ucMode_Found    = MODE_NOSUPPORT;
 706   3              }
 707   2              else
 708   2              {
 709   3                  if (0x07ff <= usHsync || 0x07ff <= usVsync || 0 == usHsync || 0 == usVsync)     // Check overf
             -low
 710   3                  {
 711   4                      ucMode_Found    = MODE_NOSUPPORT;
 712   4                  }
 713   3                  else
 714   3                  {
 715   4                      if ((usHsync < (usStdHS - 1)) || (usHsync > (usStdHS + 3)) ||
 716   4                          (usVsync < (usStdVS - 1)) || (usVsync > (usStdVS + 3)))
 717   4                      {   
 718   5                          ucMode_Found    = MODE_NOSUPPORT;
 719   5                      }
 720   4                      else
 721   4                      {
 722   5                          ucMode_Found    = ucMode_Curr;
 723   5                      }
 724   4                  }
 725   3              }
 726   2          }
 727   1          
 728   1          if (MODE_NOSUPPORT == ucMode_Found)
 729   1                      Reset_Mode();
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 13  

 730   1          else
 731   1              {
 732   2              bStable = 1;    // Set bStable to 1 when signal timing is stable.
 733   2      #if(AS_NON_FRAMESYNC)
                      RTDSetByte(STATUS0_01, 0x00);  // Clear status
                      RTDSetByte(STATUS1_1F, 0x00);  // Clear status
              
                      if(bFrameSync)
                         RTDSetBit(ODD_CTRL_8E,0xef,0x10);
              #endif
 740   2          }
 741   1      
 742   1      }
 743          
 744          
 745          
 746          
 747          unsigned char Seek_DVI_Mode(unsigned char mode)
 748          {
 749   1      #if(TMDS_ENABLE)
 750   1          unsigned char   Wait_Time_Cnt;
 751   1      
 752   1          RTDSetByte(SYNC_POR_4C, 0x03);  // Measure data enable width and height
 753   1      
 754   1          Wait_Time_Cnt  = 60;       
 755   1          do
 756   1          {   
 757   2              Delay_Xms(1);
 758   2              RTDRead(SYNC_POR_4C, 0x07, Y_INC);
 759   2          }
 760   1          while ((Data[0] & 0x02) && (--Wait_Time_Cnt));
 761   1      
 762   1          Data[7] = Data[5];
 763   1          Data[6] = Data[6] & 0x0f;
 764   1          Data[5] = Data[3];
 765   1          Data[4] = Data[4] & 0x87;
 766   1          Data[3] = Data[1];
 767   1          Data[2] = Data[2] & 0x8f;
 768   1      
 769   1          // Measure Failed !!!
 770   1          if ((0 == ((unsigned int *)Data)[1]) || (0x07ff <= ((unsigned int *)Data)[1]) ||
 771   1              (0 == ((unsigned int *)Data)[2]) || (0x07ff <= ((unsigned int *)Data)[2]) ||
 772   1              (0 == Wait_Time_Cnt))
 773   1          {
 774   2              RTDSetByte(SYNC_POR_4C, 0x00);
 775   2      
 776   2              return MODE_NOSUPPORT;
 777   2          }
 778   1      
 779   1          // Save IH_TOTAL in usADC_Clock
 780   1          usADC_Clock     = ((unsigned int *)Data)[1] * 2;
 781   1      
 782   1          // Save input data enable width and height
 783   1          usIPV_ACT_LEN   = ((unsigned int *)Data)[2];
 784   1          usIPH_ACT_WID   = ((unsigned int *)Data)[3] * 2;
 785   1      
 786   1          // We don't support input image less than 350 active lines
 787   1          if (350 > usIPV_ACT_LEN)    return MODE_NOSUPPORT;
 788   1      
 789   1          // We only support 8N active width
 790   1          usIPH_ACT_WID   = (2 < (usIPH_ACT_WID & 0x0007)) ? ((usIPH_ACT_WID + 8) & 0xfff8) : (usIPH_ACT_WID & 0
             -xfff8);
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 14  

 791   1      
 792   1          // We only support active width not larger than 1280
 793   1          if (1280 < usIPH_ACT_WID)   usIPH_ACT_WID   = 1280;
 794   1      
 795   1          // Calculate maximum usIPV_ACT_LEN limitation
 796   1          ((unsigned int *)Data)[0]   = (unsigned long)(usVsync - 1) * DISP_LEN / MIN_DV_TOTAL;
 797   1      
 798   1          if (((unsigned int *)Data)[0] < usIPV_ACT_LEN)      usIPV_ACT_LEN   = ((unsigned int *)Data)[0];
 799   1      
 800   1          mode    = MODE_UNDEFINED0;
 801   1        
 802   1          if (MODE_UNDEFINED0 == mode)
 803   1          {
 804   2              // First, we try user-mode to fit the undefined mode for full-screen display.
 805   2              Wait_Time_Cnt   = MODE_USER720x400;
 806   2              do
 807   2              {
 808   3                  if (Mode_Preset[Wait_Time_Cnt][2] < CAP_WIN[Wait_Time_Cnt][4])   // V scale-down
 809   3                  {
 810   4                      // Larger scale-down ratio may need a larger DH_TOTAL. 
 811   4                      // So usIPV_ACT_LEN should not be too larger than pre-set capture window length
 812   4                      if (Mode_Preset[Wait_Time_Cnt][2] > usIPV_ACT_LEN || (CAP_WIN[Wait_Time_Cnt][4] + 24) < us
             -IPV_ACT_LEN)   continue;
 813   4                  }
 814   3                  else
 815   3                  {
 816   4                      if (Mode_Preset[Wait_Time_Cnt][2] < usIPV_ACT_LEN)   continue;
 817   4                  }
 818   3      
 819   3                  ((unsigned int *)Data)[0]   = (unsigned long)2458 * Mode_Preset[Wait_Time_Cnt][0] * Mode_Prese
             -t[Wait_Time_Cnt][2]
 820   3                                              / ((unsigned long)100 * usIPV_ACT_LEN * usHsync);
 821   3                  
 822   3                  // Return if we find out a suitable user-mode.
 823   3                  if (MAX_DCLK > ((unsigned int *)Data)[0])   return Wait_Time_Cnt;
 824   3              }
 825   2              while (MODE_USER1600x1200 >= ++Wait_Time_Cnt);
 826   2      
 827   2                      mode = Partial_Display();
 828   2              // If failed, we try partial-screen display.
 829   2      
 830   2          }
 831   1              
 832   1      
 833   1          return  mode;
 834   1      #else
                  mode    = MODE_UNDEFINED0;
                  return  0;
              #endif
 838   1      }
 839          
 840          /////////////////////////////////////////////////////////
 841          //------------------ Detect VIDEO Mode ----------------//
 842          /////////////////////////////////////////////////////////
 843          void Detect_Video_Mode(void)
 844          {
 845   1      #if(VIDEO_CHIP != VDC_NONE)
                  I2CRead(ADDR_VIDEO, 0x1f, 0x01);
              
                  //------ Check Horizontal Lock & Frequency ------
                  if (0 == (Data[0] & 0x40))
                  {   
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 15  

                      if ((Data[0] & 0x20) && (0x01 != (ucAV_Mode & 0x0f)))
                      {
                          // Field rate changed to 60Hz
                          ucAV_Mode       = 0x01;
                          ucMode_Found    = MODE_NOSUPPORT;
                          ucMode_Times    = 0;
              
                          Data[0] = 4;
                          Data[1] = ADDR_VIDEO;
                          Data[2] = 0x0e;
                          Data[3] = 0x08;     // Start color search from NTSC-M
                          I2CWrite(Data);
                      }
                      else if ((0 == (Data[0] & 0x20)) && (0x02 != (ucAV_Mode & 0x02)))
                      {
                          // Field rate changed to 50Hz
                          ucAV_Mode       = 0x02; 
                          ucMode_Found    = MODE_NOSUPPORT;
                          ucMode_Times    = 0;
                          
                          Data[0] = 4;
                          Data[1] = ADDR_VIDEO;
                          Data[2] = 0x0e;
                          Data[3] = 0x08;     // Start color search from PAL-BDGHI
                          I2CWrite(Data);
                      }
                      else
                      {    
                          //------ Check Lock Color ------
                          if (0x01 == (Data[0] & 0x01))
                          {   
                              // Lock Color
                              if (ucAV_Mode & 0x01)
                              {
                                  if (MODE_VIDEO60HZ == ucMode_Found)
                                  {
                                      ucMode_Times ++;
                                  }
                                  else
                                  {
                                      ucMode_Found    = MODE_VIDEO60HZ;
                                      ucMode_Times    = 0;
                                  }
                              }
                              else
                              {
                                  if (MODE_VIDEO50HZ == ucMode_Found)
                                  {
                                      ucMode_Times ++;
                                  }
                                  else
                                  {
                                      ucMode_Found    = MODE_VIDEO50HZ;
                                      ucMode_Times    = 0;
                                  }
                              }
                          }
                          else
                          {
                              // Non Lock Color
                              if (MODE_NOSUPPORT != ucMode_Found)
                              {
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 16  

                                  ucMode_Found    = MODE_NOSUPPORT;
                                  ucMode_Times    = 0;
                              }
                              
                              Data[0] = 4;
                              Data[1] = ADDR_VIDEO;
                              Data[2] = 0x0e;
                              
                              if (0x03 == (ucAV_Mode & 0x03))
                              {
                                  // SECAM -> PAL-BDGHI(50Hz)
                                  Data[3] = 0x08;
                                  I2CWrite(Data);                    
                                  ucAV_Mode   = 0x02;
                              }
                              else
                              {
                                  if (ucMode_Times & 0x01)    // Every 2-times , change color
                                  {
                                      switch (ucAV_Mode & 0x70)
                                      {
                                      case 0x00:  
                                          Data[3] = 0x18; // NTSC-4.43(50Hz)  // PAL-4.43(60Hz)
                                          I2CWrite(Data);
                                          ucAV_Mode   = (ucAV_Mode & 0x0f) | 0x10;
                                          break;
                                      case 0x10:
                                          Data[3] = 0x28; // PAL-N(50Hz)      // NTSC-4.43(60Hz)
                                          I2CWrite(Data);
                                          ucAV_Mode   = (ucAV_Mode & 0x0f) | 0x20;
                                          break;
                                      case 0x20:
                                          Data[3] = 0x38; // NTSC-N(50Hz)     // PAL-M(60Hz)
                                          I2CWrite(Data);
                                          ucAV_Mode   = (ucAV_Mode & 0x0f) | 0x30;
                                          break;
                                      case 0x30:
                                          if (ucAV_Mode & 0x02)
                                          {
                                              // NTSC-N -> SECAM (50Hz)
                                              Data[3]     = 0x5c;
                                              I2CWrite(Data);
                                              ucAV_Mode   = 0x03;
                                          }
                                          else
                                          {   
                                              // PAL-M -> NTSC_M (60Hz)
                                              Data[3]     = 0x08;
                                              I2CWrite(Data);
                                              ucAV_Mode   = ucAV_Mode & 0x0f | 0x00;
                                          }    
                                      default:
                                          break;
                                      }//end of "switch (ucAV_Mode & 0x70)"
                                  }//end of "if (ucMode_Times & 0x01)"        
                              }//end of "if (0x03 == (ucAV_Mode & 0x03)) else"
                          }//end of "Non Lock color
                      }//end of "Check Lock Color"
                  }//end of "if (0==(Data[0] & 0x40))"
                  else
                  {   
                      // Non Horizontal Lock
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 17  

                      ucAV_Mode   = 0;
                      
                      if (ucMode_Found != MODE_NOSUPPORT)
                      {
                          ucMode_Found    = MODE_NOSUPPORT;
                          ucMode_Times    = 0;
                      }
                  }
                  
                  //-------------Check result--------------
                  if (MODE_NOSUPPORT != ucMode_Found)
                  {   
                      if (VIDEO_SEARCH_TIMES < ucMode_Times)
                      {
              
                          bLIGHT_PWR  = LIGHT_OFF;        // Turn off BackLight for reset display
                          
                          RTDSetByte(HOSTCTRL_02, 0x40);  // Wake RTD up
                          RTDOSDW(OSD_Reset);            // Clear OSD
                          
                          if (SOURCE_YUV == (stGUD1.INPUT_SOURCE & 0x07))
                              ucMode_Curr = (ucAV_Mode & 0x02) ? MODE_YUV50HZ : MODE_YUV60HZ;
                          else
                              ucMode_Curr = ucMode_Found;
                                  
                          ucMode_Times    = 0;
                          bStable         = 0;            // bStable must be cleared when mode changed
              
                          Display_Video_Set();            
                      }
                  }
                  else
                  {
                      ucMode_Times ++;
                      
                      if (ucAV_Mode)
                      {
                          // Force to display although we cannot lock color
                          if (VIDEO_SEARCH_TIMES < ucMode_Times 
                              && (NO_COLOR_TIMES < ucMode_Times || SOURCE_YUV == (stGUD1.INPUT_SOURCE & 0x07)))
                          {
              
                              bLIGHT_PWR  = LIGHT_OFF;        // Turn off BackLight for reset display
              
                              RTDSetByte(HOSTCTRL_02, 0x40);  // Wake RTD up
                              RTDOSDW(OSD_Reset);            // Clear OSD
                              
                              ucAV_Mode       = (ucAV_Mode & 0x02) ? 0x82 : 0x81;
              
                              if (SOURCE_YUV != (stGUD1.INPUT_SOURCE & 0x07))
                                  ucMode_Curr = (ucAV_Mode & 0x02) ? MODE_VIDEO50HZ : MODE_VIDEO60HZ;
                              else
                                  ucMode_Curr = (ucAV_Mode & 0x02) ? MODE_YUV50HZ : MODE_YUV60HZ;
              
                              ucMode_Times    = 0;
                              bStable         = 0;    // bStable must be cleared when mode changed
              
                              Display_Video_Set();
                          }
                      }
                      else
                      {
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 18  

                          if (NO_MODE_TIMES < ucMode_Times)
                          {
                              bStable         = 1;    // Set bStable to 1 when signal timing is stable.
              
                              ucMode_Times    = NO_MODE_TIMES - 1;
                          }
                      }
                  }
              #else
1046   1          Display_Video_Set();
1047   1      #endif
1048   1      }
1049          
1050          
1051          //-------------------  Check AV Mode  -------------------//
1052          void Check_Video_Mode(void)
1053          {   
1054   1      #if(VIDEO_CHIP != VDC_NONE)
                  I2CRead(ADDR_VIDEO, 0x1f, 0x01);
                  
                  // Check color
                  if (0 == (ucAV_Mode & 0x80))
                  {
                      if (0 == (Data[0] & 0x01))      ucMode_Curr = MODE_NOSIGNAL;    // Color standard changed
                  }
                  else
                  {
                      if (0 == (Data[0] & 0x01))
                      {
                          ucMode_Times    = 0;
                      }
                      else
                      {
                          // When we cannot lock color, we set color standard to PAL-BDGHI if field rate is 50Hz, 
                          // and to NTSC-M if it is 60Hz.
                          // If we find color is locked, we should update ucAV_Mode to indicate we now get color.
                          if (VIDEO_SEARCH_TIMES < ++ucMode_Times)    ucAV_Mode = ucAV_Mode & 0x0f;
                      }
                  }
              
                  // Check field rate
                  if (Data[0] & 0x40)
                  {
                      ucMode_Curr = MODE_NOSIGNAL;
                  }
                  else
                  {
                      if (ucAV_Mode & 0x02)       // 50Hz
                      {   
                          if (0x00 != (Data[0] & 0x20))   ucMode_Curr = MODE_NOSIGNAL;
                      } 
                      else                        // 60Hz
                      {
                          if (0x00 == (Data[0] & 0x20))   ucMode_Curr = MODE_NOSIGNAL;
                      }
                  }
                 
                  // Check result
                  if (MODE_NOSIGNAL == ucMode_Curr)
                      Reset_Mode();
                  else
                      bStable = 1;    // Set bStable to 1 when signal timing is stable.
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 19  

              #endif
1100   1      }
1101          
1102          
1103          void Calculate_IVS2DVS_Delay(unsigned char integer, unsigned char fraction, unsigned int DVStart)
1104          {
1105   1             if ((usIPV_ACT_STA + integer) < (DVStart >> 6))
1106   1              {
1107   2                  // You should never get into this code ....
1108   2                  usIPV_ACT_STA   = ( DVStart >> 6) - integer;
1109   2      
1110   2                  RTDSetByte(IPV_ACT_STA_0A, (unsigned char)usIPV_ACT_STA);
1111   2                  RTDSetByte(IPV_ACT_STA_0A + 1, (unsigned char)(usIPV_ACT_STA >> 8));
1112   2              }
1113   1      
1114   1              ((unsigned int*)Data)[0] = ((usIPV_ACT_STA + integer) << 6) + ((unsigned int)fraction << 6)/10 - D
             -VStart;
1115   1      
1116   1              
1117   1                      ucDV_Delay = (unsigned char)(((unsigned int*)Data)[0] >> 6);
1118   1      
1119   1                      Data[6] = ((unsigned int*)Data)[0] - (ucDV_Delay << 6);
1120   1      
1121   1                      Data[6] = (unsigned long)usADC_Clock * Data[6] / 1024;//512;
1122   1      
1123   1                      RTDSetByte(FS_FT_DELAY_1E, Data[6]);
1124   1      
1125   1             
1126   1      }
1127          
1128          void Set_Dclk(unsigned int DispLen)
1129          {
1130   1          if (Mode_Preset[ucMode_Curr][3])
1131   1          {
1132   2              // Use preset DCLK M/N code
1133   2              Data[0] = 6;
1134   2              Data[1] = Y_INC;
1135   2              Data[2] = DPLL_CTRL_D0;
1136   2              Data[3] = 0x11;
1137   2              Data[4] = (unsigned char)(Mode_Preset[ucMode_Curr][3] >> 8);
1138   2              Data[5] = (unsigned char)Mode_Preset[ucMode_Curr][3];
1139   2              Data[6] = 0;
1140   2              RTDWrite(Data);
1141   2          }
1142   1          else
1143   1          {
1144   2           
1145   2      //        if (VGA_Mode[ucMode_Curr][4])
1146   2      //        {
1147   2      //            ((unsigned int *)Data)[0]   = (unsigned long)8 * usDH_Total * USER_MODE_NCODE * usDispLen 
1148   2      //                                        / ((unsigned long)usIPV_ACT_LEN * VGA_Mode[ucMode_Curr][4]);
1149   2      //        }
1150   2      //        else
1151   2      //        {
1152   2      
1153   2                  ((unsigned int *)Data)[0]   = (unsigned long)8 * usDH_Total * USER_MODE_NCODE * DispLen 
1154   2                                              / ((unsigned long)usIPV_ACT_LEN * usHsync);
1155   2      //        }
1156   2      
1157   2      
1158   2              //Original Formula : DPM/Ich = 17.6 must be constant
1159   2                      //Ich = DPM * 10 / 176
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 20  

1160   2                      //2*Ich = DPM * 20 / 176 , set D0[0] to 0, then I = 2 * Ich
1161   2                      //I  = 2 * Ich = 2.5u + D0[3]*2.5u + D0[4]*5u + D0[5]*10u + D0[6]*20u + D0[7]*30u(A)
1162   2                      //2I = 4 * Ich = 5u + D0[3]*5u + D0[4]*10u + D0[5]*20u + D0[6]*40u + D0[7]*60u(A)
1163   2              Data[15] = ((unsigned int *)Data)[0] >> 2;
1164   2                      Data[5] = (unsigned int)Data[15] * 40 / 176 - 5; //Calculate the 4*Ich,
1165   2                      Data[6] = 0x00;
1166   2                      if(Data[5] > 60)
1167   2                      {
1168   3                          Data[5] -= 60;
1169   3                              Data[6] |= 0x80; 
1170   3                      }
1171   2      
1172   2                      if(Data[5] > 40)
1173   2                      {
1174   3                          Data[5] -= 40;
1175   3                              Data[6] |= 0x40;
1176   3                      }
1177   2                       
1178   2                  if(Data[5] > 20)
1179   2                      {
1180   3                          Data[5] -= 20;
1181   3                              Data[6] |= 0x20;
1182   3                      }
1183   2      
1184   2                      if(Data[5] > 10)
1185   2                      {
1186   3                          Data[5] -= 10;
1187   3                              Data[6] |= 0x10;
1188   3                      }
1189   2      
1190   2                      if(Data[5] > 5)
1191   2                      {
1192   3                          Data[5] -= 5;
1193   3                              Data[6] |= 0x08;
1194   3                      }
1195   2                      
1196   2      
1197   2                      Data[0] = 7;
1198   2                      Data[1] = Y_INC;
1199   2                      Data[2] = DPLL_CTRL_D0;
1200   2                      Data[3] = Data[6];
1201   2                      Data[4] = Data[15] - 2;
1202   2                      Data[5] = 0x10 | (USER_MODE_NCODE - 2);//Offset Frequency Direction set to Downward
1203   2                      //Data[5] = (USER_MODE_NCODE - 2);//Offset Frequency Direction set to Downward
1204   2                      Data[6] = 0x04;
1205   2                      Data[7] = 0;
1206   2                      RTDWrite(Data);
1207   2      
1208   2       
1209   2      //        ucDebug_Value0 = Data[4];
1210   2         //     ucDebug_Value1 = Data[5];
1211   2             
1212   2              //More precise Dclk in KHz
1213   2                      ((unsigned long*)Data)[0] = (unsigned long)24576000 / usIPV_ACT_LEN * DispLen / usHsync * usDH_Total ;
1214   2              //((unsigned long*)Data)[0] = (unsigned long)49152000 / usIPV_ACT_LEN * usDispLen / usHsync * usDH
             -_Total ;
1215   2                      //set M/N code Dclk
1216   2                      ((unsigned long*)Data)[1] = (unsigned long)12288000 * (Data[15] + 1) / USER_MODE_NCODE;
1217   2              //((unsigned long*)Data)[1] = (unsigned long)24576000 * (Data[15] + 1) / USER_MODE_NCODE;
1218   2                      ((unsigned long*)Data)[2] = ((unsigned long*)Data)[1] - ((unsigned long*)Data)[0]; //Dclk offset
1219   2                      ((unsigned long*)Data)[3] = ((unsigned long*)Data)[1] >> 15; //Offset resolution equal to (Dclk / 2^15)
1220   2              
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 21  

1221   2                      ((unsigned long*)Data)[3] = ((((unsigned long*)Data)[2] << 1)/ ((unsigned long*)Data)[3]) & 0x00000fff; 
             -//Calculate the Dclk offset
1222   2              //((unsigned long*)Data)[3] = (((unsigned long*)Data)[2] / ((unsigned long*)Data)[3]) & 0x00000fff
             -; //Calculate the Dclk offset
1223   2      
1224   2                      RTDSetByte(DCLK_OFFSET_LSB_9A,(unsigned char)((unsigned long*)Data)[3]);  //Set the Dclk offset
1225   2      //        ucDebug_Value0 = (unsigned char)(((unsigned long*)Data)[3]);
1226   2                      //RTDSetBit(DCLK_OFFSET_MSB_9B,0xf0,(unsigned char)(((unsigned long*)Data)[3] >> 8) | 0x20);
1227   2                      RTDSetBit(DCLK_OFFSET_MSB_9B,0xf0,(unsigned char)(((unsigned long*)Data)[3] >> 8) | 0x20);
1228   2      //        ucDebug_Value1 = (unsigned char)((((unsigned long*)Data)[3] >> 8) | 0x20);
1229   2              RTDSetBit(FX_LST_LEN_H_5A,0xff,0x08); //Enable DDS Spread Spectrum Output Function
1230   2                      RTDSetBit(DPLL_N_D2,0xff,0x20); //DPLL Spread Spectrum Enable
1231   2                      RTDSetBit(DPLL_FILTER_D3,0x7f,0x00); //Enable DPll output
1232   2              }
1233   1      }
1234          
1235          void Initial_Mode(void)
1236          {
1237   1          unsigned char   ucOption;
1238   1          unsigned int    usDispLen;
1239   1      
1240   1          // bit 7 of ucMode_Curr : partial-V display.
1241   1          // bit 6 of ucMode_Curr : select 720x350 or 720x400 for VGA-50Hz and VGA-60Hz
1242   1          ucOption    = ucMode_Curr & 0xc0;
1243   1          ucMode_Curr = ucMode_Curr & 0x3f;
1244   1      
1245   1          
1246   1              RTDSetBit(SD_CTRL_70, 0xf9, VGA_ICLK_DELAY);
1247   1          if (SOURCE_DVI == (stGUD1.INPUT_SOURCE & 0x07))
1248   1          {
1249   2              RTDSetBit(SD_CTRL_70, 0xf9, TMDS_ICLK_DELAY);
1250   2      
1251   2              usIPH_ACT_STA   = CAP_WIN[ucMode_Curr][1];
1252   2          }
1253   1          else
1254   1          {
1255   2      
1256   2              if (ucOption & 0x40)
1257   2              {
1258   3                      // Only VGA-50Hz and VGA-60Hz mode will set bit 6 of ucMode_Curr to indicate 720-pixel capture width
1259   3                      // In these case, we should use 720 horizontal settings instead of 640 horizontal settings in table.
1260   3                      usADC_Clock     = CAP_WIN[MODE_0720x0400x70HZ][0];
1261   3                      usIPH_ACT_STA   = CAP_WIN[MODE_0720x0400x70HZ][1];
1262   3                      usIPH_ACT_WID   = CAP_WIN[MODE_0720x0400x70HZ][2];
1263   3              }
1264   2              else
1265   2              {
1266   3                      usADC_Clock     = CAP_WIN[ucMode_Curr][0];
1267   3                      usIPH_ACT_STA   = CAP_WIN[ucMode_Curr][1];
1268   3                      usIPH_ACT_WID   = CAP_WIN[ucMode_Curr][2];
1269   3      
1270   3                      // Calculate pixel clock rate (round to MHz)
1271   3                      usDispLen   = (unsigned long)24576 * usADC_Clock / ((unsigned long)usHsync * 500);
1272   3                      usDispLen   = (usDispLen >> 1) + (usDispLen & 0x01);
1273   3      
1274   3                      // Use ADC to do H scale-down if pixel clock rate is over spec.
1275   3                      if (MAX_ADC_FREQ < usDispLen && MODE_USER1152x864 <= ucMode_Curr && MODE_USER1600x1200 >= ucMode_Curr)
1276   3                      {
1277   4                              usADC_Clock     = ADC_SD_SET[ucMode_Curr - MODE_USER1152x864][0];
1278   4                              usIPH_ACT_STA   = ADC_SD_SET[ucMode_Curr - MODE_USER1152x864][1];
1279   4                              usIPH_ACT_WID   = ADC_SD_SET[ucMode_Curr - MODE_USER1152x864][2];
1280   4                      }
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 22  

1281   3      
1282   3              } //if (ucOption & 0x40)
1283   2      
1284   2              // Calculate pixel clock rate (round to MHz)
1285   2              usDispLen   = (unsigned long)24576 * usADC_Clock / ((unsigned long)usHsync * 500);
1286   2              usDispLen   = (usDispLen >> 1) + (usDispLen & 0x01);
1287   2      
1288   2      
1289   2              // To improve ADC performance ,when the data rate is slow, use single channel,otherwise, use dual channel
1290   2              RTDSetBit(ADC_REG_CLK_EA,0xe0,(45 > usDispLen) ? 0x10 | (ADC_RED_PHASE_FT & 0x0c) |( ADC_BLUE_PHASE_FT & 
             -0x03): 
1291   2                                                               0x00 | (ADC_RED_PHASE_FT & 0x0c) |( ADC_BLUE_PHASE_FT & 
             -0x03)); 
1292   2      
1293   2      
1294   2              // To imporve the FIFO efficiency only when input data rate is slow, and display data rate is high.
1295   2      //      RTDSetBit(VGIP_CTRL_04, 0xe3, (40 > usDispLen) ? 0x14 : 0x00);
1296   2          RTDSetBit(VGIP_CTRL_04, 0xf3, (60 > usDispLen) ? 0x08 : 0x00);
1297   2      
1298   2              RTDSetByte(PE_CONTROL_3C, 0x00);    // HSYNC positive/negtive tracking
1299   2              
1300   2          RTDSetByte(ADC_FRAME_MODULE_EB,0x06);
1301   2      //  RTDSetByte(ADC_FRAME_MODULE_EB,(usIPH_ACT_WID == 1280) ? 0x04 : 0x00);
1302   2      
1303   2      
1304   2        // Set ADC bandwidth to reduce high frequency noise
1305   2      //  RTDSetByte(ADC_REG_TEST_E9, (35 > usDispLen) ? 0x08 : (150 > usDispLen) ? 0x10 : 0x18);
1306   2              
1307   2      
1308   2      
1309   2      #if(ADC_DEFFERENTIAL)
1310   2          RTDSetBit(ADC_DIFF_MODE_EC,0xff,0x40); //Differential mode
1311   2      #else
                  RTDSetBit(ADC_DIFF_MODE_EC,0xbf,0x00); //Single endded mode
              #endif
1314   2      
1315   2      
1316   2      
1317   2      
1318   2              RTDSetByte(ADC_REG_CUR_H_E8, 0x0d | (ADC_GREEN_PHASE_FT & 0x30));
1319   2      
1320   2      
1321   2      
1322   2          RTDSetBit(ADC_FRAME_MODULE_EB,0xc7, ((ADC_RED_PHASE_FT & 0x10) << 1) | ((ADC_GREEN_PHASE_FT & 0x40) <<
             - 2) 
1323   2                                                 |((ADC_BLUE_PHASE_FT & 0x04) << 1));
1324   2      
1325   2      
1326   2      
1327   2          RTDSetBit(TMDS_CORRECTION_FF,0xff,0x04); //Enable the ADC digital filter
1328   2      
1329   2      
1330   2          if(ucMode_Curr < MODE_1024x0768x70HZ)
1331   2              RTDSetByte(ADC_REG_TEST_E9, 0x08);
1332   2          else 
1333   2              RTDSetByte(ADC_REG_TEST_E9, 0x10);
1334   2      
1335   2      
1336   2              // Get usIPV_ACT_LEN
1337   2              if (MODE_UNDEFINED0 > ucMode_Curr)
1338   2              {
1339   3                      // We've already decided usIPV_ACT_LEN in Detect_VGA_Mode() for undefined SU/SD mode.
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 23  

1340   3                      // Only defined modes need to decide usIPV_ACT_LEN here.
1341   3                      usIPV_ACT_LEN   = CAP_WIN[ucMode_Curr][4];
1342   3              }
1343   2          
1344   2          } //if (SOURCE_DVI == (stGUD1.INPUT_SOURCE & 0x07))
1345   1      
1346   1          // Get standard usIPV_ACT_STA 
1347   1      
1348   1          RTDSetByte(IVS_DELAY_8C, PROGRAM_VDELAY);
1349   1      
1350   1          usIPV_ACT_STA   = CAP_WIN[ucMode_Curr][3] - PROGRAM_VDELAY - 1;
1351   1      
1352   1      
1353   1          RTDSetByte(IHS_DELAY_8D, PROGRAM_HDELAY);
1354   1      
1355   1      //    usIPH_ACT_STA   = usIPH_ACT_STA + CAPTURE_HDELAY - PROGRAM_HDELAY;
1356   1          if(ucMode_Curr < MODE_0800x0600x75HZ)
1357   1                      Data[0] = 2;
1358   1          else if(ucMode_Curr < MODE_1280x1024x75HZ)
1359   1                      Data[0] = 5;
1360   1          else
1361   1                      Data[0] = 3;
1362   1      
1363   1      //    Data[0] = 5;
1364   1          usIPH_ACT_STA   = usIPH_ACT_STA + Data[0] - PROGRAM_HDELAY;
1365   1      
1366   1          // Decide display length (height) and store to usDispLen
1367   1      
1368   1          usDispLen   = Mode_Preset[ucMode_Curr][2];
1369   1      
1370   1          if (MODE_UNDEFINED0 == ucMode_Curr)         // partical-screen scale-up mode
1371   1          {
1372   2              if (ucOption & 0x80)    // partial-V
1373   2              {           
1374   3                              if (MIN_DV_TOTAL > (usVsync - 1))
1375   3                      usDispLen   = (unsigned long)usIPV_ACT_LEN * MIN_DV_TOTAL / (usVsync - 1);
1376   3                  else
1377   3                      usDispLen   = usIPV_ACT_LEN;    // No V scale-up
1378   3              }
1379   2          }
1380   1          else if (MODE_UNDEFINED1 == ucMode_Curr)    // partial-screen scale-down mode
1381   1          {
1382   2              if (ucOption & 0x80)    // partial-V
1383   2              {
1384   3                  usDispLen   = (unsigned long)usIPV_ACT_LEN * MIN_DV_TOTAL / (usVsync - 1);
1385   3              }
1386   2          } //if (MODE_UNDEFINED0 == ucMode_Curr)         // partical-screen scale-up mode
1387   1      
1388   1          if (Mode_Preset[ucMode_Curr][2] < usDispLen)    usDispLen   = Mode_Preset[ucMode_Curr][2];
1389   1      
1390   1          // This F/W do not support V scale-up(or bypass) and H scale-down simultaneously
1391   1          if (usDispLen >= usIPV_ACT_LEN && Mode_Preset[ucMode_Curr][1] < usIPH_ACT_WID)
1392   1          {
1393   2              usIPH_ACT_WID   = Mode_Preset[ucMode_Curr][1];
1394   2          }
1395   1      
1396   1          if (usDispLen > usIPV_ACT_LEN)                      ucOption    |= 0x01;    // bit 0 : V scale-up
1397   1          if (usDispLen < usIPV_ACT_LEN)                      ucOption    |= 0x02;    // bit 1 : V scale-down
1398   1          if (Mode_Preset[ucMode_Curr][1] > usIPH_ACT_WID)    ucOption    |= 0x04;    // bit 2 : H scale-up
1399   1          if (Mode_Preset[ucMode_Curr][1] < usIPH_ACT_WID)    ucOption    |= 0x08;    // bit 3 : H scale-down
1400   1      
1401   1          // Set capture window
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 24  

1402   1          Data[0]     = 11;
1403   1          Data[1]     = Y_INC;
1404   1          Data[2]     = IPH_ACT_STA_06;
1405   1          Data[3]     = (unsigned char)usIPH_ACT_STA;
1406   1          Data[4]     = (unsigned char)(usIPH_ACT_STA >> 8);
1407   1          Data[5]     = (unsigned char)usIPH_ACT_WID;
1408   1          Data[6]     = (unsigned char)(usIPH_ACT_WID >> 8);
1409   1          Data[7]     = (unsigned char)usIPV_ACT_STA;
1410   1          Data[8]     = (unsigned char)(usIPV_ACT_STA >> 8);
1411   1          Data[9]     = (unsigned char)usIPV_ACT_LEN;
1412   1          Data[10]    = (unsigned char)(usIPV_ACT_LEN >> 8);
1413   1          Data[11]    = 0;
1414   1          RTDWrite(Data);
1415   1      
1416   1          // Set window size before scale-up
1417   1          Data[0] = 7;
1418   1          Data[1] = Y_INC;
1419   1          Data[2] = DRW_BSU_40;
1420   1      
1421   1          if (ucOption & 0x08)
1422   1          {
1423   2              // H scale-down
1424   2              Data[3] = (unsigned char)Mode_Preset[ucMode_Curr][1];
1425   2              Data[4] = (unsigned char)(Mode_Preset[ucMode_Curr][1] >> 8);
1426   2          }
1427   1          else
1428   1          {
1429   2              // No H scale-down
1430   2              Data[3] = Data[5];  // (unsigned char)usIPH_ACT_WID;
1431   2              Data[4] = Data[6];  // (unsigned char)(usIPH_ACT_WID >> 8);
1432   2          }
1433   1      
1434   1          if (ucOption & 0x02)
1435   1          {
1436   2              // V scale-down
1437   2              Data[5] = (unsigned char)usDispLen;
1438   2              Data[6] = (unsigned char)(usDispLen >> 8);
1439   2          }
1440   1          else
1441   1          {
1442   2              // No V scale-down
1443   2              Data[5] = Data[9];  // (unsigned char)usIPV_ACT_LEN;
1444   2              Data[6] = Data[10]; // (unsigned char)(usIPV_ACT_LEN >> 8);
1445   2          }
1446   1          Data[7] = 0;
1447   1          RTDWrite(Data);
1448   1      
1449   1          // Config scaling
1450   1          if (ucOption & 0x0a)
1451   1              RTDSetBit(SD_CTRL_70, 0xff, 0x01);      // Turn on scale-down
1452   1          else
1453   1              RTDSetBit(SD_CTRL_70, 0xfe, 0x00);      // Turn off scale-down
1454   1      
1455   1          if (ucOption & 0x01)
1456   1              RTDSetBit(SCALE_CTRL_15, 0xff, 0x02);   // Turn on V scale-up
1457   1          else
1458   1              RTDSetBit(SCALE_CTRL_15, 0xfd, 0x00);   // Turn off V scale-up
1459   1      
1460   1          if (ucOption & 0x04)
1461   1              RTDSetBit(SCALE_CTRL_15, 0xff, 0x01);   // Turn on H scale-up
1462   1          else
1463   1              RTDSetBit(SCALE_CTRL_15, 0xfe, 0x00);   // Turn off H scale-up
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 25  

1464   1      
1465   1          // Set scale-down coefficient
1466   1          Data[0] = 7;
1467   1          Data[1] = Y_INC;
1468   1          Data[2] = H_SCALE_DL_71;
1469   1      
1470   1          if (ucOption & 0x08)    // H scale-down
1471   1          {
1472   2              // Data[12~15]
1473   2              ((unsigned long *)Data)[3]  = (unsigned long)256 * 4096 * usIPH_ACT_WID / Mode_Preset[ucMode_Curr]
             -[1];
1474   2      
1475   2              // Data[4~5]
1476   2              ((unsigned int *)Data)[2]   = (((unsigned long *)Data)[3] >> 8) + 2;
1477   2      
1478   2              // H scale-down factor is stored in Data[4] (high-byte) and Data[5] (low-byte)
1479   2              Data[3] = Data[5];
1480   2      
1481   2              RTDSetBit(VGIP_CTRL_04, 0xff, 0x40);    // Enable H scale-down compensation
1482   2          }
1483   1          else
1484   1          {
1485   2              Data[3] = 0x00;
1486   2              Data[4] = 0x10;
1487   2      
1488   2              RTDSetBit(VGIP_CTRL_04, 0xbf, 0x00);    // Diable H scale-down compensation
1489   2          }
1490   1      
1491   1          if (ucOption & 0x02)    // V scale-down
1492   1          {
1493   2              // Data[12~15]
1494   2              ((unsigned long *)Data)[3]  = (unsigned long)256 * 4096 * usIPV_ACT_LEN / usDispLen;
1495   2      
1496   2              // Data[6~7]
1497   2              ((unsigned int *)Data)[3]   = (((unsigned long *)Data)[3] >> 8);
1498   2      
1499   2              if (0 == Data[15])      ((unsigned int *)Data)[3]   = ((unsigned int *)Data)[3] - 1;
1500   2      
1501   2              // V scale-down factor is stored in Data[6] (high-byte) and Data[7] (low-byte)
1502   2              Data[5] = Data[7];
1503   2      
1504   2              RTDSetBit(VGIP_CTRL_04, 0xff, 0x80);    // Enable V scale-down compensation
1505   2          }
1506   1          else
1507   1          {
1508   2              Data[5] = 0x00;
1509   2              Data[6] = 0x10;
1510   2      
1511   2              RTDSetBit(VGIP_CTRL_04, 0x7f, 0x00);    // Diable V scale-down compensation
1512   2          }
1513   1          Data[7] = 0;
1514   1          RTDWrite(Data);
1515   1      
1516   1          // Set scale-up coefficient
1517   1          Data[0] = 8;
1518   1          Data[1] = Y_INC;
1519   1          Data[2] = HOR_SCA_16;
1520   1      
1521   1          if (ucOption & 0x04)    // H scale-up
1522   1          {
1523   2              // Data[12~15]
1524   2              ((unsigned long *)Data)[3]  = (unsigned long)2 * 262144 * usIPH_ACT_WID / Mode_Preset[ucMode_Curr]
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 26  

             -[1];
1525   2              ((unsigned long *)Data)[3]  = ((((unsigned long *)Data)[3] >> 1) + (((unsigned long *)Data)[3] & 0
             -x01)) << 6;
1526   2      
1527   2              Data[3] = Data[14];
1528   2              Data[4] = Data[13];
1529   2              Data[7] = Data[15];
1530   2          }
1531   1          else
1532   1          {
1533   2              Data[3] = 0xff;
1534   2              Data[4] = 0xff;
1535   2              Data[7] = 0;
1536   2          }
1537   1      
1538   1          if (ucOption & 0x01)    // V scale-up
1539   1          {
1540   2              // Data[12~15]
1541   2              ((unsigned long *)Data)[3]  = (unsigned long)2 * 262144 * usIPV_ACT_LEN / usDispLen;
1542   2              ((unsigned long *)Data)[3]  = ((((unsigned long *)Data)[3] >> 1) + (((unsigned long *)Data)[3] & 0
             -x01)) << 6;
1543   2      
1544   2              Data[5] = Data[14];                     //anson 05_0315
1545   2      //        Data[5] = 0x90;
1546   2              Data[6] = Data[13];
1547   2      //        Data[6] = 0xc0;
1548   2              Data[7] = Data[7] | (Data[15] >> 4);
1549   2          }
1550   1          else
1551   1          {
1552   2              Data[5] = 0xff;
1553   2              Data[6] = 0xff;
1554   2          }
1555   1          Data[8] = 0;
1556   1          RTDWrite(Data);
1557   1      
1558   1          // Set RTD display
1559   1      
1560   1          // Switch to FrameSync 1 mode and diable display
1561   1          RTDSetByte(VDIS_CTRL_20, 0x28 | DISP_BIT | DISPLAY_PORT);
1562   1      
1563   1          Data[0]     = 5;
1564   1          Data[1]     = Y_INC;
1565   1      
1566   1      #if (DISP_ALIGN)
              
                  Data[2]     = DH_ACT_STA_27;
              
                  // DH_ACT_STA store in Data[4~5] (H~L)
                  ((unsigned int *)Data)[2]   = (unsigned int)DH_ACT_END_POS - Mode_Preset[ucMode_Curr][1];
              
                  Data[3]     = Data[5];
              
              #else
1576   1      
1577   1          Data[2]     = DH_ACT_END_29;
1578   1      
1579   1          // DH_ACT_STA store in Data[4~5] (H~L)
1580   1          ((unsigned int *)Data)[2]   = (unsigned int)DH_ACT_STA_POS + Mode_Preset[ucMode_Curr][1];
1581   1      
1582   1          Data[3]     = Data[5];
1583   1      
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 27  

1584   1      #endif
1585   1      
1586   1          Data[5]     = 5;
1587   1          Data[6]     = Y_INC;
1588   1          Data[7]     = DV_ACT_END_34;
1589   1      
1590   1          // DV_ACT_END store in Data[10~11] (H~L)
1591   1          ((unsigned int *)Data)[5]   = (unsigned int)DV_ACT_STA_POS + usDispLen;
1592   1      
1593   1          Data[8]     = Data[11];
1594   1          Data[9]     = Data[10];
1595   1          Data[10]    = 0;
1596   1          RTDWrite(Data);
1597   1      
1598   1          // Get standard DH_TOTAL
1599   1          usDH_Total  = Mode_Preset[ucMode_Curr][0];
1600   1      
1601   1          // Switch to FrameSync 1 mode and enable display
1602   1      //    if (PANEL_OFF == bPANEL_PWR)
1603   1          if (_OFF == bPanel_Status)
1604   1              RTDSetByte(VDIS_CTRL_20, 0x29 | DISP_BIT | DISPLAY_PORT);
1605   1          else
1606   1              RTDSetByte(VDIS_CTRL_20, 0x2b | DISP_BIT | DISPLAY_PORT);
1607   1      
1608   1              Set_Dclk(usDispLen);
1609   1         
1610   1          //usDH_Total  = usDH_Total - 2;
1611   1      
1612   1          // Set DH_TOTAL
1613   1          Data[0] = 5;
1614   1          Data[1] = Y_INC;
1615   1          Data[2] = DH_TOTAL_22;
1616   1          Data[3] = (unsigned char)(usDH_Total - 2);
1617   1          Data[4] = (unsigned char)((usDH_Total - 2) >> 8);
1618   1          Data[5] = 0;
1619   1          RTDWrite(Data);
1620   1      
1621   1      
1622   1      
1623   1          //Calculate DV_TOTAL
1624   1              if((ucOption & 0x01) || (ucOption & 0x02))    // V scale up or scale down
1625   1              {
1626   2      
1627   2      #if(DISP_SIZE == DISP_800x600)          
                                      usDV_Total = (unsigned long)usVsync * 600 / (unsigned long)usIPV_ACT_LEN + 64;
              #endif
1630   2      
1631   2      #if(DISP_SIZE == DISP_1024x768)         
                                      usDV_Total = (unsigned long)usVsync * 768 / (unsigned long)usIPV_ACT_LEN + 64;
              #endif
1634   2      
1635   2      #if(DISP_SIZE == DISP_1280x1024)                
1636   2      
1637   2                              usDV_Total = (unsigned long)usVsync * 1024 / (unsigned long)usIPV_ACT_LEN + 64;
1638   2      #endif
1639   2                      
1640   2                      
1641   2              }
1642   1              else
1643   1                      usDV_Total = usVsync + 64;
1644   1      
1645   1          //Set DV_TOTAL
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 28  

1646   1              Data[0] = 5;
1647   1              Data[1] = Y_INC;
1648   1              Data[2] = DV_TOTAL_2D;
1649   1              Data[3] = (unsigned char)usDV_Total;
1650   1              Data[4] = (unsigned char)((usDV_Total >> 8) & 0x07);
1651   1              Data[5] = 0;
1652   1              RTDWrite(Data);
1653   1      
1654   1      
1655   1      
1656   1      
1657   1          // Calculate suitable IVS to DVS delay
1658   1          // CR[38] : IVS to DVS delay in IHS lines
1659   1          // CR[1E] : IVS to DVS delay in ICLK * 16
1660   1          //((unsigned int *)Data)[0]   = (unsigned long)64 * DV_ACT_STA_POS * usIPV_ACT_LEN / usDispLen;
1661   1              ((unsigned int *)Data)[0]   = (unsigned long)64 * DV_ACT_STA_POS * usIPV_ACT_LEN / usDispLen;
1662   1      
1663   1          if (ucOption & 0x01)
1664   1          {
1665   2                  Calculate_IVS2DVS_Delay(2,5,((unsigned int*)Data)[0]);  // V scale-up. Target 2.5~2.6 IHS delay
1666   2      
1667   2          }
1668   1          else
1669   1          {
1670   2      #if (FULL_LINE_BUFFER)
                      Calculate_IVS2DVS_Delay(3,8,((unsigned int*)Data)[0]);  // V no scale-up. Target 3.8~4.0 IHS delay
              #else
1673   2              if (ucOption & 0x02)
1674   2              {
1675   3                          // V scale-down            
1676   3                          Calculate_IVS2DVS_Delay(2,6,((unsigned int*)Data)[0]);   // V scale-down. Target 2.5~2.6 IHS delay
1677   3                      }
1678   2              else
1679   2              {
1680   3      
1681   3                  Calculate_IVS2DVS_Delay(1,9,((unsigned int*)Data)[0]);                  // V no scale-up. Targ
             -et 1.9 IHS delay
1682   3              }
1683   2      
1684   2      #endif
1685   2          }
1686   1      
1687   1      #if (FULL_LINE_BUFFER)
                  // Turn on full-line buffer when no V scale-up
                  RTDSetBit(OP_CRC_CTRL_68, 0xfc, (ucOption & 0x01) ? 0x00 : 0x02);
              #else
1691   1          RTDSetBit(OP_CRC_CTRL_68, 0xfc, 0x00);
1692   1      #endif
1693   1      
1694   1          // Set ucDV_Delay
1695   1          RTDSetByte(IV_DV_LINES_38, ucDV_Delay);
1696   1      
1697   1              RTDSetByte(STATUS0_01, 0x00);  // Clear status
1698   1          RTDSetByte(STATUS1_1F, 0x00);  // Clear status
1699   1      
1700   1          // Switch to FrameSync 1 mode and enable display
1701   1      //    if (PANEL_OFF == bPANEL_PWR)
1702   1      //        RTDSetByte(VDIS_CTRL_20, 0x29 | DISP_BIT | DISPLAY_PORT);
1703   1      //    else
1704   1      //        RTDSetByte(VDIS_CTRL_20, 0x2b | DISP_BIT | DISPLAY_PORT);
1705   1      
1706   1          // Input Run Enable
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 29  

1707   1          RTDSetBit(VGIP_CTRL_04, 0xff, 0x01);
1708   1      
1709   1      }
1710          
1711          void Display_VGA_Set(void)
1712          {
1713   1          unsigned char   Wait_Time_Cnt;
1714   1      //      unsigned char   ucI_Corr0,ucI_Corr1;
1715   1      
1716   1      
1717   1          Initial_Mode();
1718   1              Sharpness();
1719   1      
1720   1          if((usIPH_ACT_WID == 1280) && (DISP_SIZE == DISP_1280x1024) && (stGUD1.FILTER == 0x02))
1721   1               RTDSetBit(SCALE_CTRL_15, 0xff, 0x01);   // Turn on H scale-up
1722   1          
1723   1      
1724   1          PowerDown_ADC();
1725   1          //Device_Power(ADC_POWER,OFF);
1726   1      
1727   1          // Set user's ADC gain and offset settings
1728   1          SetADC_GainOffset();
1729   1      
1730   1          Set_Gamma();
1731   1          Set_Dithering();
1732   1          Set_Bright_Contrast();
1733   1      //    Sharpness();
1734   1      
1735   1          Load_MUD(ucMode_Curr);      // Read mode default settings from 24C04
1736   1      
1737   1          // For jitter adjust
1738   1          ucPE_Level      = 0;
1739   1      //    ucPE_Count      = 0;
1740   1      
1741   1          // Check Clock
1742   1          if (28 > stMUD.CLOCK || 228 < stMUD.CLOCK)      stMUD.CLOCK = 128;
1743   1      
1744   1          
1745   1          // Update Clock Twice
1746   1          Set_Clock();
1747   1      // Calculate the P correction and I correction according to the CE value
1748   1          Delay_Xms(6);
1749   1              
1750   1          if(ucCE_Value ==  0)
1751   1          {
1752   2             RTDRead(I_CODE_MB_CA,1,N_INC);
1753   2                 RTDSetByte(I_CODE_MB_CA, 0x0d);
1754   2                 Delay_Xms(4);
1755   2                 RTDRead(PLL_CALIBRATION_CE,1,N_INC);
1756   2                 ucP_Corr = (unsigned char)((unsigned int)(Data[0] * 200) >> (29 - P_Code));
1757   2                 ucCE_Value = Data[0];  //CE value  
1758   2      
1759   2              }
1760   1      
1761   1              if(ucI_Code == 0)
1762   1                 Adjust_I_Code();
1763   1          
1764   1              
1765   1          Set_Clock();
1766   1      
1767   1      
1768   1          // Check Phase
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 30  

1769   1      //    stMUD.PHASE &= 0x7c;    // Phase 0~31
1770   1      
1771   1          // Update Phase
1772   1      //    Set_Phase(stMUD.PHASE);
1773   1      
1774   1          ucH_Max_Margin  = 128 + 50;
1775   1          ucH_Min_Margin  = 128 - 50;
1776   1              
1777   1              //Read the usIPH_ACT_STA offset
1778   1          I2CRead(ADDR_EROM1,(ucMode_Curr - 1),0x01);
1779   1              if(Data[0] > 228)
1780   1                 Data[0] = 0;
1781   1      
1782   1          usIPH_ACT_STA   = (Data[0] & 0x80) ? usIPH_ACT_STA - 50 - (Data[0] - 0x80) : usIPH_ACT_STA + Data[0] -
             - 50;
1783   1              
1784   1          Data[0] = 5;
1785   1          Data[1] = Y_INC;
1786   1          Data[2] = IPH_ACT_STA_06;
1787   1          Data[3] = (unsigned char)usIPH_ACT_STA;
1788   1          Data[4] = (unsigned char)(usIPH_ACT_STA >> 8);
1789   1          Data[5] = 0;    
1790   1          RTDWrite(Data);
1791   1      
1792   1          // Check H-Position
1793   1          if (ucH_Max_Margin < stMUD.H_POSITION)
1794   1              stMUD.H_POSITION    = ucH_Max_Margin;
1795   1          else if (ucH_Min_Margin > stMUD.H_POSITION)
1796   1              stMUD.H_POSITION    = ucH_Min_Margin;
1797   1      
1798   1          // Update H-Position
1799   1          Set_H_Position();
1800   1      
1801   1             // Check Phase
1802   1          stMUD.PHASE &= 0x7c;    // Phase 0~31
1803   1      
1804   1          // Update Phase
1805   1          Set_Phase(stMUD.PHASE);
1806   1      
1807   1          // Start auto-tracking function once
1808   1          RTDSetByte(AUTO_ADJ_CTRL_7F, 0x01);
1809   1          Delay_Xms(40);
1810   1      
1811   1          // Force to stop auto-tracking function
1812   1          RTDSetByte(AUTO_ADJ_CTRL_7F, 0x00);
1813   1          Delay_Xms(40);
1814   1      
1815   1          // Measure actual number of scan line in each frame
1816   1          Data[0]     = 14;
1817   1          Data[1]     = Y_INC;
1818   1          Data[2]     = H_BND_STA_L_75;
1819   1          Data[3]     = 0x00;
1820   1          Data[4]     = 0xff;
1821   1          Data[5]     = 0x07;
1822   1          Data[6]     = 0x00;
1823   1          Data[7]     = 0x00;
1824   1          Data[8]     = 0x00;
1825   1          Data[9]     = 0x00;
1826   1          Data[10]    = 0x00;
1827   1          Data[11]    = 0x00;
1828   1          Data[12]    = 0x00;
1829   1          Data[13]    = 0x01;
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 31  

1830   1          Data[14]    = 0;
1831   1          RTDWrite(Data);
1832   1      
1833   1          Wait_Time_Cnt  = 60;    // Tracking timeout 60ms        
1834   1          do
1835   1          {   
1836   2              Delay_Xms(1);
1837   2              RTDRead(AUTO_ADJ_CTRL_7F, 0x01, N_INC);
1838   2          }
1839   1          while ((Data[0] & 0x01) && (--Wait_Time_Cnt));
1840   1      
1841   1          RTDSetByte(AUTO_ADJ_CTRL_7F, 0x00);
1842   1          
1843   1          if (Wait_Time_Cnt)
1844   1          {
1845   2              RTDRead(VER_START_80, 0x04, Y_INC);
1846   2              Data[0] = Data[3] & 0x0f;
1847   2              Data[1] = Data[2];
1848   2      
1849   2              usVer_End   = (usVsync < ((unsigned int *)Data)[0]) ? ((unsigned int *)Data)[0] : usVsync;
1850   2          }
1851   1          else
1852   1          {
1853   2              usVer_End   = usVsync;
1854   2          }
1855   1      
1856   1          // Update to reasonable usIPV_ACT_STA for user mode
1857   1          if (MODE_USER720x400 <= ucMode_Curr)
1858   1          {
1859   2              ((unsigned int *)Data)[0]   = usVer_End - VGA_Mode[ucMode_Curr][2];
1860   2      
1861   2              if (254 < ((unsigned int *)Data)[0] + ucDV_Delay)   ((unsigned int *)Data)[0]   = 254 - ucDV_Delay
             -;
1862   2      
1863   2              usIPV_ACT_STA   += ((unsigned int *)Data)[0];
1864   2              ucDV_Delay      += ((unsigned int *)Data)[0];
1865   2          }
1866   1      
1867   1          // Set the ucV_Min_Margin/ucV_Max_Margin
1868   1          ucV_Min_Margin  = (128 < usIPV_ACT_STA) ? 0 : 128 - usIPV_ACT_STA + 1;
1869   1      
1870   1          if ((128 - 50) > ucV_Min_Margin)    ucV_Min_Margin  = 128 - 50;
1871   1      
1872   1          ((unsigned int *)Data)[0]   = (usVer_End + 128 - 2) - (usIPV_ACT_STA + usIPV_ACT_LEN);
1873   1      
1874   1          ucV_Max_Margin  = (((unsigned int *)Data)[0] > 0x00ff) ? 0xff : ((unsigned int *)Data)[0];
1875   1      
1876   1          // Check ucV_Min_Margin/ucV_Max_Margin :
1877   1          // ucDV_Delay can only range from 0 to 254
1878   1          // Original Formula :
1879   1          // 128 - ucV_Min_Margin >= ucDV_Delay
1880   1          // ucV_Max_Margin - 128 >= 254 - ucDV_Delay
1881   1      
1882   1          if ((unsigned int)128 > ((unsigned int)ucV_Min_Margin + ucDV_Delay))    ucV_Min_Margin  = 128 - ucDV_D
             -elay;
1883   1          if ((unsigned int)382 < ((unsigned int)ucV_Max_Margin + ucDV_Delay))    ucV_Max_Margin  = 382 - ucDV_D
             -elay;
1884   1      
1885   1          if ((128 + 50) < ucV_Max_Margin)    ucV_Max_Margin  = 128 + 50;
1886   1      
1887   1          // Check V-Position
1888   1          if (ucV_Min_Margin > stMUD.V_POSITION)
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 32  

1889   1              stMUD.V_POSITION    = ucV_Min_Margin;
1890   1          else if ((unsigned int)256 - ucV_Min_Margin < stMUD.V_POSITION)
1891   1              stMUD.V_POSITION    = (unsigned int)256 - ucV_Min_Margin;
1892   1      
1893   1          // Update V-Position
1894   1          Set_V_Position();
1895   1      
1896   1          // Re-calculate actual refresh rate
1897   1          ((unsigned long *)Data)[0]  = (unsigned long)usHsync * usVer_End;
1898   1          ucRefresh   = (unsigned long)49152000 / ((unsigned long *)Data)[0];
1899   1          ucRefresh   = (ucRefresh & 0x01) ? ((ucRefresh + 1) >> 1) : (ucRefresh >> 1);
1900   1          
1901   1              if(ucRefresh > V_OVERSPEC_FREQ)
1902   1                  bOverSpec = _TRUE;
1903   1      
1904   1              if((unsigned int)24576/usHsync > H_OVERSPEC_FREQ)
1905   1                  bOverSpec = _TRUE;
1906   1      
1907   1          Data[0] = Frame_Sync();
1908   1      
1909   1          if (1 == Data[0])
1910   1          {
1911   2             Delay_Xms(10);
1912   2             Data[0] = Frame_Sync();     // Fail. Try again             
1913   2          }
1914   1      
1915   1          bFrameSync      = Data[0] ? 0 : 1;              // 0 : fail, 1 : pass
1916   1          ucSyncErrorCnt  = 0;
1917   1      
1918   1          RTDSetBit(OVL_CTRL_6D,0x3f,0x00);
1919   1          RTDSetByte(BGCOLOR_CONTROL_6C,0x00);
1920   1              RTDSetBit(OVL_CTRL_6D,0x3f,0x40);
1921   1          RTDSetByte(BGCOLOR_CONTROL_6C,0x00);
1922   1              RTDSetBit(OVL_CTRL_6D,0x3f,0x80);
1923   1          RTDSetByte(BGCOLOR_CONTROL_6C,0x00);
1924   1      
1925   1      //    RTDSetBit(VDIS_CTRL_20, 0x5f, DHS_MASK);        // Normal display
1926   1            RTDSetBit(VDIS_CTRL_20, 0x7f, 0x20 | DHS_MASK);        // Normal display
1927   1      
1928   1      #if(AS_PLL_NONLOCK)
1929   1         if(bFrameSync)
1930   1              RTDSetBit(ODD_CTRL_8E,0xdf,0x20);
1931   1      #endif
1932   1      
1933   1          //anson 05_0314
1934   1          ucfrist = (ucMode_Curr - 1 ) / 8 ;
1935   1          I2CRead(ADDR_EROM1, ucfrist , 1);
1936   1          ucfrist = ucMode_Curr - (ucfrist*8) ;
1937   1          ucfrist  = Data[0] >> (ucfrist-1) ;
1938   1          ucfrist  = ucfrist & 0x01;
1939   1          stGUD1.OSD_INPUT = stGUD1.OSD_INPUT | 0x20; //First Time Into This Mode
1940   1      
1941   1      
1942   1      }
1943          
1944          void Display_DVI_Set(void)
1945          {
1946   1      #if(TMDS_ENABLE)
1947   1          unsigned char   Wait_Time_Cnt;
1948   1      
1949   1          Initial_Mode();
1950   1      
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 33  

1951   1          // Set the ucV_Min_Margin/ucV_Max_Margin
1952   1          ucV_Min_Margin  = (128 < usIPV_ACT_STA) ? 0 : 128 - usIPV_ACT_STA + 1;
1953   1      
1954   1          // Use Data[8],Data[9] as a temporary 16-bit variable.
1955   1          ((unsigned int *)Data)[4]   = (usVsync + 128 - 2) - (usIPV_ACT_STA + usIPV_ACT_LEN);
1956   1      
1957   1          ucV_Max_Margin  = (0x00ff <  ((unsigned int *)Data)[4]) ? 0xff :  ((unsigned int *)Data)[4];
1958   1      
1959   1          // Check ucV_Min_Margin/ucV_Max_Margin :
1960   1          // ucDV_Delay can only range from 0 to 254
1961   1          // Original Formula :
1962   1          // 128 - ucV_Min_Margin <= ucDV_Delay
1963   1          // ucV_Max_Margin - 128 <= 254 - ucDV_Delay
1964   1      
1965   1          if ((unsigned int)128 > ((unsigned int)ucV_Min_Margin + ucDV_Delay))    ucV_Min_Margin  = 128 - ucDV_D
             -elay;
1966   1          if ((unsigned int)382 < ((unsigned int)ucV_Max_Margin + ucDV_Delay))    ucV_Max_Margin  = 382 - ucDV_D
             -elay;
1967   1      
1968   1          // Read mode default settings from 24C04
1969   1          Load_MUD(ucMode_Curr);
1970   1      
1971   1          Set_Gamma();
1972   1          Set_Dithering();
1973   1          Set_Bright_Contrast();
1974   1          Sharpness();
1975   1      
1976   1          // Issac :
1977   1          // RTD controller can support both digital mode and analog mode to capture input image data.
1978   1          // In digital mode, input image data is captured according to input data enable (IDEN) signal;
1979   1          // In analog mode, input image data is captured according to capture window settings;
1980   1          // Although can support both of them, I always use analog mode to capture input image in this F/W.
1981   1          // Because RTD controller can measure the position and size of IDEN signal, we can just set our
1982   1          // capture window to be the same size and position as IDEN.
1983   1      
1984   1          Data[0]     = 14;
1985   1          Data[1]     = Y_INC;
1986   1          Data[2]     = H_BND_STA_L_75;
1987   1          Data[3]     = 0x02;
1988   1          Data[4]     = usADC_Clock - 2;
1989   1          Data[5]     = (usADC_Clock - 2) >> 8;
1990   1          Data[6]     = 0x02;
1991   1          Data[7]     = usVsync - 2;
1992   1          Data[8]     = (usVsync - 2) >> 8;
1993   1          Data[9]     = 0;
1994   1          Data[10]    = 0;
1995   1          Data[11]    = 0;
1996   1          Data[12]    = 0;
1997   1          Data[13]    = 0x81;     // Measure IDEN position
1998   1          Data[14]    = 0;
1999   1      
2000   1      
2001   1          RTDWrite(Data);
2002   1      
2003   1          Wait_Time_Cnt  = 60;    // Tracking timeout 60ms        
2004   1          do
2005   1          {   
2006   2              Delay_Xms(1);
2007   2              RTDRead(AUTO_ADJ_CTRL_7F, 0x01, N_INC);
2008   2          }
2009   1          while ((Data[0] & 0x01) && (--Wait_Time_Cnt));
2010   1          
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 34  

2011   1          if (0 == Wait_Time_Cnt)
2012   1          {
2013   2              RTDSetByte(AUTO_ADJ_CTRL_7F, 0x00);
2014   2              Reset_Mode();
2015   2          }
2016   1          else
2017   1          {
2018   2              // Read IDEN position information
2019   2              RTDRead(VER_START_80, 0x08, Y_INC);
2020   2              
2021   2              // IDEN horizontal Start
2022   2              usIPH_ACT_STA   = (unsigned int)Data[4] + ((unsigned int)Data[5] << 8) - 2;
2023   2      
2024   2              // IDEN vertical Start
2025   2              ((unsigned int *)Data)[0]   = (unsigned int)Data[0] + ((unsigned int)Data[1] << 8) - 1;
2026   2      
2027   2              if (((unsigned int *)Data)[0] > (usIPV_ACT_STA + ucV_Max_Margin - 0x80))
2028   2              {
2029   3                  ((unsigned int *)Data)[1]   = (usVsync + 128 - 2) - (usIPV_ACT_STA + usIPV_ACT_LEN);    // Act
             -ual V max. Margin
2030   3      
2031   3                  ucDV_Delay      = (unsigned char)((unsigned int)ucDV_Delay + ucV_Max_Margin - 0x80);
2032   3                  usIPV_ACT_STA   = usIPV_ACT_STA + ucV_Max_Margin - 0x80;
2033   3      
2034   3                  if (ucV_Max_Margin < ((unsigned int *)Data)[1])
2035   3                  {
2036   4                      // We have to increase IVS delay to fix ucV_Max_Margin
2037   4                      if ((((unsigned int *)Data)[1] - ucV_Max_Margin) >= (((unsigned int *)Data)[0] - usIPV_ACT
             -_STA))
2038   4                          ((unsigned int *)Data)[1]   = ((unsigned int *)Data)[0] - usIPV_ACT_STA + PROGRAM_VDEL
             -AY;
2039   4                      else
2040   4                          ((unsigned int *)Data)[1]   = usIPV_ACT_STA + ((unsigned int *)Data)[1] - ucV_Max_Marg
             -in + PROGRAM_VDELAY;
2041   4      
2042   4                      if (126 < ((unsigned int *)Data)[1])    ((unsigned int *)Data)[1]  = 126;
2043   4      
2044   4                      RTDSetByte(IVS_DELAY_8C, 0x80 | ((unsigned int *)Data)[1]);
2045   4                  }
2046   3              }
2047   2              else if (((unsigned int *)Data)[0] < (usIPV_ACT_STA + ucV_Min_Margin - 0x80))
2048   2              {
2049   3                  ucDV_Delay      = (unsigned char)((unsigned int)ucDV_Delay + ucV_Min_Margin - 0x80);
2050   3                  usIPV_ACT_STA   = usIPV_ACT_STA + ucV_Min_Margin - 0x80;
2051   3      
2052   3                  ((unsigned int *)Data)[1]   = usIPV_ACT_STA - ((unsigned int *)Data)[0];
2053   3      
2054   3                  // We have to decrease IVS delay to fix ucV_Min_Margin
2055   3                  if (PROGRAM_VDELAY <= ((unsigned int *)Data)[1])
2056   3                      RTDSetByte(IVS_DELAY_8C, 0x00);
2057   3                  else
2058   3                      RTDSetByte(IVS_DELAY_8C, 0x80 | (PROGRAM_VDELAY - ((unsigned int *)Data)[1]));
2059   3              }
2060   2              else
2061   2              {
2062   3                  ucDV_Delay      = ((unsigned int *)Data)[0] + ucDV_Delay - usIPV_ACT_STA ;
2063   3                  usIPV_ACT_STA   = ((unsigned int *)Data)[0];
2064   3              }
2065   2      
2066   2                      RTDRead(TMDS_CORRECTION_FF,0x01,N_INC);
2067   2      
2068   2                      if(Data[0] & 0x03)
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 35  

2069   2                          usIPH_ACT_STA -= 14;//if TMDS error correction enable, then compensate the IPH_ACT_STA offset.
2070   2      
2071   2              Data[0]     = 5;
2072   2              Data[1]     = Y_INC;
2073   2              Data[2]     = IPH_ACT_STA_06;
2074   2              Data[3]     = (unsigned char)(usIPH_ACT_STA & 0x00ff);
2075   2              Data[4]     = (unsigned char)((usIPH_ACT_STA >> 8) & 0x00ff);
2076   2              Data[5]     = 5;
2077   2              Data[6]     = Y_INC;
2078   2              Data[7]     = IPV_ACT_STA_0A;
2079   2              Data[8]     = (unsigned char)(usIPV_ACT_STA & 0x00ff);
2080   2              Data[9]     = (unsigned char)((usIPV_ACT_STA >> 8) & 0x00ff);
2081   2              Data[10]    = 4;
2082   2              Data[11]    = N_INC;
2083   2              Data[12]    = IV_DV_LINES_38;
2084   2              Data[13]    = ucDV_Delay;
2085   2              Data[14]    = 0;
2086   2              RTDWrite(Data);
2087   2      
2088   2              Wait_For_Event(EVENT_DVS);
2089   2      
2090   2              Data[0] = Frame_Sync();
2091   2              
2092   2              if (1 == Data[0])   Data[0] = Frame_Sync();     // Fail. Try again
2093   2      
2094   2              bFrameSync      = Data[0] ? 0 : 1;              // 0 : fail, 1 : pass
2095   2              ucSyncErrorCnt  = 0;
2096   2      
2097   2              //RTDSetBit(VDIS_CTRL_20, 0x5f, DHS_MASK);        // Normal display
2098   2                      RTDSetBit(VDIS_CTRL_20, 0x7f, 0x20 | DHS_MASK);        // Normal display
2099   2          }
2100   1      #else
                  Seek_DVI_Mode(0);
              #endif
2103   1      }
2104          
2105          void Set_Video_Mode(void)
2106          {
2107   1      #if(VIDEO_CHIP != VDC_NONE)
              
              #if (VIDEO_CHIP == VDC_SAA7114 || VIDEO_CHIP == VDC_SAA7115 || VIDEO_CHIP == VDC_SAA7118)
                  I2CWrite(V_DISABLE);
                  I2CWrite(VIDEO_ALL);
                  I2CWrite((ucAV_Mode & 0x02) ? VIDEO_50 : VIDEO_60);
              #endif
              
                  RTDCodeW((ucAV_Mode & 0x02) ? RTD_VIDEO_50 : RTD_VIDEO_60);
              
              //    if (PANEL_OFF == MCU_ReadPanelPower())
                  if (OFF == bPanel_Status)
                  {
              
                      RTDSetByte(VDIS_SIGINV_21, 0x00 | DISP_EO_SWAP | DISP_RB_SWAP | DISP_ML_SWAP);       // DHS, DVS, 
             -DEN, DCLK MUST NOT be inverted.
              
                      RTDSetBit(VDIS_CTRL_20, 0xfd, 0x01);    // DHS, DVS, DEN, DCLK and data are clamped to 0
                  }
              
              
              #if (VIDEO_CHIP == VDC_SAA7118)
                  if (SOURCE_YUV == (stGUD1.INPUT_SOURCE & 0x07))
                  {
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 36  

                      I2CWrite(VIDEO_YUV);
                  }
                  else
              #endif
                  {
                      Data[0] = (SOURCE_SV == (stGUD1.INPUT_SOURCE & 0x07)) ? 0 : 1;
              
                      switch (ucAV_Mode)
                      {
                      case 0x01:          //(60Hz) NTSC-M, JAPAN(7111A)
                      case 0x81:          //(60Hz) Default
                          I2CWrite(Data[0] ? AV_60_0 : SV_60_0);
                          break;
                      case 0x11:          //(60Hz) PAL-4.43
                          I2CWrite(Data[0] ? AV_60_1 : SV_60_1);
                          break;
                      case 0x21:          //(60Hz) NTSC-4.43
                          I2CWrite(Data[0] ? AV_60_2 : SV_60_2);
                          break;
                      case 0x31:          //(60Hz) PAL-M
                          I2CWrite(Data[0] ? AV_60_3 : SV_60_3);
                          break;
                      case 0x41:          //(60Hz) NTSC-JAPAN(7114)
                          I2CWrite(Data[0] ? AV_60_4 : SV_60_4);
                          break;
                      case 0x02:          //(50Hz) PAL-BGHI
                      case 0x82:          //(50Hz) Default
                          I2CWrite(Data[0] ? AV_50_0 : SV_50_0);
                          RTDSetBit(VGIP_SIGINV_05,0xff,0x10);
                          break;
                      case 0x12:          //(50Hz) NTSC-4.43
                          I2CWrite(Data[0] ? AV_50_1 : SV_50_1);
                          break;
                      case 0x22:          //(50Hz) PAL-N
                          I2CWrite(Data[0] ? AV_50_2 : SV_50_2);
                          break;
                      case 0x32:          //(50Hz) NTSC-N
                          I2CWrite(Data[0] ? AV_50_3 : SV_50_3);
                          break;
                      case 0x42:          //Reserved
                          I2CWrite(Data[0] ? AV_50_4 : SV_50_4);
                          break;
                      case 0x03:          //(50Hz) SECAM
                          I2CWrite(Data[0] ? AV_SECAM : SV_SECAM);
                                      RTDSetBit(VGIP_SIGINV_05,0xff,0x10);
                          break;
                      default:    
                          break;
                      }
                  }
              #endif
2181   1      }
2182          
2183          void Display_Video_Set(void)
2184          {    
2185   1      #if(VIDEO_CHIP != VDC_NONE)
                  unsigned char ucCounter;
              
                  Load_MUD(ucMode_Curr);      // Read mode default settings from 24C04
              
                  Set_Video_Mode();
              
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 37  

                  if (SOURCE_TV == (stGUD1.INPUT_SOURCE & 0x07))      I2CWrite(TV_SOURCE_SEL);
              
                  // Read H,V Standard Start Position and H Width
                  RTDRead(IPH_ACT_STA_06, 0x08, Y_INC);
                  usIPH_ACT_STA   = (unsigned int)Data[0] + ((unsigned int)Data[1] << 8);
                  usIPH_ACT_STA   = usIPH_ACT_STA & 0x07ff;
                  usIPH_ACT_WID   = (unsigned int)Data[2] + ((unsigned int)Data[3] << 8);
                  usIPH_ACT_WID   = usIPH_ACT_WID & 0x07ff;
                  usIPV_ACT_STA   = (unsigned int)Data[4] + ((unsigned int)Data[5] << 8);
                  usIPV_ACT_STA   = usIPV_ACT_STA & 0x07ff;
                  usIPV_ACT_LEN   = (unsigned int)Data[6] + ((unsigned int)Data[7] << 8);
                  usIPV_ACT_LEN   = usIPV_ACT_LEN & 0x07ff;
              
                  // Read ucDH_TOTAL
                  RTDRead(DH_TOTAL_22, 2, Y_INC);
                  usDH_Total  = ((unsigned int)(Data[1] & 0x07) << 8) + Data[0];
                  
                  // Read ucDV_Delay
                  RTDRead(IV_DV_LINES_38, 1, N_INC);
                  ucDV_Delay  = Data[0];
              
                  ucV_Max_Margin  = 0x80;
                  ucV_Min_Margin  = 0x80;
              
                  Set_Gamma();
                  Set_Dithering();
                  Set_Bright_Contrast();
                  Sharpness();
              
                  // Update VDC's Contrast/Brightness/Hue/Saturation
                  SetVDC_Color();
              
                  ucCounter   = 28;
                  do
                  {
                      RTDSetByte(SYNC_POR_4C, 0x00);  // Reset Sync Processor
              
                      Measure_Mode();
              
                      Delay_Xms(80);
              
                      RTDRead(SYNC_POR_4C, 0x05, Y_INC);
              
                      if (Data[0] & 0x02)
                      {
                          usHsync = 0;
                          usVsync = 0;
                      }
                      else
                      {
                          Data[5] = Data[3];
                          Data[4] = Data[4] & 0x87;
                          Data[3] = Data[1];
                          Data[2] = Data[2] & 0x8f;
              
                          usHsync = ((unsigned int *)Data)[1];    // Current usHsync timing
                          usVsync = ((unsigned int *)Data)[2];    // Current usVsync timing
              
                          if (0x07ff <= usHsync || 0x07ff <= usVsync || 0 == usHsync || 0 == usVsync)
                          {
                              usHsync = 0;
                              usVsync = 0;
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 38  

                          }
                          else
                          {
                              break;
                          }
                      }
                  }
                  while (--ucCounter);
              
                      RTDSetByte(STATUS0_01, 0x00);  // Clear status  
                  RTDSetByte(STATUS1_1F, 0x00);  // Clear status
                      
                      Data[0] = Frame_Sync();
              
                  if (1 == Data[0])   Data[0] = Frame_Sync();     // Fail. Try again
              
                  bFrameSync      = Data[0] ? 0 : 1;              // 0 : fail, 1 : pass
                      
              
                  ucSyncErrorCnt  = 0;
              
              //      RTDSetBit(VDIS_CTRL_20, 0x5f, DHS_MASK);        // Normal display
                  RTDSetBit(VDIS_CTRL_20, 0x7f, 0x20 | DHS_MASK);        // Normal display
              #else
2278   1          Set_Video_Mode();
2279   1      #endif
2280   1      }
2281          
2282          void Input_Mode_Detector(void)
2283          {
2284   1       RTDRead(SYNC_POR_4C, 0x01, N_INC);
2285   1                  
2286   1                  if (0 == (Data[0] & 0x02))      ucModeCnt   = 0;
2287   1      
2288   1                  if (ucModeCnt)
2289   1                  {                  
2290   2                              ucModeCnt   -= 1;
2291   2                  }
2292   1                  else
2293   1                  {
2294   2                      ucModeCnt   = MODE_DETECT_FREQ;
2295   2      
2296   2      #if(SOURCE_AUTO_SCAN) 
2297   2                      Source_Auto_Scan();
2298   2      #else
                              Mode_Detector();
              #endif                          
2301   2                                      
2302   2                      if (!bStable)
2303   2                      {
2304   3                          bReload     = 1;            // Reload user's font
2305   3      
2306   3                          Set_Task(STATE_MODECHANGE); // Notify Task State Machine
2307   3                      }
2308   2                  }
2309   1      }
2310          
2311          ///////////////////////////////////////////////////////////////////////////////////
2312          //anson 05_0314
2313          ///////////////////////////////////////////////////////////////////////////////////
2314          void New_Mode_Auto(void)
2315          {
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 39  

2316   1      
2317   1              if      (bStable && 
2318   1                      bFrameSync && 
2319   1                      ((stGUD1.OSD_INPUT & 0x20) == 0x20) && 
2320   1                      (MODE_NOSIGNAL != ucMode_Curr) &&
2321   1                      (MODE_NOSUPPORT != ucMode_Curr) && 
2322   1                      ucfrist 
2323   1                      )
2324   1              {
2325   2                      OSD_Position(OSD_ENABLE);
2326   2                      OSD_Position(OSD_ENABLE);
2327   2                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
2328   2                      RTDOSDW(OSD_Reset);
2329   2                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x01);
2330   2                      RTDOSDW(OSD_AUTO);
2331   2                      RTDOSDW(strTabAuto_Atb[stGUD1.FUNCTION & 0x07]);                //anson
*** WARNING C214 IN LINE 2331 OF CODE\MODE_DETECT.C: 'Argument': conversion: non-pointer to pointer
2332   2                      Auto_Config();
2333   2                      RTDSetBit(OVL_CTRL_6D, 0xfe, 0x00);
2334   2                      RTDOSDW(OSD_Reset);
2335   2      
2336   2                      stGUD1.OSD_INPUT &= 0xdf;//Clear "First Time Into Mode" Bit
2337   2                      Save_GUD1();
2338   2                      ucfrist = (ucMode_Curr - 1 ) / 8 ;                
2339   2                      I2CRead(ADDR_EROM1, ucfrist , 1);
2340   2                      Data[1] = 0x01;
2341   2                      Data[1] = Data[1] << (ucMode_Curr - 1 - (ucfrist*8)) ; 
2342   2                      Data[3] = Data[0] & ~Data[1];
2343   2                      
2344   2                      Data[0] = 4;
2345   2                      Data[1] = ADDR_EROM1;
2346   2                      Data[2] = ucfrist;                                                                             
2347   2                      I2CWrite(Data);
2348   2                      Delay_Xms(SET_2404_DELAY);
2349   2                      ucfrist = 0;
2350   2              }
2351   1      
2352   1      }
2353          
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 40  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0188 (BEGIN)
0000         L?0393:
0000         L?0394:
0000 7800        R     MOV     R0,#LOW ucMode_Curr
0002 E6                MOV     A,@R0
0003 75F00A            MOV     B,#0AH
0006 A4                MUL     AB
0007 2400        E     ADD     A,#LOW Mode_Preset+02H
0009 F582              MOV     DPL,A
000B E5F0              MOV     A,B
000D 3400        E     ADDC    A,#HIGH Mode_Preset+02H
000F         L?0395:
000F F583              MOV     DPH,A
0011         L?0396:
0011 E4                CLR     A
0012 93                MOVC    A,@A+DPTR
0013 FE                MOV     R6,A
0014 7401              MOV     A,#01H
0016 93                MOVC    A,@A+DPTR
0017 22                RET     
0018         L?0397:
0018         L?0398:
0018 7800        R     MOV     R0,#LOW usHsync
001A         L?0399:
001A A905              MOV     R1,AR5
001C AA06              MOV     R2,AR6
001E AB07              MOV     R3,AR7
0020         L?0400:
0020 E6                MOV     A,@R0
0021         L?0401:
0021 FE                MOV     R6,A
0022 08                INC     R0
0023 E6                MOV     A,@R0
0024 FF                MOV     R7,A
0025 E4                CLR     A
0026 FC                MOV     R4,A
0027 FD                MOV     R5,A
0028 22                RET     
0029         L?0402:
0029 75F00C            MOV     B,#0CH
002C EE                MOV     A,R6
002D A4                MUL     AB
002E 2400        E     ADD     A,#LOW VGA_Mode+04H
0030 F582              MOV     DPL,A
0032 E5F0              MOV     A,B
0034 3400        E     ADDC    A,#HIGH VGA_Mode+04H
0036 F583              MOV     DPH,A
0038 7800        R     MOV     R0,#LOW usVsync
003A         L?0403:
003A E6                MOV     A,@R0
003B FC                MOV     R4,A
003C 08                INC     R0
003D D3                SETB    C
003E         L?0404:
003E E6                MOV     A,@R0
003F FD                MOV     R5,A
0040         L?0405:
0040 7401              MOV     A,#01H
0042 93                MOVC    A,@A+DPTR
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 41  

0043 9D                SUBB    A,R5
0044 E4                CLR     A
0045 93                MOVC    A,@A+DPTR
0046 9C                SUBB    A,R4
0047 22                RET     
0048         L?0406:
0048 EF                MOV     A,R7
0049 2B                ADD     A,R3
004A FF                MOV     R7,A
004B EE                MOV     A,R6
004C 3A                ADDC    A,R2
004D FE                MOV     R6,A
004E ED                MOV     A,R5
004F 39                ADDC    A,R1
0050 FD                MOV     R5,A
0051 EC                MOV     A,R4
0052 38                ADDC    A,R0
0053 FC                MOV     R4,A
0054 7806              MOV     R0,#06H
0056 120000      E     LCALL   ?C?LSHL
0059         L?0407:
0059 8F00        E     MOV     Data+0FH,R7
005B 8E00        E     MOV     Data+0EH,R6
005D 8D00        E     MOV     Data+0DH,R5
005F 8C00        E     MOV     Data+0CH,R4
0061 22                RET     
0062         L?0408:
0062 F9                MOV     R1,A
0063 F8                MOV     R0,A
0064         L?0409:
0064 120000      E     LCALL   ?C?LMUL
0067         L?0410:
0067 A804              MOV     R0,AR4
0069         L?0411:
0069 A905              MOV     R1,AR5
006B AA06              MOV     R2,AR6
006D AB07              MOV     R3,AR7
006F 22                RET     
0070         L?0412:
0070         L?0413:
0070 E4                CLR     A
0071 FC                MOV     R4,A
0072 FD                MOV     R5,A
0073         L?0414:
0073 7B64              MOV     R3,#064H
0075 FA                MOV     R2,A
0076 F9                MOV     R1,A
0077 F8                MOV     R0,A
0078 020000      E     LJMP    ?C?LMUL
007B         L?0415:
007B         L?0416:
007B 75F00A            MOV     B,#0AH
007E E500        R     MOV     A,Wait_Time_Cnt
0080         L?0417:
0080 A4                MUL     AB
0081 2400        E     ADD     A,#LOW Mode_Preset+04H
0083 F582              MOV     DPL,A
0085 E5F0              MOV     A,B
0087 3400        E     ADDC    A,#HIGH Mode_Preset+04H
0089 22                RET     
008A         L?0418:
008A 120000      E     LCALL   ?C?LMUL
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 42  

008D 8F00        E     MOV     Data+03H,R7
008F 8E00        E     MOV     Data+02H,R6
0091 8D00        E     MOV     Data+01H,R5
0093 8C00        E     MOV     Data,R4
0095 AB00        E     MOV     R3,Data+03H
0097 AA00        E     MOV     R2,Data+02H
0099 A900        E     MOV     R1,Data+01H
009B A800        E     MOV     R0,Data
009D E4                CLR     A
009E FF                MOV     R7,A
009F FE                MOV     R6,A
00A0 7DEE              MOV     R5,#0EEH
00A2 7C02              MOV     R4,#02H
00A4 120000      E     LCALL   ?C?ULDIV
00A7 7800        R     MOV     R0,#LOW ucRefresh
00A9 EF                MOV     A,R7
00AA F6                MOV     @R0,A
00AB 22                RET     
00AC         L?0419:
00AC E500        R     MOV     A,Wait_Time_Cnt
00AE         L?0420:
00AE 75F00A            MOV     B,#0AH
00B1         L?0421:
00B1 A4                MUL     AB
00B2 2400        E     ADD     A,#LOW CAP_WIN+08H
00B4 F582              MOV     DPL,A
00B6 E5F0              MOV     A,B
00B8 3400        E     ADDC    A,#HIGH CAP_WIN+08H
00BA 22                RET     
00BB         L?0422:
00BB 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
00BD         L?0423:
00BD E6                MOV     A,@R0
00BE FE                MOV     R6,A
00BF 08                INC     R0
00C0 E6                MOV     A,@R0
00C1         L?0424:
00C1 FB                MOV     R3,A
00C2 AA06              MOV     R2,AR6
00C4 E4                CLR     A
00C5 F9                MOV     R1,A
00C6 F8                MOV     R0,A
00C7 22                RET     
00C8         L?0425:
00C8         L?0426:
00C8 7800        R     MOV     R0,#LOW usVsync+01H
00CA E6                MOV     A,@R0
00CB 24FF              ADD     A,#0FFH
00CD FF                MOV     R7,A
00CE 18                DEC     R0
00CF E6                MOV     A,@R0
00D0 34FF              ADDC    A,#0FFH
00D2 22                RET     
00D3         L?0427:
00D3 120000      E     LCALL   ?C?ULDIV
00D6 8E00        R     MOV     usDispLen,R6
00D8 8F00        R     MOV     usDispLen+01H,R7
00DA E500        R     MOV     A,usDispLen
00DC C3                CLR     C
00DD 13                RRC     A
00DE FE                MOV     R6,A
00DF E500        R     MOV     A,usDispLen+01H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 43  

00E1 13                RRC     A
00E2 FF                MOV     R7,A
00E3 7C00              MOV     R4,#00H
00E5 E500        R     MOV     A,usDispLen+01H
00E7 5401              ANL     A,#01H
00E9 2F                ADD     A,R7
00EA F500        R     MOV     usDispLen+01H,A
00EC EC                MOV     A,R4
00ED 3E                ADDC    A,R6
00EE F500        R     MOV     usDispLen,A
00F0 22                RET     
00F1         L?0428:
00F1 850000      E     MOV     Data+07H,Data+05H
00F4 53000F      E     ANL     Data+06H,#0FH
00F7         L?0429:
00F7 850000      E     MOV     Data+05H,Data+03H
00FA 530087      E     ANL     Data+04H,#087H
00FD 850000      E     MOV     Data+03H,Data+01H
0100 53008F      E     ANL     Data+02H,#08FH
0103 22                RET     
0104         L?0430:
0104 7800        E     MOV     R0,#LOW ucV_Max_Margin
0106 A607              MOV     @R0,AR7
0108 7800        E     MOV     R0,#LOW ucV_Min_Margin
010A E6                MOV     A,@R0
010B FF                MOV     R7,A
010C 7800        E     MOV     R0,#LOW ucDV_Delay
010E E6                MOV     A,@R0
010F FD                MOV     R5,A
0110 FB                MOV     R3,A
0111 7A00              MOV     R2,#00H
0113 2F                ADD     A,R7
0114 FF                MOV     R7,A
0115 E4                CLR     A
0116 33                RLC     A
0117 FE                MOV     R6,A
0118 D3                SETB    C
0119 7480              MOV     A,#080H
011B 9F                SUBB    A,R7
011C E4                CLR     A
011D 9E                SUBB    A,R6
011E 22                RET     
011F         L?0432:
011F         L?0433:
011F F583              MOV     DPH,A
0121 E4                CLR     A
0122 93                MOVC    A,@A+DPTR
0123 FC                MOV     R4,A
0124 7401              MOV     A,#01H
0126 93                MOVC    A,@A+DPTR
0127 22                RET     
0128         L?0434:
0128         L?0435:
0128 120000      E     LCALL   ?C?ULDIV
012B 8E00        E     MOV     Data,R6
012D 8F00        E     MOV     Data+01H,R7
012F 22                RET     
0130         L?0436:
0130 18                DEC     R0
0131 36                ADDC    A,@R0
0132 7800        R     MOV     R0,#LOW usVsync+01H
0134         L?0437:
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 44  

0134 FE                MOV     R6,A
0135 E6                MOV     A,@R0
0136 247E              ADD     A,#07EH
0138 FD                MOV     R5,A
0139 18                DEC     R0
013A E4                CLR     A
013B 36                ADDC    A,@R0
013C CD                XCH     A,R5
013D C3                CLR     C
013E 9F                SUBB    A,R7
013F 22                RET     
0140         L?0438:
0140         L?0439:
0140 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
0142         L?0440:
0142 E6                MOV     A,@R0
0143 FE                MOV     R6,A
0144 08                INC     R0
0145 E6                MOV     A,@R0
0146 FF                MOV     R7,A
0147 C3                CLR     C
0148 22                RET     
0149         L?0441:
0149 FB                MOV     R3,A
014A         L?0442:
014A 7A04              MOV     R2,#04H
014C F9                MOV     R1,A
014D F8                MOV     R0,A
014E 020000      E     LJMP    ?C?LMUL
0151         L?0443:
0151 7801              MOV     R0,#01H
0153         L?0444:
0153 AF00        E     MOV     R7,Data+0FH
0155 AE00        E     MOV     R6,Data+0EH
0157 AD00        E     MOV     R5,Data+0DH
0159 AC00        E     MOV     R4,Data+0CH
015B 020000      E     LJMP    ?C?ULSHR
015E         L?0445:
015E         L?0446:
015E 7800        R     MOV     R0,#LOW usHsync
0160 E6                MOV     A,@R0
0161 FE                MOV     R6,A
0162 08                INC     R0
0163 E6                MOV     A,@R0
0164 FF                MOV     R7,A
0165 22                RET     
0166         L?0447:
0166         L?0448:
0166 7800        R     MOV     R0,#LOW ucMode_Curr
0168 E6                MOV     A,@R0
0169 75F00A            MOV     B,#0AH
016C A4                MUL     AB
016D 22                RET     
016E         L?0449:
016E E4                CLR     A
016F F500        E     MOV     Data+01H,A
0171 750006      E     MOV     Data+02H,#06H
0174 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
0176         L?0450:
0176 E6                MOV     A,@R0
0177 F500        E     MOV     Data+03H,A
0179 18                DEC     R0
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 45  

017A E6                MOV     A,@R0
017B F500        E     MOV     Data+04H,A
017D 22                RET     
017E         L?0451:
017E         L?0452:
017E AE00        R     MOV     R6,usDispLen
0180 AF00        R     MOV     R7,usDispLen+01H
0182 AB07              MOV     R3,AR7
0184 AA06              MOV     R2,AR6
0186 E4                CLR     A
0187 F9                MOV     R1,A
0188 F8                MOV     R0,A
0189 22                RET     
018A         L?0453:
018A FF                MOV     R7,A
018B 7A68              MOV     R2,#068H
018D 7926              MOV     R1,#026H
018F         L?0454:
018F E4                CLR     A
0190 FC                MOV     R4,A
0191 FD                MOV     R5,A
0192 FB                MOV     R3,A
0193 F8                MOV     R0,A
0194 020000      E     LJMP    ?C?LMUL
0197         L?0455:
0197 75F00C            MOV     B,#0CH
019A EE                MOV     A,R6
019B A4                MUL     AB
019C 2400        E     ADD     A,#LOW VGA_Mode
019E F582              MOV     DPL,A
01A0 E5F0              MOV     A,B
01A2 3400        E     ADDC    A,#HIGH VGA_Mode
01A4 F583              MOV     DPH,A
01A6 7800        R     MOV     R0,#LOW usHsync
01A8 22                RET     
01A9         L?0456:
01A9 7800        R     MOV     R0,#LOW usVsync
01AB         L?0457:
01AB E6                MOV     A,@R0
01AC FC                MOV     R4,A
01AD 08                INC     R0
01AE E6                MOV     A,@R0
01AF FD                MOV     R5,A
01B0 D3                SETB    C
01B1 22                RET     
01B2         L?0458:
01B2 FF                MOV     R7,A
01B3 24FF              ADD     A,#0FFH
01B5 FD                MOV     R5,A
01B6 EE                MOV     A,R6
01B7 34FF              ADDC    A,#0FFH
01B9 FC                MOV     R4,A
01BA E6                MOV     A,@R0
01BB FA                MOV     R2,A
01BC 08                INC     R0
01BD E6                MOV     A,@R0
01BE FB                MOV     R3,A
01BF C3                CLR     C
01C0 9D                SUBB    A,R5
01C1 EA                MOV     A,R2
01C2 9C                SUBB    A,R4
01C3 22                RET     
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 46  

01C4         L?0459:
01C4 7800        R     MOV     R0,#LOW ucMode_Curr
01C6 E6                MOV     A,@R0
01C7 14                DEC     A
01C8 13                RRC     A
01C9 13                RRC     A
01CA 13                RRC     A
01CB 541F              ANL     A,#01FH
01CD 7800        R     MOV     R0,#LOW ucfrist
01CF F6                MOV     @R0,A
01D0 FD                MOV     R5,A
01D1 7B01              MOV     R3,#01H
01D3 7FAE              MOV     R7,#0AEH
01D5 22                RET     
01D6         L?0460:
01D6 7C00              MOV     R4,#00H
01D8 120000      E     LCALL   ?C?IMUL
01DB         L?0461:
01DB 7800        R     MOV     R0,#LOW usHsync
01DD E6                MOV     A,@R0
01DE FC                MOV     R4,A
01DF 08                INC     R0
01E0 E6                MOV     A,@R0
01E1 FD                MOV     R5,A
01E2 22                RET     
01E3         L?0462:
01E3 75F00C            MOV     B,#0CH
01E6 EE                MOV     A,R6
01E7 A4                MUL     AB
01E8 2400        E     ADD     A,#LOW VGA_Mode+06H
01EA F582              MOV     DPL,A
01EC E5F0              MOV     A,B
01EE 3400        E     ADDC    A,#HIGH VGA_Mode+06H
01F0 F583              MOV     DPH,A
01F2 C3                CLR     C
01F3 22                RET     
01F4         L?0463:
01F4 7800        E     MOV     R0,#LOW usIPH_ACT_STA
01F6 A606              MOV     @R0,AR6
01F8 08                INC     R0
01F9 A607              MOV     @R0,AR7
01FB 22                RET     
01FC         L?0464:
01FC C3                CLR     C
01FD         L?0465:
01FD E500        R     MOV     A,usDispLen+01H
01FF 7800        E     MOV     R0,#LOW usIPV_ACT_LEN+01H
0201 96                SUBB    A,@R0
0202 E500        R     MOV     A,usDispLen
0204 18                DEC     R0
0205 96                SUBB    A,@R0
0206 22                RET     
0207         L?0467:
0207 75F00C            MOV     B,#0CH
020A EE                MOV     A,R6
020B A4                MUL     AB
020C 2400        E     ADD     A,#LOW VGA_Mode+02H
020E F582              MOV     DPL,A
0210 E5F0              MOV     A,B
0212 3400        E     ADDC    A,#HIGH VGA_Mode+02H
0214 F583              MOV     DPH,A
0216 22                RET     
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 47  

0217         L?0468:
0217         L?0469:
0217 7800        R     MOV     R0,#LOW usVsync
0219 E6                MOV     A,@R0
021A FE                MOV     R6,A
021B 08                INC     R0
021C E6                MOV     A,@R0
021D FF                MOV     R7,A
021E 22                RET     
021F         L?0470:
021F 7800        E     MOV     R0,#LOW ucV_Max_Margin
0221 E6                MOV     A,@R0
0222 2B                ADD     A,R3
0223 FF                MOV     R7,A
0224 E4                CLR     A
0225 3A                ADDC    A,R2
0226 FE                MOV     R6,A
0227 C3                CLR     C
0228 747E              MOV     A,#07EH
022A 9F                SUBB    A,R7
022B 7401              MOV     A,#01H
022D 9E                SUBB    A,R6
022E 22                RET     
022F         L?0471:
022F 7800        R     MOV     R0,#LOW usHsync
0231 A600        E     MOV     @R0,Data+02H
0233 08                INC     R0
0234 A600        E     MOV     @R0,Data+03H
0236 7800        R     MOV     R0,#LOW usVsync
0238 A600        E     MOV     @R0,Data+04H
023A 08                INC     R0
023B A600        E     MOV     @R0,Data+05H
023D 22                RET     
023E         L?0472:
023E 7910              MOV     R1,#010H
0240         L?0473:
0240 FB                MOV     R3,A
0241 FA                MOV     R2,A
0242 F8                MOV     R0,A
0243 020000      E     LJMP    ?C?LMUL
0246         L?0474:
0246 AE00        R     MOV     R6,DispLen
0248 AF00        R     MOV     R7,DispLen+01H
024A         L?0475:
024A E4                CLR     A
024B FC                MOV     R4,A
024C FD                MOV     R5,A
024D 020000      E     LJMP    ?C?LMUL
0250         L?0476:
0250 E500        E     MOV     A,Data
0252 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
0254         L?0477:
0254 26                ADD     A,@R0
0255 FF                MOV     R7,A
0256 E4                CLR     A
0257 18                DEC     R0
0258 36                ADDC    A,@R0
0259 CF                XCH     A,R7
025A 22                RET     
025B         L?0478:
025B C3                CLR     C
025C         L?0479:
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 48  

025C 748A              MOV     A,#08AH
025E 9500        E     SUBB    A,Data+01H
0260 E4                CLR     A
0261 9500        E     SUBB    A,Data
0263 22                RET     
0264         L?0480:
0264 E6                MOV     A,@R0
0265 2401              ADD     A,#01H
0267 FF                MOV     R7,A
0268 E4                CLR     A
0269 33                RLC     A
026A A2E7              MOV     C,ACC.7
026C 13                RRC     A
026D EF                MOV     A,R7
026E 13                RRC     A
026F FF                MOV     R7,A
0270 22                RET     
0271         L?0481:
0271 ED                MOV     A,R5
0272 2402              ADD     A,#02H
0274 FB                MOV     R3,A
0275 E4                CLR     A
0276 3C                ADDC    A,R4
0277 FA                MOV     R2,A
0278 C3                CLR     C
0279 EB                MOV     A,R3
027A 9F                SUBB    A,R7
027B EA                MOV     A,R2
027C 9E                SUBB    A,R6
027D 22                RET     
027E         L?0482:
027E EF                MOV     A,R7
027F 2403              ADD     A,#03H
0281 FF                MOV     R7,A
0282 E4                CLR     A
0283 3E                ADDC    A,R6
0284 FE                MOV     R6,A
0285 D3                SETB    C
0286 EB                MOV     A,R3
0287 9F                SUBB    A,R7
0288 EA                MOV     A,R2
0289 9E                SUBB    A,R6
028A 22                RET     
028B         L?0483:
028B 7BF4              MOV     R3,#0F4H
028D F9                MOV     R1,A
028E         L?0484:
028E 7A01              MOV     R2,#01H
0290 F8                MOV     R0,A
0291 020000      E     LJMP    ?C?LMUL
0294         L?0485:
0294         L?0486:
0294 750005      E     MOV     Data,#05H
0297 E4                CLR     A
0298 F500        E     MOV     Data+01H,A
029A 22                RET     
029B         L?0487:
029B 748A              MOV     A,#08AH
029D         L?0488:
029D C3                CLR     C
029E 9500        E     SUBB    A,Data+03H
02A0 E4                CLR     A
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 49  

02A1 9500        E     SUBB    A,Data+02H
02A3 22                RET     
02A4         L?0489:
02A4         L?0490:
02A4 7800        R     MOV     R0,#LOW ucMode_Curr
02A6 E6                MOV     A,@R0
02A7 FF                MOV     R7,A
02A8 75F00A            MOV     B,#0AH
02AB 22                RET     
02AC         L?0491:
02AC 7A60              MOV     R2,#060H
02AE         L?0492:
02AE FB                MOV     R3,A
02AF F9                MOV     R1,A
02B0 F8                MOV     R0,A
02B1 020000      E     LJMP    ?C?LMUL
02B4         L?0493:
02B4         L?0494:
02B4 E6                MOV     A,@R0
02B5 24FE              ADD     A,#0FEH
02B7 18                DEC     R0
02B8 E6                MOV     A,@R0
02B9 34FF              ADDC    A,#0FFH
02BB 22                RET     
02BC         L?0498:
02BC E500        E     MOV     A,Data
02BE A2E3              MOV     C,ACC.3
02C0 9200        R     MOV     bVpole_Curr,C
02C2 A2E2              MOV     C,ACC.2
02C4 9200        R     MOV     bHpole_Curr,C
02C6 22                RET     
02C7         L?0501:
02C7 D3                SETB    C
02C8 E500        R     MOV     A,HS_Pulse+01H
02CA 942D              SUBB    A,#02DH
02CC E500        R     MOV     A,HS_Pulse
02CE 9400              SUBB    A,#00H
02D0 22                RET     
02D1         L?0502:
02D1 A4                MUL     AB
02D2 2400        E     ADD     A,#LOW Mode_Preset+06H
02D4 F582              MOV     DPL,A
02D6 E5F0              MOV     A,B
02D8 3400        E     ADDC    A,#HIGH Mode_Preset+06H
02DA 22                RET     
02DB         L?0503:
02DB         L?0504:
02DB 750007      E     MOV     Data,#07H
02DE E4                CLR     A
02DF F500        E     MOV     Data+01H,A
02E1 22                RET     
02E2         L?0505:
02E2 E500        E     MOV     A,Data+0FH
02E4 5401              ANL     A,#01H
02E6 FF                MOV     R7,A
02E7 E4                CLR     A
02E8 FE                MOV     R6,A
02E9 FD                MOV     R5,A
02EA FC                MOV     R4,A
02EB 22                RET     
02EC         L?0506:
02EC 75000E      E     MOV     Data,#0EH
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 50  

02EF E4                CLR     A
02F0 F500        E     MOV     Data+01H,A
02F2 750075      E     MOV     Data+02H,#075H
02F5 22                RET     
02F6         L?0507:
02F6 7900        E     MOV     R1,#LOW usIPV_ACT_STA+01H
02F8 E7                MOV     A,@R1
02F9 7800        E     MOV     R0,#LOW usIPV_ACT_LEN+01H
02FB 26                ADD     A,@R0
02FC FF                MOV     R7,A
02FD 19                DEC     R1
02FE E7                MOV     A,@R1
02FF 22                RET     
0300         L?0508:
0300 C3                CLR     C
0301 747E              MOV     A,#07EH
0303 7800        E     MOV     R0,#LOW ucDV_Delay
0305 96                SUBB    A,@R0
0306 7900        E     MOV     R1,#LOW ucV_Max_Margin
0308 F7                MOV     @R1,A
0309 22                RET     
             ; FUNCTION Com0188 (END)

             ; FUNCTION Mode_Detector (BEGIN)
                                           ; SOURCE LINE # 18
                                           ; SOURCE LINE # 19
                                           ; SOURCE LINE # 21
0000 E500        E     MOV     A,stGUD1+01H
0002 5407              ANL     A,#07H
0004 14                DEC     A
0005 6003              JZ      ?C0003
0007 04                INC     A
0008 701B              JNZ     ?C0007
                                           ; SOURCE LINE # 22
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 24
000A         ?C0003:
                                           ; SOURCE LINE # 26
000A A200        R     MOV     C,bHpole_Curr
000C 9200        R     MOV     bHpole_Prev,C
                                           ; SOURCE LINE # 27
000E A200        R     MOV     C,bVpole_Curr
0010 9200        R     MOV     bVpole_Prev,C
                                           ; SOURCE LINE # 29
0012 7800        R     MOV     R0,#LOW ucMode_Curr
0014 E6                MOV     A,@R0
0015 FF                MOV     R7,A
0016 6003              JZ      ?C0005
0018 B4FF05            CJNE    A,#0FFH,?C0004
001B         ?C0005:
                                           ; SOURCE LINE # 30
001B 120000      R     LCALL   Detect_Input_Mode
001E 8016              SJMP    ?C0001
0020         ?C0004:
                                           ; SOURCE LINE # 32
0020 120000      R     LCALL   Check_Input_Mode
                                           ; SOURCE LINE # 33
0023 8011              SJMP    ?C0001
                                           ; SOURCE LINE # 35
0025         ?C0007:
                                           ; SOURCE LINE # 36
0025 7800        R     MOV     R0,#LOW ucMode_Curr
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 51  

0027 E6                MOV     A,@R0
0028 FF                MOV     R7,A
0029 6003              JZ      ?C0009
002B B4FF05            CJNE    A,#0FFH,?C0008
002E         ?C0009:
                                           ; SOURCE LINE # 37
002E 120000      R     LCALL   Detect_Video_Mode
0031 8003              SJMP    ?C0001
0033         ?C0008:
                                           ; SOURCE LINE # 39
0033 120000      R     LCALL   Check_Video_Mode
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 41
0036         ?C0001:
                                           ; SOURCE LINE # 43
0036 020000      R     LJMP    Measure_Mode
             ; FUNCTION Mode_Detector (END)

             ; FUNCTION Measure_Mode (BEGIN)
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 50
0000 E500        E     MOV     A,stGUD1+01H
0002 5407              ANL     A,#07H
0004 14                DEC     A
0005 6010              JZ      ?C0017
0007 04                INC     A
0008 700D              JNZ     ?C0017
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
000A         ?C0013:
                                           ; SOURCE LINE # 54
000A 7800        R     MOV     R0,#LOW ucSync_Type
000C E6                MOV     A,@R0
000D 7004              JNZ     ?C0014
000F 7D02              MOV     R5,#02H
0011 8006              SJMP    ?C0368
0013         ?C0014:
0013 7D32              MOV     R5,#032H
0015         ?C0015:
                                           ; SOURCE LINE # 55
0015 8002              SJMP    ?C0368
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 72
0017         ?C0017:
                                           ; SOURCE LINE # 73
0017 7D02              MOV     R5,#02H
0019         ?C0368:
0019 7F4C              MOV     R7,#04CH
001B 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 77
001E         ?C0018:
001E 22                RET     
             ; FUNCTION Measure_Mode (END)

             ; FUNCTION _Measure_Source (BEGIN)
                                           ; SOURCE LINE # 83
;---- Variable 'SOURCE' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 84
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 52  

                                           ; SOURCE LINE # 85
0000 EF                MOV     A,R7
0001 14                DEC     A
0002 600E              JZ      ?C0021
0004 14                DEC     A
0005 6014              JZ      ?C0022
0007 14                DEC     A
0008 601A              JZ      ?C0023
000A 2403              ADD     A,#03H
000C 7020              JNZ     ?C0019
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
000E         ?C0020:
                                           ; SOURCE LINE # 88
000E 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 89
0010 8002              SJMP    ?C0369
                                           ; SOURCE LINE # 90
0012         ?C0021:
                                           ; SOURCE LINE # 91
0012 7D03              MOV     R5,#03H
0014         ?C0369:
0014 7F4A              MOV     R7,#04AH
0016 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 92
0019 8013              SJMP    ?C0019
                                           ; SOURCE LINE # 93
001B         ?C0022:
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
001B 120000      R     LCALL   L?0495
001E 7A00        E     MOV     R2,#HIGH AV_DETECT
0020 7900        E     MOV     R1,#LOW AV_DETECT
                                           ; SOURCE LINE # 96
0022 8007              SJMP    ?C0370
                                           ; SOURCE LINE # 97
0024         ?C0023:
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0024 120000      R     LCALL   L?0495
0027 7A00        E     MOV     R2,#HIGH SV_DETECT
0029 7900        E     MOV     R1,#LOW SV_DETECT
002B         ?C0370:
002B 120000      E     LCALL   _I2CWrite
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
002E         ?C0019:
                                           ; SOURCE LINE # 106
002E E500        E     MOV     A,stGUD1+01H
0030 5407              ANL     A,#07H
0032 7009              JNZ     ?C0024
0034 7800        R     MOV     R0,#LOW ucSync_Type
0036 E6                MOV     A,@R0
0037 6004              JZ      ?C0024
                                           ; SOURCE LINE # 107
0039 7D32              MOV     R5,#032H
003B 8002              SJMP    ?C0371
003D         ?C0024:
                                           ; SOURCE LINE # 109
003D 7D02              MOV     R5,#02H
003F         ?C0371:
003F 7F4C              MOV     R7,#04CH
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 53  

0041 120000      E     LCALL   _RTDSetByte
0044         ?C0025:
                                           ; SOURCE LINE # 111
0044 7F23              MOV     R7,#023H
0046 020000      E     LJMP    _Delay_Xms
                                           ; SOURCE LINE # 115
0049         L?0495:
0049 7BFF              MOV     R3,#0FFH
004B 7A00        E     MOV     R2,#HIGH V_ENABLE
004D 7900        E     MOV     R1,#LOW V_ENABLE
004F 120000      E     LCALL   _I2CWrite
0052 7BFF              MOV     R3,#0FFH
0054 22                RET     
             ; FUNCTION _Measure_Source (END)

             ; FUNCTION _VGA_Mode_Search (BEGIN)
                                           ; SOURCE LINE # 118
0000 8E00        R     MOV     HS_Pulse,R6
0002 8F00        R     MOV     HS_Pulse+01H,R7
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 121
0004 7D0C              MOV     R5,#0CH
0006 120000      R     LCALL   L?0460
0009 120000      E     LCALL   ?C?UIDIV
000C 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 123
;---- Variable 'ucMode_Temp' assigned to Register 'R7' ----
000E 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 126
;---- Variable 'm' assigned to Register 'R6' ----
0010 7E2C              MOV     R6,#02CH
0012         ?C0029:
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0012 120000      R     LCALL   L?0455
0015 E6                MOV     A,@R0
0016 FC                MOV     R4,A
0017 08                INC     R0
0018 C3                CLR     C
0019 120000      R     LCALL   L?0404
001C 4003              JC      $ + 5H
001E 020000      R     LJMP    ?C0027
0021 120000      R     LCALL   L?0467
0024 D3                SETB    C
0025 120000      R     LCALL   L?0405
0028 5003              JNC     $ + 5H
002A 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
002D 120000      R     LCALL   L?0402
0030 4003              JC      $ + 5H
0032 020000      R     LJMP    ?C0027
0035 120000      R     LCALL   L?0462
0038 120000      R     LCALL   L?0405
003B 5003              JNC     $ + 5H
003D 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0040 BE2C0E            CJNE    R6,#02CH,?C0032
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
0043 A200        R     MOV     C,bHpole_Curr
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 54  

0045 7200        R     ORL     C,bVpole_Curr
0047 5003              JNC     $ + 5H
0049 020000      R     LJMP    ?C0034
004C 7E2B              MOV     R6,#02BH
                                           ; SOURCE LINE # 137
004E 020000      R     LJMP    ?C0034
0051         ?C0032:
                                           ; SOURCE LINE # 138
0051 BE200E            CJNE    R6,#020H,?C0035
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0054 A200        R     MOV     C,bHpole_Curr
0056 7200        R     ORL     C,bVpole_Curr
0058 5003              JNC     $ + 5H
005A 020000      R     LJMP    ?C0034
005D 7E1F              MOV     R6,#01FH
                                           ; SOURCE LINE # 141
005F 020000      R     LJMP    ?C0034
0062         ?C0035:
                                           ; SOURCE LINE # 142
0062 EE                MOV     A,R6
0063 640E              XRL     A,#0EH
0065 702A              JNZ     ?C0038
0067 A200        R     MOV     C,bVpole_Curr
0069 300001      R     JNB     bHpole_Curr,?C0350
006C B3                CPL     C
006D         ?C0350:
006D 5022              JNC     ?C0038
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 148
006F 30000F      R     JNB     bHpole_Curr,?C0039
                                           ; SOURCE LINE # 149
0072 E500        E     MOV     A,Data
0074 6004              JZ      ?C0040
0076 7D03              MOV     R5,#03H
0078 8002              SJMP    ?C0041
007A         ?C0040:
007A 7D43              MOV     R5,#043H
007C         ?C0041:
007C AE05              MOV     R6,AR5
007E 020000      R     LJMP    ?C0034
0081         ?C0039:
                                           ; SOURCE LINE # 151
0081 E500        E     MOV     A,stGUD1
0083 30E404            JNB     ACC.4,?C0043
0086 7D04              MOV     R5,#04H
0088 8002              SJMP    ?C0044
008A         ?C0043:
008A 7D44              MOV     R5,#044H
008C         ?C0044:
008C AE05              MOV     R6,AR5
                                           ; SOURCE LINE # 153
008E 020000      R     LJMP    ?C0034
0091         ?C0038:
                                           ; SOURCE LINE # 154
0091 EE                MOV     A,R6
0092 640D              XRL     A,#0DH
0094 7028              JNZ     ?C0046
0096 A200        R     MOV     C,bVpole_Curr
0098 300001      R     JNB     bHpole_Curr,?C0351
009B B3                CPL     C
009C         ?C0351:
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 55  

009C 5020              JNC     ?C0046
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 160
009E 30000E      R     JNB     bHpole_Curr,?C0047
                                           ; SOURCE LINE # 161
00A1 E500        E     MOV     A,Data
00A3 6004              JZ      ?C0048
00A5 7D01              MOV     R5,#01H
00A7 8002              SJMP    ?C0049
00A9         ?C0048:
00A9 7D41              MOV     R5,#041H
00AB         ?C0049:
00AB AE05              MOV     R6,AR5
00AD 806C              SJMP    ?C0034
00AF         ?C0047:
                                           ; SOURCE LINE # 163
00AF E500        E     MOV     A,stGUD1
00B1 30E404            JNB     ACC.4,?C0051
00B4 7D02              MOV     R5,#02H
00B6 8002              SJMP    ?C0052
00B8         ?C0051:
00B8 7D42              MOV     R5,#042H
00BA         ?C0052:
00BA AE05              MOV     R6,AR5
                                           ; SOURCE LINE # 165
00BC 805D              SJMP    ?C0034
00BE         ?C0046:
                                           ; SOURCE LINE # 166
00BE BE0C13            CJNE    R6,#0CH,?C0054
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
00C1 300007      R     JNB     bHpole_Curr,?C0055
00C4 200004      R     JB      bVpole_Curr,?C0055
                                           ; SOURCE LINE # 169
00C7 7E0A              MOV     R6,#0AH
00C9 8050              SJMP    ?C0034
00CB         ?C0055:
                                           ; SOURCE LINE # 170
00CB E500        E     MOV     A,stGUD1
00CD 30E44B            JNB     ACC.4,?C0034
                                           ; SOURCE LINE # 171
00D0 7E0B              MOV     R6,#0BH
                                           ; SOURCE LINE # 172
00D2 8047              SJMP    ?C0034
00D4         ?C0054:
                                           ; SOURCE LINE # 173
00D4 EE                MOV     A,R6
00D5 6409              XRL     A,#09H
00D7 701D              JNZ     ?C0059
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
00D9 300011      R     JNB     bHpole_Curr,?C0060
00DC 20000E      R     JB      bVpole_Curr,?C0060
                                           ; SOURCE LINE # 176
00DF E500        E     MOV     A,Data
00E1 6004              JZ      ?C0061
00E3 7D06              MOV     R5,#06H
00E5 8002              SJMP    ?C0062
00E7         ?C0061:
00E7 7D07              MOV     R5,#07H
00E9         ?C0062:
00E9 AE05              MOV     R6,AR5
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 56  

00EB 802E              SJMP    ?C0034
00ED         ?C0060:
                                           ; SOURCE LINE # 177
00ED E500        E     MOV     A,stGUD1
00EF 20E429            JB      ACC.4,?C0034
                                           ; SOURCE LINE # 179
00F2 7E08              MOV     R6,#08H
                                           ; SOURCE LINE # 180
00F4 8025              SJMP    ?C0034
00F6         ?C0059:
                                           ; SOURCE LINE # 181
00F6 BE1B09            CJNE    R6,#01BH,?C0066
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
00F9 120000      R     LCALL   L?0501
00FC 401D              JC      ?C0034
                                           ; SOURCE LINE # 184
00FE 7E1A              MOV     R6,#01AH
                                           ; SOURCE LINE # 185
0100 8019              SJMP    ?C0034
0102         ?C0066:
                                           ; SOURCE LINE # 186
0102 BE1A09            CJNE    R6,#01AH,?C0069
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0105 120000      R     LCALL   L?0501
0108 5011              JNC     ?C0034
                                           ; SOURCE LINE # 189
010A 7E1B              MOV     R6,#01BH
                                           ; SOURCE LINE # 190
010C 800D              SJMP    ?C0034
010E         ?C0069:
                                           ; SOURCE LINE # 191
010E BE1E0A            CJNE    R6,#01EH,?C0034
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
0111 7800        R     MOV     R0,#LOW ucRefresh
0113 E6                MOV     A,@R0
0114 D3                SETB    C
0115 9447              SUBB    A,#047H
0117 5002              JNC     ?C0034
                                           ; SOURCE LINE # 194
0119 7E1D              MOV     R6,#01DH
                                           ; SOURCE LINE # 195
011B         ?C0034:
                                           ; SOURCE LINE # 197
011B AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
011D         ?C0027:
                                           ; SOURCE LINE # 201
011D 1E                DEC     R6
011E EE                MOV     A,R6
011F 6007              JZ      ?C0028
0121 EF                MOV     A,R7
0122 F4                CPL     A
0123 7003              JNZ     $ + 5H
0125 020000      R     LJMP    ?C0029
0128         ?C0028:
                                           ; SOURCE LINE # 204
0128 EF                MOV     A,R7
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 57  

0129 F4                CPL     A
012A 703F              JNZ     ?C0075
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
012C 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
012E F6                MOV     @R0,A
012F 08                INC     R0
0130 F6                MOV     @R0,A
                                           ; SOURCE LINE # 208
0131 7E3A              MOV     R6,#03AH
0133         ?C0078:
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0133 120000      R     LCALL   L?0402
0136 5028              JNC     ?C0076
0138 120000      R     LCALL   L?0462
013B 120000      R     LCALL   L?0405
013E 4020              JC      ?C0076
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
0140 EE                MOV     A,R6
0141 120000      R     LCALL   L?0420
0144 120000      R     LCALL   L?0432
0147 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
0149 A604              MOV     @R0,AR4
014B 08                INC     R0
014C F6                MOV     @R0,A
                                           ; SOURCE LINE # 216
014D 120000      R     LCALL   L?0455
0150 120000      R     LCALL   L?0403
0153 500B              JNC     ?C0076
0155 120000      R     LCALL   L?0467
0158 C3                CLR     C
0159 120000      R     LCALL   L?0405
015C 4002              JC      ?C0076
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
015E AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
0160         ?C0076:
                                           ; SOURCE LINE # 222
0160 1E                DEC     R6
0161 7433              MOV     A,#033H
0163 D3                SETB    C
0164 9E                SUBB    A,R6
0165 5004              JNC     ?C0075
0167 EF                MOV     A,R7
0168 F4                CPL     A
0169 60C8              JZ      ?C0078
                                           ; SOURCE LINE # 223
016B         ?C0075:
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 227
016B         ?C0082:
016B 22                RET     
             ; FUNCTION _VGA_Mode_Search (END)

             ; FUNCTION Partial_Display (BEGIN)
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 58  

                                           ; SOURCE LINE # 233
0000 120000      R     LCALL   L?0438
0003 E4                CLR     A
0004 9F                SUBB    A,R7
0005 7404              MOV     A,#04H
0007 9E                SUBB    A,R6
0008 4003              JC      $ + 5H
000A 020000      R     LJMP    ?C0083
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 238
000D 120000      R     LCALL   L?0412
0010 C004              PUSH    AR4
0012 120000      R     LCALL   L?0397
0015 D000              POP     AR0
0017 120000      E     LCALL   ?C?LMUL
001A C004              PUSH    AR4
001C C005              PUSH    AR5
001E C006              PUSH    AR6
0020 C007              PUSH    AR7
0022 900000      E     MOV     DPTR,#Mode_Preset+0262H
0025 120000      R     LCALL   L?0396
0028 120000      R     LCALL   L?0453
002B D003              POP     AR3
002D D002              POP     AR2
002F D001              POP     AR1
0031 D000              POP     AR0
0033 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 240
0036 120000      R     LCALL   L?0478
0039 504C              JNC     ?C0084
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 246
003B 120000      R     LCALL   L?0425
003E FE                MOV     R6,A
003F 120000      R     LCALL   L?0412
0042 C004              PUSH    AR4
0044 120000      R     LCALL   L?0397
0047 D000              POP     AR0
0049 120000      E     LCALL   ?C?LMUL
004C C004              PUSH    AR4
004E C005              PUSH    AR5
0050 C006              PUSH    AR6
0052 C007              PUSH    AR7
0054 900000      E     MOV     DPTR,#Mode_Preset+0262H
0057 120000      R     LCALL   L?0396
005A FF                MOV     R7,A
005B E4                CLR     A
005C FC                MOV     R4,A
005D FD                MOV     R5,A
005E 7BA0              MOV     R3,#0A0H
0060 7927              MOV     R1,#027H
0062 120000      R     LCALL   L?0484
0065 D003              POP     AR3
0067 D002              POP     AR2
0069 D001              POP     AR1
006B D000              POP     AR0
006D 120000      E     LCALL   ?C?ULDIV
0070 8E00        E     MOV     Data+02H,R6
0072 8F00        E     MOV     Data+03H,R7
                                           ; SOURCE LINE # 248
0074 120000      R     LCALL   L?0487
0077 5009              JNC     ?C0085
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 59  

                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 251
0079 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
007B 7604              MOV     @R0,#04H
007D 08                INC     R0
007E 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 252
0080 8008              SJMP    ?C0083
0082         ?C0085:
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
0082 7500BD      R     MOV     ucMode_Temp,#0BDH
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0085 8003              SJMP    ?C0083
0087         ?C0084:
                                           ; SOURCE LINE # 259
0087 75003D      R     MOV     ucMode_Temp,#03DH
                                           ; SOURCE LINE # 260
008A         ?C0083:
                                           ; SOURCE LINE # 262
008A 120000      R     LCALL   L?0438
008D E4                CLR     A
008E 9F                SUBB    A,R7
008F 7404              MOV     A,#04H
0091 9E                SUBB    A,R6
0092 5003              JNC     $ + 5H
0094 020000      R     LJMP    ?C0088
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 265
0097 120000      R     LCALL   L?0413
009A C004              PUSH    AR4
009C 120000      R     LCALL   L?0398
009F D000              POP     AR0
00A1 120000      E     LCALL   ?C?LMUL
00A4 C004              PUSH    AR4
00A6 C005              PUSH    AR5
00A8 C006              PUSH    AR6
00AA C007              PUSH    AR7
00AC 900000      E     MOV     DPTR,#Mode_Preset+0258H
00AF 120000      R     LCALL   L?0396
00B2 120000      R     LCALL   L?0453
00B5 D003              POP     AR3
00B7 D002              POP     AR2
00B9 D001              POP     AR1
00BB D000              POP     AR0
00BD 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 267
00C0 120000      R     LCALL   L?0478
00C3 5075              JNC     ?C0089
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
00C5 120000      R     LCALL   L?0425
00C8 FE                MOV     R6,A
00C9 C3                CLR     C
00CA 7410              MOV     A,#010H
00CC 9F                SUBB    A,R7
00CD 7404              MOV     A,#04H
00CF 9E                SUBB    A,R6
00D0 4027              JC      ?C0090
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 272
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 60  

00D2 120000      R     LCALL   L?0413
00D5 C004              PUSH    AR4
00D7 120000      R     LCALL   L?0398
00DA D000              POP     AR0
00DC 120000      E     LCALL   ?C?LMUL
00DF C004              PUSH    AR4
00E1 C005              PUSH    AR5
00E3 C006              PUSH    AR6
00E5 C007              PUSH    AR7
00E7 900000      E     MOV     DPTR,#Mode_Preset+0258H
00EA 120000      R     LCALL   L?0396
00ED FF                MOV     R7,A
00EE E4                CLR     A
00EF FC                MOV     R4,A
00F0 FD                MOV     R5,A
00F1 7BA0              MOV     R3,#0A0H
00F3 7A01              MOV     R2,#01H
00F5 7927              MOV     R1,#027H
                                           ; SOURCE LINE # 273
00F7 801F              SJMP    ?C0372
00F9         ?C0090:
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 277
00F9 7800        R     MOV     R0,#LOW usHsync
00FB 120000      R     LCALL   L?0400
00FE 120000      R     LCALL   L?0414
0101 C004              PUSH    AR4
0103 C005              PUSH    AR5
0105 C006              PUSH    AR6
0107 C007              PUSH    AR7
0109 900000      E     MOV     DPTR,#Mode_Preset+0258H
010C 120000      R     LCALL   L?0396
010F FF                MOV     R7,A
0110 E4                CLR     A
0111 FC                MOV     R4,A
0112 FD                MOV     R5,A
0113 7B9A              MOV     R3,#09AH
0115 7A09              MOV     R2,#09H
0117 F9                MOV     R1,A
0118         ?C0372:
0118 F8                MOV     R0,A
0119 120000      E     LCALL   ?C?LMUL
011C D003              POP     AR3
011E D002              POP     AR2
0120 D001              POP     AR1
0122 D000              POP     AR0
0124 120000      E     LCALL   ?C?ULDIV
0127 8E00        E     MOV     Data+02H,R6
0129 8F00        E     MOV     Data+03H,R7
                                           ; SOURCE LINE # 278
012B         ?C0091:
                                           ; SOURCE LINE # 280
012B 120000      R     LCALL   L?0487
012E 5005              JNC     ?C0092
                                           ; SOURCE LINE # 281
0130 7500FF      R     MOV     ucMode_Temp,#0FFH
0133 8008              SJMP    ?C0088
0135         ?C0092:
                                           ; SOURCE LINE # 283
0135 7500BC      R     MOV     ucMode_Temp,#0BCH
                                           ; SOURCE LINE # 284
0138 8003              SJMP    ?C0088
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 61  

013A         ?C0089:
                                           ; SOURCE LINE # 286
013A 75003C      R     MOV     ucMode_Temp,#03CH
                                           ; SOURCE LINE # 287
013D         ?C0088:
                                           ; SOURCE LINE # 289
013D AF00        R     MOV     R7,ucMode_Temp
                                           ; SOURCE LINE # 291
013F         ?C0095:
013F 22                RET     
             ; FUNCTION Partial_Display (END)

             ; FUNCTION Sync_Type_Switch (BEGIN)
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
0000 7800        R     MOV     R0,#LOW ucMode_Curr
0002 E6                MOV     A,@R0
0003 7032              JNZ     ?C0101
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
0005 7800        R     MOV     R0,#LOW ucSync_Type
0007 E6                MOV     A,@R0
0008 B4100C            CJNE    A,#010H,?C0097
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
000B 7E00        E     MOV     R6,#HIGH VGA_SET_SS
000D 7F00        E     MOV     R7,#LOW VGA_SET_SS
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
000F 120000      R     LCALL   L?0496
                                           ; SOURCE LINE # 303
0012 E4                CLR     A
0013 7800        R     MOV     R0,#LOW ucSync_Type
0015 F6                MOV     @R0,A
                                           ; SOURCE LINE # 305
0016 22                RET     
0017         ?C0097:
                                           ; SOURCE LINE # 306
0017 7800        R     MOV     R0,#LOW ucSync_Type
0019 E6                MOV     A,@R0
001A 700C              JNZ     ?C0099
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
001C 7E00        E     MOV     R6,#HIGH VGA_SET_SOG
001E 7F00        E     MOV     R7,#LOW VGA_SET_SOG
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0020 120000      R     LCALL   L?0496
                                           ; SOURCE LINE # 312
0023 7800        R     MOV     R0,#LOW ucSync_Type
0025 7620              MOV     @R0,#020H
                                           ; SOURCE LINE # 316
0027 22                RET     
0028         ?C0099:
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
0028 7E00        E     MOV     R6,#HIGH VGA_SET_CS
002A 7F00        E     MOV     R7,#LOW VGA_SET_CS
002C 120000      E     LCALL   _RTDCodeW
                                           ; SOURCE LINE # 321
002F D200        R     SETB    bVpole_Curr
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 62  

                                           ; SOURCE LINE # 322
0031 D200        R     SETB    bHpole_Curr
                                           ; SOURCE LINE # 323
0033 7800        R     MOV     R0,#LOW ucSync_Type
0035 7610              MOV     @R0,#010H
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
0037         ?C0101:
0037 22                RET     
0038         L?0496:
0038 120000      E     LCALL   _RTDCodeW
003B D200        R     SETB    bVpole_Curr
003D D200        R     SETB    bHpole_Curr
003F 22                RET     
             ; FUNCTION Sync_Type_Switch (END)

             ; FUNCTION Sync_Type_Confirm (BEGIN)
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 426
0000 22                RET     
             ; FUNCTION Sync_Type_Confirm (END)

             ; FUNCTION Detect_Input_Mode (BEGIN)
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 435
0000 E4                CLR     A
0001 FB                MOV     R3,A
0002 7D09              MOV     R5,#09H
0004 7F4C              MOV     R7,#04CH
0006 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 437
0009 E500        E     MOV     A,Data
000B 30E114            JNB     ACC.1,?C0103
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 440
000E E500        E     MOV     A,stGUD1+01H
0010 5407              ANL     A,#07H
0012 7004              JNZ     ?C0104
0014 7D20              MOV     R5,#020H
0016 8002              SJMP    ?C0105
0018         ?C0104:
0018 7D00              MOV     R5,#00H
001A         ?C0105:
001A 7F4C              MOV     R7,#04CH
001C 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
001F 020000      R     LJMP    ?C0373
0022         ?C0103:
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 462
0022 120000      R     LCALL   L?0445
0025 7800        R     MOV     R0,#LOW usStdHS
0027 A606              MOV     @R0,AR6
0029 08                INC     R0
002A A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 463
002C 120000      R     LCALL   L?0468
002F 7800        R     MOV     R0,#LOW usStdVS
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 63  

0031 A606              MOV     @R0,AR6
0033 08                INC     R0
0034 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
0036 120000      R     LCALL   L?0498
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
0039 120000      R     LCALL   L?0428
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
003C 120000      R     LCALL   L?0471
                                           ; SOURCE LINE # 478
003F E500        E     MOV     A,stGUD1+01H
0041 5407              ANL     A,#07H
0043 7006              JNZ     ?C0107
                                           ; SOURCE LINE # 479
0045 850000      R     MOV     usHS_Pulse,Data+06H
0048 850000      R     MOV     usHS_Pulse+01H,Data+07H
004B         ?C0107:
                                           ; SOURCE LINE # 485
004B 7800        R     MOV     R0,#LOW usHsync
004D 120000      R     LCALL   L?0400
0050 C004              PUSH    AR4
0052 120000      R     LCALL   L?0411
0055 120000      R     LCALL   L?0468
0058 E4                CLR     A
0059 D000              POP     AR0
                                           ; SOURCE LINE # 486
005B 120000      R     LCALL   L?0418
                                           ; SOURCE LINE # 487
005E 30E005            JNB     ACC.0,?C0108
0061 120000      R     LCALL   L?0480
0064 8006              SJMP    ?C0109
0066         ?C0108:
0066 7800        R     MOV     R0,#LOW ucRefresh
0068 E6                MOV     A,@R0
0069 C3                CLR     C
006A 13                RRC     A
006B FF                MOV     R7,A
006C         ?C0109:
006C 7800        R     MOV     R0,#LOW ucRefresh
006E A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 490
0070 120000      R     LCALL   L?0445
0073 7800        R     MOV     R0,#LOW usStdHS
0075 120000      R     LCALL   L?0457
0078 9F                SUBB    A,R7
0079 EC                MOV     A,R4
007A 9E                SUBB    A,R6
007B 500C              JNC     ?C0110
007D 120000      R     LCALL   L?0481
0080 4007              JC      ?C0110
0082 7800        R     MOV     R0,#LOW usHsync
0084 A604              MOV     @R0,AR4
0086 08                INC     R0
0087 A605              MOV     @R0,AR5
0089         ?C0110:
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 64  

                                           ; SOURCE LINE # 491
0089 120000      R     LCALL   L?0469
008C 7800        R     MOV     R0,#LOW usStdVS
008E 120000      R     LCALL   L?0457
0091 9F                SUBB    A,R7
0092 EC                MOV     A,R4
0093 9E                SUBB    A,R6
0094 500C              JNC     ?C0111
0096 120000      R     LCALL   L?0481
0099 4007              JC      ?C0111
009B 7800        R     MOV     R0,#LOW usVsync
009D A604              MOV     @R0,AR4
009F 08                INC     R0
00A0 A605              MOV     @R0,AR5
00A2         ?C0111:
                                           ; SOURCE LINE # 494
00A2 A200        R     MOV     C,bVpole_Curr
00A4 300001      R     JNB     bVpole_Prev,?C0352
00A7 B3                CPL     C
00A8         ?C0352:
00A8 4008              JC      ?C0113
00AA A200        R     MOV     C,bHpole_Curr
00AC 300001      R     JNB     bHpole_Prev,?C0353
00AF B3                CPL     C
00B0         ?C0353:
00B0 5044              JNC     ?C0112
00B2         ?C0113:
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
00B2 7B01              MOV     R3,#01H
00B4 7D01              MOV     R5,#01H
00B6 7F05              MOV     R7,#05H
00B8 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 498
00BB E500        E     MOV     A,stGUD1+01H
00BD 5407              ANL     A,#07H
00BF FF                MOV     R7,A
00C0 7019              JNZ     ?C0114
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
00C2 5300D7      E     ANL     Data,#0D7H
                                           ; SOURCE LINE # 502
00C5 200003      R     JB      bHpole_Curr,?C0115
00C8 430020      E     ORL     Data,#020H
00CB         ?C0115:
                                           ; SOURCE LINE # 504
00CB 200008      R     JB      bVpole_Curr,?C0116
00CE 7800        R     MOV     R0,#LOW ucSync_Type
00D0 E6                MOV     A,@R0
00D1 7003              JNZ     ?C0116
00D3 430008      E     ORL     Data,#08H
00D6         ?C0116:
                                           ; SOURCE LINE # 506
00D6 7500FF      R     MOV     ucMode_Temp,#0FFH
                                           ; SOURCE LINE # 507
00D9 8012              SJMP    ?C0117
00DB         ?C0114:
                                           ; SOURCE LINE # 508
00DB BF010F            CJNE    R7,#01H,?C0117
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
00DE 5300F3      E     ANL     Data,#0F3H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 65  

                                           ; SOURCE LINE # 512
00E1 200003      R     JB      bVpole_Curr,?C0119
00E4 430008      E     ORL     Data,#08H
00E7         ?C0119:
                                           ; SOURCE LINE # 513
00E7 200003      R     JB      bHpole_Curr,?C0117
00EA 430004      E     ORL     Data,#04H
                                           ; SOURCE LINE # 514
00ED         ?C0117:
                                           ; SOURCE LINE # 515
00ED AD00        E     MOV     R5,Data
00EF 7F05              MOV     R7,#05H
00F1 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 518
00F4 8074              SJMP    ?C0106
00F6         ?C0112:
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 521
00F6 120000      R     LCALL   L?0446
00F9 D3                SETB    C
00FA 74FF              MOV     A,#0FFH
00FC 9F                SUBB    A,R7
00FD 7407              MOV     A,#07H
00FF 9E                SUBB    A,R6
0100 4013              JC      ?C0123
0102 120000      R     LCALL   L?0456
0105 74FF              MOV     A,#0FFH
0107 9D                SUBB    A,R5
0108 7407              MOV     A,#07H
010A 9C                SUBB    A,R4
010B 4008              JC      ?C0123
010D EF                MOV     A,R7
010E 4E                ORL     A,R6
010F 6004              JZ      ?C0123
0111 ED                MOV     A,R5
0112 4C                ORL     A,R4
0113 7005              JNZ     ?C0122
0115         ?C0123:
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
0115         ?C0373:
0115 E4                CLR     A
0116 F500        R     MOV     ucMode_Temp,A
                                           ; SOURCE LINE # 524
0118 8050              SJMP    ?C0106
011A         ?C0122:
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
011A E500        E     MOV     A,stGUD1+01H
011C 5407              ANL     A,#07H
011E 7009              JNZ     ?C0125
0120 AF00        R     MOV     R7,usHS_Pulse+01H
0122 AE00        R     MOV     R6,usHS_Pulse
0124 120000      R     LCALL   _VGA_Mode_Search
0127 8002              SJMP    ?C0126
0129         ?C0125:
0129 7FFF              MOV     R7,#0FFH
012B         ?C0126:
012B 8F00        R     MOV     ucMode_Temp,R7
                                           ; SOURCE LINE # 530
012D 7800        R     MOV     R0,#LOW ucRefresh
012F E6                MOV     A,@R0
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 66  

0130 FF                MOV     R7,A
0131 7430              MOV     A,#030H
0133 D3                SETB    C
0134 9F                SUBB    A,R7
0135 5006              JNC     ?C0128
0137 744C              MOV     A,#04CH
0139 C3                CLR     C
013A 9F                SUBB    A,R7
013B 5005              JNC     ?C0127
013D         ?C0128:
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
013D 7500FF      R     MOV     ucMode_Temp,#0FFH
                                           ; SOURCE LINE # 533
0140 8028              SJMP    ?C0106
0142         ?C0127:
                                           ; SOURCE LINE # 534
0142 E500        R     MOV     A,ucMode_Temp
0144 B4FF14            CJNE    A,#0FFH,?C0130
0147 7800        E     MOV     R0,#LOW usIPV_ACT_LEN+01H
0149 E6                MOV     A,@R0
014A 18                DEC     R0
014B 46                ORL     A,@R0
014C 600D              JZ      ?C0130
014E E500        E     MOV     A,stGUD1+01H
0150 5407              ANL     A,#07H
0152 7007              JNZ     ?C0130
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 536
0154 120000      R     LCALL   Partial_Display
0157 8F00        R     MOV     ucMode_Temp,R7
                                           ; SOURCE LINE # 537
0159 800F              SJMP    ?C0106
015B         ?C0130:
                                           ; SOURCE LINE # 538
015B E500        E     MOV     A,stGUD1+01H
015D 5407              ANL     A,#07H
015F FF                MOV     R7,A
0160 BF0107            CJNE    R7,#01H,?C0106
                                           ; SOURCE LINE # 539
0163 AF00        R     MOV     R7,ucMode_Temp
0165 120000      R     LCALL   _Seek_DVI_Mode
0168 8F00        R     MOV     ucMode_Temp,R7
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
016A         ?C0106:
                                           ; SOURCE LINE # 546
016A E500        E     MOV     A,stGUD1+01H
016C 5407              ANL     A,#07H
016E FB                MOV     R3,A
016F 7019              JNZ     ?C0133
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
0171 7800        R     MOV     R0,#LOW ucSync_Type
0173 E6                MOV     A,@R0
0174 B42013            CJNE    A,#020H,?C0133
0177 AE00        R     MOV     R6,usHS_Pulse
0179 AF00        R     MOV     R7,usHS_Pulse+01H
017B 7D07              MOV     R5,#07H
017D 120000      R     LCALL   L?0460
0180 120000      E     LCALL   ?C?UIDIV
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 67  

0183 EF                MOV     A,R7
0184 4E                ORL     A,R6
0185 6003              JZ      ?C0133
                                           ; SOURCE LINE # 549
                                           ; SOURCE LINE # 552
0187 E4                CLR     A
0188 F500        R     MOV     ucMode_Temp,A
                                           ; SOURCE LINE # 553
                                           ; SOURCE LINE # 554
018A         ?C0133:
                                           ; SOURCE LINE # 557
018A E500        R     MOV     A,ucMode_Temp
018C F4                CPL     A
018D 6004              JZ      ?C0136
018F E500        R     MOV     A,ucMode_Temp
0191 7069              JNZ     ?C0135
0193         ?C0136:
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 560
0193 EB                MOV     A,R3
0194 7009              JNZ     ?C0137
                                           ; SOURCE LINE # 561
                                           ; SOURCE LINE # 562
0196 7800        R     MOV     R0,#LOW ucSync_Type
0198 E6                MOV     A,@R0
0199 B42003            CJNE    A,#020H,?C0137
                                           ; SOURCE LINE # 563
019C E4                CLR     A
019D F500        R     MOV     ucMode_Temp,A
                                           ; SOURCE LINE # 564
019F         ?C0137:
                                           ; SOURCE LINE # 566
019F 7800        R     MOV     R0,#LOW ucMode_Found
01A1 E6                MOV     A,@R0
01A2 FF                MOV     R7,A
01A3 F4                CPL     A
01A4 6007              JZ      ?C0139
01A6 EF                MOV     A,R7
01A7 6004              JZ      ?C0139
01A9 E4                CLR     A
01AA 7800        R     MOV     R0,#LOW ucMode_Times
01AC F6                MOV     @R0,A
01AD         ?C0139:
                                           ; SOURCE LINE # 568
01AD 7800        R     MOV     R0,#LOW ucMode_Found
01AF A600        R     MOV     @R0,ucMode_Temp
                                           ; SOURCE LINE # 570
01B1 7405              MOV     A,#05H
01B3 D3                SETB    C
01B4 7800        R     MOV     R0,#LOW ucMode_Times
01B6 96                SUBB    A,@R0
01B7 4013              JC      ?C0140
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 573
01B9 06                INC     @R0
                                           ; SOURCE LINE # 575
01BA E500        E     MOV     A,stGUD1+01H
01BC 5407              ANL     A,#07H
01BE 6401              XRL     A,#01H
01C0 6003              JZ      $ + 5H
01C2 020000      R     LJMP    ?C0157
                                           ; SOURCE LINE # 576
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 68  

                                           ; SOURCE LINE # 578
01C5 7D03              MOV     R5,#03H
01C7 7FFF              MOV     R7,#0FFH
01C9 020000      E     LJMP    _RTDSetByte
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
01CC         ?C0140:
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 583
01CC E500        E     MOV     A,stGUD1+01H
01CE 5407              ANL     A,#07H
01D0 FF                MOV     R7,A
01D1 BF0107            CJNE    R7,#01H,?C0143
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 586
01D4 E4                CLR     A
01D5 FD                MOV     R5,A
01D6 7FFF              MOV     R7,#0FFH
01D8 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 587
01DB         ?C0143:
                                           ; SOURCE LINE # 589
01DB 7800        R     MOV     R0,#LOW ucMode_Found
01DD E6                MOV     A,@R0
01DE FF                MOV     R7,A
01DF 7800        R     MOV     R0,#LOW ucMode_Curr
01E1 E6                MOV     A,@R0
01E2 B50703            CJNE    A,AR7,?C0144
01E5 D3                SETB    C
01E6 8001              SJMP    ?C0145
01E8         ?C0144:
01E8 C3                CLR     C
01E9         ?C0145:
01E9 9200        R     MOV     bStable,C
                                           ; SOURCE LINE # 590
01EB 7800        R     MOV     R0,#LOW ucMode_Curr
01ED A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 591
01EF 7800        R     MOV     R0,#LOW ucMode_Times
01F1 7603              MOV     @R0,#03H
                                           ; SOURCE LINE # 593
01F3 E500        E     MOV     A,stGUD1+01H
01F5 5407              ANL     A,#07H
01F7 7059              JNZ     ?C0157
                                           ; SOURCE LINE # 594
01F9 020000      R     LJMP    Sync_Type_Switch
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
01FC         ?C0135:
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
01FC 7800        R     MOV     R0,#LOW ucMode_Found
01FE E6                MOV     A,@R0
01FF 6500        R     XRL     A,ucMode_Temp
0201 6011              JZ      ?C0148
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
0203 7800        R     MOV     R0,#LOW ucMode_Times
0205 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 603
0207 7800        R     MOV     R0,#LOW ucMode_Found
0209 A600        R     MOV     @R0,ucMode_Temp
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 69  

                                           ; SOURCE LINE # 605
020B E500        E     MOV     A,stGUD1+01H
020D 5407              ANL     A,#07H
020F 7041              JNZ     ?C0157
                                           ; SOURCE LINE # 606
0211 020000      R     LJMP    Sync_Type_Confirm
                                           ; SOURCE LINE # 607
0214         ?C0148:
                                           ; SOURCE LINE # 609
                                           ; SOURCE LINE # 610
0214 E500        E     MOV     A,stGUD1+01H
0216 5407              ANL     A,#07H
0218         ?C0151:
0218 7F03              MOV     R7,#03H
021A         ?C0152:
021A 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 612
021C E500        E     MOV     A,Data
021E D3                SETB    C
021F 7800        R     MOV     R0,#LOW ucMode_Times
0221 96                SUBB    A,@R0
0222 4002              JC      ?C0153
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 614
0224 06                INC     @R0
                                           ; SOURCE LINE # 615
0225 22                RET     
0226         ?C0153:
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 619
0226 900000      E     MOV     DPTR,#M512_Port51
0229 7401              MOV     A,#01H
022B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
022C 7D40              MOV     R5,#040H
022E 7F02              MOV     R7,#02H
0230 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 622
0233 7E00        E     MOV     R6,#HIGH OSD_Reset
0235 7F00        E     MOV     R7,#LOW OSD_Reset
0237 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 624
023A 7800        R     MOV     R0,#LOW ucMode_Found
023C E6                MOV     A,@R0
023D 7800        R     MOV     R0,#LOW ucMode_Curr
023F F6                MOV     @R0,A
                                           ; SOURCE LINE # 625
0240 E4                CLR     A
0241 7800        R     MOV     R0,#LOW ucMode_Times
0243 F6                MOV     @R0,A
                                           ; SOURCE LINE # 626
0244 C200        R     CLR     bStable
                                           ; SOURCE LINE # 628
0246 E500        E     MOV     A,stGUD1+01H
0248 5407              ANL     A,#07H
024A 7003              JNZ     ?C0155
                                           ; SOURCE LINE # 629
024C 020000      R     LJMP    Display_VGA_Set
024F         ?C0155:
                                           ; SOURCE LINE # 631
024F 120000      R     LCALL   Display_DVI_Set
                                           ; SOURCE LINE # 646
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 70  

                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
0252         ?C0157:
0252 22                RET     
             ; FUNCTION Detect_Input_Mode (END)

             ; FUNCTION Check_Input_Mode (BEGIN)
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 654
0000 E4                CLR     A
0001 FB                MOV     R3,A
0002 7D05              MOV     R5,#05H
0004 7F4C              MOV     R7,#04CH
0006 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 656
0009 E500        E     MOV     A,Data
000B 30E110            JNB     ACC.1,?C0158
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 658
000E E500        E     MOV     A,stGUD1+01H
0010 5407              ANL     A,#07H
0012 7004              JNZ     ?C0159
0014 7D20              MOV     R5,#020H
0016 8002              SJMP    ?C0160
0018         ?C0159:
0018 7D00              MOV     R5,#00H
001A         ?C0160:
001A 7F4C              MOV     R7,#04CH
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
001C 8055              SJMP    ?C0374
001E         ?C0158:
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 664
                                           ; SOURCE LINE # 665
001E 120000      R     LCALL   L?0498
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
0021 120000      R     LCALL   L?0429
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 672
0024 120000      R     LCALL   L?0471
                                           ; SOURCE LINE # 675
0027 A200        R     MOV     C,bVpole_Curr
0029 300001      R     JNB     bVpole_Prev,?C0354
002C B3                CPL     C
002D         ?C0354:
002D 4008              JC      ?C0163
002F A200        R     MOV     C,bHpole_Curr
0031 300001      R     JNB     bHpole_Prev,?C0355
0034 B3                CPL     C
0035         ?C0355:
0035 5041              JNC     ?C0162
0037         ?C0163:
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
0037 7B01              MOV     R3,#01H
0039 7D01              MOV     R5,#01H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 71  

003B 7F05              MOV     R7,#05H
003D 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 687
0040 E500        E     MOV     A,stGUD1+01H
0042 5407              ANL     A,#07H
0044 FF                MOV     R7,A
0045 7016              JNZ     ?C0164
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
0047 5300D7      E     ANL     Data,#0D7H
                                           ; SOURCE LINE # 691
004A 200003      R     JB      bHpole_Curr,?C0165
004D 430020      E     ORL     Data,#020H
0050         ?C0165:
                                           ; SOURCE LINE # 693
0050 20001C      R     JB      bVpole_Curr,?C0167
0053 7800        R     MOV     R0,#LOW ucSync_Type
0055 E6                MOV     A,@R0
0056 7017              JNZ     ?C0167
0058 430008      E     ORL     Data,#08H
                                           ; SOURCE LINE # 694
005B 8012              SJMP    ?C0167
005D         ?C0164:
                                           ; SOURCE LINE # 695
005D BF010F            CJNE    R7,#01H,?C0167
                                           ; SOURCE LINE # 696
                                           ; SOURCE LINE # 697
0060 5300F3      E     ANL     Data,#0F3H
                                           ; SOURCE LINE # 699
0063 200003      R     JB      bVpole_Curr,?C0169
0066 430008      E     ORL     Data,#08H
0069         ?C0169:
                                           ; SOURCE LINE # 700
0069 200003      R     JB      bHpole_Curr,?C0167
006C 430004      E     ORL     Data,#04H
                                           ; SOURCE LINE # 701
006F         ?C0167:
                                           ; SOURCE LINE # 703
006F AD00        E     MOV     R5,Data
0071 7F05              MOV     R7,#05H
0073         ?C0374:
0073 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
0076 8045              SJMP    ?C0376
0078         ?C0162:
                                           ; SOURCE LINE # 708
                                           ; SOURCE LINE # 709
0078 120000      R     LCALL   L?0446
007B D3                SETB    C
007C 74FF              MOV     A,#0FFH
007E 9F                SUBB    A,R7
007F 7407              MOV     A,#07H
0081 9E                SUBB    A,R6
0082 4013              JC      ?C0173
0084 120000      R     LCALL   L?0456
0087 74FF              MOV     A,#0FFH
0089 9D                SUBB    A,R5
008A 7407              MOV     A,#07H
008C 9C                SUBB    A,R4
008D 4008              JC      ?C0173
008F EF                MOV     A,R7
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 72  

0090 4E                ORL     A,R6
0091 6004              JZ      ?C0173
0093 ED                MOV     A,R5
0094 4C                ORL     A,R4
0095 7002              JNZ     ?C0172
0097         ?C0173:
                                           ; SOURCE LINE # 710
                                           ; SOURCE LINE # 711
0097         ?C0375:
                                           ; SOURCE LINE # 712
0097 8024              SJMP    ?C0376
0099         ?C0172:
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 715
0099 7800        R     MOV     R0,#LOW usStdHS
009B E6                MOV     A,@R0
009C FE                MOV     R6,A
009D 08                INC     R0
009E E6                MOV     A,@R0
009F 7800        R     MOV     R0,#LOW usHsync
00A1 120000      R     LCALL   L?0458
00A4 4017              JC      ?C0176
00A6 120000      R     LCALL   L?0482
00A9 5012              JNC     ?C0176
00AB 7800        R     MOV     R0,#LOW usStdVS
00AD E6                MOV     A,@R0
00AE FE                MOV     R6,A
00AF 08                INC     R0
00B0 E6                MOV     A,@R0
00B1 7800        R     MOV     R0,#LOW usVsync
00B3 120000      R     LCALL   L?0458
00B6 4005              JC      ?C0176
00B8 120000      R     LCALL   L?0482
00BB 4006              JC      ?C0175
00BD         ?C0176:
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 718
00BD         ?C0376:
00BD 7800        R     MOV     R0,#LOW ucMode_Found
00BF 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 719
00C1 8006              SJMP    ?C0161
00C3         ?C0175:
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
00C3 7800        R     MOV     R0,#LOW ucMode_Curr
00C5 E6                MOV     A,@R0
00C6 7800        R     MOV     R0,#LOW ucMode_Found
00C8 F6                MOV     @R0,A
                                           ; SOURCE LINE # 723
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
00C9         ?C0161:
                                           ; SOURCE LINE # 728
00C9 7800        R     MOV     R0,#LOW ucMode_Found
00CB E6                MOV     A,@R0
00CC B4FF03            CJNE    A,#0FFH,?C0178
                                           ; SOURCE LINE # 729
00CF 020000      E     LJMP    Reset_Mode
00D2         ?C0178:
                                           ; SOURCE LINE # 731
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 73  

                                           ; SOURCE LINE # 732
00D2 D200        R     SETB    bStable
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 742
00D4         ?C0180:
00D4 22                RET     
             ; FUNCTION Check_Input_Mode (END)

             ; FUNCTION _Seek_DVI_Mode (BEGIN)
                                           ; SOURCE LINE # 747
0000 8F00        R     MOV     mode,R7
                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 752
0002 7D03              MOV     R5,#03H
0004 7F4C              MOV     R7,#04CH
0006 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 754
0009 75003C      R     MOV     Wait_Time_Cnt,#03CH
000C         ?C0183:
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 757
000C 7F01              MOV     R7,#01H
000E 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 758
0011 E4                CLR     A
0012 FB                MOV     R3,A
0013 7D07              MOV     R5,#07H
0015 7F4C              MOV     R7,#04CH
0017 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 760
001A E500        E     MOV     A,Data
001C 30E103            JNB     ACC.1,?C0182
001F D500EA      R     DJNZ    Wait_Time_Cnt,?C0183
0022         ?C0182:
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
0022 120000      R     LCALL   L?0428
                                           ; SOURCE LINE # 771
0025 E500        E     MOV     A,Data+03H
0027 4500        E     ORL     A,Data+02H
0029 6020              JZ      ?C0186
002B D3                SETB    C
002C 74FF              MOV     A,#0FFH
002E 9500        E     SUBB    A,Data+03H
0030 7407              MOV     A,#07H
0032 9500        E     SUBB    A,Data+02H
0034 4015              JC      ?C0186
0036 E500        E     MOV     A,Data+05H
0038 4500        E     ORL     A,Data+04H
003A 600F              JZ      ?C0186
003C D3                SETB    C
003D 74FF              MOV     A,#0FFH
003F 9500        E     SUBB    A,Data+05H
0041 7407              MOV     A,#07H
0043 9500        E     SUBB    A,Data+04H
0045 4004              JC      ?C0186
0047 E500        R     MOV     A,Wait_Time_Cnt
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 74  

0049 700A              JNZ     ?C0185
004B         ?C0186:
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 774
004B E4                CLR     A
004C FD                MOV     R5,A
004D 7F4C              MOV     R7,#04CH
004F 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 776
0052 7FFF              MOV     R7,#0FFH
0054 22                RET     
                                           ; SOURCE LINE # 777
0055         ?C0185:
                                           ; SOURCE LINE # 780
0055 E500        E     MOV     A,Data+03H
0057 25E0              ADD     A,ACC
0059 7900        E     MOV     R1,#LOW usADC_Clock+01H
005B F7                MOV     @R1,A
005C E500        E     MOV     A,Data+02H
005E 33                RLC     A
005F 19                DEC     R1
0060 F7                MOV     @R1,A
                                           ; SOURCE LINE # 783
0061 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
0063 A600        E     MOV     @R0,Data+04H
0065 08                INC     R0
0066 A600        E     MOV     @R0,Data+05H
                                           ; SOURCE LINE # 784
0068 E500        E     MOV     A,Data+07H
006A 25E0              ADD     A,ACC
006C 7900        E     MOV     R1,#LOW usIPH_ACT_WID+01H
006E F7                MOV     @R1,A
006F E500        E     MOV     A,Data+06H
0071 33                RLC     A
0072 19                DEC     R1
0073 F7                MOV     @R1,A
                                           ; SOURCE LINE # 787
0074 D3                SETB    C
0075 745E              MOV     A,#05EH
0077 9500        E     SUBB    A,Data+05H
0079 7401              MOV     A,#01H
007B 9500        E     SUBB    A,Data+04H
007D 4003              JC      ?C0188
007F 7FFF              MOV     R7,#0FFH
0081 22                RET     
0082         ?C0188:
                                           ; SOURCE LINE # 790
0082 7800        E     MOV     R0,#LOW usIPH_ACT_WID
0084 E6                MOV     A,@R0
0085 FE                MOV     R6,A
0086 08                INC     R0
0087 E6                MOV     A,@R0
0088 FF                MOV     R7,A
0089 5407              ANL     A,#07H
008B FD                MOV     R5,A
008C C3                CLR     C
008D 7402              MOV     A,#02H
008F 9D                SUBB    A,R5
0090 E4                CLR     A
0091 9400              SUBB    A,#00H
0093 500A              JNC     ?C0189
0095 EF                MOV     A,R7
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 75  

0096 2408              ADD     A,#08H
0098 FF                MOV     R7,A
0099 E4                CLR     A
009A 3E                ADDC    A,R6
009B FE                MOV     R6,A
009C EF                MOV     A,R7
009D 8006              SJMP    ?C0377
009F         ?C0189:
009F 7800        E     MOV     R0,#LOW usIPH_ACT_WID
00A1 E6                MOV     A,@R0
00A2 FE                MOV     R6,A
00A3 08                INC     R0
00A4 E6                MOV     A,@R0
00A5         ?C0377:
00A5 54F8              ANL     A,#0F8H
00A7 FF                MOV     R7,A
00A8         ?C0190:
00A8 7800        E     MOV     R0,#LOW usIPH_ACT_WID
00AA EE                MOV     A,R6
00AB F6                MOV     @R0,A
00AC 08                INC     R0
00AD EF                MOV     A,R7
00AE F6                MOV     @R0,A
                                           ; SOURCE LINE # 793
00AF C3                CLR     C
00B0 E4                CLR     A
00B1 9F                SUBB    A,R7
00B2 7405              MOV     A,#05H
00B4 9E                SUBB    A,R6
00B5 5006              JNC     ?C0191
00B7 18                DEC     R0
00B8 7605              MOV     @R0,#05H
00BA 08                INC     R0
00BB 7600              MOV     @R0,#00H
00BD         ?C0191:
                                           ; SOURCE LINE # 796
00BD 120000      R     LCALL   L?0426
00C0 FE                MOV     R6,A
00C1 E4                CLR     A
00C2 FC                MOV     R4,A
00C3 FD                MOV     R5,A
00C4 120000      R     LCALL   L?0441
00C7 E4                CLR     A
00C8 7B10              MOV     R3,#010H
00CA 7A04              MOV     R2,#04H
00CC F9                MOV     R1,A
00CD F8                MOV     R0,A
00CE 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 798
00D1 C3                CLR     C
00D2 E500        E     MOV     A,Data+01H
00D4 7800        E     MOV     R0,#LOW usIPV_ACT_LEN+01H
00D6 96                SUBB    A,@R0
00D7 E500        E     MOV     A,Data
00D9 18                DEC     R0
00DA 96                SUBB    A,@R0
00DB 5005              JNC     ?C0192
00DD A600        E     MOV     @R0,Data
00DF 08                INC     R0
00E0 A600        E     MOV     @R0,Data+01H
00E2         ?C0192:
                                           ; SOURCE LINE # 800
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 76  

00E2 75003C      R     MOV     mode,#03CH
                                           ; SOURCE LINE # 802
00E5 E500        R     MOV     A,mode
00E7 643C              XRL     A,#03CH
00E9 6003              JZ      $ + 5H
00EB 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 805
00EE 750033      R     MOV     Wait_Time_Cnt,#033H
00F1         ?C0196:
                                           ; SOURCE LINE # 807
                                           ; SOURCE LINE # 808
00F1 120000      R     LCALL   L?0419
00F4 120000      R     LCALL   L?0395
00F7 FF                MOV     R7,A
00F8 120000      R     LCALL   L?0415
00FB 120000      R     LCALL   L?0432
00FE FD                MOV     R5,A
00FF C3                CLR     C
0100 9F                SUBB    A,R7
0101 EC                MOV     A,R4
0102 9E                SUBB    A,R6
0103 502A              JNC     ?C0197
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 812
0105 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
0107 E6                MOV     A,@R0
0108 FE                MOV     R6,A
0109 08                INC     R0
010A E6                MOV     A,@R0
010B FF                MOV     R7,A
010C ED                MOV     A,R5
010D 9F                SUBB    A,R7
010E EC                MOV     A,R4
010F 9E                SUBB    A,R6
0110 4003              JC      $ + 5H
0112 020000      R     LJMP    ?C0194
0115 120000      R     LCALL   L?0419
0118 F583              MOV     DPH,A
011A 7401              MOV     A,#01H
011C 93                MOVC    A,@A+DPTR
011D 2418              ADD     A,#018H
011F FD                MOV     R5,A
0120 E4                CLR     A
0121 93                MOVC    A,@A+DPTR
0122 3400              ADDC    A,#00H
0124 FC                MOV     R4,A
0125 C3                CLR     C
0126 ED                MOV     A,R5
0127 9F                SUBB    A,R7
0128 EC                MOV     A,R4
0129 9E                SUBB    A,R6
012A 5014              JNC     ?C0200
012C 020000      R     LJMP    ?C0194
                                           ; SOURCE LINE # 813
012F         ?C0197:
                                           ; SOURCE LINE # 815
                                           ; SOURCE LINE # 816
012F 120000      R     LCALL   L?0415
0132 F583              MOV     DPH,A
0134 120000      R     LCALL   L?0439
0137 7401              MOV     A,#01H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 77  

0139 93                MOVC    A,@A+DPTR
013A 9F                SUBB    A,R7
013B E4                CLR     A
013C 93                MOVC    A,@A+DPTR
013D 9E                SUBB    A,R6
013E 4054              JC      ?C0194
                                           ; SOURCE LINE # 817
0140         ?C0200:
                                           ; SOURCE LINE # 820
0140 75F00A            MOV     B,#0AH
0143 E500        R     MOV     A,Wait_Time_Cnt
0145 A4                MUL     AB
0146 2400        E     ADD     A,#LOW Mode_Preset
0148 F582              MOV     DPL,A
014A E5F0              MOV     A,B
014C 3400        E     ADDC    A,#HIGH Mode_Preset
014E 120000      R     LCALL   L?0395
0151 FF                MOV     R7,A
0152 E4                CLR     A
0153 FC                MOV     R4,A
0154 FD                MOV     R5,A
0155 7B9A              MOV     R3,#09AH
0157 7A09              MOV     R2,#09H
0159 120000      R     LCALL   L?0408
015C 120000      R     LCALL   L?0416
015F 120000      R     LCALL   L?0395
0162 FF                MOV     R7,A
0163 120000      R     LCALL   L?0475
0166 C004              PUSH    AR4
0168 C005              PUSH    AR5
016A C006              PUSH    AR6
016C C007              PUSH    AR7
016E 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
0170 120000      R     LCALL   L?0400
0173 120000      R     LCALL   L?0414
0176 C004              PUSH    AR4
0178 120000      R     LCALL   L?0398
017B D000              POP     AR0
017D 120000      R     LCALL   L?0409
0180 D007              POP     AR7
0182 D006              POP     AR6
0184 D005              POP     AR5
0186 D004              POP     AR4
0188 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 823
018B D3                SETB    C
018C 120000      R     LCALL   L?0479
018F 4003              JC      ?C0194
0191 AF00        R     MOV     R7,Wait_Time_Cnt
0193 22                RET     
                                           ; SOURCE LINE # 824
0194         ?C0194:
                                           ; SOURCE LINE # 825
0194 0500        R     INC     Wait_Time_Cnt
0196 743B              MOV     A,#03BH
0198 C3                CLR     C
0199 9500        R     SUBB    A,Wait_Time_Cnt
019B 4003              JC      $ + 5H
019D 020000      R     LJMP    ?C0196
                                           ; SOURCE LINE # 827
01A0 120000      R     LCALL   Partial_Display
01A3 8F00        R     MOV     mode,R7
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 78  

                                           ; SOURCE LINE # 830
01A5         ?C0193:
                                           ; SOURCE LINE # 833
01A5 AF00        R     MOV     R7,mode
                                           ; SOURCE LINE # 838
01A7         ?C0187:
01A7 22                RET     
             ; FUNCTION _Seek_DVI_Mode (END)

             ; FUNCTION Detect_Video_Mode (BEGIN)
                                           ; SOURCE LINE # 843
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 1046
0000 020000      R     LJMP    Display_Video_Set
             ; FUNCTION Detect_Video_Mode (END)

             ; FUNCTION Check_Video_Mode (BEGIN)
                                           ; SOURCE LINE # 1052
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1100
0000 22                RET     
             ; FUNCTION Check_Video_Mode (END)

             ; FUNCTION _Calculate_IVS2DVS_Delay (BEGIN)
                                           ; SOURCE LINE # 1103
0000 8F00        R     MOV     integer,R7
0002 8D00        R     MOV     fraction,R5
0004 8A00        R     MOV     DVStart,R2
0006 8B00        R     MOV     DVStart+01H,R3
                                           ; SOURCE LINE # 1104
                                           ; SOURCE LINE # 1105
0008 EF                MOV     A,R7
0009 FD                MOV     R5,A
000A 7C00              MOV     R4,#00H
000C 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
000E 26                ADD     A,@R0
000F FB                MOV     R3,A
0010 EC                MOV     A,R4
0011 18                DEC     R0
0012 36                ADDC    A,@R0
0013 FA                MOV     R2,A
0014 E500        R     MOV     A,DVStart+01H
0016 AE00        R     MOV     R6,DVStart
0018 7806              MOV     R0,#06H
001A         ?C0356:
001A CE                XCH     A,R6
001B C3                CLR     C
001C 13                RRC     A
001D CE                XCH     A,R6
001E 13                RRC     A
001F D8F9              DJNZ    R0,?C0356
0021 FF                MOV     R7,A
0022 C3                CLR     C
0023 EB                MOV     A,R3
0024 9F                SUBB    A,R7
0025 EA                MOV     A,R2
0026 9E                SUBB    A,R6
0027 501B              JNC     ?C0205
                                           ; SOURCE LINE # 1106
                                           ; SOURCE LINE # 1108
0029 C3                CLR     C
002A EF                MOV     A,R7
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 79  

002B 9D                SUBB    A,R5
002C 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
002E F6                MOV     @R0,A
002F EE                MOV     A,R6
0030 9C                SUBB    A,R4
0031 18                DEC     R0
0032 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1110
0033 08                INC     R0
0034 E6                MOV     A,@R0
0035 FD                MOV     R5,A
0036 7F0A              MOV     R7,#0AH
0038 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1111
003B 7800        E     MOV     R0,#LOW usIPV_ACT_STA
003D E6                MOV     A,@R0
003E FD                MOV     R5,A
003F 7F0B              MOV     R7,#0BH
0041 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1112
0044         ?C0205:
                                           ; SOURCE LINE # 1114
0044 E500        R     MOV     A,fraction
0046 75F040            MOV     B,#040H
0049 A4                MUL     AB
004A FF                MOV     R7,A
004B AEF0              MOV     R6,B
004D 7C00              MOV     R4,#00H
004F 7D0A              MOV     R5,#0AH
0051 120000      E     LCALL   ?C?UIDIV
0054 AC06              MOV     R4,AR6
0056 AD07              MOV     R5,AR7
0058 E500        R     MOV     A,integer
005A 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
005C 26                ADD     A,@R0
005D FF                MOV     R7,A
005E E4                CLR     A
005F 18                DEC     R0
0060 36                ADDC    A,@R0
0061 FE                MOV     R6,A
0062 EF                MOV     A,R7
0063 7806              MOV     R0,#06H
0065         ?C0357:
0065 C3                CLR     C
0066 33                RLC     A
0067 CE                XCH     A,R6
0068 33                RLC     A
0069 CE                XCH     A,R6
006A D8F9              DJNZ    R0,?C0357
006C 2D                ADD     A,R5
006D FF                MOV     R7,A
006E EC                MOV     A,R4
006F 3E                ADDC    A,R6
0070 CF                XCH     A,R7
0071 C3                CLR     C
0072 9500        R     SUBB    A,DVStart+01H
0074 F500        E     MOV     Data+01H,A
0076 EF                MOV     A,R7
0077 9500        R     SUBB    A,DVStart
0079 F500        E     MOV     Data,A
                                           ; SOURCE LINE # 1117
007B E500        E     MOV     A,Data+01H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 80  

007D AE00        E     MOV     R6,Data
007F 7806              MOV     R0,#06H
0081         ?C0358:
0081 CE                XCH     A,R6
0082 C3                CLR     C
0083 13                RRC     A
0084 CE                XCH     A,R6
0085 13                RRC     A
0086 D8F9              DJNZ    R0,?C0358
0088 7800        E     MOV     R0,#LOW ucDV_Delay
008A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1119
008B E6                MOV     A,@R0
008C C4                SWAP    A
008D 33                RLC     A
008E 33                RLC     A
008F 54C0              ANL     A,#0C0H
0091 FF                MOV     R7,A
0092 C3                CLR     C
0093 E500        E     MOV     A,Data+01H
0095 9F                SUBB    A,R7
0096 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 1121
0098 7800        E     MOV     R0,#LOW usADC_Clock
009A 120000      R     LCALL   L?0423
009D AF00        E     MOV     R7,Data+06H
009F FC                MOV     R4,A
00A0 FD                MOV     R5,A
00A1 FE                MOV     R6,A
00A2 120000      E     LCALL   ?C?LMUL
00A5 E4                CLR     A
00A6 FB                MOV     R3,A
00A7 7A04              MOV     R2,#04H
00A9 F9                MOV     R1,A
00AA F8                MOV     R0,A
00AB 120000      E     LCALL   ?C?ULDIV
00AE 8F00        E     MOV     Data+06H,R7
                                           ; SOURCE LINE # 1123
00B0 AD00        E     MOV     R5,Data+06H
00B2 7F1E              MOV     R7,#01EH
00B4 020000      E     LJMP    _RTDSetByte
             ; FUNCTION _Calculate_IVS2DVS_Delay (END)

             ; FUNCTION _Set_Dclk (BEGIN)
                                           ; SOURCE LINE # 1128
0000 8E00        R     MOV     DispLen,R6
0002 8F00        R     MOV     DispLen+01H,R7
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
0004 120000      R     LCALL   L?0489
0007 120000      R     LCALL   L?0502
000A F583              MOV     DPH,A
000C 7401              MOV     A,#01H
000E 93                MOVC    A,@A+DPTR
000F 7002              JNZ     ?C0359
0011 E4                CLR     A
0012 93                MOVC    A,@A+DPTR
0013         ?C0359:
0013 6024              JZ      ?C0207
                                           ; SOURCE LINE # 1131
                                           ; SOURCE LINE # 1133
0015 750006      E     MOV     Data,#06H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 81  

                                           ; SOURCE LINE # 1134
0018 E4                CLR     A
0019 F500        E     MOV     Data+01H,A
                                           ; SOURCE LINE # 1135
001B 7500D0      E     MOV     Data+02H,#0D0H
                                           ; SOURCE LINE # 1136
001E 750011      E     MOV     Data+03H,#011H
                                           ; SOURCE LINE # 1137
0021 75F00A            MOV     B,#0AH
0024 EF                MOV     A,R7
0025 120000      R     LCALL   L?0502
0028 120000      R     LCALL   L?0433
002B FD                MOV     R5,A
002C EC                MOV     A,R4
002D F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 1138
002F 8D00        E     MOV     Data+05H,R5
                                           ; SOURCE LINE # 1139
0031 E4                CLR     A
0032 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 1140
0034 7F00        E     MOV     R7,#LOW Data
0036 020000      E     LJMP    _RTDWrite
                                           ; SOURCE LINE # 1141
0039         ?C0207:
                                           ; SOURCE LINE # 1143
                                           ; SOURCE LINE # 1154
0039 7800        E     MOV     R0,#LOW usDH_Total
003B 120000      R     LCALL   L?0400
003E 7B80              MOV     R3,#080H
0040 FA                MOV     R2,A
0041 120000      R     LCALL   L?0408
0044 120000      R     LCALL   L?0474
0047 C004              PUSH    AR4
0049 C005              PUSH    AR5
004B C006              PUSH    AR6
004D C007              PUSH    AR7
004F 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
0051 120000      R     LCALL   L?0400
0054 C004              PUSH    AR4
0056 120000      R     LCALL   L?0411
0059 120000      R     LCALL   L?0446
005C E4                CLR     A
005D D000              POP     AR0
005F 120000      R     LCALL   L?0409
0062 D007              POP     AR7
0064 D006              POP     AR6
0066 D005              POP     AR5
0068 D004              POP     AR4
006A 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 1163
006D E500        E     MOV     A,Data+01H
006F 7802              MOV     R0,#02H
0071         ?C0360:
0071 CE                XCH     A,R6
0072 C3                CLR     C
0073 13                RRC     A
0074 CE                XCH     A,R6
0075 13                RRC     A
0076 D8F9              DJNZ    R0,?C0360
0078 F500        E     MOV     Data+0FH,A
                                           ; SOURCE LINE # 1164
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 82  

007A FF                MOV     R7,A
007B 7E00              MOV     R6,#00H
007D 7C00              MOV     R4,#00H
007F 7D28              MOV     R5,#028H
0081 120000      E     LCALL   ?C?IMUL
0084 7DB0              MOV     R5,#0B0H
0086 120000      E     LCALL   ?C?UIDIV
0089 EF                MOV     A,R7
008A 24FB              ADD     A,#0FBH
008C F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1165
008E E4                CLR     A
008F F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 1166
0091 E500        E     MOV     A,Data+05H
0093 D3                SETB    C
0094 943C              SUBB    A,#03CH
0096 4009              JC      ?C0209
                                           ; SOURCE LINE # 1167
                                           ; SOURCE LINE # 1168
0098 74C4              MOV     A,#0C4H
009A 2500        E     ADD     A,Data+05H
009C F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1169
009E 430080      E     ORL     Data+06H,#080H
                                           ; SOURCE LINE # 1170
00A1         ?C0209:
                                           ; SOURCE LINE # 1172
00A1 E500        E     MOV     A,Data+05H
00A3 D3                SETB    C
00A4 9428              SUBB    A,#028H
00A6 4009              JC      ?C0210
                                           ; SOURCE LINE # 1173
                                           ; SOURCE LINE # 1174
00A8 74D8              MOV     A,#0D8H
00AA 2500        E     ADD     A,Data+05H
00AC F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1175
00AE 430040      E     ORL     Data+06H,#040H
                                           ; SOURCE LINE # 1176
00B1         ?C0210:
                                           ; SOURCE LINE # 1178
00B1 E500        E     MOV     A,Data+05H
00B3 D3                SETB    C
00B4 9414              SUBB    A,#014H
00B6 4009              JC      ?C0211
                                           ; SOURCE LINE # 1179
                                           ; SOURCE LINE # 1180
00B8 74EC              MOV     A,#0ECH
00BA 2500        E     ADD     A,Data+05H
00BC F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1181
00BE 430020      E     ORL     Data+06H,#020H
                                           ; SOURCE LINE # 1182
00C1         ?C0211:
                                           ; SOURCE LINE # 1184
00C1 E500        E     MOV     A,Data+05H
00C3 D3                SETB    C
00C4 940A              SUBB    A,#0AH
00C6 4009              JC      ?C0212
                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1186
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 83  

00C8 74F6              MOV     A,#0F6H
00CA 2500        E     ADD     A,Data+05H
00CC F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1187
00CE 430010      E     ORL     Data+06H,#010H
                                           ; SOURCE LINE # 1188
00D1         ?C0212:
                                           ; SOURCE LINE # 1190
00D1 E500        E     MOV     A,Data+05H
00D3 D3                SETB    C
00D4 9405              SUBB    A,#05H
00D6 4009              JC      ?C0213
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1192
00D8 74FB              MOV     A,#0FBH
00DA 2500        E     ADD     A,Data+05H
00DC F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1193
00DE 430008      E     ORL     Data+06H,#08H
                                           ; SOURCE LINE # 1194
00E1         ?C0213:
                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1198
00E1 120000      R     LCALL   L?0503
                                           ; SOURCE LINE # 1199
00E4 7500D0      E     MOV     Data+02H,#0D0H
                                           ; SOURCE LINE # 1200
00E7 850000      E     MOV     Data+03H,Data+06H
                                           ; SOURCE LINE # 1201
00EA E500        E     MOV     A,Data+0FH
00EC 24FE              ADD     A,#0FEH
00EE F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 1202
00F0 75001E      E     MOV     Data+05H,#01EH
                                           ; SOURCE LINE # 1204
00F3 750004      E     MOV     Data+06H,#04H
                                           ; SOURCE LINE # 1205
00F6 E4                CLR     A
00F7 F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 1206
00F9 7F00        E     MOV     R7,#LOW Data
00FB 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 1213
00FE 120000      R     LCALL   L?0422
0101 FF                MOV     R7,A
0102 FE                MOV     R6,A
0103 7D77              MOV     R5,#077H
0105 7C01              MOV     R4,#01H
0107 120000      E     LCALL   ?C?ULDIV
010A 120000      R     LCALL   L?0410
010D 120000      R     LCALL   L?0474
0110 C006              PUSH    AR6
0112 C007              PUSH    AR7
0114 7800        R     MOV     R0,#LOW usHsync
0116 120000      R     LCALL   L?0423
0119 D007              POP     AR7
011B D006              POP     AR6
011D 120000      E     LCALL   ?C?ULDIV
0120 C004              PUSH    AR4
0122 7800        E     MOV     R0,#LOW usDH_Total
0124 120000      R     LCALL   L?0399
0127 D000              POP     AR0
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 84  

0129 120000      E     LCALL   ?C?LMUL
012C 8F00        E     MOV     Data+03H,R7
012E 8E00        E     MOV     Data+02H,R6
0130 8D00        E     MOV     Data+01H,R5
0132 8C00        E     MOV     Data,R4
                                           ; SOURCE LINE # 1216
0134 E500        E     MOV     A,Data+0FH
0136 2401              ADD     A,#01H
0138 FF                MOV     R7,A
0139 E4                CLR     A
013A 33                RLC     A
013B FE                MOV     R6,A
013C 7A80              MOV     R2,#080H
013E 79BB              MOV     R1,#0BBH
0140 120000      R     LCALL   L?0454
0143 E4                CLR     A
0144 7B10              MOV     R3,#010H
0146 FA                MOV     R2,A
0147 F9                MOV     R1,A
0148 F8                MOV     R0,A
0149 120000      E     LCALL   ?C?ULDIV
014C 8F00        E     MOV     Data+07H,R7
014E 8E00        E     MOV     Data+06H,R6
0150 8D00        E     MOV     Data+05H,R5
0152 8C00        E     MOV     Data+04H,R4
                                           ; SOURCE LINE # 1218
0154 C3                CLR     C
0155 E500        E     MOV     A,Data+07H
0157 9500        E     SUBB    A,Data+03H
0159 F500        E     MOV     Data+0BH,A
015B E500        E     MOV     A,Data+06H
015D 9500        E     SUBB    A,Data+02H
015F F500        E     MOV     Data+0AH,A
0161 E500        E     MOV     A,Data+05H
0163 9500        E     SUBB    A,Data+01H
0165 F500        E     MOV     Data+09H,A
0167 E500        E     MOV     A,Data+04H
0169 9500        E     SUBB    A,Data
016B F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 1219
016D 780F              MOV     R0,#0FH
016F 120000      E     LCALL   ?C?ULSHR
0172 120000      R     LCALL   L?0407
                                           ; SOURCE LINE # 1221
0175 AF00        E     MOV     R7,Data+0BH
0177 AE00        E     MOV     R6,Data+0AH
0179 AD00        E     MOV     R5,Data+09H
017B AC00        E     MOV     R4,Data+08H
017D 7801              MOV     R0,#01H
017F 120000      E     LCALL   ?C?LSHL
0182 AB00        E     MOV     R3,Data+0FH
0184 AA00        E     MOV     R2,Data+0EH
0186 A900        E     MOV     R1,Data+0DH
0188 A800        E     MOV     R0,Data+0CH
018A 120000      E     LCALL   ?C?ULDIV
018D EF                MOV     A,R7
018E F500        E     MOV     Data+0FH,A
0190 EE                MOV     A,R6
0191 540F              ANL     A,#0FH
0193 F500        E     MOV     Data+0EH,A
0195 E4                CLR     A
0196 F500        E     MOV     Data+0DH,A
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 85  

0198 F500        E     MOV     Data+0CH,A
                                           ; SOURCE LINE # 1224
019A AD00        E     MOV     R5,Data+0FH
019C 7F9A              MOV     R7,#09AH
019E 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1227
01A1 7808              MOV     R0,#08H
01A3 120000      R     LCALL   L?0444
01A6 EF                MOV     A,R7
01A7 4420              ORL     A,#020H
01A9 FB                MOV     R3,A
01AA 7DF0              MOV     R5,#0F0H
01AC 7F9B              MOV     R7,#09BH
01AE 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1229
01B1 7B08              MOV     R3,#08H
01B3 7DFF              MOV     R5,#0FFH
01B5 7F5A              MOV     R7,#05AH
01B7 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1230
01BA 7B20              MOV     R3,#020H
01BC 7DFF              MOV     R5,#0FFH
01BE 7FD2              MOV     R7,#0D2H
01C0 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1231
01C3 E4                CLR     A
01C4 FB                MOV     R3,A
01C5 7D7F              MOV     R5,#07FH
01C7 7FD3              MOV     R7,#0D3H
01C9 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1232
                                           ; SOURCE LINE # 1233
01CC         ?C0214:
01CC 22                RET     
             ; FUNCTION _Set_Dclk (END)

             ; FUNCTION Initial_Mode (BEGIN)
                                           ; SOURCE LINE # 1235
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1242
0000 7800        R     MOV     R0,#LOW ucMode_Curr
0002 E6                MOV     A,@R0
0003 FF                MOV     R7,A
0004 54C0              ANL     A,#0C0H
0006 F500        R     MOV     ucOption,A
                                           ; SOURCE LINE # 1243
0008 EF                MOV     A,R7
0009 543F              ANL     A,#03FH
000B F6                MOV     @R0,A
                                           ; SOURCE LINE # 1246
000C 7B02              MOV     R3,#02H
000E 7DF9              MOV     R5,#0F9H
0010 7F70              MOV     R7,#070H
0012 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1247
0015 E500        E     MOV     A,stGUD1+01H
0017 5407              ANL     A,#07H
0019 FF                MOV     R7,A
001A BF011C            CJNE    R7,#01H,?C0215
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1249
001D E4                CLR     A
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 86  

001E FB                MOV     R3,A
001F 7DF9              MOV     R5,#0F9H
0021 7F70              MOV     R7,#070H
0023 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1251
0026 120000      R     LCALL   L?0447
0029 2400        E     ADD     A,#LOW CAP_WIN+02H
002B F582              MOV     DPL,A
002D E5F0              MOV     A,B
002F 3400        E     ADDC    A,#HIGH CAP_WIN+02H
0031 120000      R     LCALL   L?0395
0034 7800        E     MOV     R0,#LOW usIPH_ACT_STA
                                           ; SOURCE LINE # 1252
0036 020000      R     LJMP    ?C0384
0039         ?C0215:
                                           ; SOURCE LINE # 1254
                                           ; SOURCE LINE # 1256
0039 E500        R     MOV     A,ucOption
003B 30E629            JNB     ACC.6,?C0217
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1260
003E 900000      E     MOV     DPTR,#CAP_WIN+05AH
0041 120000      R     LCALL   L?0396
0044 FF                MOV     R7,A
0045 7800        E     MOV     R0,#LOW usADC_Clock
0047 A606              MOV     @R0,AR6
0049 08                INC     R0
004A A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1261
004C 900000      E     MOV     DPTR,#CAP_WIN+05CH
004F 120000      R     LCALL   L?0396
0052 FF                MOV     R7,A
0053 120000      R     LCALL   L?0463
                                           ; SOURCE LINE # 1262
0056 900000      E     MOV     DPTR,#CAP_WIN+05EH
0059 120000      R     LCALL   L?0396
005C FF                MOV     R7,A
005D 7800        E     MOV     R0,#LOW usIPH_ACT_WID
005F A606              MOV     @R0,AR6
0061 08                INC     R0
0062 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1263
0064 020000      R     LJMP    ?C0218
0067         ?C0217:
                                           ; SOURCE LINE # 1265
                                           ; SOURCE LINE # 1266
0067 120000      R     LCALL   L?0489
006A A4                MUL     AB
006B 2400        E     ADD     A,#LOW CAP_WIN
006D F582              MOV     DPL,A
006F E5F0              MOV     A,B
0071 3400        E     ADDC    A,#HIGH CAP_WIN
0073 120000      R     LCALL   L?0433
0076 7800        E     MOV     R0,#LOW usADC_Clock
0078 A604              MOV     @R0,AR4
007A 08                INC     R0
007B F6                MOV     @R0,A
                                           ; SOURCE LINE # 1267
007C 75F00A            MOV     B,#0AH
007F EF                MOV     A,R7
0080 A4                MUL     AB
0081 2400        E     ADD     A,#LOW CAP_WIN+02H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 87  

0083 F582              MOV     DPL,A
0085 E5F0              MOV     A,B
0087 3400        E     ADDC    A,#HIGH CAP_WIN+02H
0089 120000      R     LCALL   L?0395
008C 7800        E     MOV     R0,#LOW usIPH_ACT_STA
008E A606              MOV     @R0,AR6
0090 08                INC     R0
0091 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1268
0092 120000      R     LCALL   L?0447
0095 2400        E     ADD     A,#LOW CAP_WIN+04H
0097 F582              MOV     DPL,A
0099 E5F0              MOV     A,B
009B 3400        E     ADDC    A,#HIGH CAP_WIN+04H
009D 120000      R     LCALL   L?0395
00A0 7800        E     MOV     R0,#LOW usIPH_ACT_WID
00A2 A606              MOV     @R0,AR6
00A4 08                INC     R0
00A5 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1271
00A6 7800        R     MOV     R0,#LOW usHsync
00A8 120000      R     LCALL   L?0400
00AB 120000      R     LCALL   L?0483
00AE C004              PUSH    AR4
00B0 C005              PUSH    AR5
00B2 C006              PUSH    AR6
00B4 C007              PUSH    AR7
00B6 7800        E     MOV     R0,#LOW usADC_Clock
00B8 120000      R     LCALL   L?0400
00BB 120000      R     LCALL   L?0491
00BE D003              POP     AR3
00C0 D002              POP     AR2
00C2 D001              POP     AR1
00C4 D000              POP     AR0
                                           ; SOURCE LINE # 1272
00C6 120000      R     LCALL   L?0427
                                           ; SOURCE LINE # 1275
00C9 C3                CLR     C
00CA 748C              MOV     A,#08CH
00CC 9500        R     SUBB    A,usDispLen+01H
00CE E4                CLR     A
00CF 9500        R     SUBB    A,usDispLen
00D1 5054              JNC     ?C0218
00D3 7800        R     MOV     R0,#LOW ucMode_Curr
00D5 E6                MOV     A,@R0
00D6 FF                MOV     R7,A
00D7 7437              MOV     A,#037H
00D9 9F                SUBB    A,R7
00DA 504B              JNC     ?C0218
00DC 743B              MOV     A,#03BH
00DE C3                CLR     C
00DF 9F                SUBB    A,R7
00E0 4045              JC      ?C0218
                                           ; SOURCE LINE # 1276
                                           ; SOURCE LINE # 1277
00E2 E6                MOV     A,@R0
00E3 FF                MOV     R7,A
00E4 75F006            MOV     B,#06H
00E7 A4                MUL     AB
00E8 2400        E     ADD     A,#LOW ADC_SD_SET+0FEB6H
00EA F582              MOV     DPL,A
00EC E5F0              MOV     A,B
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 88  

00EE 3400        E     ADDC    A,#HIGH ADC_SD_SET+0FEB6H
00F0 120000      R     LCALL   L?0433
00F3 7800        E     MOV     R0,#LOW usADC_Clock
00F5 A604              MOV     @R0,AR4
00F7 08                INC     R0
00F8 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1278
00F9 75F006            MOV     B,#06H
00FC EF                MOV     A,R7
00FD A4                MUL     AB
00FE 2400        E     ADD     A,#LOW ADC_SD_SET+0FEB8H
0100 F582              MOV     DPL,A
0102 E5F0              MOV     A,B
0104 3400        E     ADDC    A,#HIGH ADC_SD_SET+0FEB8H
0106 120000      R     LCALL   L?0395
0109 7800        E     MOV     R0,#LOW usIPH_ACT_STA
010B A606              MOV     @R0,AR6
010D 08                INC     R0
010E F6                MOV     @R0,A
                                           ; SOURCE LINE # 1279
010F 7800        R     MOV     R0,#LOW ucMode_Curr
0111 E6                MOV     A,@R0
0112 75F006            MOV     B,#06H
0115 A4                MUL     AB
0116 2400        E     ADD     A,#LOW ADC_SD_SET+0FEBAH
0118 F582              MOV     DPL,A
011A E5F0              MOV     A,B
011C 3400        E     ADDC    A,#HIGH ADC_SD_SET+0FEBAH
011E 120000      R     LCALL   L?0395
0121 7800        E     MOV     R0,#LOW usIPH_ACT_WID
0123 A606              MOV     @R0,AR6
0125 08                INC     R0
0126 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1282
0127         ?C0218:
                                           ; SOURCE LINE # 1285
0127 7800        R     MOV     R0,#LOW usHsync
0129 120000      R     LCALL   L?0400
012C 120000      R     LCALL   L?0483
012F C004              PUSH    AR4
0131 C005              PUSH    AR5
0133 C006              PUSH    AR6
0135 C007              PUSH    AR7
0137 7800        E     MOV     R0,#LOW usADC_Clock
0139 120000      R     LCALL   L?0400
013C 120000      R     LCALL   L?0491
013F D003              POP     AR3
0141 D002              POP     AR2
0143 D001              POP     AR1
0145 D000              POP     AR0
                                           ; SOURCE LINE # 1286
0147 120000      R     LCALL   L?0427
                                           ; SOURCE LINE # 1290
014A D3                SETB    C
014B 742D              MOV     A,#02DH
014D 9500        R     SUBB    A,usDispLen+01H
014F E4                CLR     A
0150 9500        R     SUBB    A,usDispLen
0152 4004              JC      ?C0220
0154 7B15              MOV     R3,#015H
0156 8002              SJMP    ?C0221
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 89  

0158         ?C0220:
0158 7B05              MOV     R3,#05H
015A         ?C0221:
015A 7DE0              MOV     R5,#0E0H
015C 7FEA              MOV     R7,#0EAH
015E 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1296
0161 D3                SETB    C
0162 743C              MOV     A,#03CH
0164 9500        R     SUBB    A,usDispLen+01H
0166 E4                CLR     A
0167 9500        R     SUBB    A,usDispLen
0169 4004              JC      ?C0222
016B 7B08              MOV     R3,#08H
016D 8002              SJMP    ?C0223
016F         ?C0222:
016F 7B00              MOV     R3,#00H
0171         ?C0223:
0171 7DF3              MOV     R5,#0F3H
0173 7F04              MOV     R7,#04H
0175 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1298
0178 E4                CLR     A
0179 FD                MOV     R5,A
017A 7F3C              MOV     R7,#03CH
017C 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1300
017F 7D06              MOV     R5,#06H
0181 7FEB              MOV     R7,#0EBH
0183 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1310
0186 7B40              MOV     R3,#040H
0188 7DFF              MOV     R5,#0FFH
018A 7FEC              MOV     R7,#0ECH
018C 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1318
018F 7D1D              MOV     R5,#01DH
0191 7FE8              MOV     R7,#0E8H
0193 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1322
0196 E4                CLR     A
0197 FB                MOV     R3,A
0198 7DC7              MOV     R5,#0C7H
019A 7FEB              MOV     R7,#0EBH
019C 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1327
019F 7B04              MOV     R3,#04H
01A1 7DFF              MOV     R5,#0FFH
01A3 7FFF              MOV     R7,#0FFH
01A5 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1330
01A8 7800        R     MOV     R0,#LOW ucMode_Curr
01AA E6                MOV     A,@R0
01AB C3                CLR     C
01AC 941D              SUBB    A,#01DH
01AE 5004              JNC     ?C0224
                                           ; SOURCE LINE # 1331
01B0 7D08              MOV     R5,#08H
01B2 8002              SJMP    ?C0378
01B4         ?C0224:
                                           ; SOURCE LINE # 1333
01B4 7D10              MOV     R5,#010H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 90  

01B6         ?C0378:
01B6 7FE9              MOV     R7,#0E9H
01B8 120000      E     LCALL   _RTDSetByte
01BB         ?C0225:
                                           ; SOURCE LINE # 1337
01BB 7800        R     MOV     R0,#LOW ucMode_Curr
01BD E6                MOV     A,@R0
01BE FF                MOV     R7,A
01BF 743C              MOV     A,#03CH
01C1 D3                SETB    C
01C2 9F                SUBB    A,R7
01C3 4010              JC      ?C0216
                                           ; SOURCE LINE # 1338
                                           ; SOURCE LINE # 1341
01C5 75F00A            MOV     B,#0AH
01C8 EF                MOV     A,R7
01C9 120000      R     LCALL   L?0421
01CC 120000      R     LCALL   L?0395
01CF 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
01D1         ?C0384:
01D1 A606              MOV     @R0,AR6
01D3 08                INC     R0
01D4 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1342
                                           ; SOURCE LINE # 1344
01D5         ?C0216:
                                           ; SOURCE LINE # 1348
01D5 7D03              MOV     R5,#03H
01D7 7F8C              MOV     R7,#08CH
01D9 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1350
01DC 120000      R     LCALL   L?0448
01DF 2400        E     ADD     A,#LOW CAP_WIN+06H
01E1 F582              MOV     DPL,A
01E3 E5F0              MOV     A,B
01E5 3400        E     ADDC    A,#HIGH CAP_WIN+06H
01E7 F583              MOV     DPH,A
01E9 7401              MOV     A,#01H
01EB 93                MOVC    A,@A+DPTR
01EC 24FC              ADD     A,#0FCH
01EE 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
01F0 F6                MOV     @R0,A
01F1 E4                CLR     A
01F2 93                MOVC    A,@A+DPTR
01F3 34FF              ADDC    A,#0FFH
01F5 18                DEC     R0
01F6 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1353
01F7 7D06              MOV     R5,#06H
01F9 7F8D              MOV     R7,#08DH
01FB 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1356
01FE 7800        R     MOV     R0,#LOW ucMode_Curr
0200 E6                MOV     A,@R0
0201 FF                MOV     R7,A
0202 C3                CLR     C
0203 9417              SUBB    A,#017H
0205 5005              JNC     ?C0227
                                           ; SOURCE LINE # 1357
0207 750002      E     MOV     Data,#02H
020A 800E              SJMP    ?C0228
020C         ?C0227:
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 91  

                                           ; SOURCE LINE # 1358
020C EF                MOV     A,R7
020D C3                CLR     C
020E 942C              SUBB    A,#02CH
0210 5005              JNC     ?C0229
                                           ; SOURCE LINE # 1359
0212 750005      E     MOV     Data,#05H
0215 8003              SJMP    ?C0228
0217         ?C0229:
                                           ; SOURCE LINE # 1361
0217 750003      E     MOV     Data,#03H
021A         ?C0228:
                                           ; SOURCE LINE # 1364
021A 120000      R     LCALL   L?0476
021D 24FA              ADD     A,#0FAH
021F 08                INC     R0
0220 F6                MOV     @R0,A
0221 EF                MOV     A,R7
0222 34FF              ADDC    A,#0FFH
0224 18                DEC     R0
0225 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1368
0226 120000      R     LCALL   L?0490
0229 120000      R     LCALL   L?0417
022C F583              MOV     DPH,A
022E E4                CLR     A
022F 93                MOVC    A,@A+DPTR
0230 F500        R     MOV     usDispLen,A
0232 7401              MOV     A,#01H
0234 93                MOVC    A,@A+DPTR
0235 F500        R     MOV     usDispLen+01H,A
                                           ; SOURCE LINE # 1370
0237 EF                MOV     A,R7
0238 643C              XRL     A,#03CH
023A 701F              JNZ     ?C0231
                                           ; SOURCE LINE # 1371
                                           ; SOURCE LINE # 1372
023C E500        R     MOV     A,ucOption
023E 30E748            JNB     ACC.7,?C0235
                                           ; SOURCE LINE # 1373
                                           ; SOURCE LINE # 1374
0241 120000      R     LCALL   L?0426
0244 FE                MOV     R6,A
0245 D3                SETB    C
0246 7410              MOV     A,#010H
0248 9F                SUBB    A,R7
0249 7404              MOV     A,#04H
024B 9E                SUBB    A,R6
024C 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
024E E6                MOV     A,@R0
024F 4002              JC      ?C0233
                                           ; SOURCE LINE # 1375
0251 8016              SJMP    ?C0385
0253         ?C0233:
                                           ; SOURCE LINE # 1377
0253 F500        R     MOV     usDispLen,A
0255 08                INC     R0
0256 E6                MOV     A,@R0
0257 F500        R     MOV     usDispLen+01H,A
                                           ; SOURCE LINE # 1378
                                           ; SOURCE LINE # 1379
0259 802E              SJMP    ?C0235
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 92  

025B         ?C0231:
                                           ; SOURCE LINE # 1380
025B 7800        R     MOV     R0,#LOW ucMode_Curr
025D E6                MOV     A,@R0
025E B43D28            CJNE    A,#03DH,?C0235
                                           ; SOURCE LINE # 1381
                                           ; SOURCE LINE # 1382
0261 E500        R     MOV     A,ucOption
0263 30E723            JNB     ACC.7,?C0235
                                           ; SOURCE LINE # 1383
                                           ; SOURCE LINE # 1384
0266 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
0268 E6                MOV     A,@R0
0269         ?C0385:
0269 120000      R     LCALL   L?0401
026C 7B10              MOV     R3,#010H
026E 120000      R     LCALL   L?0442
0271 C006              PUSH    AR6
0273 C007              PUSH    AR7
0275 120000      R     LCALL   L?0426
0278 AB07              MOV     R3,AR7
027A FA                MOV     R2,A
027B E4                CLR     A
027C F9                MOV     R1,A
027D F8                MOV     R0,A
027E D007              POP     AR7
0280 D006              POP     AR6
0282 120000      E     LCALL   ?C?ULDIV
0285 8E00        R     MOV     usDispLen,R6
0287 8F00        R     MOV     usDispLen+01H,R7
                                           ; SOURCE LINE # 1385
                                           ; SOURCE LINE # 1386
0289         ?C0235:
                                           ; SOURCE LINE # 1388
0289 7800        R     MOV     R0,#LOW ucMode_Curr
028B E6                MOV     A,@R0
028C 75F00A            MOV     B,#0AH
028F 120000      R     LCALL   L?0417
0292 120000      R     LCALL   L?0395
0295 FF                MOV     R7,A
0296 C3                CLR     C
0297 9500        R     SUBB    A,usDispLen+01H
0299 EE                MOV     A,R6
029A 9500        R     SUBB    A,usDispLen
029C 5004              JNC     ?C0238
029E 8E00        R     MOV     usDispLen,R6
02A0 8F00        R     MOV     usDispLen+01H,R7
02A2         ?C0238:
                                           ; SOURCE LINE # 1391
02A2 120000      R     LCALL   L?0464
02A5 4012              JC      ?C0239
02A7 120000      R     LCALL   L?0393
02AA FF                MOV     R7,A
02AB C3                CLR     C
02AC 7800        E     MOV     R0,#LOW usIPH_ACT_WID+01H
02AE 96                SUBB    A,@R0
02AF EE                MOV     A,R6
02B0 18                DEC     R0
02B1 96                SUBB    A,@R0
02B2 5005              JNC     ?C0239
                                           ; SOURCE LINE # 1392
                                           ; SOURCE LINE # 1393
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 93  

02B4 A606              MOV     @R0,AR6
02B6 08                INC     R0
02B7 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1394
02B9         ?C0239:
                                           ; SOURCE LINE # 1396
02B9 D3                SETB    C
02BA 120000      R     LCALL   L?0465
02BD 4003              JC      ?C0240
02BF 430001      R     ORL     ucOption,#01H
02C2         ?C0240:
                                           ; SOURCE LINE # 1397
02C2 120000      R     LCALL   L?0464
02C5 5003              JNC     ?C0241
02C7 430002      R     ORL     ucOption,#02H
02CA         ?C0241:
                                           ; SOURCE LINE # 1398
02CA 120000      R     LCALL   L?0393
02CD FF                MOV     R7,A
02CE 7800        E     MOV     R0,#LOW usIPH_ACT_WID
02D0 120000      R     LCALL   L?0457
02D3 EF                MOV     A,R7
02D4 9D                SUBB    A,R5
02D5 EE                MOV     A,R6
02D6 9C                SUBB    A,R4
02D7 4003              JC      ?C0242
02D9 430004      R     ORL     ucOption,#04H
02DC         ?C0242:
                                           ; SOURCE LINE # 1399
02DC C3                CLR     C
02DD EF                MOV     A,R7
02DE 9D                SUBB    A,R5
02DF EE                MOV     A,R6
02E0 9C                SUBB    A,R4
02E1 5003              JNC     ?C0243
02E3 430008      R     ORL     ucOption,#08H
02E6         ?C0243:
                                           ; SOURCE LINE # 1402
02E6 75000B      E     MOV     Data,#0BH
                                           ; SOURCE LINE # 1403
                                           ; SOURCE LINE # 1404
                                           ; SOURCE LINE # 1405
                                           ; SOURCE LINE # 1406
02E9 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1407
02EC 7800        E     MOV     R0,#LOW usIPH_ACT_WID+01H
02EE E6                MOV     A,@R0
02EF F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1408
02F1 EC                MOV     A,R4
02F2 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 1409
02F4 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
02F6 E6                MOV     A,@R0
02F7 F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 1410
02F9 18                DEC     R0
02FA E6                MOV     A,@R0
02FB F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 1411
02FD 7800        E     MOV     R0,#LOW usIPV_ACT_LEN+01H
02FF E6                MOV     A,@R0
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 94  

0300 F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 1412
0302 18                DEC     R0
0303 E6                MOV     A,@R0
0304 F500        E     MOV     Data+0AH,A
                                           ; SOURCE LINE # 1413
0306 E4                CLR     A
0307 F500        E     MOV     Data+0BH,A
                                           ; SOURCE LINE # 1414
0309 7F00        E     MOV     R7,#LOW Data
030B 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 1417
                                           ; SOURCE LINE # 1418
030E 120000      R     LCALL   L?0503
                                           ; SOURCE LINE # 1419
0311 750040      E     MOV     Data+02H,#040H
                                           ; SOURCE LINE # 1421
0314 E500        R     MOV     A,ucOption
0316 30E30A            JNB     ACC.3,?C0244
                                           ; SOURCE LINE # 1422
                                           ; SOURCE LINE # 1424
0319 120000      R     LCALL   L?0394
031C F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 1425
031E EE                MOV     A,R6
031F F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 1426
0321 8006              SJMP    ?C0245
0323         ?C0244:
                                           ; SOURCE LINE # 1428
                                           ; SOURCE LINE # 1430
0323 850000      E     MOV     Data+03H,Data+05H
                                           ; SOURCE LINE # 1431
0326 850000      E     MOV     Data+04H,Data+06H
                                           ; SOURCE LINE # 1432
0329         ?C0245:
                                           ; SOURCE LINE # 1434
0329 E500        R     MOV     A,ucOption
032B 30E109            JNB     ACC.1,?C0246
                                           ; SOURCE LINE # 1435
                                           ; SOURCE LINE # 1437
032E 850000      E     MOV     Data+05H,usDispLen+01H
                                           ; SOURCE LINE # 1438
0331 E500        R     MOV     A,usDispLen
0333 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 1439
0335 8006              SJMP    ?C0247
0337         ?C0246:
                                           ; SOURCE LINE # 1441
                                           ; SOURCE LINE # 1443
0337 850000      E     MOV     Data+05H,Data+09H
                                           ; SOURCE LINE # 1444
033A 850000      E     MOV     Data+06H,Data+0AH
                                           ; SOURCE LINE # 1445
033D         ?C0247:
                                           ; SOURCE LINE # 1446
033D E4                CLR     A
033E F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 1447
0340 7F00        E     MOV     R7,#LOW Data
0342 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 1450
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 95  

0345 E500        R     MOV     A,ucOption
0347 540A              ANL     A,#0AH
0349 6006              JZ      ?C0248
                                           ; SOURCE LINE # 1451
034B 7B01              MOV     R3,#01H
034D 7DFF              MOV     R5,#0FFH
034F 8004              SJMP    ?C0379
0351         ?C0248:
                                           ; SOURCE LINE # 1453
0351 E4                CLR     A
0352 FB                MOV     R3,A
0353 7DFE              MOV     R5,#0FEH
0355         ?C0379:
0355 7F70              MOV     R7,#070H
0357 120000      E     LCALL   _RTDSetBit
035A         ?C0249:
                                           ; SOURCE LINE # 1455
035A E500        R     MOV     A,ucOption
035C 30E006            JNB     ACC.0,?C0250
                                           ; SOURCE LINE # 1456
035F 7B02              MOV     R3,#02H
0361 7DFF              MOV     R5,#0FFH
0363 8004              SJMP    ?C0380
0365         ?C0250:
                                           ; SOURCE LINE # 1458
0365 E4                CLR     A
0366 FB                MOV     R3,A
0367 7DFD              MOV     R5,#0FDH
0369         ?C0380:
0369 7F15              MOV     R7,#015H
036B 120000      E     LCALL   _RTDSetBit
036E         ?C0251:
                                           ; SOURCE LINE # 1460
036E E500        R     MOV     A,ucOption
0370 30E206            JNB     ACC.2,?C0252
                                           ; SOURCE LINE # 1461
0373 7B01              MOV     R3,#01H
0375 7DFF              MOV     R5,#0FFH
0377 8004              SJMP    ?C0381
0379         ?C0252:
                                           ; SOURCE LINE # 1463
0379 E4                CLR     A
037A FB                MOV     R3,A
037B 7DFE              MOV     R5,#0FEH
037D         ?C0381:
037D 7F15              MOV     R7,#015H
037F 120000      E     LCALL   _RTDSetBit
0382         ?C0253:
                                           ; SOURCE LINE # 1466
                                           ; SOURCE LINE # 1467
0382 120000      R     LCALL   L?0504
                                           ; SOURCE LINE # 1468
0385 750071      E     MOV     Data+02H,#071H
                                           ; SOURCE LINE # 1470
0388 E500        R     MOV     A,ucOption
038A 30E333            JNB     ACC.3,?C0254
                                           ; SOURCE LINE # 1471
                                           ; SOURCE LINE # 1473
038D 7800        E     MOV     R0,#LOW usIPH_ACT_WID
038F 120000      R     LCALL   L?0400
0392 120000      R     LCALL   L?0472
0395 C006              PUSH    AR6
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 96  

0397 C007              PUSH    AR7
0399 120000      R     LCALL   L?0394
039C 120000      R     LCALL   L?0424
039F D007              POP     AR7
03A1 D006              POP     AR6
03A3 120000      E     LCALL   ?C?ULDIV
03A6 120000      R     LCALL   L?0407
                                           ; SOURCE LINE # 1476
03A9 7808              MOV     R0,#08H
03AB 120000      E     LCALL   ?C?ULSHR
03AE EF                MOV     A,R7
03AF 2402              ADD     A,#02H
03B1 F500        E     MOV     Data+05H,A
03B3 E4                CLR     A
03B4 3E                ADDC    A,R6
03B5 F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 1479
03B7 850000      E     MOV     Data+03H,Data+05H
                                           ; SOURCE LINE # 1481
03BA 7B40              MOV     R3,#040H
03BC 7DFF              MOV     R5,#0FFH
                                           ; SOURCE LINE # 1482
03BE 8009              SJMP    ?C0382
03C0         ?C0254:
                                           ; SOURCE LINE # 1484
                                           ; SOURCE LINE # 1485
03C0 E4                CLR     A
03C1 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 1486
03C3 750010      E     MOV     Data+04H,#010H
                                           ; SOURCE LINE # 1488
03C6 FB                MOV     R3,A
03C7 7DBF              MOV     R5,#0BFH
03C9         ?C0382:
03C9 7F04              MOV     R7,#04H
03CB 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1489
03CE         ?C0255:
                                           ; SOURCE LINE # 1491
03CE E500        R     MOV     A,ucOption
03D0 30E137            JNB     ACC.1,?C0256
                                           ; SOURCE LINE # 1492
                                           ; SOURCE LINE # 1494
03D3 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
03D5 120000      R     LCALL   L?0400
03D8 120000      R     LCALL   L?0472
03DB C006              PUSH    AR6
03DD C007              PUSH    AR7
03DF 120000      R     LCALL   L?0451
03E2 D007              POP     AR7
03E4 D006              POP     AR6
03E6 120000      E     LCALL   ?C?ULDIV
03E9 120000      R     LCALL   L?0407
                                           ; SOURCE LINE # 1497
03EC 7808              MOV     R0,#08H
03EE 120000      E     LCALL   ?C?ULSHR
03F1 8E00        E     MOV     Data+06H,R6
03F3 8F00        E     MOV     Data+07H,R7
                                           ; SOURCE LINE # 1499
03F5 E500        E     MOV     A,Data+0FH
03F7 7008              JNZ     ?C0257
03F9 E500        E     MOV     A,Data+07H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 97  

03FB 1500        E     DEC     Data+07H
03FD 7002              JNZ     ?C0361
03FF 1500        E     DEC     Data+06H
0401         ?C0361:
0401         ?C0257:
                                           ; SOURCE LINE # 1502
0401 850000      E     MOV     Data+05H,Data+07H
                                           ; SOURCE LINE # 1504
0404 7B80              MOV     R3,#080H
0406 7DFF              MOV     R5,#0FFH
                                           ; SOURCE LINE # 1505
0408 8009              SJMP    ?C0386
040A         ?C0256:
                                           ; SOURCE LINE # 1507
                                           ; SOURCE LINE # 1508
040A E4                CLR     A
040B F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1509
040D 750010      E     MOV     Data+06H,#010H
                                           ; SOURCE LINE # 1511
0410 FB                MOV     R3,A
0411 7D7F              MOV     R5,#07FH
0413         ?C0386:
0413 7F04              MOV     R7,#04H
0415 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1512
0418         ?C0258:
                                           ; SOURCE LINE # 1513
0418 E4                CLR     A
0419 F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 1514
041B 7F00        E     MOV     R7,#LOW Data
041D 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 1517
0420 750008      E     MOV     Data,#08H
                                           ; SOURCE LINE # 1518
0423 E4                CLR     A
0424 F500        E     MOV     Data+01H,A
                                           ; SOURCE LINE # 1519
0426 750016      E     MOV     Data+02H,#016H
                                           ; SOURCE LINE # 1521
0429 E500        R     MOV     A,ucOption
042B 30E242            JNB     ACC.2,?C0259
                                           ; SOURCE LINE # 1522
                                           ; SOURCE LINE # 1524
042E 7800        E     MOV     R0,#LOW usIPH_ACT_WID
0430 120000      R     LCALL   L?0400
0433 7908              MOV     R1,#08H
0435 120000      R     LCALL   L?0473
0438 C006              PUSH    AR6
043A C007              PUSH    AR7
043C 120000      R     LCALL   L?0394
043F 120000      R     LCALL   L?0424
0442 D007              POP     AR7
0444 D006              POP     AR6
0446 120000      E     LCALL   ?C?ULDIV
0449 120000      R     LCALL   L?0407
                                           ; SOURCE LINE # 1525
044C 120000      R     LCALL   L?0505
044F C004              PUSH    AR4
0451 C005              PUSH    AR5
0453 C006              PUSH    AR6
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 98  

0455 C007              PUSH    AR7
0457 120000      R     LCALL   L?0443
045A D003              POP     AR3
045C D002              POP     AR2
045E D001              POP     AR1
0460 D000              POP     AR0
0462 120000      R     LCALL   L?0406
                                           ; SOURCE LINE # 1527
0465 850000      E     MOV     Data+03H,Data+0EH
                                           ; SOURCE LINE # 1528
0468 850000      E     MOV     Data+04H,Data+0DH
                                           ; SOURCE LINE # 1529
046B 850000      E     MOV     Data+07H,Data+0FH
                                           ; SOURCE LINE # 1530
046E 8009              SJMP    ?C0260
0470         ?C0259:
                                           ; SOURCE LINE # 1532
                                           ; SOURCE LINE # 1533
0470 7500FF      E     MOV     Data+03H,#0FFH
                                           ; SOURCE LINE # 1534
0473 7500FF      E     MOV     Data+04H,#0FFH
                                           ; SOURCE LINE # 1535
0476 E4                CLR     A
0477 F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 1536
0479         ?C0260:
                                           ; SOURCE LINE # 1538
0479 E500        R     MOV     A,ucOption
047B 30E046            JNB     ACC.0,?C0261
                                           ; SOURCE LINE # 1539
                                           ; SOURCE LINE # 1541
047E 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
0480 120000      R     LCALL   L?0400
0483 FB                MOV     R3,A
0484 FA                MOV     R2,A
0485 7908              MOV     R1,#08H
0487 F8                MOV     R0,A
0488 120000      E     LCALL   ?C?LMUL
048B C006              PUSH    AR6
048D C007              PUSH    AR7
048F 120000      R     LCALL   L?0451
0492 D007              POP     AR7
0494 D006              POP     AR6
0496 120000      E     LCALL   ?C?ULDIV
0499 120000      R     LCALL   L?0407
                                           ; SOURCE LINE # 1542
049C 120000      R     LCALL   L?0505
049F C004              PUSH    AR4
04A1 C005              PUSH    AR5
04A3 C006              PUSH    AR6
04A5 C007              PUSH    AR7
04A7 120000      R     LCALL   L?0443
04AA D003              POP     AR3
04AC D002              POP     AR2
04AE D001              POP     AR1
04B0 D000              POP     AR0
04B2 120000      R     LCALL   L?0406
                                           ; SOURCE LINE # 1544
04B5 850000      E     MOV     Data+05H,Data+0EH
                                           ; SOURCE LINE # 1546
04B8 850000      E     MOV     Data+06H,Data+0DH
                                           ; SOURCE LINE # 1548
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 99  

04BB E500        E     MOV     A,Data+0FH
04BD C4                SWAP    A
04BE 540F              ANL     A,#0FH
04C0 4200        E     ORL     Data+07H,A
                                           ; SOURCE LINE # 1549
04C2 8006              SJMP    ?C0262
04C4         ?C0261:
                                           ; SOURCE LINE # 1551
                                           ; SOURCE LINE # 1552
04C4 7500FF      E     MOV     Data+05H,#0FFH
                                           ; SOURCE LINE # 1553
04C7 7500FF      E     MOV     Data+06H,#0FFH
                                           ; SOURCE LINE # 1554
04CA         ?C0262:
                                           ; SOURCE LINE # 1555
04CA E4                CLR     A
04CB F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 1556
04CD 7F00        E     MOV     R7,#LOW Data
04CF 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 1561
04D2 7D2C              MOV     R5,#02CH
04D4 7F20              MOV     R7,#020H
04D6 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1563
                                           ; SOURCE LINE # 1564
04D9 120000      R     LCALL   L?0485
                                           ; SOURCE LINE # 1577
04DC 750029      E     MOV     Data+02H,#029H
                                           ; SOURCE LINE # 1580
04DF 120000      R     LCALL   L?0448
04E2 2400        E     ADD     A,#LOW Mode_Preset+02H
04E4 F582              MOV     DPL,A
04E6 E5F0              MOV     A,B
04E8 3400        E     ADDC    A,#HIGH Mode_Preset+02H
04EA F583              MOV     DPH,A
04EC 7401              MOV     A,#01H
04EE 93                MOVC    A,@A+DPTR
04EF 2420              ADD     A,#020H
04F1 F500        E     MOV     Data+05H,A
04F3 E4                CLR     A
04F4 93                MOVC    A,@A+DPTR
04F5 3400              ADDC    A,#00H
04F7 F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 1582
04F9 850000      E     MOV     Data+03H,Data+05H
                                           ; SOURCE LINE # 1586
04FC 750005      E     MOV     Data+05H,#05H
                                           ; SOURCE LINE # 1587
04FF E4                CLR     A
0500 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 1588
0502 750034      E     MOV     Data+07H,#034H
                                           ; SOURCE LINE # 1591
0505 E500        R     MOV     A,usDispLen+01H
0507 240C              ADD     A,#0CH
0509 F500        E     MOV     Data+0BH,A
050B E4                CLR     A
050C 3500        R     ADDC    A,usDispLen
050E F500        E     MOV     Data+0AH,A
                                           ; SOURCE LINE # 1593
0510 850000      E     MOV     Data+08H,Data+0BH
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 100 

                                           ; SOURCE LINE # 1594
0513 F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 1595
0515 E4                CLR     A
0516 F500        E     MOV     Data+0AH,A
                                           ; SOURCE LINE # 1596
0518 7F00        E     MOV     R7,#LOW Data
051A 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 1599
051D 120000      R     LCALL   L?0448
0520 2400        E     ADD     A,#LOW Mode_Preset
0522 F582              MOV     DPL,A
0524 E5F0              MOV     A,B
0526 3400        E     ADDC    A,#HIGH Mode_Preset
0528 120000      R     LCALL   L?0395
052B 7800        E     MOV     R0,#LOW usDH_Total
052D A606              MOV     @R0,AR6
052F 08                INC     R0
0530 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1603
0531 200004      E     JB      bPanel_Status,?C0263
                                           ; SOURCE LINE # 1604
0534 7D2D              MOV     R5,#02DH
0536 8002              SJMP    ?C0383
0538         ?C0263:
                                           ; SOURCE LINE # 1606
0538 7D2F              MOV     R5,#02FH
053A         ?C0383:
053A 7F20              MOV     R7,#020H
053C 120000      E     LCALL   _RTDSetByte
053F         ?C0264:
                                           ; SOURCE LINE # 1608
053F AF00        R     MOV     R7,usDispLen+01H
0541 AE00        R     MOV     R6,usDispLen
0543 120000      R     LCALL   _Set_Dclk
                                           ; SOURCE LINE # 1613
                                           ; SOURCE LINE # 1614
0546 120000      R     LCALL   L?0485
                                           ; SOURCE LINE # 1615
0549 750022      E     MOV     Data+02H,#022H
                                           ; SOURCE LINE # 1616
054C 7800        E     MOV     R0,#LOW usDH_Total+01H
054E E6                MOV     A,@R0
054F 24FE              ADD     A,#0FEH
0551 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 1617
0553 120000      R     LCALL   L?0493
                                           ; SOURCE LINE # 1618
                                           ; SOURCE LINE # 1619
0556 120000      R     LCALL   L?0499
                                           ; SOURCE LINE # 1624
0559 E500        R     MOV     A,ucOption
055B 20E003            JB      ACC.0,?C0266
055E 30E122            JNB     ACC.1,?C0265
0561         ?C0266:
                                           ; SOURCE LINE # 1625
                                           ; SOURCE LINE # 1637
0561 7800        R     MOV     R0,#LOW usVsync
0563 120000      R     LCALL   L?0400
0566 120000      R     LCALL   L?0441
0569 C006              PUSH    AR6
056B C007              PUSH    AR7
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 101 

056D 120000      R     LCALL   L?0422
0570 D007              POP     AR7
0572 D006              POP     AR6
0574 120000      E     LCALL   ?C?ULDIV
0577 EF                MOV     A,R7
0578 2440              ADD     A,#040H
057A 7800        E     MOV     R0,#LOW usDV_Total+01H
057C F6                MOV     @R0,A
057D E4                CLR     A
057E 3E                ADDC    A,R6
057F 18                DEC     R0
0580 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1641
0581 800D              SJMP    ?C0267
0583         ?C0265:
                                           ; SOURCE LINE # 1643
0583 7800        R     MOV     R0,#LOW usVsync+01H
0585 E6                MOV     A,@R0
0586 2440              ADD     A,#040H
0588 7900        E     MOV     R1,#LOW usDV_Total+01H
058A F7                MOV     @R1,A
058B 18                DEC     R0
058C E4                CLR     A
058D 36                ADDC    A,@R0
058E 19                DEC     R1
058F F7                MOV     @R1,A
0590         ?C0267:
                                           ; SOURCE LINE # 1646
                                           ; SOURCE LINE # 1647
0590 120000      R     LCALL   L?0486
                                           ; SOURCE LINE # 1648
0593 75002D      E     MOV     Data+02H,#02DH
                                           ; SOURCE LINE # 1649
0596 7800        E     MOV     R0,#LOW usDV_Total+01H
0598 E6                MOV     A,@R0
0599 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 1650
059B 18                DEC     R0
059C E6                MOV     A,@R0
059D 5407              ANL     A,#07H
                                           ; SOURCE LINE # 1651
                                           ; SOURCE LINE # 1652
059F 120000      R     LCALL   L?0499
                                           ; SOURCE LINE # 1661
05A2 7800        E     MOV     R0,#LOW usIPV_ACT_LEN
05A4 120000      R     LCALL   L?0400
05A7 7A03              MOV     R2,#03H
05A9 120000      R     LCALL   L?0492
05AC C006              PUSH    AR6
05AE C007              PUSH    AR7
05B0 120000      R     LCALL   L?0452
05B3 D007              POP     AR7
05B5 D006              POP     AR6
05B7 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 1663
05BA E500        R     MOV     A,ucOption
05BC 30E008            JNB     ACC.0,?C0268
                                           ; SOURCE LINE # 1664
                                           ; SOURCE LINE # 1665
05BF AB00        E     MOV     R3,Data+01H
05C1 AA00        E     MOV     R2,Data
05C3 7D05              MOV     R5,#05H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 102 

                                           ; SOURCE LINE # 1667
05C5 800B              SJMP    ?C0387
05C7         ?C0268:
                                           ; SOURCE LINE # 1669
                                           ; SOURCE LINE # 1673
05C7 E500        R     MOV     A,ucOption
05C9 AB00        E     MOV     R3,Data+01H
05CB AA00        E     MOV     R2,Data
05CD 30E106            JNB     ACC.1,?C0270
                                           ; SOURCE LINE # 1674
                                           ; SOURCE LINE # 1676
05D0 7D06              MOV     R5,#06H
05D2         ?C0387:
05D2 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 1677
05D4 8004              SJMP    ?C0388
05D6         ?C0270:
                                           ; SOURCE LINE # 1679
                                           ; SOURCE LINE # 1681
05D6 7D09              MOV     R5,#09H
05D8 7F01              MOV     R7,#01H
05DA         ?C0388:
05DA 120000      R     LCALL   _Calculate_IVS2DVS_Delay
                                           ; SOURCE LINE # 1682
                                           ; SOURCE LINE # 1685
05DD         ?C0269:
                                           ; SOURCE LINE # 1691
05DD E4                CLR     A
05DE FB                MOV     R3,A
05DF 7DFC              MOV     R5,#0FCH
05E1 7F68              MOV     R7,#068H
05E3 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1695
05E6 7800        E     MOV     R0,#LOW ucDV_Delay
05E8 E6                MOV     A,@R0
05E9 FD                MOV     R5,A
05EA 7F38              MOV     R7,#038H
05EC 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1697
05EF E4                CLR     A
05F0 FD                MOV     R5,A
05F1 7F01              MOV     R7,#01H
05F3 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1698
05F6 E4                CLR     A
05F7 FD                MOV     R5,A
05F8 7F1F              MOV     R7,#01FH
05FA 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1707
05FD 7B01              MOV     R3,#01H
05FF 7DFF              MOV     R5,#0FFH
0601 7F04              MOV     R7,#04H
0603 020000      E     LJMP    _RTDSetBit
                                           ; SOURCE LINE # 1709
0606         L?0499:
0606 F500        E     MOV     Data+04H,A
0608 E4                CLR     A
0609 F500        E     MOV     Data+05H,A
060B 7F00        E     MOV     R7,#LOW Data
060D 120000      E     LCALL   _RTDWrite
0610 22                RET     
             ; FUNCTION Initial_Mode (END)
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 103 


             ; FUNCTION Display_VGA_Set (BEGIN)
                                           ; SOURCE LINE # 1711
                                           ; SOURCE LINE # 1712
                                           ; SOURCE LINE # 1717
0000 120000      R     LCALL   Initial_Mode
                                           ; SOURCE LINE # 1718
0003 120000      E     LCALL   Sharpness
                                           ; SOURCE LINE # 1720
0006 7800        E     MOV     R0,#LOW usIPH_ACT_WID+01H
0008 E6                MOV     A,@R0
0009 B40013            CJNE    A,#00H,?C0273
000C 18                DEC     R0
000D E6                MOV     A,@R0
000E B4050E            CJNE    A,#05H,?C0273
0011 E500        E     MOV     A,stGUD1+02H
0013 B40209            CJNE    A,#02H,?C0273
                                           ; SOURCE LINE # 1721
0016 7B01              MOV     R3,#01H
0018 7DFF              MOV     R5,#0FFH
001A 7F15              MOV     R7,#015H
001C 120000      E     LCALL   _RTDSetBit
001F         ?C0273:
                                           ; SOURCE LINE # 1724
001F 120000      E     LCALL   PowerDown_ADC
                                           ; SOURCE LINE # 1728
0022 120000      E     LCALL   SetADC_GainOffset
                                           ; SOURCE LINE # 1730
0025 120000      E     LCALL   Set_Gamma
                                           ; SOURCE LINE # 1731
0028 120000      E     LCALL   Set_Dithering
                                           ; SOURCE LINE # 1732
002B 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 1735
002E 7800        R     MOV     R0,#LOW ucMode_Curr
0030 E6                MOV     A,@R0
0031 FF                MOV     R7,A
0032 120000      E     LCALL   _Load_MUD
                                           ; SOURCE LINE # 1738
0035 E4                CLR     A
0036 7800        R     MOV     R0,#LOW ucPE_Level
0038 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1742
0039 741C              MOV     A,#01CH
003B D3                SETB    C
003C 9500        E     SUBB    A,stMUD+02H
003E 5007              JNC     ?C0275
0040 74E4              MOV     A,#0E4H
0042 C3                CLR     C
0043 9500        E     SUBB    A,stMUD+02H
0045 5003              JNC     ?C0274
0047         ?C0275:
0047 750080      E     MOV     stMUD+02H,#080H
004A         ?C0274:
                                           ; SOURCE LINE # 1746
004A 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 1748
004D 7F06              MOV     R7,#06H
004F 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 1750
0052 7800        R     MOV     R0,#LOW ucCE_Value
0054 E6                MOV     A,@R0
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 104 

0055 7025              JNZ     ?C0276
                                           ; SOURCE LINE # 1751
                                           ; SOURCE LINE # 1752
0057 7FCA              MOV     R7,#0CAH
0059 120000      R     LCALL   L?0497
                                           ; SOURCE LINE # 1753
005C 7D0D              MOV     R5,#0DH
005E 7FCA              MOV     R7,#0CAH
0060 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1754
0063 7F04              MOV     R7,#04H
0065 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 1755
0068 7FCE              MOV     R7,#0CEH
006A 120000      R     LCALL   L?0497
                                           ; SOURCE LINE # 1756
006D E500        E     MOV     A,Data
006F 75F0C8            MOV     B,#0C8H
0072 A4                MUL     AB
0073 E5F0              MOV     A,B
0075 7800        E     MOV     R0,#LOW ucP_Corr
0077 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1757
0078 7800        R     MOV     R0,#LOW ucCE_Value
007A A600        E     MOV     @R0,Data
                                           ; SOURCE LINE # 1759
007C         ?C0276:
                                           ; SOURCE LINE # 1761
007C 7800        E     MOV     R0,#LOW ucI_Code
007E E6                MOV     A,@R0
007F 7003              JNZ     ?C0277
                                           ; SOURCE LINE # 1762
0081 120000      E     LCALL   Adjust_I_Code
0084         ?C0277:
                                           ; SOURCE LINE # 1765
0084 120000      E     LCALL   Set_Clock
                                           ; SOURCE LINE # 1774
0087 7800        E     MOV     R0,#LOW ucH_Max_Margin
0089 76B2              MOV     @R0,#0B2H
                                           ; SOURCE LINE # 1775
008B 7800        E     MOV     R0,#LOW ucH_Min_Margin
008D 764E              MOV     @R0,#04EH
                                           ; SOURCE LINE # 1778
008F 7800        R     MOV     R0,#LOW ucMode_Curr
0091 E6                MOV     A,@R0
0092 14                DEC     A
0093 FD                MOV     R5,A
0094 7B01              MOV     R3,#01H
0096 7FAE              MOV     R7,#0AEH
0098 120000      E     LCALL   _I2CRead
                                           ; SOURCE LINE # 1779
009B E500        E     MOV     A,Data
009D D3                SETB    C
009E 94E4              SUBB    A,#0E4H
00A0 4003              JC      ?C0278
                                           ; SOURCE LINE # 1780
00A2 E4                CLR     A
00A3 F500        E     MOV     Data,A
00A5         ?C0278:
                                           ; SOURCE LINE # 1782
00A5 E500        E     MOV     A,Data
00A7 30E71A            JNB     ACC.7,?C0279
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 105 

00AA 2480              ADD     A,#080H
00AC FF                MOV     R7,A
00AD E4                CLR     A
00AE 34FF              ADDC    A,#0FFH
00B0 FE                MOV     R6,A
00B1 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
00B3 E6                MOV     A,@R0
00B4 24CE              ADD     A,#0CEH
00B6 FD                MOV     R5,A
00B7 18                DEC     R0
00B8 E6                MOV     A,@R0
00B9 34FF              ADDC    A,#0FFH
00BB CD                XCH     A,R5
00BC C3                CLR     C
00BD 9F                SUBB    A,R7
00BE FF                MOV     R7,A
00BF ED                MOV     A,R5
00C0 9E                SUBB    A,R6
00C1 FE                MOV     R6,A
00C2 8009              SJMP    ?C0280
00C4         ?C0279:
00C4 120000      R     LCALL   L?0476
00C7 24CE              ADD     A,#0CEH
00C9 CF                XCH     A,R7
00CA 34FF              ADDC    A,#0FFH
00CC FE                MOV     R6,A
00CD         ?C0280:
00CD 120000      R     LCALL   L?0463
                                           ; SOURCE LINE # 1784
                                           ; SOURCE LINE # 1785
00D0 120000      R     LCALL   L?0486
                                           ; SOURCE LINE # 1786
00D3 750006      E     MOV     Data+02H,#06H
                                           ; SOURCE LINE # 1787
                                           ; SOURCE LINE # 1788
00D6 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 1789
00D9 E4                CLR     A
00DA F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1790
00DC 7F00        E     MOV     R7,#LOW Data
00DE 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 1793
00E1 7800        E     MOV     R0,#LOW ucH_Max_Margin
00E3 E6                MOV     A,@R0
00E4 FF                MOV     R7,A
00E5 C3                CLR     C
00E6 9500        E     SUBB    A,stMUD
00E8 5004              JNC     ?C0281
                                           ; SOURCE LINE # 1794
00EA 8F00        E     MOV     stMUD,R7
00EC 800B              SJMP    ?C0282
00EE         ?C0281:
                                           ; SOURCE LINE # 1795
00EE 7800        E     MOV     R0,#LOW ucH_Min_Margin
00F0 E6                MOV     A,@R0
00F1 FF                MOV     R7,A
00F2 D3                SETB    C
00F3 9500        E     SUBB    A,stMUD
00F5 4002              JC      ?C0282
                                           ; SOURCE LINE # 1796
00F7 8F00        E     MOV     stMUD,R7
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 106 

00F9         ?C0282:
                                           ; SOURCE LINE # 1799
00F9 120000      E     LCALL   Set_H_Position
                                           ; SOURCE LINE # 1802
00FC 53007C      E     ANL     stMUD+03H,#07CH
                                           ; SOURCE LINE # 1805
00FF AF00        E     MOV     R7,stMUD+03H
0101 120000      E     LCALL   _Set_Phase
                                           ; SOURCE LINE # 1808
0104 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 1809
0106 120000      R     LCALL   L?0500
                                           ; SOURCE LINE # 1812
0109 E4                CLR     A
010A FD                MOV     R5,A
                                           ; SOURCE LINE # 1813
010B 120000      R     LCALL   L?0500
                                           ; SOURCE LINE # 1816
                                           ; SOURCE LINE # 1817
                                           ; SOURCE LINE # 1818
010E 120000      R     LCALL   L?0506
                                           ; SOURCE LINE # 1819
0111 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 1820
0113 7500FF      E     MOV     Data+04H,#0FFH
                                           ; SOURCE LINE # 1821
0116 750007      E     MOV     Data+05H,#07H
                                           ; SOURCE LINE # 1822
0119 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 1823
011B F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 1824
011D F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 1825
011F F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 1826
0121 F500        E     MOV     Data+0AH,A
                                           ; SOURCE LINE # 1827
0123 F500        E     MOV     Data+0BH,A
                                           ; SOURCE LINE # 1828
0125 F500        E     MOV     Data+0CH,A
                                           ; SOURCE LINE # 1829
0127 750001      E     MOV     Data+0DH,#01H
                                           ; SOURCE LINE # 1830
012A F500        E     MOV     Data+0EH,A
                                           ; SOURCE LINE # 1831
012C 7F00        E     MOV     R7,#LOW Data
012E 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 1833
0131 75003C      R     MOV     Wait_Time_Cnt,#03CH
0134         ?C0286:
                                           ; SOURCE LINE # 1835
                                           ; SOURCE LINE # 1836
0134 7F01              MOV     R7,#01H
0136 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 1837
0139 7B01              MOV     R3,#01H
013B 7D01              MOV     R5,#01H
013D 7F7F              MOV     R7,#07FH
013F 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 1838
                                           ; SOURCE LINE # 1839
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 107 

0142 E500        E     MOV     A,Data
0144 30E003            JNB     ACC.0,?C0285
0147 D500EA      R     DJNZ    Wait_Time_Cnt,?C0286
014A         ?C0285:
                                           ; SOURCE LINE # 1841
014A E4                CLR     A
014B FD                MOV     R5,A
014C 7F7F              MOV     R7,#07FH
014E 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1843
0151 E500        R     MOV     A,Wait_Time_Cnt
0153 602A              JZ      ?C0288
                                           ; SOURCE LINE # 1844
                                           ; SOURCE LINE # 1845
0155 E4                CLR     A
0156 FB                MOV     R3,A
0157 7D04              MOV     R5,#04H
0159 7F80              MOV     R7,#080H
015B 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 1846
015E E500        E     MOV     A,Data+03H
0160 540F              ANL     A,#0FH
0162 F500        E     MOV     Data,A
                                           ; SOURCE LINE # 1847
0164 850000      E     MOV     Data+01H,Data+02H
                                           ; SOURCE LINE # 1849
0167 7800        R     MOV     R0,#LOW usVsync
0169 120000      R     LCALL   L?0440
016C 9500        E     SUBB    A,Data+01H
016E EE                MOV     A,R6
016F 9500        E     SUBB    A,Data
0171 500A              JNC     ?C0289
0173 AC00        E     MOV     R4,Data
0175 AD00        E     MOV     R5,Data+01H
0177 AE04              MOV     R6,AR4
0179 AF05              MOV     R7,AR5
017B 8005              SJMP    ?C0389
017D         ?C0289:
017D         ?C0290:
                                           ; SOURCE LINE # 1850
017D 8003              SJMP    ?C0389
017F         ?C0288:
                                           ; SOURCE LINE # 1852
                                           ; SOURCE LINE # 1853
017F 120000      R     LCALL   L?0469
0182         ?C0389:
0182 7800        E     MOV     R0,#LOW usVer_End
0184 A606              MOV     @R0,AR6
0186 08                INC     R0
0187 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1854
0189         ?C0291:
                                           ; SOURCE LINE # 1857
0189 7800        R     MOV     R0,#LOW ucMode_Curr
018B E6                MOV     A,@R0
018C FF                MOV     R7,A
018D 7433              MOV     A,#033H
018F D3                SETB    C
0190 9F                SUBB    A,R7
0191 504D              JNC     ?C0292
                                           ; SOURCE LINE # 1858
                                           ; SOURCE LINE # 1859
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 108 

0193 75F00C            MOV     B,#0CH
0196 EF                MOV     A,R7
0197 A4                MUL     AB
0198 2400        E     ADD     A,#LOW VGA_Mode+04H
019A F582              MOV     DPL,A
019C E5F0              MOV     A,B
019E 3400        E     ADDC    A,#HIGH VGA_Mode+04H
01A0 120000      R     LCALL   L?0395
01A3 FF                MOV     R7,A
01A4 C3                CLR     C
01A5 7800        E     MOV     R0,#LOW usVer_End+01H
01A7 E6                MOV     A,@R0
01A8 9F                SUBB    A,R7
01A9 F500        E     MOV     Data+01H,A
01AB 18                DEC     R0
01AC E6                MOV     A,@R0
01AD 9E                SUBB    A,R6
01AE F500        E     MOV     Data,A
                                           ; SOURCE LINE # 1861
01B0 7800        E     MOV     R0,#LOW ucDV_Delay
01B2 E6                MOV     A,@R0
01B3 FF                MOV     R7,A
01B4 7E00              MOV     R6,#00H
01B6 2500        E     ADD     A,Data+01H
01B8 FD                MOV     R5,A
01B9 EE                MOV     A,R6
01BA 3500        E     ADDC    A,Data
01BC FC                MOV     R4,A
01BD C3                CLR     C
01BE 74FE              MOV     A,#0FEH
01C0 9D                SUBB    A,R5
01C1 E4                CLR     A
01C2 9C                SUBB    A,R4
01C3 500A              JNC     ?C0293
01C5 C3                CLR     C
01C6 74FE              MOV     A,#0FEH
01C8 9F                SUBB    A,R7
01C9 F500        E     MOV     Data+01H,A
01CB E4                CLR     A
01CC 9E                SUBB    A,R6
01CD F500        E     MOV     Data,A
01CF         ?C0293:
                                           ; SOURCE LINE # 1863
01CF 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
01D1 E500        E     MOV     A,Data+01H
01D3 26                ADD     A,@R0
01D4 F6                MOV     @R0,A
01D5 18                DEC     R0
01D6 E500        E     MOV     A,Data
01D8 36                ADDC    A,@R0
01D9 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1864
01DA 7800        E     MOV     R0,#LOW ucDV_Delay
01DC E500        E     MOV     A,Data+01H
01DE 26                ADD     A,@R0
01DF F6                MOV     @R0,A
                                           ; SOURCE LINE # 1865
01E0         ?C0292:
                                           ; SOURCE LINE # 1868
01E0 7800        E     MOV     R0,#LOW usIPV_ACT_STA
01E2 120000      R     LCALL   L?0440
01E5 7480              MOV     A,#080H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 109 

01E7 9F                SUBB    A,R7
01E8 E4                CLR     A
01E9 9E                SUBB    A,R6
01EA 5006              JNC     ?C0294
01EC 7C00              MOV     R4,#00H
01EE 7F00              MOV     R7,#00H
01F0 8005              SJMP    ?C0295
01F2         ?C0294:
01F2 C3                CLR     C
01F3 7481              MOV     A,#081H
01F5 9F                SUBB    A,R7
01F6 FF                MOV     R7,A
01F7         ?C0295:
01F7 7800        E     MOV     R0,#LOW ucV_Min_Margin
01F9 EF                MOV     A,R7
01FA F6                MOV     @R0,A
                                           ; SOURCE LINE # 1870
01FB 744E              MOV     A,#04EH
01FD D3                SETB    C
01FE 9F                SUBB    A,R7
01FF 4002              JC      ?C0296
0201 764E              MOV     @R0,#04EH
0203         ?C0296:
                                           ; SOURCE LINE # 1872
0203 120000      R     LCALL   L?0507
0206 18                DEC     R0
0207 36                ADDC    A,@R0
0208 7800        E     MOV     R0,#LOW usVer_End+01H
020A 120000      R     LCALL   L?0437
020D F500        E     MOV     Data+01H,A
020F ED                MOV     A,R5
0210 9E                SUBB    A,R6
0211 F500        E     MOV     Data,A
                                           ; SOURCE LINE # 1874
0213 D3                SETB    C
0214 E500        E     MOV     A,Data+01H
0216 94FF              SUBB    A,#0FFH
0218 E500        E     MOV     A,Data
021A 9400              SUBB    A,#00H
021C 4004              JC      ?C0297
021E 7FFF              MOV     R7,#0FFH
0220 8002              SJMP    ?C0298
0222         ?C0297:
0222 AF00        E     MOV     R7,Data+01H
0224         ?C0298:
                                           ; SOURCE LINE # 1882
0224 120000      R     LCALL   L?0430
0227 4006              JC      ?C0299
0229 7480              MOV     A,#080H
022B 9D                SUBB    A,R5
022C 7800        E     MOV     R0,#LOW ucV_Min_Margin
022E F6                MOV     @R0,A
022F         ?C0299:
                                           ; SOURCE LINE # 1883
022F 120000      R     LCALL   L?0470
0232 5003              JNC     ?C0300
0234 120000      R     LCALL   L?0508
0237         ?C0300:
                                           ; SOURCE LINE # 1885
0237 74B2              MOV     A,#0B2H
0239 C3                CLR     C
023A 7800        E     MOV     R0,#LOW ucV_Max_Margin
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 110 

023C 96                SUBB    A,@R0
023D 5002              JNC     ?C0301
023F 76B2              MOV     @R0,#0B2H
0241         ?C0301:
                                           ; SOURCE LINE # 1888
0241 7800        E     MOV     R0,#LOW ucV_Min_Margin
0243 E6                MOV     A,@R0
0244 FF                MOV     R7,A
0245 D3                SETB    C
0246 9500        E     SUBB    A,stMUD+01H
0248 4004              JC      ?C0302
                                           ; SOURCE LINE # 1889
024A 8F00        E     MOV     stMUD+01H,R7
024C 8019              SJMP    ?C0303
024E         ?C0302:
                                           ; SOURCE LINE # 1890
024E C3                CLR     C
024F E4                CLR     A
0250 9F                SUBB    A,R7
0251 FF                MOV     R7,A
0252 7401              MOV     A,#01H
0254 9400              SUBB    A,#00H
0256 FE                MOV     R6,A
0257 C3                CLR     C
0258 EF                MOV     A,R7
0259 9500        E     SUBB    A,stMUD+01H
025B EE                MOV     A,R6
025C 9400              SUBB    A,#00H
025E 5007              JNC     ?C0303
                                           ; SOURCE LINE # 1891
0260 7800        E     MOV     R0,#LOW ucV_Min_Margin
0262 E6                MOV     A,@R0
0263 F4                CPL     A
0264 04                INC     A
0265 F500        E     MOV     stMUD+01H,A
0267         ?C0303:
                                           ; SOURCE LINE # 1894
0267 120000      E     LCALL   Set_V_Position
                                           ; SOURCE LINE # 1897
026A 7800        R     MOV     R0,#LOW usHsync
026C 120000      R     LCALL   L?0400
026F C004              PUSH    AR4
0271 120000      R     LCALL   L?0411
0274 7800        E     MOV     R0,#LOW usVer_End
0276 E6                MOV     A,@R0
0277 FE                MOV     R6,A
0278 08                INC     R0
0279 E6                MOV     A,@R0
027A FF                MOV     R7,A
027B E4                CLR     A
027C D000              POP     AR0
                                           ; SOURCE LINE # 1898
027E 120000      R     LCALL   L?0418
                                           ; SOURCE LINE # 1899
0281 30E005            JNB     ACC.0,?C0305
0284 120000      R     LCALL   L?0480
0287 8006              SJMP    ?C0306
0289         ?C0305:
0289 7800        R     MOV     R0,#LOW ucRefresh
028B E6                MOV     A,@R0
028C C3                CLR     C
028D 13                RRC     A
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 111 

028E FF                MOV     R7,A
028F         ?C0306:
028F 7800        R     MOV     R0,#LOW ucRefresh
0291 EF                MOV     A,R7
0292 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1901
0293 D3                SETB    C
0294 944E              SUBB    A,#04EH
0296 4002              JC      ?C0307
                                           ; SOURCE LINE # 1902
0298 D200        R     SETB    bOverSpec
029A         ?C0307:
                                           ; SOURCE LINE # 1904
029A 120000      R     LCALL   L?0461
029D 7E60              MOV     R6,#060H
029F 7F00              MOV     R7,#00H
02A1 120000      E     LCALL   ?C?UIDIV
02A4 D3                SETB    C
02A5 EF                MOV     A,R7
02A6 945A              SUBB    A,#05AH
02A8 EE                MOV     A,R6
02A9 9400              SUBB    A,#00H
02AB 4002              JC      ?C0308
                                           ; SOURCE LINE # 1905
02AD D200        R     SETB    bOverSpec
02AF         ?C0308:
                                           ; SOURCE LINE # 1907
02AF 120000      E     LCALL   Frame_Sync
02B2 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 1909
02B4 E500        E     MOV     A,Data
02B6 B4010A            CJNE    A,#01H,?C0309
                                           ; SOURCE LINE # 1910
                                           ; SOURCE LINE # 1911
02B9 7F0A              MOV     R7,#0AH
02BB 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 1912
02BE 120000      E     LCALL   Frame_Sync
02C1 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 1913
02C3         ?C0309:
                                           ; SOURCE LINE # 1915
02C3 E500        E     MOV     A,Data
02C5 6003              JZ      ?C0310
02C7 C3                CLR     C
02C8 8001              SJMP    ?C0311
02CA         ?C0310:
02CA D3                SETB    C
02CB         ?C0311:
02CB 9200        E     MOV     bFrameSync,C
                                           ; SOURCE LINE # 1916
02CD E4                CLR     A
02CE 7800        E     MOV     R0,#LOW ucSyncErrorCnt
02D0 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1918
02D1 FB                MOV     R3,A
                                           ; SOURCE LINE # 1919
02D2 120000      R     LCALL   L?0431
                                           ; SOURCE LINE # 1920
02D5 7B40              MOV     R3,#040H
                                           ; SOURCE LINE # 1921
02D7 120000      R     LCALL   L?0431
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 112 

                                           ; SOURCE LINE # 1922
02DA 7B80              MOV     R3,#080H
02DC 7D3F              MOV     R5,#03FH
02DE 7F6D              MOV     R7,#06DH
02E0 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1923
02E3 E4                CLR     A
02E4 FD                MOV     R5,A
02E5 7F6C              MOV     R7,#06CH
02E7 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 1926
02EA 7B20              MOV     R3,#020H
02EC 7D7F              MOV     R5,#07FH
02EE 7F20              MOV     R7,#020H
02F0 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 1929
02F3 300009      E     JNB     bFrameSync,?C0312
                                           ; SOURCE LINE # 1930
02F6 7B20              MOV     R3,#020H
02F8 7DDF              MOV     R5,#0DFH
02FA 7F8E              MOV     R7,#08EH
02FC 120000      E     LCALL   _RTDSetBit
02FF         ?C0312:
                                           ; SOURCE LINE # 1934
                                           ; SOURCE LINE # 1935
02FF 120000      R     LCALL   L?0459
0302 120000      E     LCALL   _I2CRead
                                           ; SOURCE LINE # 1936
0305 7800        R     MOV     R0,#LOW ucfrist
0307 E6                MOV     A,@R0
0308 75F008            MOV     B,#08H
030B A4                MUL     AB
030C FF                MOV     R7,A
030D C3                CLR     C
030E 7800        R     MOV     R0,#LOW ucMode_Curr
0310 E6                MOV     A,@R0
0311 9F                SUBB    A,R7
0312 7800        R     MOV     R0,#LOW ucfrist
0314 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1937
0315 14                DEC     A
0316 FF                MOV     R7,A
0317 E500        E     MOV     A,Data
0319 A807              MOV     R0,AR7
031B 08                INC     R0
031C 8002              SJMP    ?C0364
031E         ?C0363:
031E C3                CLR     C
031F 13                RRC     A
0320         ?C0364:
0320 D8FC              DJNZ    R0,?C0363
0322 7800        R     MOV     R0,#LOW ucfrist
0324 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1938
0325 5401              ANL     A,#01H
0327 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1939
0328 430020      E     ORL     stGUD1+07H,#020H
                                           ; SOURCE LINE # 1942
032B 22                RET     
032C         L?0431:
032C 7D3F              MOV     R5,#03FH
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 113 

032E 7F6D              MOV     R7,#06DH
0330 120000      E     LCALL   _RTDSetBit
0333 E4                CLR     A
0334 FD                MOV     R5,A
0335 7F6C              MOV     R7,#06CH
0337 120000      E     LCALL   _RTDSetByte
033A 22                RET     
033B         L?0497:
033B 7B01              MOV     R3,#01H
033D 7D01              MOV     R5,#01H
033F 120000      E     LCALL   _RTDRead
0342 22                RET     
0343         L?0500:
0343 7F7F              MOV     R7,#07FH
0345 120000      E     LCALL   _RTDSetByte
0348 7F28              MOV     R7,#028H
034A 120000      E     LCALL   _Delay_Xms
034D 22                RET     
             ; FUNCTION Display_VGA_Set (END)

             ; FUNCTION Display_DVI_Set (BEGIN)
                                           ; SOURCE LINE # 1944
                                           ; SOURCE LINE # 1945
                                           ; SOURCE LINE # 1949
0000 120000      R     LCALL   Initial_Mode
                                           ; SOURCE LINE # 1952
0003 7800        E     MOV     R0,#LOW usIPV_ACT_STA
0005 120000      R     LCALL   L?0440
0008 7480              MOV     A,#080H
000A 9F                SUBB    A,R7
000B E4                CLR     A
000C 9E                SUBB    A,R6
000D 5006              JNC     ?C0314
000F 7C00              MOV     R4,#00H
0011 7F00              MOV     R7,#00H
0013 8005              SJMP    ?C0315
0015         ?C0314:
0015 C3                CLR     C
0016 7481              MOV     A,#081H
0018 9F                SUBB    A,R7
0019 FF                MOV     R7,A
001A         ?C0315:
001A 7800        E     MOV     R0,#LOW ucV_Min_Margin
001C A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1955
001E 120000      R     LCALL   L?0507
0021 120000      R     LCALL   L?0436
0024 F500        E     MOV     Data+09H,A
0026 ED                MOV     A,R5
0027 9E                SUBB    A,R6
0028 F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 1957
002A C3                CLR     C
002B 74FF              MOV     A,#0FFH
002D 9500        E     SUBB    A,Data+09H
002F E4                CLR     A
0030 9500        E     SUBB    A,Data+08H
0032 5004              JNC     ?C0316
0034 7FFF              MOV     R7,#0FFH
0036 8002              SJMP    ?C0317
0038         ?C0316:
0038 AF00        E     MOV     R7,Data+09H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 114 

003A         ?C0317:
                                           ; SOURCE LINE # 1965
003A 120000      R     LCALL   L?0430
003D 4006              JC      ?C0318
003F 7480              MOV     A,#080H
0041 9D                SUBB    A,R5
0042 7800        E     MOV     R0,#LOW ucV_Min_Margin
0044 F6                MOV     @R0,A
0045         ?C0318:
                                           ; SOURCE LINE # 1966
0045 120000      R     LCALL   L?0470
0048 5003              JNC     ?C0319
004A 120000      R     LCALL   L?0508
004D         ?C0319:
                                           ; SOURCE LINE # 1969
004D 7800        R     MOV     R0,#LOW ucMode_Curr
004F E6                MOV     A,@R0
0050 FF                MOV     R7,A
0051 120000      E     LCALL   _Load_MUD
                                           ; SOURCE LINE # 1971
0054 120000      E     LCALL   Set_Gamma
                                           ; SOURCE LINE # 1972
0057 120000      E     LCALL   Set_Dithering
                                           ; SOURCE LINE # 1973
005A 120000      E     LCALL   Set_Bright_Contrast
                                           ; SOURCE LINE # 1974
005D 120000      E     LCALL   Sharpness
                                           ; SOURCE LINE # 1984
                                           ; SOURCE LINE # 1985
                                           ; SOURCE LINE # 1986
0060 120000      R     LCALL   L?0506
                                           ; SOURCE LINE # 1987
0063 750002      E     MOV     Data+03H,#02H
                                           ; SOURCE LINE # 1988
0066 7800        E     MOV     R0,#LOW usADC_Clock+01H
0068 E6                MOV     A,@R0
0069 24FE              ADD     A,#0FEH
006B F500        E     MOV     Data+04H,A
                                           ; SOURCE LINE # 1989
006D 120000      R     LCALL   L?0493
0070 F500        E     MOV     Data+05H,A
                                           ; SOURCE LINE # 1990
0072 750002      E     MOV     Data+06H,#02H
                                           ; SOURCE LINE # 1991
0075 7800        R     MOV     R0,#LOW usVsync+01H
0077 E6                MOV     A,@R0
0078 24FE              ADD     A,#0FEH
007A F500        E     MOV     Data+07H,A
                                           ; SOURCE LINE # 1992
007C 120000      R     LCALL   L?0494
007F F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 1993
0081 E4                CLR     A
0082 F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 1994
0084 F500        E     MOV     Data+0AH,A
                                           ; SOURCE LINE # 1995
0086 F500        E     MOV     Data+0BH,A
                                           ; SOURCE LINE # 1996
0088 F500        E     MOV     Data+0CH,A
                                           ; SOURCE LINE # 1997
008A 750081      E     MOV     Data+0DH,#081H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 115 

                                           ; SOURCE LINE # 1998
008D F500        E     MOV     Data+0EH,A
                                           ; SOURCE LINE # 2001
008F 7F00        E     MOV     R7,#LOW Data
0091 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 2003
0094 75003C      R     MOV     Wait_Time_Cnt,#03CH
0097         ?C0322:
                                           ; SOURCE LINE # 2005
                                           ; SOURCE LINE # 2006
0097 7F01              MOV     R7,#01H
0099 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 2007
009C 7F7F              MOV     R7,#07FH
                                           ; SOURCE LINE # 2008
                                           ; SOURCE LINE # 2009
009E 120000      R     LCALL   L?0509
00A1 30E003            JNB     ACC.0,?C0321
00A4 D500F0      R     DJNZ    Wait_Time_Cnt,?C0322
00A7         ?C0321:
                                           ; SOURCE LINE # 2011
00A7 E500        R     MOV     A,Wait_Time_Cnt
00A9 7009              JNZ     ?C0324
                                           ; SOURCE LINE # 2012
                                           ; SOURCE LINE # 2013
00AB FD                MOV     R5,A
00AC 7F7F              MOV     R7,#07FH
00AE 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 2014
00B1 020000      E     LJMP    Reset_Mode
                                           ; SOURCE LINE # 2015
00B4         ?C0324:
                                           ; SOURCE LINE # 2017
                                           ; SOURCE LINE # 2019
00B4 E4                CLR     A
00B5 FB                MOV     R3,A
00B6 7D08              MOV     R5,#08H
00B8 7F80              MOV     R7,#080H
00BA 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 2022
00BD E500        E     MOV     A,Data+05H
00BF FE                MOV     R6,A
00C0 7C00              MOV     R4,#00H
00C2 E4                CLR     A
00C3 2500        E     ADD     A,Data+04H
00C5 FF                MOV     R7,A
00C6 EC                MOV     A,R4
00C7 3E                ADDC    A,R6
00C8 CF                XCH     A,R7
00C9 24FE              ADD     A,#0FEH
00CB 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
00CD F6                MOV     @R0,A
00CE EF                MOV     A,R7
00CF 34FF              ADDC    A,#0FFH
00D1 18                DEC     R0
00D2 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2025
00D3 E500        E     MOV     A,Data+01H
00D5 FE                MOV     R6,A
00D6 E4                CLR     A
00D7 2500        E     ADD     A,Data
00D9 FF                MOV     R7,A
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 116 

00DA EC                MOV     A,R4
00DB 3E                ADDC    A,R6
00DC CF                XCH     A,R7
00DD 24FF              ADD     A,#0FFH
00DF F500        E     MOV     Data+01H,A
00E1 EF                MOV     A,R7
00E2 34FF              ADDC    A,#0FFH
00E4 F500        E     MOV     Data,A
                                           ; SOURCE LINE # 2027
00E6 7800        E     MOV     R0,#LOW ucV_Max_Margin
00E8 E6                MOV     A,@R0
00E9 F9                MOV     R1,A
00EA FF                MOV     R7,A
00EB 7800        E     MOV     R0,#LOW usIPV_ACT_STA
00ED E6                MOV     A,@R0
00EE FC                MOV     R4,A
00EF 08                INC     R0
00F0 E6                MOV     A,@R0
00F1 FD                MOV     R5,A
00F2 2F                ADD     A,R7
00F3 FF                MOV     R7,A
00F4 E4                CLR     A
00F5 3C                ADDC    A,R4
00F6 CF                XCH     A,R7
00F7 2480              ADD     A,#080H
00F9 CF                XCH     A,R7
00FA 34FF              ADDC    A,#0FFH
00FC FE                MOV     R6,A
00FD D3                SETB    C
00FE E500        E     MOV     A,Data+01H
0100 9F                SUBB    A,R7
0101 E500        E     MOV     A,Data
0103 9E                SUBB    A,R6
0104 5003              JNC     $ + 5H
0106 020000      R     LJMP    ?C0326
                                           ; SOURCE LINE # 2028
                                           ; SOURCE LINE # 2029
0109 ED                MOV     A,R5
010A 7800        E     MOV     R0,#LOW usIPV_ACT_LEN+01H
010C 26                ADD     A,@R0
010D FF                MOV     R7,A
010E EC                MOV     A,R4
010F 120000      R     LCALL   L?0436
0112 F500        E     MOV     Data+03H,A
0114 ED                MOV     A,R5
0115 9E                SUBB    A,R6
0116 F500        E     MOV     Data+02H,A
                                           ; SOURCE LINE # 2031
0118 7800        E     MOV     R0,#LOW ucDV_Delay
011A E6                MOV     A,@R0
011B FF                MOV     R7,A
011C 7800        E     MOV     R0,#LOW ucV_Max_Margin
011E E6                MOV     A,@R0
011F FE                MOV     R6,A
0120 2F                ADD     A,R7
0121 2480              ADD     A,#080H
0123 7800        E     MOV     R0,#LOW ucDV_Delay
0125 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2032
0126 EE                MOV     A,R6
0127 FF                MOV     R7,A
0128 7E00              MOV     R6,#00H
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 117 

012A 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
012C 26                ADD     A,@R0
012D FD                MOV     R5,A
012E EE                MOV     A,R6
012F 18                DEC     R0
0130 36                ADDC    A,@R0
0131 CD                XCH     A,R5
0132 2480              ADD     A,#080H
0134 08                INC     R0
0135 F6                MOV     @R0,A
0136 ED                MOV     A,R5
0137 34FF              ADDC    A,#0FFH
0139 18                DEC     R0
013A F6                MOV     @R0,A
                                           ; SOURCE LINE # 2034
013B C3                CLR     C
013C EF                MOV     A,R7
013D 9500        E     SUBB    A,Data+03H
013F EE                MOV     A,R6
0140 9500        E     SUBB    A,Data+02H
0142 4003              JC      $ + 5H
0144 020000      R     LJMP    ?C0331
                                           ; SOURCE LINE # 2035
                                           ; SOURCE LINE # 2037
0147 E9                MOV     A,R1
0148 FF                MOV     R7,A
0149 C3                CLR     C
014A E500        E     MOV     A,Data+03H
014C 9F                SUBB    A,R7
014D FF                MOV     R7,A
014E E500        E     MOV     A,Data+02H
0150 9E                SUBB    A,R6
0151 FE                MOV     R6,A
0152 C3                CLR     C
0153 E500        E     MOV     A,Data+01H
0155 08                INC     R0
0156 96                SUBB    A,@R0
0157 FD                MOV     R5,A
0158 E500        E     MOV     A,Data
015A 18                DEC     R0
015B 96                SUBB    A,@R0
015C FC                MOV     R4,A
015D C3                CLR     C
015E EF                MOV     A,R7
015F 9D                SUBB    A,R5
0160 EE                MOV     A,R6
0161 9C                SUBB    A,R4
0162 400B              JC      ?C0328
                                           ; SOURCE LINE # 2038
0164 ED                MOV     A,R5
0165 2403              ADD     A,#03H
0167 F500        E     MOV     Data+03H,A
0169 E4                CLR     A
016A 3C                ADDC    A,R4
016B F500        E     MOV     Data+02H,A
016D 801F              SJMP    ?C0329
016F         ?C0328:
                                           ; SOURCE LINE # 2040
016F 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
0171 E6                MOV     A,@R0
0172 2500        E     ADD     A,Data+03H
0174 FF                MOV     R7,A
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 118 

0175 18                DEC     R0
0176 E6                MOV     A,@R0
0177 3500        E     ADDC    A,Data+02H
0179 FE                MOV     R6,A
017A 7800        E     MOV     R0,#LOW ucV_Max_Margin
017C E6                MOV     A,@R0
017D FD                MOV     R5,A
017E C3                CLR     C
017F EF                MOV     A,R7
0180 9D                SUBB    A,R5
0181 FF                MOV     R7,A
0182 EE                MOV     A,R6
0183 9400              SUBB    A,#00H
0185 CF                XCH     A,R7
0186 2403              ADD     A,#03H
0188 F500        E     MOV     Data+03H,A
018A E4                CLR     A
018B 3F                ADDC    A,R7
018C F500        E     MOV     Data+02H,A
018E         ?C0329:
                                           ; SOURCE LINE # 2042
018E 747E              MOV     A,#07EH
0190 120000      R     LCALL   L?0488
0193 5006              JNC     ?C0330
0195 750000      E     MOV     Data+02H,#00H
0198 75007E      E     MOV     Data+03H,#07EH
019B         ?C0330:
                                           ; SOURCE LINE # 2044
019B E500        E     MOV     A,Data+03H
019D 4480              ORL     A,#080H
                                           ; SOURCE LINE # 2045
                                           ; SOURCE LINE # 2046
019F 8047              SJMP    ?C0391
01A1         ?C0326:
                                           ; SOURCE LINE # 2047
01A1 7800        E     MOV     R0,#LOW ucV_Min_Margin
01A3 E6                MOV     A,@R0
01A4 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
01A6 120000      R     LCALL   L?0477
01A9 2480              ADD     A,#080H
01AB CF                XCH     A,R7
01AC 34FF              ADDC    A,#0FFH
01AE FE                MOV     R6,A
01AF C3                CLR     C
01B0 E500        E     MOV     A,Data+01H
01B2 9F                SUBB    A,R7
01B3 E500        E     MOV     A,Data
01B5 9E                SUBB    A,R6
01B6 5038              JNC     ?C0332
                                           ; SOURCE LINE # 2048
                                           ; SOURCE LINE # 2049
01B8 7800        E     MOV     R0,#LOW ucDV_Delay
01BA E6                MOV     A,@R0
01BB 7800        E     MOV     R0,#LOW ucV_Min_Margin
01BD 26                ADD     A,@R0
01BE 2480              ADD     A,#080H
01C0 7800        E     MOV     R0,#LOW ucDV_Delay
01C2 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2050
01C3 7800        E     MOV     R0,#LOW usIPV_ACT_STA
01C5 EE                MOV     A,R6
01C6 F6                MOV     @R0,A
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 119 

01C7 08                INC     R0
01C8 EF                MOV     A,R7
01C9 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2052
01CA C3                CLR     C
01CB 9500        E     SUBB    A,Data+01H
01CD F500        E     MOV     Data+03H,A
01CF EE                MOV     A,R6
01D0 9500        E     SUBB    A,Data
01D2 F500        E     MOV     Data+02H,A
                                           ; SOURCE LINE # 2055
01D4 D3                SETB    C
01D5 7403              MOV     A,#03H
01D7 9500        E     SUBB    A,Data+03H
01D9 E4                CLR     A
01DA 9500        E     SUBB    A,Data+02H
01DC 5003              JNC     ?C0333
                                           ; SOURCE LINE # 2056
01DE E4                CLR     A
01DF 8007              SJMP    ?C0390
01E1         ?C0333:
                                           ; SOURCE LINE # 2058
01E1 C3                CLR     C
01E2 7403              MOV     A,#03H
01E4 9500        E     SUBB    A,Data+03H
01E6 4480              ORL     A,#080H
01E8         ?C0390:
01E8         ?C0391:
01E8 FD                MOV     R5,A
01E9 7F8C              MOV     R7,#08CH
01EB 120000      E     LCALL   _RTDSetByte
                                           ; SOURCE LINE # 2059
01EE 8017              SJMP    ?C0331
01F0         ?C0332:
                                           ; SOURCE LINE # 2061
                                           ; SOURCE LINE # 2062
01F0 E500        E     MOV     A,Data+01H
01F2 7800        E     MOV     R0,#LOW ucDV_Delay
01F4 26                ADD     A,@R0
01F5 FF                MOV     R7,A
01F6 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
01F8 E6                MOV     A,@R0
01F9 FE                MOV     R6,A
01FA C3                CLR     C
01FB EF                MOV     A,R7
01FC 9E                SUBB    A,R6
01FD 7800        E     MOV     R0,#LOW ucDV_Delay
01FF F6                MOV     @R0,A
                                           ; SOURCE LINE # 2063
0200 7800        E     MOV     R0,#LOW usIPV_ACT_STA
0202 A600        E     MOV     @R0,Data
0204 08                INC     R0
0205 A600        E     MOV     @R0,Data+01H
                                           ; SOURCE LINE # 2064
0207         ?C0331:
                                           ; SOURCE LINE # 2066
0207 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 2068
0209 120000      R     LCALL   L?0509
020C 5403              ANL     A,#03H
020E 600B              JZ      ?C0336
                                           ; SOURCE LINE # 2069
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 120 

0210 7800        E     MOV     R0,#LOW usIPH_ACT_STA+01H
0212 74F2              MOV     A,#0F2H
0214 26                ADD     A,@R0
0215 F6                MOV     @R0,A
0216 18                DEC     R0
0217 74FF              MOV     A,#0FFH
0219 36                ADDC    A,@R0
021A F6                MOV     @R0,A
021B         ?C0336:
                                           ; SOURCE LINE # 2071
021B 750005      E     MOV     Data,#05H
                                           ; SOURCE LINE # 2072
                                           ; SOURCE LINE # 2073
                                           ; SOURCE LINE # 2074
                                           ; SOURCE LINE # 2075
021E 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 2076
0221 750005      E     MOV     Data+05H,#05H
                                           ; SOURCE LINE # 2077
0224 E4                CLR     A
0225 F500        E     MOV     Data+06H,A
                                           ; SOURCE LINE # 2078
0227 75000A      E     MOV     Data+07H,#0AH
                                           ; SOURCE LINE # 2079
022A 7800        E     MOV     R0,#LOW usIPV_ACT_STA+01H
022C E6                MOV     A,@R0
022D F500        E     MOV     Data+08H,A
                                           ; SOURCE LINE # 2080
022F 18                DEC     R0
0230 E6                MOV     A,@R0
0231 F500        E     MOV     Data+09H,A
                                           ; SOURCE LINE # 2081
0233 750004      E     MOV     Data+0AH,#04H
                                           ; SOURCE LINE # 2082
0236 750001      E     MOV     Data+0BH,#01H
                                           ; SOURCE LINE # 2083
0239 750038      E     MOV     Data+0CH,#038H
                                           ; SOURCE LINE # 2084
023C 7800        E     MOV     R0,#LOW ucDV_Delay
023E E6                MOV     A,@R0
023F F500        E     MOV     Data+0DH,A
                                           ; SOURCE LINE # 2085
0241 E4                CLR     A
0242 F500        E     MOV     Data+0EH,A
                                           ; SOURCE LINE # 2086
0244 7F00        E     MOV     R7,#LOW Data
0246 120000      E     LCALL   _RTDWrite
                                           ; SOURCE LINE # 2088
0249 7F08              MOV     R7,#08H
024B 120000      E     LCALL   _Wait_For_Event
                                           ; SOURCE LINE # 2090
024E 120000      E     LCALL   Frame_Sync
0251 8F00        E     MOV     Data,R7
                                           ; SOURCE LINE # 2092
0253 E500        E     MOV     A,Data
0255 B40105            CJNE    A,#01H,?C0337
0258 120000      E     LCALL   Frame_Sync
025B 8F00        E     MOV     Data,R7
025D         ?C0337:
                                           ; SOURCE LINE # 2094
025D E500        E     MOV     A,Data
025F 6003              JZ      ?C0338
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 121 

0261 C3                CLR     C
0262 8001              SJMP    ?C0339
0264         ?C0338:
0264 D3                SETB    C
0265         ?C0339:
0265 9200        E     MOV     bFrameSync,C
                                           ; SOURCE LINE # 2095
0267 E4                CLR     A
0268 7800        E     MOV     R0,#LOW ucSyncErrorCnt
026A F6                MOV     @R0,A
                                           ; SOURCE LINE # 2098
026B 7B20              MOV     R3,#020H
026D 7D7F              MOV     R5,#07FH
026F 7F20              MOV     R7,#020H
0271 120000      E     LCALL   _RTDSetBit
                                           ; SOURCE LINE # 2099
                                           ; SOURCE LINE # 2103
0274         ?C0340:
0274 22                RET     
0275         L?0509:
0275 7B01              MOV     R3,#01H
0277 7D01              MOV     R5,#01H
0279 120000      E     LCALL   _RTDRead
027C E500        E     MOV     A,Data
027E 22                RET     
             ; FUNCTION Display_DVI_Set (END)

             ; FUNCTION Set_Video_Mode (BEGIN)
                                           ; SOURCE LINE # 2105
                                           ; SOURCE LINE # 2106
                                           ; SOURCE LINE # 2181
0000 22                RET     
             ; FUNCTION Set_Video_Mode (END)

             ; FUNCTION Display_Video_Set (BEGIN)
                                           ; SOURCE LINE # 2183
                                           ; SOURCE LINE # 2184
                                           ; SOURCE LINE # 2278
0000 020000      R     LJMP    Set_Video_Mode
             ; FUNCTION Display_Video_Set (END)

             ; FUNCTION Input_Mode_Detector (BEGIN)
                                           ; SOURCE LINE # 2282
                                           ; SOURCE LINE # 2283
                                           ; SOURCE LINE # 2284
0000 7B01              MOV     R3,#01H
0002 7D01              MOV     R5,#01H
0004 7F4C              MOV     R7,#04CH
0006 120000      E     LCALL   _RTDRead
                                           ; SOURCE LINE # 2286
0009 E500        E     MOV     A,Data
000B 20E104            JB      ACC.1,?C0343
000E E4                CLR     A
000F 7800        R     MOV     R0,#LOW ucModeCnt
0011 F6                MOV     @R0,A
0012         ?C0343:
                                           ; SOURCE LINE # 2288
0012 7800        R     MOV     R0,#LOW ucModeCnt
0014 E6                MOV     A,@R0
0015 6002              JZ      ?C0344
                                           ; SOURCE LINE # 2289
                                           ; SOURCE LINE # 2290
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 122 

0017 16                DEC     @R0
                                           ; SOURCE LINE # 2291
0018 22                RET     
0019         ?C0344:
                                           ; SOURCE LINE # 2293
                                           ; SOURCE LINE # 2294
0019 7800        R     MOV     R0,#LOW ucModeCnt
001B 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 2297
001D 120000      E     LCALL   Source_Auto_Scan
                                           ; SOURCE LINE # 2302
0020 200007      R     JB      bStable,?C0347
                                           ; SOURCE LINE # 2303
                                           ; SOURCE LINE # 2304
0023 D200        E     SETB    bReload
                                           ; SOURCE LINE # 2306
0025 7F02              MOV     R7,#02H
0027 120000      E     LCALL   _Set_Task
                                           ; SOURCE LINE # 2307
                                           ; SOURCE LINE # 2308
                                           ; SOURCE LINE # 2309
002A         ?C0347:
002A 22                RET     
             ; FUNCTION Input_Mode_Detector (END)

             ; FUNCTION New_Mode_Auto (BEGIN)
                                           ; SOURCE LINE # 2314
                                           ; SOURCE LINE # 2315
                                           ; SOURCE LINE # 2317
0000 200003      R     JB      bStable,$ + 6H
0003 020000      R     LJMP    ?C0349
0006 200003      E     JB      bFrameSync,$ + 6H
0009 020000      R     LJMP    ?C0349
000C E500        E     MOV     A,stGUD1+07H
000E 20E503            JB      ACC.5,$ + 6H
0011 020000      R     LJMP    ?C0349
0014 7800        R     MOV     R0,#LOW ucMode_Curr
0016 E6                MOV     A,@R0
0017 7003              JNZ     $ + 5H
0019 020000      R     LJMP    ?C0349
001C F4                CPL     A
001D 7003              JNZ     $ + 5H
001F 020000      R     LJMP    ?C0349
0022 7800        R     MOV     R0,#LOW ucfrist
0024 E6                MOV     A,@R0
0025 7003              JNZ     $ + 5H
0027 020000      R     LJMP    ?C0349
                                           ; SOURCE LINE # 2324
                                           ; SOURCE LINE # 2325
002A 7F01              MOV     R7,#01H
002C 120000      E     LCALL   _OSD_Position
                                           ; SOURCE LINE # 2326
002F 7F01              MOV     R7,#01H
0031 120000      E     LCALL   _OSD_Position
                                           ; SOURCE LINE # 2327
                                           ; SOURCE LINE # 2328
0034 120000      R     LCALL   L?0466
                                           ; SOURCE LINE # 2329
0037 7B01              MOV     R3,#01H
0039 7DFE              MOV     R5,#0FEH
003B 7F6D              MOV     R7,#06DH
003D 120000      E     LCALL   _RTDSetBit
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 123 

                                           ; SOURCE LINE # 2330
0040 7E00        E     MOV     R6,#HIGH OSD_AUTO
0042 7F00        E     MOV     R7,#LOW OSD_AUTO
0044 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 2331
0047 E500        E     MOV     A,stGUD1
0049 5407              ANL     A,#07H
004B 75F002            MOV     B,#02H
004E A4                MUL     AB
004F 2400        E     ADD     A,#LOW strTabAuto_Atb
0051 F582              MOV     DPL,A
0053 E5F0              MOV     A,B
0055 3400        E     ADDC    A,#HIGH strTabAuto_Atb
0057 120000      R     LCALL   L?0395
005A FF                MOV     R7,A
005B 120000      E     LCALL   _RTDOSDW
                                           ; SOURCE LINE # 2332
005E 120000      E     LCALL   Auto_Config
                                           ; SOURCE LINE # 2333
                                           ; SOURCE LINE # 2334
0061 120000      R     LCALL   L?0466
                                           ; SOURCE LINE # 2336
0064 5300DF      E     ANL     stGUD1+07H,#0DFH
                                           ; SOURCE LINE # 2337
0067 120000      E     LCALL   Save_GUD1
                                           ; SOURCE LINE # 2338
                                           ; SOURCE LINE # 2339
006A 120000      R     LCALL   L?0459
006D 120000      E     LCALL   _I2CRead
                                           ; SOURCE LINE # 2340
0070 750001      E     MOV     Data+01H,#01H
                                           ; SOURCE LINE # 2341
0073 7800        R     MOV     R0,#LOW ucfrist
0075 E6                MOV     A,@R0
0076 FF                MOV     R7,A
0077 75F008            MOV     B,#08H
007A A4                MUL     AB
007B FE                MOV     R6,A
007C 7800        R     MOV     R0,#LOW ucMode_Curr
007E E6                MOV     A,@R0
007F 14                DEC     A
0080 C3                CLR     C
0081 9E                SUBB    A,R6
0082 FE                MOV     R6,A
0083 E500        E     MOV     A,Data+01H
0085 A806              MOV     R0,AR6
0087 08                INC     R0
0088 8002              SJMP    ?C0366
008A         ?C0365:
008A C3                CLR     C
008B 33                RLC     A
008C         ?C0366:
008C D8FC              DJNZ    R0,?C0365
008E F500        E     MOV     Data+01H,A
                                           ; SOURCE LINE # 2342
0090 F4                CPL     A
0091 5500        E     ANL     A,Data
0093 F500        E     MOV     Data+03H,A
                                           ; SOURCE LINE # 2344
0095 750004      E     MOV     Data,#04H
                                           ; SOURCE LINE # 2345
0098 7500AE      E     MOV     Data+01H,#0AEH
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 124 

                                           ; SOURCE LINE # 2346
009B 8F00        E     MOV     Data+02H,R7
                                           ; SOURCE LINE # 2347
009D 7B00              MOV     R3,#00H
009F 7A00        E     MOV     R2,#HIGH Data
00A1 7900        E     MOV     R1,#LOW Data
00A3 120000      E     LCALL   _I2CWrite
                                           ; SOURCE LINE # 2348
00A6 7F10              MOV     R7,#010H
00A8 120000      E     LCALL   _Delay_Xms
                                           ; SOURCE LINE # 2349
00AB E4                CLR     A
00AC 7800        R     MOV     R0,#LOW ucfrist
00AE F6                MOV     @R0,A
                                           ; SOURCE LINE # 2350
                                           ; SOURCE LINE # 2352
00AF         ?C0349:
00AF 22                RET     
00B0         L?0466:
00B0 E4                CLR     A
00B1 FB                MOV     R3,A
00B2 7DFE              MOV     R5,#0FEH
00B4 7F6D              MOV     R7,#06DH
00B6 120000      E     LCALL   _RTDSetBit
00B9 7E00        E     MOV     R6,#HIGH OSD_Reset
00BB 7F00        E     MOV     R7,#LOW OSD_Reset
00BD 120000      E     LCALL   _RTDOSDW
00C0 22                RET     
             ; FUNCTION New_Mode_Auto (END)

C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 125 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


LP_GLOBAL_USER_DATA1 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
ucI_Code . . . . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
usVsync. . . . . . . . . . . . . . . .  PUBLIC   IDATA  U_INT    0000H  2
RGB_MODE_USER_DATA . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  H_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  V_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  PHASE. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
LP_GLOBAL_USER_DATA2 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
LP_GLOBAL_USER_DATA3 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
GLOBAL_USER_DATA0. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  CONTRAST . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  BRIGHT . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  RTD_R_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  RTD_G_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  RTD_B_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  RTD_R_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  RTD_G_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  RTD_B_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
_OSD_Position. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OSD_AUTO . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
usADC_Clock. . . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
LP_GLOABL_USER_DATA4 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
GLOBAL_USER_DATA1. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  FUNCTION . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  INPUT_SOURCE . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  FILTER . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  OSD_POSH . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  OSD_POSV . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  OSD_TIMEOUT. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  OSD_INPUT. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
_Set_Task. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GLOBAL_USER_DATA2. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  AD_R_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  AD_G_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  AD_B_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  AD_R_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  AD_G_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  AD_B_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
Save_GUD1. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GLOBAL_USER_DATA3. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  5
  VOLUME . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  CURR_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  PREV_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  TV_SETTING . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  SPREAD . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
ucfrist. . . . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0002H  1
GLOBAL_USER_DATA4. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  C1_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  C1_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  C1_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  C2_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  C2_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  C2_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  C3_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  C3_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  C3_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 126 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ucModeCnt. . . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0003H  1
strTabAuto_Atb . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_RTDOSDW . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Measure_Source. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  SOURCE . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Partial_Display. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucMode_Temp. . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
ADC_SD_SET . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
bOverSpec. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
New_Mode_Auto. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_RTDSetByte. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
usVer_End. . . . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
Set_H_Position . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Seek_DVI_Mode . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Wait_Time_Cnt. . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
ucInputSrc . . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0004H  1
_RTDSetBit . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LP_VIDEO_MODE_USER_DATA. . . . . . . .  TYPEDEF  -----  PTR      -----  3
Input_Mode_Detector. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_I2CRead . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VIDEO_MODE_USER_DATA . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  VBRIGHT. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  VCONTRAST. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  VSATURATION. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  VHUE . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
Detect_Video_Mode. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Set_V_Position . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RTDCodeW. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ucP_Corr . . . . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
VGA_SET_CS . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Check_Video_Mode . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CAP_WIN. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Set_Bright_Contrast. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Mode_Detector. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Display_VGA_Set. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Wait_Time_Cnt. . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_Load_MUD. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_I2CWrite. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Display_DVI_Set. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Wait_Time_Cnt. . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
ucRefresh. . . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0005H  1
ucSyncErrorCnt . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
usStdHS. . . . . . . . . . . . . . . .  PUBLIC   IDATA  U_INT    0006H  2
Set_Dithering. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGA_SET_SS . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
AV_DETECT. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Initial_Mode . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucOption . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  usDispLen. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0001H  2
Detect_Input_Mode. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucMode_Temp. . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  usHS_Pulse . . . . . . . . . . . . .  AUTO     DATA   U_INT    0001H  2
_Calculate_IVS2DVS_Delay . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  integer. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  fraction . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  DVStart. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 127 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Check_Input_Mode . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
bReload. . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
Sharpness. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Measure_Mode . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
bPanel_Status. . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
ucMode_Found . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0008H  1
usStdVS. . . . . . . . . . . . . . . .  PUBLIC   IDATA  U_INT    0009H  2
bStable. . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
ucCE_Value . . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   000BH  1
Display_Video_Set. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SetADC_GainOffset. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SV_DETECT. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
VGA_Mode . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
ucMode_Times . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   000CH  1
ucDV_Delay . . . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
_RTDRead . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ucPE_Level . . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   000DH  1
usIPH_ACT_WID. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
OSD_Reset. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
usIPH_ACT_STA. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
stMUD. . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  4
usIPV_ACT_LEN. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
M512_Port51. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
PowerDown_ADC. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Auto_Config. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Sync_Type_Confirm. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Source_Auto_Scan . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ucAV_Mode. . . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   000EH  1
_RTDWrite. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
bHpole_Curr. . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
usIPV_ACT_STA. . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
bHpole_Prev. . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0003H  1
usDH_Total . . . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
Mode_Preset. . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
V_ENABLE . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
ucMode_Curr. . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   000FH  1
_RGB_MODE_USER_DATA. . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  H_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  V_POSITION . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  PHASE. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
_VGA_Mode_Search . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  HS_Pulse . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  ucMode_Temp. . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  m. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_GLOBAL_USER_DATA0 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  CONTRAST . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  BRIGHT . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  RTD_R_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  RTD_G_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  RTD_B_CONTRAST . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  RTD_R_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  RTD_G_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  RTD_B_BRIGHT . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
_Set_Phase . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GLOBAL_USER_DATA1 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  FUNCTION . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 128 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  INPUT_SOURCE . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  FILTER . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  OSD_POSH . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  OSD_POSV . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  OSD_TIMEOUT. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  OSD_INPUT. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
_GLOBAL_USER_DATA2 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  AD_R_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  AD_G_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  AD_B_GAIN. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  AD_R_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  AD_G_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  AD_B_OFFSET. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
_GLOBAL_USER_DATA3 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  VOLUME . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  CURR_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  PREV_CHANNEL . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  TV_SETTING . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  SPREAD . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
_GLOBAL_USER_DATA4 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  C1_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  C1_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  C1_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  C2_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  C2_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  C2_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  C3_R . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  C3_G . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  C3_B . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_Wait_For_Event. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ucH_Min_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
bVpole_Curr. . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0004H  1
bVpole_Prev. . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0005H  1
_Delay_Xms . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ucH_Max_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
usDV_Total . . . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
_Set_Dclk. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  DispLen. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
Frame_Sync . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Reset_Mode . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Set_Video_Mode . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
bFrameSync . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
usHsync. . . . . . . . . . . . . . . .  PUBLIC   IDATA  U_INT    0010H  2
Set_Gamma. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Adjust_I_Code. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGA_SET_SOG. . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
ucV_Min_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
ucV_Max_Margin . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
Sync_Type_Switch . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
stGUD1 . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  8
Data . . . . . . . . . . . . . . . . .  EXTERN   DATA   ARRAY    -----  16
Set_Clock. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VIDEO_MODE_USER_DATA. . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  VBRIGHT. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  VCONTRAST. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  VSATURATION. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  VHUE . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
C51 COMPILER V7.06   MODE_DETECT                                                           11/21/2005 13:47:38 PAGE 129 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


LP_RGB_MODE_USER_DATA. . . . . . . . .  TYPEDEF  -----  PTR      -----  3
ucSync_Type. . . . . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0012H  1
LP_GLOBAL_USER_DATA0 . . . . . . . . .  TYPEDEF  -----  PTR      -----  3


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6858    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      19
   IDATA SIZE       =     19    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
